{
  "paper_id": "2402.07693v1",
  "title": "LFOC+: A Fair OS-level Cache-Clustering Policy for Commodity Multicore Systems",
  "sections": {
    "related work": "A plethora of software and hardware techniques have been proposed to mitigate the effects of contention in the LLC        . Many researchers attempted to address this problem via cache-partitioning      . A recent survey  discusses a wide range of cache-partitioning approaches for different optimization objectives, such as improving system throughput   or fairness  . Notably, some recent proposals attempt to enforce QoS constraints for latency critical workloads  [ref]14 . Cache partitions can be created via specific hardware support (such as Intel CAT) or by means of software solutions, most of which rely on page-coloring     . The various hardware strategies employ different techniques to assign cache ways to different applications; while some of them rely on the cache replacement policy 0 1 2, others use set sampling and replicated cache tags  3. Our proposed OS-level (also extensible to the VMM) strategy leverages hardware-aided way-partitioning. Recent studies    have highlighted that on current CMPs with way-partitioning support, cache-clustering algorithms can be very superior in terms of fairness and throughput than approaches that assign separate partitions to the various applications (aka. strict cache-partitioning). Specifically, the fine-grained distribution of the LLC space that results from sharing a partition among applications, where the space distribution may not be a multiple of the way/set size, could lead to better performance and fairness than what optimal strict cache-partitioning can offer. UCP  is probably the strict cache-partitioning strategy that had a deeper impact on later proposals. UCP relies on lookahead, an iterative algorithm that distributes the LLC ways among applications so as to reduce the aggregate number of LLC misses. As indicated in its detailed pseudocode , in each iteration lookahead grants a way to the application that experiences the highest reduction in misses when receiving that extra way. While the original UCP policy used applications’ MPKI tables (i.e., Misses per Kilo Instructions for different cache sizes) as input to lookahead, recent cache-clustering strategies   employ variants of the algorithm that are fed with other input metrics, such as the speedup or the slowdown, so as to maximize or minimize the aggregate value of the metric observed across applications. LFOC and LFOC+ use applications’ slowdown tables as input to lookahead, used just in part of its clustering-related processing. LFOC is known to deliver better fairness and throughput  than UCP, and, unlike UCP, it can still be applied when the number of co-running applications exceeds the maximum number of partitions supported by the hardware (this is the case on our experimental setting). In this work we compared the effectiveness of LFOC+ to that of LFOC  and Dunn , which also attempt to improve fairness. The differences between LFOC and LFOC+ are explained in detail in Sec. 4. Dunn  relies on grouping applications into clusters, which may overlap, by applying the k-means clustering method. In creating clusters, and in determining cluster sizes, Dunn factors in the fraction of stall cycles due to L2 misses for the various applications. As we demonstrate in Sec. 5.1 this metric can be very misleading to approximate an application’s degree of cache sensitivity, and it sometimes leads Dunn to degrade fairness. We also provide an experimental comparison of LFOC+ against two throughput-optimized cache-clustering policies: KPart and CPA. KPart employs an iterative algorithm that creates and merges application clusters via hierarchical clustering. We observed that the distance function used by KPart to decide which clusters to merge, may lead to mapping aggressor and cache-sensitive applications onto the same partition, thus causing substantial fairness degradation in many cases. CPA was proposed later than LFOC , but has a few aspects in common with it. Specifically, both LFOC and CPA classify applications into different categories based on their degree of cache-sensitivity and contentiousness, and assign aggressor programs to small partitions. A distinctive feature of LFOC relative to CPA is the fact that the former effectively confines all aggressor (streaming) programs in up to 2 LLC partitions that never overlap with those used for cache-sensitive programs. In addition, LFOC and LFOC+ distribute LLC space between cache-sensitive programs based on their slowdown rather than by considering the number of applications in each class. CPA was originally evaluated using a CMP platform with very different features to those of the one used in our experiments; ours has a different microarchitecture, more cores, bigger L2 caches, coarser-grained LLC partitions, etc. Thanks to the detailed instructions provided by the authors  to utilize CPA on other LLC configurations, we could evaluate it on our platform. Our evaluation in Sec. 5.1 reveals that LFOC and LFOC+ provide a higher unfairness reduction than CPA across the board. Notably, Dunn, KPart and CPA are user-level clustering approaches, as opposed to LFOC and LFOC+, which were implemented in the OS kernel. User-level solutions require at least an extra user process, and may incur higher overheads due to the use of system calls to access performance monitoring counters (PMCs) and cache partitioning facilities, which are managed by the OS. LFOC and LFOC+ access these facilities directly via a lightweight kernel-level API, and perform PMC-related processing in a distributed fashion (on the CPUs where each thread runs). Another advantage of kernel-level implementations is the fact that they are aware of high-frequency scheduling-related events –like context switches– and can react to them immediately. This allowed us to efficiently implement LFOC+’s specific support for data-parallel multithreaded applications."
  },
  "reference_labels": [
    {
      "index": 0,
      "title": "Fairness via source throttling: a configurable and high-performance fairness substrate for multi-core memory systems",
      "abstract": "",
      "year": "2010",
      "venue": "ASPLOS '10",
      "authors": "E. Ebrahimi et al."
    },
    {
      "index": 1,
      "title": "Contention-aware fair scheduling for asymmetric single-ISA multicore systems",
      "abstract": "",
      "year": "2018",
      "venue": "IEEE Trans. Comp.",
      "authors": "A. Garcia-Garcia, J. C. Saez, and M. Prieto-Matias"
    },
    {
      "index": 2,
      "title": "Application clustering policies to address system fairness with intel’s cache allocation technology",
      "abstract": "",
      "year": "2017",
      "venue": "PACT '17",
      "authors": "V. Selfa et al."
    },
    {
      "index": 3,
      "title": "Survey of scheduling techniques for addressing shared resources in multicore processors",
      "abstract": "",
      "year": "2012",
      "venue": "ACM Comput. Surv.",
      "authors": "S. Zhuravlev et al."
    },
    {
      "index": 4,
      "title": "Perf & fair: a progress-aware scheduler to enhance performance and fairness in SMT multicores",
      "abstract": "",
      "year": "2017",
      "venue": "IEEE Trans. Comput.",
      "authors": "J. Feliu et al."
    },
    {
      "index": 5,
      "title": "Contention-aware scheduling on multicore systems",
      "abstract": "",
      "year": "2010",
      "venue": "ACM Trans. Comput. Syst.",
      "authors": "S. Blagodurov, S. Zhuravlev, and A. Fedorova"
    },
    {
      "index": 6,
      "title": "Memory bandwidth management for efficient performance isolation in multi-core platforms",
      "abstract": "",
      "year": "2016",
      "venue": "IEEE Transactions on Computers",
      "authors": "H. Yun et al."
    },
    {
      "index": 7,
      "title": "Introduction to Cache Allocation Technology in the Intel Xeon processor E5 v4 family",
      "abstract": "",
      "year": "2016",
      "venue": "",
      "authors": "K. Nguyen"
    },
    {
      "index": 8,
      "title": "AMD64 Technology Platform QoS Extensions",
      "abstract": "",
      "year": "",
      "venue": "",
      "authors": "AMD"
    },
    {
      "index": 9,
      "title": "KPart: A hybrid cache partitioning-sharing technique for commodity multicores",
      "abstract": "",
      "year": "2018",
      "venue": "HPCA '18",
      "authors": "N. El-Sayed et al."
    },
    {
      "index": 10,
      "title": "PBBCache: an open-source parallel simulator for rapid prototyping and evaluation of cache-partitioning and cache-clustering policies",
      "abstract": "",
      "year": "2020",
      "venue": "J. Computat. Science",
      "authors": "A. Garcia-Garcia et al."
    },
    {
      "index": 11,
      "title": "Optimal cache partition-sharing",
      "abstract": "",
      "year": "2015",
      "venue": "ICPP '15'",
      "authors": "J. Brock et al."
    },
    {
      "index": 12,
      "title": "Phase-aware cache partitioning to target both turnaround time and system performance",
      "abstract": "",
      "year": "2020",
      "venue": "IEEE Transactions on Parallel and Distributed Systems",
      "authors": "L. Pons et al."
    },
    {
      "index": 13,
      "title": "Ginseng: Market-driven llc allocation",
      "abstract": "",
      "year": "2016",
      "venue": "USENIX ATC '16",
      "authors": "L. Funaro, O. A. Ben-Yehuda, and A. Schuster"
    },
    {
      "index": 14,
      "title": "LFOC: A Lightweight Fairness-Oriented Cache Clustering Policy for Commodity Multicores",
      "abstract": "",
      "year": "2019",
      "venue": "ICPP'19",
      "authors": "A. Garcia-Garcia et al.",
      "orig_title": "LFOC: A lightweight fairness-oriented cache clustering policy for commodity multicores",
      "paper_id": "2402.07578v1"
    },
    {
      "index": 15,
      "title": "A survey of techniques for cache partitioning in multicore processors",
      "abstract": "",
      "year": "2017",
      "venue": "ACM Comput. Surv.",
      "authors": "S. Mittal"
    },
    {
      "index": 16,
      "title": "Heracles: improving resource efficiency at scale",
      "abstract": "",
      "year": "2015",
      "venue": "ISCA '15",
      "authors": "D. Lo et al."
    },
    {
      "index": 17,
      "title": "Dirigent: Enforcing qos for latency-critical tasks on shared multicore systems",
      "abstract": "",
      "year": "2016",
      "venue": "ASPLOS '16'",
      "authors": "H. Zhu and M. Erez"
    },
    {
      "index": 18,
      "title": "Application performance prediction and optimization under cache allocation technology",
      "abstract": "",
      "year": "2019",
      "venue": "DATE'19",
      "authors": "Y. Kim et al."
    },
    {
      "index": 19,
      "title": "Utility-based cache partitioning: A low-overhead, high-performance, runtime mechanism to partition shared caches",
      "abstract": "",
      "year": "2006",
      "venue": "MICRO' 06",
      "authors": "M. Qureshi and Y. Patt"
    },
    {
      "index": 20,
      "title": "A hardware evaluation of cache partitioning to improve utilization and energy-efficiency while preserving responsiveness",
      "abstract": "",
      "year": "2013",
      "venue": "ISCA '13",
      "authors": "H. Cook et al."
    },
    {
      "index": 21,
      "title": "Whirlpool: Improving dynamic cache management with static data classification",
      "abstract": "",
      "year": "2016",
      "venue": "ASPLOS '16",
      "authors": "A. Mukkara, N. Beckmann, and D. Sanchez"
    },
    {
      "index": 22,
      "title": "Dcaps: Dynamic cache allocation with partial sharing",
      "abstract": "",
      "year": "2018",
      "venue": "EuroSys '18",
      "authors": "Y. Xiang et al."
    },
    {
      "index": 23,
      "title": "Parties: Qos-aware resource partitioning for multiple interactive services",
      "abstract": "",
      "year": "2019",
      "venue": "ASPLOS '19",
      "authors": "S. Chen et al."
    },
    {
      "index": 24,
      "title": "Reducing cache misses using hardware and software page placement",
      "abstract": "",
      "year": "1999",
      "venue": "13th International Conference on Supercomputing, ICS '99",
      "authors": "T. Sherwood, B. Calder, and J. Emer"
    },
    {
      "index": 25,
      "title": "Gaining insights into multicore cache partitioning: Bridging the gap between simulation and real systems",
      "abstract": "",
      "year": "2008",
      "venue": "HPCA '08",
      "authors": "Jiang Lin et al."
    },
    {
      "index": 26,
      "title": "Coloris: A dynamic cache partitioning system using page coloring",
      "abstract": "",
      "year": "2014",
      "venue": "PACT '14",
      "authors": "Y. Ye et al."
    },
    {
      "index": 27,
      "title": "Towards practical page coloring-based multicore cache management",
      "abstract": "",
      "year": "2009",
      "venue": "EuroSys '09",
      "authors": "X. Zhang, S. Dwarkadas, and K. Shen"
    },
    {
      "index": 28,
      "title": "A software cache partitioning system for hash-based caches",
      "abstract": "",
      "year": "2016",
      "venue": "ACM Trans. Archit. Code Optim.",
      "authors": "A. Scolari, D. Bartolini, and M. Santambrogio"
    },
    {
      "index": 29,
      "title": "Improving cache performance using read-write partitioning",
      "abstract": "",
      "year": "2014",
      "venue": "HPCA '14",
      "authors": "S. M. Khan et al."
    },
    {
      "index": 30,
      "title": "Futility scaling: High-associativity cache partitioning",
      "abstract": "",
      "year": "2014",
      "venue": "MICRO '14",
      "authors": "R. Wang and L. Chen"
    },
    {
      "index": 31,
      "title": "Cache friendliness-aware management of shared LLCs for high performance multi-core systems",
      "abstract": "",
      "year": "2014",
      "venue": "IEEE Trans. Comp.",
      "authors": "D. Kaseridis, M. F. Iqbal, and L. K. John"
    },
    {
      "index": 32,
      "title": "The application slowdown model: Quantifying and controlling the impact of inter-application interference at shared caches and main memory",
      "abstract": "",
      "year": "2015",
      "venue": "MICRO '15",
      "authors": "L. Subramanian et al."
    },
    {
      "index": 33,
      "title": "The benefit of SMT in the multi-core era: Flexibility towards degrees of thread-level parallelism",
      "abstract": "",
      "year": "2014",
      "venue": "ASPLOS'14",
      "authors": "S. Eyerman and L. Eeckhout"
    },
    {
      "index": 34,
      "title": "PMCTrack: Delivering performance monitoring counter support to the OS scheduler",
      "abstract": "",
      "year": "2017",
      "venue": "The Computer Journal",
      "authors": "J. C. Saez et al."
    },
    {
      "index": 35,
      "title": "Performance and fairness improvement on CMPs considering bandwidth and cache utilization",
      "abstract": "",
      "year": "2019",
      "venue": "IEEE Computer Architect. Letters",
      "authors": "T. Marinakis and I. Anagnostopoulos"
    },
    {
      "index": 36,
      "title": "Hass: A scheduler for heterogeneous multicore systems",
      "abstract": "",
      "year": "2009",
      "venue": "SIGOPS Oper. Syst. Rev.",
      "authors": "D. Shelepov et al."
    },
    {
      "index": 37,
      "title": "Contention-aware scheduling on multicore systems",
      "abstract": "",
      "year": "2010",
      "venue": "ACM Trans. Comput. Syst.",
      "authors": "S. Blagodurov, S. Zhuravlev, and A. Fedorova"
    },
    {
      "index": 38,
      "title": "IPC considered harmful for multiprocessor workloads",
      "abstract": "",
      "year": "2006",
      "venue": "IEEE Micro",
      "authors": "A. R. Alameldeen and D. A. Wood"
    },
    {
      "index": 39,
      "title": "Contentiousness vs. sensitivity: Improving contention aware runtime systems on multicore architectures",
      "abstract": "",
      "year": "2011",
      "venue": "EXADAPT'11",
      "authors": "L. Tang, J. Mars, and M. L. Soffa"
    },
    {
      "index": 40,
      "title": "Kpart’s source code",
      "abstract": "",
      "year": "2019",
      "venue": "",
      "authors": ""
    },
    {
      "index": 41,
      "title": "Systemtap",
      "abstract": "",
      "year": "",
      "venue": "",
      "authors": ""
    },
    {
      "index": 42,
      "title": "High Performance Computing: Tuning guide for AMD EPYC 7002 series processors",
      "abstract": "",
      "year": "2020",
      "venue": "",
      "authors": "AMD"
    }
  ]
}