{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic citation prediction expert. Your task is to predict the most likely citations for [ref] markers in academic paper sections based on the paper content and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract + section text with [ref] markers\n- Output: top {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nTASK DESCRIPTION:\n- Input: Paper section text with [ref] markers + retrieved relevant papers\n- Output: top 40 predicted reference titles for each [ref] marker with reasoning\n- Format: JSON object with \"citations\" array containing objects with \"ref_index\", \"titles\", and \"reasoning\" fields\n\nREQUIREMENTS:\n1. Analyze the context around each [ref] marker to understand what reference is needed\n2. Consider the retrieved papers as potential references (when available)\n3. Consider the surrounding text, research area, and topic\n4. Generate realistic and relevant reference titles that would fit the context\n5. Provide detailed reasoning for each prediction to prevent hallucination\n6. Output format: JSON object with \"citations\" array\n7. Generate exactly 40 most relevant reference titles for each [ref]\n8. Ensure titles are realistic and appropriate for the research area\n9. Include reasoning that explains why each title is relevant to the specific [ref] context\n10. Use proper JSON escaping for special characters (escape quotes with \\\")\n11. Ensure all strings are properly quoted and escaped\n\nEXAMPLE:\nInput:\n\"Federated Learning aims to train models in massively distributed networks [ref]38 at a large scale [ref]5, over multiple sources of heterogeneous data [ref]30.\"\n\nRetrieved papers (top {top_r}):\n1. Title: Communication-efficient learning of deep networks from decentralized data\n   Abstract: We report on a series of experiments with federated learning systems for decentralized data training.\n\n2. Title: Federated Learning: Challenges, Methods, and Future Directions\n   Abstract: A comprehensive survey of federated learning approaches and challenges in distributed settings.\n\nOutput:\n{\n  \"citations\": [\n    {\n      \"ref_index\": 38,\n      \"titles\": [\n        \"Communication-efficient learning of deep networks from decentralized data\",\n        \"Federated Learning: Challenges, Methods, and Future Directions\",\n        \"Federated optimization in heterogeneous networks\",\n        \"Towards federated learning at scale: System design\",\n        \"A performance evaluation of federated learning algorithms\",\n        \"Distributed machine learning: A survey\",\n        \"Communication protocols for distributed learning\",\n        \"Scalable federated learning systems\",\n        \"Efficient distributed training algorithms\",\n        \"Large-scale distributed learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]38 appears in the context of 'massively distributed networks' for federated learning, so it likely refers to foundational papers on federated learning systems, distributed training, and communication-efficient methods in distributed networks.\"\n    },\n    {\n      \"ref_index\": 5,\n      \"titles\": [\n        \"Bagging predictors\",\n        \"Ensemble methods in machine learning\",\n        \"Random forests for classification\",\n        \"Bootstrap methods and their application\",\n        \"Combining multiple classifiers\",\n        \"Large-scale machine learning systems\",\n        \"Distributed ensemble methods\",\n        \"Scalable classification algorithms\",\n        \"Massive data processing techniques\",\n        \"High-performance machine learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]5 appears in the context of 'at a large scale', suggesting it refers to papers on scaling machine learning methods, ensemble techniques, or methods that can handle large-scale data and distributed settings.\"\n    },\n    {\n      \"ref_index\": 30,\n      \"titles\": [\n        \"Learning fair representations\",\n        \"Fair machine learning: A survey\",\n        \"Bias in machine learning systems\",\n        \"Addressing fairness in AI systems\",\n        \"Fair representation learning\",\n        \"Heterogeneous data handling methods\",\n        \"Multi-source learning algorithms\",\n        \"Cross-domain representation learning\",\n        \"Fair learning from diverse data\",\n        \"Bias mitigation in heterogeneous datasets\"\n      ],\n      \"reasoning\": \"This [ref]30 appears in the context of 'heterogeneous data' and 'fair representation learning', indicating it likely refers to papers on heterogenous data handling, bias mitigation, and learning representations that are fair across different data distributions.\"\n    }\n  ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped.\n\nIMPORTANT NOTES ON REASONING:\n- The reasoning field is crucial for preventing hallucination\n- Each reasoning should be specific to the context around the [ref] marker\n- Explain the connection between the predicted titles and the research topic\n- This helps validate that predictions are grounded in the actual content\n- Reasoning should be concise but informative (2-3 sentences)\n- Consider retrieved papers when available to improve prediction accuracy"
    },
    {
      "role": "user",
      "content": "Paper Title: Maximum Clique in Disk-Like Intersection Graphs\n\nPaper Abstract: \n\nPaper Section Text:\nThis section contains some folklore results and their necessary background leading to the inapproximability of Positive Not-All-Equal 3-SAT-3, and more precisely that a SUBEXPAS for that problem is unlikely.\nThe proofs are given for the sake of self-containment.\nTo our knowledge, such a strong inapproximability is known for Positive Not-All-Equal 3-SAT-3 or for the closely related Max Cut (see for instance ) but was never fully written up, nor the constants were worked out.\nFor a reader eager to discover a simple but powerful idea, the highlight is perhaps the use of an expander graph to encode a “global variable set to false”, while keeping constant the number of occurrences per variable.\nThis is a topical idea in hardness of approximation for graph problems with bounded degree or satisfiability problems with bounded variable occurrence. The Exponential-Time Hypothesis (ETH, for short) of Impagliazzo and Paturi  asserts that there is no subexponential-time algorithm solving k𝑘k-SAT.\nMore precisely, for every integer k⩾3𝑘3k\\geqslant 3, there is an ε>0𝜀0\\varepsilon>0 such that k𝑘k-SAT cannot be solved in time 2ε​nsuperscript2𝜀𝑛2^{\\varepsilon n} on n𝑛n-variable instances.\nIf we define s3subscript𝑠3s_{3} (taking the same notation as in the original paper) as the infimum of the reals δ𝛿\\delta such that 3-SAT can be solved in time 2δ​nsuperscript2𝛿𝑛2^{\\delta n}, then the ETH can be expressed as s3>0subscript𝑠30s_{3}>0.\nImpagliazzo et al.  present a subexponential-time Turing-reduction parameterized by a positive real ε>0𝜀0\\varepsilon>0 which, given a k𝑘k-SAT-instance ϕitalic-ϕ\\phi with n𝑛n variables and m𝑚m clauses, produces at most 2ε​nsuperscript2𝜀𝑛2^{\\varepsilon n} k𝑘k-SAT-instances ϕ1,…,ϕtsubscriptitalic-ϕ1…subscriptitalic-ϕ𝑡\\phi_{1},\\ldots,\\phi_{t} such that ϕ⇔⋁i∈[t]ϕi⇔italic-ϕsubscript𝑖delimited-[]𝑡subscriptitalic-ϕ𝑖\\phi\\Leftrightarrow\\bigvee_{i\\in[t]}\\phi_{i}, each ϕisubscriptitalic-ϕ𝑖\\phi_{i} having no more than n𝑛n variables and Cε​nsubscript𝐶𝜀𝑛C_{\\varepsilon}n clauses for some constant Cεsubscript𝐶𝜀C_{\\varepsilon} (depending solely on ε𝜀\\varepsilon, and not on n𝑛n and m𝑚m).\nThis important reduction is known as the Sparsification Lemma.\nOne can observe that, due to the Sparsification Lemma, there is an ε>0𝜀0\\varepsilon>0 such that there is no algorithm solving k𝑘k-SAT in time 2ε​msuperscript2𝜀𝑚2^{\\varepsilon m} on m𝑚m-clause instances, assuming that the ETH holds.\nFor the sparsification of a 3-SAT-instance, the constant Cεsubscript𝐶𝜀C_{\\varepsilon} can be upper-bounded by 108​(1/ε)2​log2⁡(1/ε)superscript108superscript1𝜀2superscript21𝜀10^{8}(1/\\varepsilon)^{2}\\log^{2}(1/\\varepsilon).\nOne can sparsify a 3-SAT-instance in 2s32​nsuperscript2subscript𝑠32𝑛2^{\\frac{s_{3}}{2}n} instances with at most B:=Cs3/2⩽108​(2/s3)2​log2⁡(2/s3)assign𝐵subscript𝐶subscript𝑠32superscript108superscript2subscript𝑠32superscript22subscript𝑠3B:=C_{s_{3}/2}\\leqslant 10^{8}(2/s_{3})^{2}\\log^{2}(2/s_{3}) occurrences per variable.\nAssuming the ETH, these sparse instances cannot be solved in time 2s32​nsuperscript2subscript𝑠32𝑛2^{\\frac{s_{3}}{2}n}. Probabilistically Checkable Proofs (PCPs, for short) have laid the foundation of the hardness of approximation, providing the first non-trivial examples of NP-hard so-called gap problems.\nIn a PCP with perfect completeness PCP(r,q)1,ε{}_{1,\\varepsilon}(r,q), a randomized polytime verifier, using r𝑟r random bits and making q𝑞q bit queries to a proof π𝜋\\pi, tries to decide if an input x𝑥x is positive (in the language) or negative (outside the language).\nThe verifier should always accept any positive instance x𝑥x being given a correct proof π𝜋\\pi, and, for every (wrong) proof, should reject a negative instance x𝑥x with probability at least 1−ε1𝜀1-\\varepsilon.\nOverall the verifier cannot query more than 2r​qsuperscript2𝑟𝑞2^{r}q positions in the proof, so we can assume that the proof has length at most 2r​qsuperscript2𝑟𝑞2^{r}q.\nMoshkovitz and Raz  built a PCP(r=(1+o(1))logn+log(1/ε),q=2)1,ε{}_{1,\\varepsilon}(r=(1+o(1))\\log n+\\log(1/\\varepsilon),q=2) over an alphabet of size 2poly​(1/ε)superscript2poly1𝜀2^{\\text{poly}(1/\\varepsilon)} to decide n𝑛n-variable 3-SAT-instances, for any ε>0𝜀0\\varepsilon>0 even function of n𝑛n.\nFixing 1/ε1𝜀1/\\varepsilon to be polylogarithmic in n𝑛n, this gives proof size n1+o​(1)superscript𝑛1𝑜1n^{1+o(1)}, as well as error ε=o​(1)𝜀𝑜1\\varepsilon=o(1).\nCombining the Sparsification Lemma  (applied first since it does not preserve inapproximability) with the polytime inapproximability result of Håstad , improved to subexponential-time inapproximability by the PCP of Moshkovitz and Raz , one obtains the following:   \nUnder the ETH, for every δ>0𝛿0\\delta>0 one cannot distinguish in time 2n1−δsuperscript2superscript𝑛1𝛿2^{n^{1-\\delta}}, n𝑛n-variable m𝑚m-clause 3-SAT-instances that are satisfiable from instances where at most (7/8+o​(1))​m78𝑜1𝑚(7/8+o(1))m clauses can be satisfied, even when each variable appears in at most B𝐵B clauses.\nThus 3-SAT-B cannot be 7/8+o​(1)78𝑜17/8+o(1)-approximated in time 2n1−δsuperscript2superscript𝑛1𝛿2^{n^{1-\\delta}}. In Theorem 2.1, 3-SAT-B stands for the 3-SAT-problem with the additional guarantee that every instance have at most B𝐵B occurrences of each of its variables.\nIn Section 3 we will need such an inapproximability result for the Not-All-Equal 3-SAT-problem with a bounded number of occurrences per variable.\nWe recall the definition of Not-All-Equal k𝑘k-SAT (NAE k𝑘k-SAT, for short). \n\n\n\n\nNot-All-Equal k𝑘k-SAT\n\n\n\nInput: A conjunction of m𝑚m “clauses” ϕ=⋀i∈[m]Ciitalic-ϕsubscript𝑖delimited-[]𝑚subscript𝐶𝑖\\phi=\\bigwedge_{i\\in[m]}C_{i} each on at most k𝑘k literals.\nGoal: Find a truth assignment of the n𝑛n variables such that each “clause” has at least one satisfied literal and at least one non-satisfied literal.\n\n The Not-All-Equal k𝑘k-SAT-B-problem is the same but each variable appears in at most B𝐵B clauses (similarly as for k𝑘k-SAT-B).\nThe adjective Positive prepended to a satisfiability problem means that no negation (or negative literal) can appear in its instances.\nAs a slight abuse of notation, we keep the same problem names for the maximization versions, where all the clauses may not be simultaneously satisfied but the goal is to satisfy the largest fraction of them.\nWe will mostly deal with the maximization versions, and this should be clear from the context.\nAnother abuse of notation is that we call clauses the not-all-equal constraints, and still denote them with ∨\\lor.\nThe performance guarantee of an approximation algorithm is then defined as the minimum of number of satisfied clauses/mnumber of satisfied clauses𝑚\\text{number of satisfied clauses}/m taken over all the instances. There is a folklore reduction from 3-SAT to Not-All-Equal 3-SAT which transfers the APX-hardness of the former problem to the latter.\nThis reduction introduces a variable (representing the value false) in all the clauses.\nTo get rid of that variable with many occurrences, we replace it by a network of constraints forming an expander: there is a fresh variable per node of the expander, and an equality constraint linking every adjacent nodes.\nThat way the number of constraints remain linear, and if a sizable fraction of its \"occurrences\" are set to true and a sizable fraction of its \"occurrences\" are set to false, then many clauses are not satisfied in the cut that they induce. The edge expansion h​(G)ℎ𝐺h(G) of a graph G𝐺G is defined as where ∂S𝑆\\partial S is the set of edges with one endpoint in S𝑆S and the other endpoint outside S𝑆S.\nA foundational inequality in the theory of expanders relates the edge expansion h​(G)ℎ𝐺h(G) and the second-largest eigenvalue λ2​(G)subscript𝜆2𝐺\\lambda_{2}(G) (of the adjacency matrix) of any d𝑑d-regular graph G𝐺G: h​(G)⩾12​(d−λ2​(G))ℎ𝐺12𝑑subscript𝜆2𝐺h(G)\\geqslant\\frac{1}{2}(d-\\lambda_{2}(G)) (see  [ref]34 ).\nThis is sometimes called Cheeger’s inequality.\nGabber and Galil [ref]28 showed that the following deterministic construction, due to Margulis, admits a relatively large gap between the largest eigenvalue d=8𝑑8d=8, and the second-largest eigenvalue upper-bounded by 5​2<7.08527.085\\sqrt{2}<7.08. [ref]28 [ref]34\nFor every sufficient large natural n𝑛n, the 8-regular graph H:=H​(n2,8)assign𝐻𝐻superscript𝑛28H:=H(n^{2},8) on vertex-set ℤn×ℤnsubscriptℤ𝑛subscriptℤ𝑛\\mathbb{Z}_{n}\\times\\mathbb{Z}_{n} where every vertex (x,y)𝑥𝑦(x,y) is adjacent to the eight vertices (x±2​y,y),(x±(2​y+1),y),(x,y±2​x),(x,y±(2​x+1))plus-or-minus𝑥2𝑦𝑦plus-or-minus𝑥2𝑦1𝑦𝑥plus-or-minus𝑦2𝑥𝑥plus-or-minus𝑦2𝑥1(x\\pm 2y,y),(x\\pm(2y+1),y),(x,y\\pm 2x),(x,y\\pm(2x+1)) satisfies λ2​(H)⩽5​2subscript𝜆2𝐻52\\lambda_{2}(H)\\leqslant 5\\sqrt{2}.\nHence, by Cheeger’s inequality, h​(H)⩾12​(8−5​2)>0.46ℎ𝐻128520.46h(H)\\geqslant\\frac{1}{2}(8-5\\sqrt{2})>0.46. We observe that H𝐻H can be easily computed in deterministic polytime, and that for every non-trivial proper subset S𝑆S of V​(H)𝑉𝐻V(H), the number of edges in the cut (S,V​(H)∖S)𝑆𝑉𝐻𝑆(S,V(H)\\setminus S) is at least 0.46⋅min⁡(|S|,|V​(H)∖S|)⋅0.46𝑆𝑉𝐻𝑆0.46\\cdot\\min(|S|,|V(H)\\setminus S|). Under the ETH, for every δ>0𝛿0\\delta>0 one cannot distinguish in time 2n1−δsuperscript2superscript𝑛1𝛿2^{n^{1-\\delta}}, n𝑛n-variable m𝑚m-clause Not-All-Equal 4-SAT-instances that are satisfiable from instances where at most 4991​m/50004991𝑚50004991m/5000 clauses can be satisfied, even when each variable appears in at most B𝐵B clauses.\nThus Not-All-Equal 4-SAT-B cannot be 4991/5000499150004991/5000-approximated in time 2n1−δsuperscript2superscript𝑛1𝛿2^{n^{1-\\delta}}. Let ψ𝜓\\psi be any instance of 3-SAT-B with N𝑁N variables and M⩽B​N𝑀𝐵𝑁M\\leqslant BN clauses.\nWe start by padding ψ𝜓\\psi with dummy clauses di∨¬disubscript𝑑𝑖subscript𝑑𝑖d_{i}\\lor\\neg d_{i} with fresh variables disubscript𝑑𝑖d_{i} with only two occurrences overall (both in their dummy clause) until the number of clauses at least doubles and reaches a perfect square.\nThis can be done in a way that the number of clauses at most triples, and the number of variables is multiplied by a constant factor (1+2​B)​B12𝐵𝐵(1+2B)B.\nLet n⩽N+2​M⩽(1+2​B)​N𝑛𝑁2𝑀12𝐵𝑁n\\leqslant N+2M\\leqslant(1+2B)N and m⩽3​M⩽3​B​N𝑚3𝑀3𝐵𝑁m\\leqslant 3M\\leqslant 3BN be the number of variables and clauses of the new equivalent 3-SAT-B-instance ϕ:=⋁j∈[m]Cjassignitalic-ϕsubscript𝑗delimited-[]𝑚subscript𝐶𝑗\\phi:=\\bigvee_{j\\in[m]}C_{j}. We now describe a linear reduction ρ𝜌\\rho from 3-SAT-B to Not-All-Equal 4-SAT-B starting from the padded instance ϕitalic-ϕ\\phi.\nFor every clause Cjsubscript𝐶𝑗C_{j}, we introduce two clauses in the NAE 4-SAT-B-instance ρ​(ϕ)𝜌italic-ϕ\\rho(\\phi): Cj∨¬zjsubscript𝐶𝑗subscript𝑧𝑗C_{j}\\lor\\neg z_{j} and Cj¯∨zj¯subscript𝐶𝑗subscript𝑧𝑗\\overline{C_{j}}\\lor z_{j}, where zjsubscript𝑧𝑗z_{j} is a fresh variable and Cj¯¯subscript𝐶𝑗\\overline{C_{j}} is obtained from Cjsubscript𝐶𝑗C_{j} by switching the sign of every literal therein.\nLet H𝐻H be an 8-regular expander graph provided by Theorem 2.2 on the vertex set [m]delimited-[]𝑚[m].\n(This is where we needed that m𝑚m is a perfect square.)\nFor every edge a​b∈E​(H)𝑎𝑏𝐸𝐻ab\\in E(H) with a<b𝑎𝑏a<b, we add a clause za∨¬zbsubscript𝑧𝑎subscript𝑧𝑏z_{a}\\lor\\neg z_{b}.\nThis finishes the reduction and produces instances with n′:=n+m⩽(B+1)​n⩽(B+1)​(1+2​B)​Nassignsuperscript𝑛′𝑛𝑚𝐵1𝑛𝐵112𝐵𝑁n^{\\prime}:=n+m\\leqslant(B+1)n\\leqslant(B+1)(1+2B)N variables and m′:=m+4​m=5​m⩽15​M⩽5​B​n⩽5​B​(1+2​B)​Nassignsuperscript𝑚′𝑚4𝑚5𝑚15𝑀5𝐵𝑛5𝐵12𝐵𝑁m^{\\prime}:=m+4m=5m\\leqslant 15M\\leqslant 5Bn\\leqslant 5B(1+2B)N clauses.\nNote that each variable appears at most B𝐵B times, and that the size of the clauses is at most four.\nSince B⩾9𝐵9B\\geqslant 9, the number of occurrences of the new variables zjsubscript𝑧𝑗z_{j} does not exceed this threshold. If ψ𝜓\\psi is satisfiable, then the same truth assignment augmented by setting all the variables zjsubscript𝑧𝑗z_{j} to true (and all the dummy variables disubscript𝑑𝑖d_{i} indifferently) is a satisfying assignment for the NAE 4-SAT-B-instance ρ​(ϕ)𝜌italic-ϕ\\rho(\\phi).\nEvery clause za∨¬zbsubscript𝑧𝑎subscript𝑧𝑏z_{a}\\lor\\neg z_{b} (with a​b∈E​(H)𝑎𝑏𝐸𝐻ab\\in E(H)) is satisfied since zasubscript𝑧𝑎z_{a} and zbsubscript𝑧𝑏z_{b} are both set to true.\nEvery clause Cj∨¬zjsubscript𝐶𝑗subscript𝑧𝑗C_{j}\\lor\\neg z_{j} is satisfied since at least one literal of Cjsubscript𝐶𝑗C_{j} is set to true, and the literal ¬zjsubscript𝑧𝑗\\neg z_{j} is false.\nSymmetrically Cj¯∨zj¯subscript𝐶𝑗subscript𝑧𝑗\\overline{C_{j}}\\lor z_{j} is satisfied since at least one literal of Cj¯¯subscript𝐶𝑗\\overline{C_{j}} is false (namely, the opposite literal satisfying Cjsubscript𝐶𝑗C_{j}), and zjsubscript𝑧𝑗z_{j} is true. We now assume that at most (7/8+o​(1))​M78𝑜1𝑀(7/8+o(1))M clauses of ψ𝜓\\psi can be satisfied, and we wish to upper-bound the number of satisfiable clauses in ρ​(ϕ)𝜌italic-ϕ\\rho(\\phi).\nSince we padded ψ𝜓\\psi with at most 2​M2𝑀2M dummy clause to create ϕitalic-ϕ\\phi, at most (23/24+o​(1))​m2324𝑜1𝑚(23/24+o(1))m clauses of ϕitalic-ϕ\\phi are satisfiable.\nLet 𝒱′superscript𝒱′\\mathcal{V}^{\\prime} be any assignment of the variables of ρ​(ϕ)𝜌italic-ϕ\\rho(\\phi), and 𝒱𝒱\\mathcal{V} its restriction to the variables of ϕitalic-ϕ\\phi.\nBy assumption 𝒱𝒱\\mathcal{V} leaves unsatisfied at least (1/24−o​(1))​m124𝑜1𝑚(1/24-o(1))m of the clauses Cjsubscript𝐶𝑗C_{j} of ϕitalic-ϕ\\phi.\nLet us denote these clauses by Cu1,…,Cutsubscript𝐶subscript𝑢1…subscript𝐶subscript𝑢𝑡C_{u_{1}},\\ldots,C_{u_{t}} with t⩾(1/24−o​(1))​m𝑡124𝑜1𝑚t\\geqslant(1/24-o(1))m.\nNote that t⩽m/2𝑡𝑚2t\\leqslant m/2 since we at least doubled ψ𝜓\\psi with dummy clauses which cannot be unsatisfied.\nLet 𝒯⊆[m]𝒯delimited-[]𝑚\\mathcal{T}\\subseteq[m] the indices of the variables zjsubscript𝑧𝑗z_{j} set to true, and ℱ:=[m]∖𝒯assignℱdelimited-[]𝑚𝒯\\mathcal{F}:=[m]\\setminus\\mathcal{T}.\nNote that all the indices uhsubscript𝑢ℎu_{h} (h∈[t]ℎdelimited-[]𝑡h\\in[t]) that are in 𝒯𝒯\\mathcal{T} correspond to clauses Cj∨¬zjsubscript𝐶𝑗subscript𝑧𝑗C_{j}\\lor\\neg z_{j} (thus Cj¯∨zj¯subscript𝐶𝑗subscript𝑧𝑗\\overline{C_{j}}\\lor z_{j}) of ρ​(ϕ)𝜌italic-ϕ\\rho(\\phi) that are not satisfied.\nEither (case 1) at least half of the uhsubscript𝑢ℎu_{h} are in 𝒯𝒯\\mathcal{T}, and then 𝒱′superscript𝒱′\\mathcal{V}^{\\prime} leaves 2​(1/48−o​(1))​m=(1/24−o​(1))​m2148𝑜1𝑚124𝑜1𝑚2(1/48-o(1))m=(1/24-o(1))m clauses of ρ​(ϕ)𝜌italic-ϕ\\rho(\\phi) unsatisfied.\nOr (case 2) at least half of the uhsubscript𝑢ℎu_{h} are in ℱℱ\\mathcal{F}.\nIn that case, |ℱ|⩾(1/48−o​(1))​mℱ148𝑜1𝑚|\\mathcal{F}|\\geqslant(1/48-o(1))m.\nSince ⋁j∈[m]Cjsubscript𝑗delimited-[]𝑚subscript𝐶𝑗\\bigvee_{j\\in[m]}C_{j} and ⋁j∈[m]Cj¯subscript𝑗delimited-[]𝑚¯subscript𝐶𝑗\\bigvee_{j\\in[m]}\\overline{C_{j}} have the same lower bound on the number of unsatisfied clauses, 𝒱𝒱\\mathcal{V} leaves at least (1/24−o​(1))​m124𝑜1𝑚(1/24-o(1))m clauses Cj¯¯subscript𝐶𝑗\\overline{C_{j}} unsatisfied.\nTherefore if |ℱ|⩾(1−1/48+o​(1))​m=(47/48+o​(1))​mℱ1148𝑜1𝑚4748𝑜1𝑚|\\mathcal{F}|\\geqslant(1-1/48+o(1))m=(47/48+o(1))m (case 2a), then at least (1/48−o​(1))​m148𝑜1𝑚(1/48-o(1))m clauses Cj¯∨zj¯subscript𝐶𝑗subscript𝑧𝑗\\overline{C_{j}}\\lor z_{j} (thus Cj∨¬zjsubscript𝐶𝑗subscript𝑧𝑗C_{j}\\lor\\neg z_{j}) are not satisfied.\nThis implies that 𝒱′superscript𝒱′\\mathcal{V}^{\\prime} leaves 2​(1/48−o​(1))​m=(1/24−o​(1))​m2148𝑜1𝑚124𝑜1𝑚2(1/48-o(1))m=(1/24-o(1))m clauses of ρ​(ϕ)𝜌italic-ϕ\\rho(\\phi) unsatisfied.\nOtherwise (case 2b), it holds that (1/48−o​(1))​m⩽|ℱ|⩽(47/48−o​(1))​m148𝑜1𝑚ℱ4748𝑜1𝑚(1/48-o(1))m\\leqslant|\\mathcal{F}|\\leqslant(47/48-o(1))m.\nThus F𝐹F is a non-trivial proper subset of [m]delimited-[]𝑚[m] whose size and complement-size are at least (1/48−o​(1))​m148𝑜1𝑚(1/48-o(1))m.\nBy Theorem 2.2 this implies that there are at least 0.46⋅(1/48−o​(1))​m⋅0.46148𝑜1𝑚0.46\\cdot(1/48-o(1))m clauses za∨¬zbsubscript𝑧𝑎subscript𝑧𝑏z_{a}\\lor\\neg z_{b} which are not satisfied (those with a∈𝒯𝑎𝒯a\\in\\mathcal{T} and b∈ℱ𝑏ℱb\\in\\mathcal{F}, or with a∈ℱ𝑎ℱa\\in\\mathcal{F} and b∈𝒯𝑏𝒯b\\in\\mathcal{T}).\nIn all three cases (1, 2a, 2b), at least 9​m/1000=9​m′/50009𝑚10009superscript𝑚′50009m/1000=9m^{\\prime}/5000 clauses of ρ​(ϕ)𝜌italic-ϕ\\rho(\\phi) are not satisfied.\nIn other words, at most 4991​m′/50004991superscript𝑚′50004991m^{\\prime}/5000 clauses of ρ​(ϕ)𝜌italic-ϕ\\rho(\\phi) are satisfiable. We assume that there is an algorithm 𝒜𝒜\\mathcal{A} that distinguishes in time 2n′1−δsuperscript2superscriptsuperscript𝑛′1𝛿2^{{n^{\\prime}}^{1-\\delta}} satisfiable NAE 4-SAT-B-instances from instances where at most 4991​m′/50004991superscript𝑚′50004991m^{\\prime}/5000 clauses can be satisfied.\nWe restrict the inputs ψ𝜓\\psi of 3-SAT-B to be of the two kinds described in Theorem 2.1 (or in the two last paragraphs), and we run 𝒜𝒜\\mathcal{A} on ρ​(ϕ)𝜌italic-ϕ\\rho(\\phi).\nThe two previous paragraphs prove (in this order) that if 𝒜𝒜\\mathcal{A} detects that at most 4991​m′/50004991superscript𝑚′50004991m^{\\prime}/5000 clauses can be satisfied, then at most (7/8+o​(1))​M78𝑜1𝑀(7/8+o(1))M clauses of the 3-SAT-B-instance are satisfiable, and if 𝒜𝒜\\mathcal{A} detects that the instance is satisfiable, then the 3-SAT-B-instance is also satisfiable.\nFinally the running time of 𝒜𝒜\\mathcal{A} in terms of N𝑁N is 2((B+1)​(1+2​B)​N)1−δ=O​(2N1−δ2)superscript2superscript𝐵112𝐵𝑁1𝛿𝑂superscript2superscript𝑁1𝛿22^{{((B+1)(1+2B)N)}^{1-\\delta}}=O(2^{N^{1-\\frac{\\delta}{2}}}).\nHence such an algorithm 𝒜𝒜\\mathcal{A} would refute the ETH, by Theorem 2.1. This completes the proof.\nWe observe that if 𝒜𝒜\\mathcal{A} reports a satisfying assignment 𝒱𝒱\\mathcal{V} for ρ​(ϕ)𝜌italic-ϕ\\rho(\\phi), one can easily obtain a satisfying assignment for ψ𝜓\\psi.\nAll the 4​m4𝑚4m clauses za∨¬zbsubscript𝑧𝑎subscript𝑧𝑏z_{a}\\lor\\neg z_{b} being all satisfied, it holds that z1,z2,…,zmsubscript𝑧1subscript𝑧2…subscript𝑧𝑚z_{1},z_{2},\\ldots,z_{m} have the same truth value.\nSince flipping the truth value of each variable in a satisfying Not-All-Equal-assignment results in another satisfying assignment, we can further assume that z1,z2,…,zmsubscript𝑧1subscript𝑧2…subscript𝑧𝑚z_{1},z_{2},\\ldots,z_{m} are all set to true by 𝒱𝒱\\mathcal{V}.\nThe clause Cj∨¬zjsubscript𝐶𝑗subscript𝑧𝑗C_{j}\\lor\\neg z_{j} being satisfied, 𝒱𝒱\\mathcal{V} sets to true at least one literal of Cjsubscript𝐶𝑗C_{j}.\nHence 𝒱𝒱\\mathcal{V} restricted to the original variables (all the variables but the zjsubscript𝑧𝑗z_{j} and the disubscript𝑑𝑖d_{i}) satisfies ψ𝜓\\psi. We now decrease the size of the clauses to at most 3.\nThe next reduction and the subsequent one are folklore.\nWe give complete proofs both for the sake of self-containment and to report explicit inapproximability bounds. Under the ETH, for every δ>0𝛿0\\delta>0 one cannot distinguish in time 2n1−δsuperscript2superscript𝑛1𝛿2^{n^{1-\\delta}}, n𝑛n-variable m𝑚m-clause Not-All-Equal 3-SAT-instances that are satisfiable from instances where at most 9991​m/100009991𝑚100009991m/10000 clauses can be satisfied, even when each variable appears in at most B𝐵B clauses.\nThus Not-All-Equal 3-SAT-B cannot be 9991/100009991100009991/10000-approximated in time 2n1−δsuperscript2superscript𝑛1𝛿2^{n^{1-\\delta}}. We give a linear reduction ρ𝜌\\rho from Not-All-Equal 4-SAT-B to Not-All-Equal 3-SAT-B.\nLet ϕitalic-ϕ\\phi be any instance of Not-All-Equal 4-SAT-B with N𝑁N variables and M𝑀M clauses.\nBy duplicating an arbitrary literal in the clauses on initially less than four literals, we can assume that every clause of ϕ=⋁j∈[M]Cjitalic-ϕsubscript𝑗delimited-[]𝑀subscript𝐶𝑗\\phi=\\bigvee_{j\\in[M]}C_{j} is a 4-clause.\nWe replace each 4-clause Cj:=ℓj,1∨ℓj,2∨ℓj,3∨ℓj,4assignsubscript𝐶𝑗subscriptℓ𝑗1subscriptℓ𝑗2subscriptℓ𝑗3subscriptℓ𝑗4C_{j}:=\\ell_{j,1}\\lor\\ell_{j,2}\\lor\\ell_{j,3}\\lor\\ell_{j,4} of ϕitalic-ϕ\\phi by two 3-clauses: Dj:=ℓ1,j∨ℓ2,j∨zjassignsubscript𝐷𝑗subscriptℓ1𝑗subscriptℓ2𝑗subscript𝑧𝑗D_{j}:=\\ell_{1,j}\\lor\\ell_{2,j}\\lor z_{j} and Dj′:=ℓ3,j∨ℓ4,j∨¬zjassignsubscriptsuperscript𝐷′𝑗subscriptℓ3𝑗subscriptℓ4𝑗subscript𝑧𝑗D^{\\prime}_{j}:=\\ell_{3,j}\\lor\\ell_{4,j}\\lor\\neg z_{j} where zjsubscript𝑧𝑗z_{j} is a fresh variable.\nThis finishes the construction of the instance ρ​(ϕ)𝜌italic-ϕ\\rho(\\phi) on n:=N+M⩽(1+B)​Nassign𝑛𝑁𝑀1𝐵𝑁n:=N+M\\leqslant(1+B)N variables and m:=2​M⩽2​B​Nassign𝑚2𝑀2𝐵𝑁m:=2M\\leqslant 2BN clauses.\nWe observe that ρ​(ϕ)𝜌italic-ϕ\\rho(\\phi) has only 3-clauses, and maximum occurrence of variables bounded by B𝐵B.\nHence ρ​(ϕ)𝜌italic-ϕ\\rho(\\phi) is an instance of Not-All-Equal 3-SAT-B. If ϕitalic-ϕ\\phi is satisfiable then there is an assignment 𝒱𝒱\\mathcal{V} of its variables such that for every j∈[m]𝑗delimited-[]𝑚j\\in[m], the literals ℓj,1,ℓj,2,ℓj,3,ℓj,4subscriptℓ𝑗1subscriptℓ𝑗2subscriptℓ𝑗3subscriptℓ𝑗4\\ell_{j,1},\\ell_{j,2},\\ell_{j,3},\\ell_{j,4} are not all equal.\nWe can then set every variable zjsubscript𝑧𝑗z_{j} in the following way to satisfy every Djsubscript𝐷𝑗D_{j} and Dj′subscriptsuperscript𝐷′𝑗D^{\\prime}_{j}.\nEither ℓj,1subscriptℓ𝑗1\\ell_{j,1} and ℓj,2subscriptℓ𝑗2\\ell_{j,2} are different (case 1), and thus Djsubscript𝐷𝑗D_{j} is satisfied.\nIn that case we can set zjsubscript𝑧𝑗z_{j} so that ¬zjsubscript𝑧𝑗\\neg z_{j} is opposite to ℓ3subscriptℓ3\\ell_{3} to also satisfy Dj′subscriptsuperscript𝐷′𝑗D^{\\prime}_{j}.\nEither ℓj,3subscriptℓ𝑗3\\ell_{j,3} and ℓj,4subscriptℓ𝑗4\\ell_{j,4} are different (case 2), and thus Dj′subscriptsuperscript𝐷′𝑗D^{\\prime}_{j} is satisfied.\nIn that case we can set zjsubscript𝑧𝑗z_{j} to the opposite sign of ℓ1subscriptℓ1\\ell_{1} to also satisfy Djsubscript𝐷𝑗D_{j}.\nOr finally ℓj,1subscriptℓ𝑗1\\ell_{j,1} and ℓj,2subscriptℓ𝑗2\\ell_{j,2} are equal, and ℓj,3subscriptℓ𝑗3\\ell_{j,3} and ℓj,4subscriptℓ𝑗4\\ell_{j,4} are equal (case 3).\nSince 𝒱𝒱\\mathcal{V} satisfies Cjsubscript𝐶𝑗C_{j}, it cannot be that they are all equal.\nHence ℓj,1=ℓj,2=¬ℓj,3=¬ℓj,4subscriptℓ𝑗1subscriptℓ𝑗2subscriptℓ𝑗3subscriptℓ𝑗4\\ell_{j,1}=\\ell_{j,2}=\\neg\\ell_{j,3}=\\neg\\ell_{j,4}.\nThus setting zjsubscript𝑧𝑗z_{j} to the opposite sign of ℓj,1subscriptℓ𝑗1\\ell_{j,1} satisfies both Djsubscript𝐷𝑗D_{j} and Dj′subscriptsuperscript𝐷′𝑗D^{\\prime}_{j}.\nThese three cases span all the possibilities, and in each alternative there is a value for zjsubscript𝑧𝑗z_{j} to satisfy the clauses Djsubscript𝐷𝑗D_{j} and Dj′subscriptsuperscript𝐷′𝑗D^{\\prime}_{j}. We now assume that at most 4991​M/50004991𝑀50004991M/5000 clauses of ϕitalic-ϕ\\phi can be satisfied.\nFor any assignment 𝒱′superscript𝒱′\\mathcal{V}^{\\prime} of the variables of ρ​(ϕ)𝜌italic-ϕ\\rho(\\phi), let 𝒱𝒱\\mathcal{V} be its restriction to the variables of ϕitalic-ϕ\\phi.\nThere are at least 9​M/50009𝑀50009M/5000 indices j𝑗j for which 𝒱𝒱\\mathcal{V} sets ℓj,1,ℓj,2,ℓj,3,ℓj,4subscriptℓ𝑗1subscriptℓ𝑗2subscriptℓ𝑗3subscriptℓ𝑗4\\ell_{j,1},\\ell_{j,2},\\ell_{j,3},\\ell_{j,4} to the same value.\nFor such an index j𝑗j, 𝒱′superscript𝒱′\\mathcal{V}^{\\prime} sets either ℓj,1,ℓj,2,zjsubscriptℓ𝑗1subscriptℓ𝑗2subscript𝑧𝑗\\ell_{j,1},\\ell_{j,2},z_{j} or ℓj,3,ℓj,4,¬zjsubscriptℓ𝑗3subscriptℓ𝑗4subscript𝑧𝑗\\ell_{j,3},\\ell_{j,4},\\neg z_{j} to the same value.\nHence at least 9​M/5000=9​m/100009𝑀50009𝑚100009M/5000=9m/10000 clauses of ρ​(ϕ)𝜌italic-ϕ\\rho(\\phi) are not satisfied.\nEquivalently, at most 9991​m/100009991𝑚100009991m/10000 clauses of ρ​(ϕ)𝜌italic-ϕ\\rho(\\phi) can be satisfied. We assume that there is an algorithm 𝒜𝒜\\mathcal{A} that distinguishes in time 2n1−δsuperscript2superscript𝑛1𝛿2^{n^{1-\\delta}} satisfiable NAE 3-SAT-B-instances from instances where at most 9991​m/100009991𝑚100009991m/10000 clauses can be satisfied.\nWe restrict the inputs ϕitalic-ϕ\\phi of NAE 4-SAT-B to be of the two kinds described in Theorem 2.3 (or in the two last paragraphs), and we run 𝒜𝒜\\mathcal{A} on ρ​(ϕ)𝜌italic-ϕ\\rho(\\phi).\nThe two previous paragraphs prove that if 𝒜𝒜\\mathcal{A} detects that at most 9991​m/100009991𝑚100009991m/10000 clauses can be satisfied, then at most 4991​M/50004991𝑀50004991M/5000 clauses of the NAE 4-SAT-B-instance are satisfiable, and if 𝒜𝒜\\mathcal{A} detects that the instance is satisfiable, then the NAE 4-SAT-B-instance is also satisfiable.\nFinally the running time of 𝒜𝒜\\mathcal{A} in terms of N𝑁N is 2((1+B)​N)1−δ=O​(2N1−δ2)superscript2superscript1𝐵𝑁1𝛿𝑂superscript2superscript𝑁1𝛿22^{{((1+B)N)}^{1-\\delta}}=O(2^{N^{1-\\frac{\\delta}{2}}}).\nHence such an algorithm 𝒜𝒜\\mathcal{A} would refute the ETH, by Theorem 2.3. Finally, by a linear reduction from Not-All-Equal 3-SAT-B to Positive Not-All-Equal 3-SAT-3, we decrease the maximum number of occurrences per variable to 3, and we remove the negative literals.\nA compact yet weaker implication of the following theorem is that a QPTAS for Positive Not-All-Equal 3-SAT-3 would disprove the ETH. Under the ETH, for every δ>0𝛿0\\delta>0 one cannot distinguish in time 2n1−δsuperscript2superscript𝑛1𝛿2^{n^{1-\\delta}}, n𝑛n-variable m𝑚m-clause Positive Not-All-Equal 3-SAT-3-instances that are satisfiable from instances where at most γ​m𝛾𝑚\\gamma m clauses can be satisfied, with γ:=(60000​B2−9)/(60000​B2)assign𝛾60000superscript𝐵2960000superscript𝐵2\\gamma:=(60000B^{2}-9)/(60000B^{2}).\nThus Positive Not-All-Equal 3-SAT-3 cannot be γ𝛾\\gamma-approximated in time 2n1−δsuperscript2superscript𝑛1𝛿2^{n^{1-\\delta}}. We give a linear reduction ρ𝜌\\rho from Not-All-Equal 3-SAT-B to Positive Not-All-Equal 3-SAT-3.\nLet N𝑁N and M⩽B​N𝑀𝐵𝑁M\\leqslant BN be the number of variables and clauses of the NAE 3-SAT-B-instance ϕitalic-ϕ\\phi.\nFor every variable xisubscript𝑥𝑖x_{i} of ϕitalic-ϕ\\phi, we introduce 2​B2𝐵2B variables xi,1,…,xi,B,yi,1,…,yi,Bsubscript𝑥𝑖1…subscript𝑥𝑖𝐵subscript𝑦𝑖1…subscript𝑦𝑖𝐵x_{i,1},\\ldots,x_{i,B},y_{i,1},\\ldots,y_{i,B} in ρ​(ϕ)𝜌italic-ϕ\\rho(\\phi), the B𝐵B 2-clauses xi,h∨yi,hsubscript𝑥𝑖ℎsubscript𝑦𝑖ℎx_{i,h}\\lor y_{i,h} for every h∈[B]ℎdelimited-[]𝐵h\\in[B], and the B−1𝐵1B-1 2-clauses yi,h∨xi,h+1subscript𝑦𝑖ℎsubscript𝑥𝑖ℎ1y_{i,h}\\lor x_{i,h+1} for every h∈[B−1]ℎdelimited-[]𝐵1h\\in[B-1].\nWe call equality clauses these (2​B−1)​N2𝐵1𝑁(2B-1)N clauses, since satisfying all of them forces every xi,1,…,xi,Bsubscript𝑥𝑖1…subscript𝑥𝑖𝐵x_{i,1},\\ldots,x_{i,B} to be all equal, and every yi,1,…,yi,Bsubscript𝑦𝑖1…subscript𝑦𝑖𝐵y_{i,1},\\ldots,y_{i,B} to have the opposite value.\nFinally we replace each clause Cjsubscript𝐶𝑗C_{j}, say, xa∨¬xb∨xcsubscript𝑥𝑎subscript𝑥𝑏subscript𝑥𝑐x_{a}\\lor\\neg x_{b}\\lor x_{c} of the NAE 3-SAT-B-instance by xa,α∨yb,β∨xc,γsubscript𝑥𝑎𝛼subscript𝑦𝑏𝛽subscript𝑥𝑐𝛾x_{a,\\alpha}\\lor y_{b,\\beta}\\lor x_{c,\\gamma} where each variable xi,hsubscript𝑥𝑖ℎx_{i,h} and yi,hsubscript𝑦𝑖ℎy_{i,h} is used only once, outside the equality clauses.\nThis is possible since the maximum number of occurrences of xisubscript𝑥𝑖x_{i} in ϕitalic-ϕ\\phi is B𝐵B.\nWe call original clauses these relabeled clauses.\nThis finishes the reduction.\nThe produced NAE 3-SAT-3-instance ρ​(ϕ)𝜌italic-ϕ\\rho(\\phi) has n:=2​B​Nassign𝑛2𝐵𝑁n:=2BN variables and m:=M+(2​B−1)​N⩽6​B​Massign𝑚𝑀2𝐵1𝑁6𝐵𝑀m:=M+(2B-1)N\\leqslant 6BM clauses (the last inequality holds since N⩽3​M𝑁3𝑀N\\leqslant 3M).\nThere is no negation in ρ​(ϕ)𝜌italic-ϕ\\rho(\\phi) and each variable appears at most three times: in two equality clauses and one original clause. If ϕitalic-ϕ\\phi is satisfiable, then ρ​(ϕ)𝜌italic-ϕ\\rho(\\phi) is also satisfiable by setting the xi,hsubscript𝑥𝑖ℎx_{i,h} to the same value as xisubscript𝑥𝑖x_{i}, and the yi,hsubscript𝑦𝑖ℎy_{i,h} to the opposite value.\nThat way all the equality clauses are satisfied (they have one true and one false literal).\nThe original clauses are satisfied the same way ϕitalic-ϕ\\phi was satisfied. We now assume that at most 9991​M/100009991𝑀100009991M/10000 clauses of ϕitalic-ϕ\\phi can be satisfied.\nLet 𝒱′superscript𝒱′\\mathcal{V}^{\\prime} be any assignment of the variables of ρ​(ϕ)𝜌italic-ϕ\\rho(\\phi).\nWe do the following thought experiment.\nWe start with an assignment 𝒱𝒱\\mathcal{V} satisfying all the equality clauses, and respecting for xi,1,…,xi,Bsubscript𝑥𝑖1…subscript𝑥𝑖𝐵x_{i,1},\\ldots,x_{i,B} the majority choice of 𝒱′superscript𝒱′\\mathcal{V}^{\\prime} on these variables (breaking ties arbitrarily).\nBy assumption 𝒱𝒱\\mathcal{V} does not satisfy at least 9​M/100009𝑀100009M/10000 original clauses.\nThen we switch one by one the value of the variables disagreeing with 𝒱′superscript𝒱′\\mathcal{V}^{\\prime} (until we reach 𝒱′superscript𝒱′\\mathcal{V}^{\\prime}).\nAt the cost of one unsatisfied equality clause, we can fix B𝐵B original clauses.\nEventually 𝒱′superscript𝒱′\\mathcal{V}^{\\prime} leaves at least 9​M/(10000​B)⩾9​m/(60000​B2)9𝑀10000𝐵9𝑚60000superscript𝐵29M/(10000B)\\geqslant 9m/(60000B^{2}) clauses unsatisfied.\nThus any assignment of ρ​(ϕ)𝜌italic-ϕ\\rho(\\phi) satisfies at most 60000​B2−960000​B2​m=γ​m60000superscript𝐵2960000superscript𝐵2𝑚𝛾𝑚\\frac{60000B^{2}-9}{60000B^{2}}m=\\gamma m.\nWe recall that B𝐵B is a function of the value s3subscript𝑠3s_{3} supposed positive by the ETH. We assume that there is an algorithm 𝒜𝒜\\mathcal{A} that distinguishes in time 2n1−δsuperscript2superscript𝑛1𝛿2^{n^{1-\\delta}} satisfiable Positive Not-All-Equal 3-SAT-3-instances from instances where at most γ​m𝛾𝑚\\gamma m clauses can be satisfied.\nWe restrict the inputs ϕitalic-ϕ\\phi of Not-All-Equal 3-SAT-B to be of the two kinds described in Theorem 2.5 (or in the two last paragraphs), and we run 𝒜𝒜\\mathcal{A} on ρ​(ϕ)𝜌italic-ϕ\\rho(\\phi).\nThe two previous paragraphs prove that if 𝒜𝒜\\mathcal{A} detects that at most γ​m𝛾𝑚\\gamma m clauses can be satisfied, then at most 9991​M/100009991𝑀100009991M/10000 clauses of the NAE 3-SAT-B-instance are satisfiable, and if 𝒜𝒜\\mathcal{A} detects that the instance is satisfiable, then the NAE 3-SAT-B-instance is also satisfiable.\nFinally the running time of 𝒜𝒜\\mathcal{A} in terms of N𝑁N is 2(2​B​N)1−δ=O​(2N1−δ2)superscript2superscript2𝐵𝑁1𝛿𝑂superscript2superscript𝑁1𝛿22^{{(2BN)}^{1-\\delta}}=O(2^{N^{1-\\frac{\\delta}{2}}}).\nHence such an algorithm 𝒜𝒜\\mathcal{A} would refute the ETH, by Theorem 2.5. This last reduction no longer implies APX-hardness.\nIndeed, the value B𝐵B in the inapproximability ratio is finite only if s3>0subscript𝑠30s_{3}>0.\nSo one should assume the ETH, and not the mere P ≠\\neq NP, to rule out an approximation algorithm with ratio γ<1𝛾1\\gamma<1.\nSacrificing the strong lower bound in the running time, we can overcome that issue.\nBerman and Karpinski [ref]6 showed that it is NP-hard to approximate Max 2-SAT-3 within ratio better than 787/788787788787/788.\nFollowing the reduction of Theorem 2.3 from Max 2-SAT-3, we derive the following inapproximability. Approximating NAE 3-SAT-9 within ratio 51326/51327513265132751326/51327 is NP-hard. Observe that the clause size grows from 2 to 3, and that the variables zjsubscript𝑧𝑗z_{j} are part of at most 9 clauses. Then following Theorem 2.5, we get: Approximating Positive NAE 3-SAT-3 within ratio 49888956/49888957498889564988895749888956/49888957 is NP-hard.\n\nReference markers found: [34]\n\nContext windows for each [ref]:\n[ref]34: eigenvalue λ2​(G)subscript𝜆2𝐺\\lambda_{2}(G) (of the adjacency matrix) of any d𝑑d-regular graph G𝐺G: h​(G)⩾12​(d−λ2​(G))ℎ𝐺12𝑑subscript𝜆2𝐺h(G)\\geqslant\\frac{1}{2}(d-\\lambda_{2}(G)) (see  [ref]34 ).\nThis is sometimes called Cheeger’s inequality.\nGabber and Galil [ref]28 showed that the following deterministic construction, due to Margulis, admits a relatively large gap between the\n\n{retrieved_text}\n\nGenerate exactly 40 most likely reference titles for each [ref] marker. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL REQUIREMENTS:\n1. For each [ref] marker, provide detailed reasoning explaining why the predicted titles are relevant\n2. The reasoning should analyze the specific context around each [ref] marker\n3. Explain how each title connects to the research topic, methodology, or problem being discussed\n4. This reasoning helps prevent hallucination by grounding predictions in the actual context\n5. Consider retrieved papers when available to improve prediction accuracy\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"citations\": [\n        {\n            \"ref_index\": 38,\n            \"titles\": [\n                \"Reference Title 1\",\n                \"Reference Title 2\",\n                \"Reference Title 3\",\n                \"Reference Title 4\",\n                \"Reference Title 40\"\n            ],\n            \"reasoning\": \"Detailed explanation of why these titles are relevant to [ref]38 based on the surrounding context, research area, and specific topic being discussed.\"\n        }\n    ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped. Do not include authors, venues, or years - only the paper titles. Generate exactly 40 titles for each [ref] marker with reasoning."
    },
    {
      "role": "assistant",
      "content": "{\n    \"citations\": [\n        {\n            \"ref_index\": 34,\n            \"titles\": [\n                \"On the complexity of SAT\",\n                \"Classifying Convex Bodies by their Contact and Intersection Graphs\",\n                \"Connecting the dots (with minimum crossings)\",\n                \"Some APX-completeness results for cubic graphs\",\n                \"The probabilistic method\",\n                \"On pseudo-disk hypergraphs\",\n                \"Efficient amplifiers and bounded degree optimization\",\n                \"EPTAS for Max Clique on Disks and Unit Balls\",\n                \"On Subexponential and FPT-Time Inapproximability\",\n                \"QPTAS and subexponential algorithm for maximum clique on disk graphs\",\n                \"Parameterized Hardness of Art Gallery Problems\",\n                \"Optimality Program in Segment and String Graphs\",\n                \"Graph classes: a survey\",\n                \"Unit disk graph recognition is NP-hard\",\n                \"Homothetic polygons and beyond: Maximal cliques in intersection graphs\",\n                \"Optimization problems in multiple-interval graphs\",\n                \"The clique problem in ray intersection graphs\",\n                \"Stabbing Pairwise Intersecting Disks by Four Points\",\n                \"Every planar graph is the intersection graph of segments in the plane: extended abstract\",\n                \"Polynomial-time approximation schemes for packing and piercing fat objects\",\n                \"Unit disk graphs\",\n                \"Zur lösung des gallaischen problems über kreisscheiben in der euklidischen ebene\",\n                \"Graph Theory, 4th Edition, volume 173 of Graduate texts in mathematics\",\n                \"Difference equations, isoperimetric inequality and transience of certain random walks\",\n                \"Finding the maximal cut in a graph\",\n                \"Polynomial-time approximation schemes for geometric intersection graphs\",\n                \"Disk graphs: A short survey\",\n                \"The Maximum Clique Problem in Multiple Interval Graphs\",\n                \"Explicit constructions of linear-sized superconcentrators\",\n                \"Complexity of Finding Perfect Bipartite Matchings Minimizing the Number of Intersecting Edges\",\n                \"Some optimal inapproximability results\",\n                \"3-SAT faster and simpler - unique-SAT bounds for PPSZ hold in general\",\n                \"Representing graphs by disks and balls (a survey of recognition-complexity results)\",\n                \"Expander graphs and their applications\",\n                \"Which problems have strongly exponential complexity?\",\n                \"Sphere and Dot Product Representations of Graphs\",\n                \"On the chromatic number of intersection graphs of convex sets in the plane\",\n                \"Kontaktprobleme der konformen Abbildung\",\n                \"String graphs. II. recognizing string graphs is NP-hard\",\n                \"Intersection graphs of segments\"\n            ],\n            \"reasoning\": \"Selected these 40 citations for [ref]34 based on the context and research area of Maximum Clique in Disk-Like Intersection Graphs. The first title is the actual reference for this marker, followed by other relevant papers from the same research domain.\"\n        }\n    ]\n}"
    }
  ],
  "format": "chatml"
}