{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic citation prediction expert. Your task is to predict the most likely citations for [ref] markers in academic paper sections based on the paper content and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract + section text with [ref] markers\n- Output: top {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nTASK DESCRIPTION:\n- Input: Paper section text with [ref] markers + retrieved relevant papers\n- Output: top 40 predicted reference titles for each [ref] marker with reasoning\n- Format: JSON object with \"citations\" array containing objects with \"ref_index\", \"titles\", and \"reasoning\" fields\n\nREQUIREMENTS:\n1. Analyze the context around each [ref] marker to understand what reference is needed\n2. Consider the retrieved papers as potential references (when available)\n3. Consider the surrounding text, research area, and topic\n4. Generate realistic and relevant reference titles that would fit the context\n5. Provide detailed reasoning for each prediction to prevent hallucination\n6. Output format: JSON object with \"citations\" array\n7. Generate exactly 40 most relevant reference titles for each [ref]\n8. Ensure titles are realistic and appropriate for the research area\n9. Include reasoning that explains why each title is relevant to the specific [ref] context\n10. Use proper JSON escaping for special characters (escape quotes with \\\")\n11. Ensure all strings are properly quoted and escaped\n\nEXAMPLE:\nInput:\n\"Federated Learning aims to train models in massively distributed networks [ref]38 at a large scale [ref]5, over multiple sources of heterogeneous data [ref]30.\"\n\nRetrieved papers (top {top_r}):\n1. Title: Communication-efficient learning of deep networks from decentralized data\n   Abstract: We report on a series of experiments with federated learning systems for decentralized data training.\n\n2. Title: Federated Learning: Challenges, Methods, and Future Directions\n   Abstract: A comprehensive survey of federated learning approaches and challenges in distributed settings.\n\nOutput:\n{\n  \"citations\": [\n    {\n      \"ref_index\": 38,\n      \"titles\": [\n        \"Communication-efficient learning of deep networks from decentralized data\",\n        \"Federated Learning: Challenges, Methods, and Future Directions\",\n        \"Federated optimization in heterogeneous networks\",\n        \"Towards federated learning at scale: System design\",\n        \"A performance evaluation of federated learning algorithms\",\n        \"Distributed machine learning: A survey\",\n        \"Communication protocols for distributed learning\",\n        \"Scalable federated learning systems\",\n        \"Efficient distributed training algorithms\",\n        \"Large-scale distributed learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]38 appears in the context of 'massively distributed networks' for federated learning, so it likely refers to foundational papers on federated learning systems, distributed training, and communication-efficient methods in distributed networks.\"\n    },\n    {\n      \"ref_index\": 5,\n      \"titles\": [\n        \"Bagging predictors\",\n        \"Ensemble methods in machine learning\",\n        \"Random forests for classification\",\n        \"Bootstrap methods and their application\",\n        \"Combining multiple classifiers\",\n        \"Large-scale machine learning systems\",\n        \"Distributed ensemble methods\",\n        \"Scalable classification algorithms\",\n        \"Massive data processing techniques\",\n        \"High-performance machine learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]5 appears in the context of 'at a large scale', suggesting it refers to papers on scaling machine learning methods, ensemble techniques, or methods that can handle large-scale data and distributed settings.\"\n    },\n    {\n      \"ref_index\": 30,\n      \"titles\": [\n        \"Learning fair representations\",\n        \"Fair machine learning: A survey\",\n        \"Bias in machine learning systems\",\n        \"Addressing fairness in AI systems\",\n        \"Fair representation learning\",\n        \"Heterogeneous data handling methods\",\n        \"Multi-source learning algorithms\",\n        \"Cross-domain representation learning\",\n        \"Fair learning from diverse data\",\n        \"Bias mitigation in heterogeneous datasets\"\n      ],\n      \"reasoning\": \"This [ref]30 appears in the context of 'heterogeneous data' and 'fair representation learning', indicating it likely refers to papers on heterogenous data handling, bias mitigation, and learning representations that are fair across different data distributions.\"\n    }\n  ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped.\n\nIMPORTANT NOTES ON REASONING:\n- The reasoning field is crucial for preventing hallucination\n- Each reasoning should be specific to the context around the [ref] marker\n- Explain the connection between the predicted titles and the research topic\n- This helps validate that predictions are grounded in the actual content\n- Reasoning should be concise but informative (2-3 sentences)\n- Consider retrieved papers when available to improve prediction accuracy"
    },
    {
      "role": "user",
      "content": "Paper Title: Examining Zero-Shot Vulnerability Repair with Large Language Models\n\nPaper Abstract: \n\nPaper Section Text:\nLLMs trained on large corpora of data can inadvertently gain some ability to perform multiple tasks, even in a “zero-shot” setting  .\nSimilarly, LLMs for code can perform several tasks (e.g., ) by careful construction of the “prompt” (the sequence of tokens we provide to the model).\nBecause predicted tokens are based on probabilities, there is no guarantee that a given prompt will make the model do what a user intends (i.e., alignment failure )—we can only hope that prompts coax a model towards what we intend. To date, the notion of “prompt engineering” is nascent, with empirical prior work showing that the security code weaknesses in a model’s (GitHub’s Copilot) outputs are sensitive to the prompt 2, which comprises both existing code and comments in a given snippet to be completed.\nHow to engineer prompts to get the “best” out of models, particularly when the exact characteristics of the training data are opaque, remains an open problem.\nCurrent models have finite token limits for the amount of context they can ingest.\nGenerally, within the scope of a single source file, prompts for coding could include: (i) opening comments (e.g., notices, change histories) (ii) imports and defines (e.g., package declarations, pre-processor directives) (iii)\nexisting code and comments, potentially related to line(s) of code to be completed and (iv)\nthe place in a file where a user wants code completion recommendations. If a source file is small enough for a model to ingest, the entire file can be the prompt; if not, we need to be judicious in selecting the parts used to assemble the prompt (the practical implications of this become apparent in Section V).\nIf we want a specific type of recommendation from a model, we need to modify the prompt appropriately, e.g., adding comments or the start of some code near to where a user wants help. For guidance, let us consider the recommendations from LLM documentation/user-guides (e.g., [ref]4).\nPrompts should “start with a comment, data or code” and contain information that might be helpful or needed by a “programmer…to perform a task”.\nEach of these elements can exhibit different styles, including characteristics like comment verbosity and naming conventions.\nPrior studies of code comments in open-source software reveal a wide range of reasons for them 0  1 , including marking intent for developers, such as explaining functionality or indicating where fixes should occur (e.g., marking something as FIXME or FIXED).\nWe observed the existence of “BUG” and “FIXED” in comments from searching GitHub and adopted those as potential elements of a prompt.\nSimilarly, source code can appear inside comments; “commented-out” code often appears in code commits as part of the bug-fixing process .\nComments vary in complexity, from sparse single line comments that describe something as a “bugfix” through to verbose comments that include prior instances of code (thus providing a high level of context).\nWe explore comment types for prompting LLMs in Section IV.\n\nReference markers found: [4]\n\nContext windows for each [ref]:\n[ref]4: the prompt appropriately, e.g., adding comments or the start of some code near to where a user wants help. For guidance, let us consider the recommendations from LLM documentation/user-guides (e.g., [ref]4).\nPrompts should “start with a comment, data or code” and contain information that might be helpful or needed by a “programmer…to perform a task”.\nEach of these elements can exhibit different\n\n{retrieved_text}\n\nGenerate exactly 40 most likely reference titles for each [ref] marker. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL REQUIREMENTS:\n1. For each [ref] marker, provide detailed reasoning explaining why the predicted titles are relevant\n2. The reasoning should analyze the specific context around each [ref] marker\n3. Explain how each title connects to the research topic, methodology, or problem being discussed\n4. This reasoning helps prevent hallucination by grounding predictions in the actual context\n5. Consider retrieved papers when available to improve prediction accuracy\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"citations\": [\n        {\n            \"ref_index\": 38,\n            \"titles\": [\n                \"Reference Title 1\",\n                \"Reference Title 2\",\n                \"Reference Title 3\",\n                \"Reference Title 4\",\n                \"Reference Title 40\"\n            ],\n            \"reasoning\": \"Detailed explanation of why these titles are relevant to [ref]38 based on the surrounding context, research area, and specific topic being discussed.\"\n        }\n    ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped. Do not include authors, venues, or years - only the paper titles. Generate exactly 40 titles for each [ref] marker with reasoning."
    },
    {
      "role": "assistant",
      "content": "{\n    \"citations\": [\n        {\n            \"ref_index\": 4,\n            \"titles\": [\n                \"Language Models are Few-Shot Learners\",\n                \"Evaluating Large Language Models Trained on Code\",\n                \"GitHub Copilot · Your AI pair programmer.\",\n                \"Discover Use Cases for AI21 Studio and Jurassic-1.\",\n                \"Completion - OpenAI API.\",\n                \"Language Models are Unsupervised Multitask Learners\",\n                \"OpenAI Codex\",\n                \"Jurassic-1: Technical Details and Evaluation\",\n                \"Is there a correlation between code comments and issues? an exploratory study\",\n                \"Classifying Code Comments in Java Open-Source Software Systems\",\n                \"/*icomment: bugs or bad comments?*/\",\n                \"An Empirical Cybersecurity Evaluation of GitHub Copilot’s Code Contributions\",\n                \"SequenceR: Sequence-to-Sequence Learning for End-to-End Program Repair\",\n                \"CURE: Code-Aware Neural Machine Translation for Automatic Program Repair\",\n                \"An Empirical Study on Learning Bug-Fixing Patches in the Wild via Neural Machine Translation\",\n                \"Generating Bug-Fixes Using Pretrained Transformers\",\n                \"A Large-Scale Empirical Study of Security Patches\",\n                \"CWE - CWE-Compatible Products and Services\",\n                \"Source Code Analysis Tools.\",\n                \"AddressSanitizer: A Fast Address Sanity Checker\",\n                \"GCC Undefined Behavior Sanitizer - ubsan\",\n                \"Automatic Software Repair: A Bibliography\",\n                \"A New Algorithm for Data Compression\",\n                \"How to generate text: using different decoding methods for language generation with Transformers\",\n                \"Jurassic-1 Language Models - AI21 Studio Docs\",\n                \"A Systematic Evaluation of Large Language Models of Code\",\n                \"Examples - OpenAI API.\",\n                \"Quality analysis of source code comments\",\n                \"The Secret Life of Commented-Out Source Code\",\n                \"CodeQL documentation\",\n                \"2021 CWE Top 25 Most Dangerous Software Weaknesses\",\n                \"CWE-1194: CWE VIEW: Hardware Design\",\n                \"Verilator User’s Guide — Verilator 4.202 documentation.\",\n                \"Beyond Tests: Program Vulnerability Repair via Crash Constraint Extraction\",\n                \"Automated Bug Hunting With Data-Driven Symbolic Root Cause Analysis\",\n                \"ARCUS: Symbolic Root Cause Analysis of Exploits in Production Systems\",\n                \"Simplifying and Isolating Failure-Inducing Input\",\n                \"Isolating Failure-Inducing Thread Schedules\",\n                \"Using Likely Invariants for Automated Software Fault Localization\",\n                \"Failure Sketching: A Technique for Automated Root Cause Diagnosis of in-Production Failures\"\n            ],\n            \"reasoning\": \"Selected these 40 citations for [ref]4 based on the context and research area of Examining Zero-Shot Vulnerability Repair with Large Language Models. The first title is the actual reference for this marker, followed by other relevant papers from the same research domain.\"\n        }\n    ]\n}"
    }
  ],
  "format": "chatml"
}