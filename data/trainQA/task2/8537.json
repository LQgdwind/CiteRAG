{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic citation prediction expert. Your task is to predict the most likely citations for [ref] markers in academic paper sections based on the paper content and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract + section text with [ref] markers\n- Output: top {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nTASK DESCRIPTION:\n- Input: Paper section text with [ref] markers + retrieved relevant papers\n- Output: top 40 predicted reference titles for each [ref] marker with reasoning\n- Format: JSON object with \"citations\" array containing objects with \"ref_index\", \"titles\", and \"reasoning\" fields\n\nREQUIREMENTS:\n1. Analyze the context around each [ref] marker to understand what reference is needed\n2. Consider the retrieved papers as potential references (when available)\n3. Consider the surrounding text, research area, and topic\n4. Generate realistic and relevant reference titles that would fit the context\n5. Provide detailed reasoning for each prediction to prevent hallucination\n6. Output format: JSON object with \"citations\" array\n7. Generate exactly 40 most relevant reference titles for each [ref]\n8. Ensure titles are realistic and appropriate for the research area\n9. Include reasoning that explains why each title is relevant to the specific [ref] context\n10. Use proper JSON escaping for special characters (escape quotes with \\\")\n11. Ensure all strings are properly quoted and escaped\n\nEXAMPLE:\nInput:\n\"Federated Learning aims to train models in massively distributed networks [ref]38 at a large scale [ref]5, over multiple sources of heterogeneous data [ref]30.\"\n\nRetrieved papers (top {top_r}):\n1. Title: Communication-efficient learning of deep networks from decentralized data\n   Abstract: We report on a series of experiments with federated learning systems for decentralized data training.\n\n2. Title: Federated Learning: Challenges, Methods, and Future Directions\n   Abstract: A comprehensive survey of federated learning approaches and challenges in distributed settings.\n\nOutput:\n{\n  \"citations\": [\n    {\n      \"ref_index\": 38,\n      \"titles\": [\n        \"Communication-efficient learning of deep networks from decentralized data\",\n        \"Federated Learning: Challenges, Methods, and Future Directions\",\n        \"Federated optimization in heterogeneous networks\",\n        \"Towards federated learning at scale: System design\",\n        \"A performance evaluation of federated learning algorithms\",\n        \"Distributed machine learning: A survey\",\n        \"Communication protocols for distributed learning\",\n        \"Scalable federated learning systems\",\n        \"Efficient distributed training algorithms\",\n        \"Large-scale distributed learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]38 appears in the context of 'massively distributed networks' for federated learning, so it likely refers to foundational papers on federated learning systems, distributed training, and communication-efficient methods in distributed networks.\"\n    },\n    {\n      \"ref_index\": 5,\n      \"titles\": [\n        \"Bagging predictors\",\n        \"Ensemble methods in machine learning\",\n        \"Random forests for classification\",\n        \"Bootstrap methods and their application\",\n        \"Combining multiple classifiers\",\n        \"Large-scale machine learning systems\",\n        \"Distributed ensemble methods\",\n        \"Scalable classification algorithms\",\n        \"Massive data processing techniques\",\n        \"High-performance machine learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]5 appears in the context of 'at a large scale', suggesting it refers to papers on scaling machine learning methods, ensemble techniques, or methods that can handle large-scale data and distributed settings.\"\n    },\n    {\n      \"ref_index\": 30,\n      \"titles\": [\n        \"Learning fair representations\",\n        \"Fair machine learning: A survey\",\n        \"Bias in machine learning systems\",\n        \"Addressing fairness in AI systems\",\n        \"Fair representation learning\",\n        \"Heterogeneous data handling methods\",\n        \"Multi-source learning algorithms\",\n        \"Cross-domain representation learning\",\n        \"Fair learning from diverse data\",\n        \"Bias mitigation in heterogeneous datasets\"\n      ],\n      \"reasoning\": \"This [ref]30 appears in the context of 'heterogeneous data' and 'fair representation learning', indicating it likely refers to papers on heterogenous data handling, bias mitigation, and learning representations that are fair across different data distributions.\"\n    }\n  ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped.\n\nIMPORTANT NOTES ON REASONING:\n- The reasoning field is crucial for preventing hallucination\n- Each reasoning should be specific to the context around the [ref] marker\n- Explain the connection between the predicted titles and the research topic\n- This helps validate that predictions are grounded in the actual content\n- Reasoning should be concise but informative (2-3 sentences)\n- Consider retrieved papers when available to improve prediction accuracy"
    },
    {
      "role": "user",
      "content": "Paper Title: gECC: A GPU-based high-throughput framework for Elliptic Curve Cryptography\n\nPaper Abstract: \n\nPaper Section Text:\nElliptic Curve Cryptography (ECC)   is a method for public-key encryption by using elliptic curves. It offers security that is on par with conventional public-key cryptographic systems like Rivest–Shamir–Adleman (RSA) but with a smaller key size and lower computational complexity.\nRecently, ECC gained increased attention due to its efficient privacy protection and fewer interactions in verifiable databases    [ref]7 . ECC serves as a powerful encryption tool widely used in areas such as data encryption, digital signatures, blockchain, secure transmission, and secure multi-party computation. The two most prevalent public-key algorithms based on ECC are Elliptic Curve Diffie-Hellman (ECDH)  for data encryption and Elliptic Curve Digital Signature Algorithm (ECDSA)  for digital signatures.\nTransport Layer Security (TLS), the preferred protocol for securing 5G communications, incorporates ECDH in its handshake process . ECDH also plays a crucial role in sensitive data storage   and data sharing, allowing basic database query instructions to be executed without any data information leakage. This includes Private Set Intersection (PSI)    and Private Intersection Sum .\nECDSA is widely employed in blockchain systems to safeguard data integrity and transaction accountability . Currently, numerous blockchain-database (referred to as verifiable databases)    [ref]7 , which combine the properties of blockchains with the ones of classic Database Management Systems (DBMS), protect data history against malicious tampering. Additionally, researchers developed verifiable SQL  , protecting the integrity of user data and query execution on untrusted database providers. As an up-and-coming field approaching commercial applications, cloud service providers, such as Amazon 0 and Microsoft 1, provide services that can maintain an append-only and cryptographically verifiable log\nof data operations. To enhance the efficiency of ECC, researchers have dedicated significant efforts to designing specialized curve forms that reduce the computational overhead associated with modular arithmetic in elliptic curve operations. For instance, blockchain systems, such as Bitcoin 2, Ethereum 3, Zcash 4, and Hyperledger Fabric 5, use the secp256k1 curve 6 and the P-256 curve endorsed by the National Institute of Standards and Technology (NIST) 7 for ECDSA. Differently, China keeps the SM2 curve as the standard for electronic authentication systems, key management, and e-commerce applications 8 9. Despite such progress, ECC remains a bottleneck in the performance of these throughput-sensitive applications. On mainstream server environments, a single fundamental EC operation typically takes more than 6 milliseconds to execute. A PSI computation to identify the intersection between two datasets containing millions of items has to perform tens of millions of EC operations, which could take around 632 seconds to complete . Although researchers develop blockchain-database systems with ASIC 0 to accelerate ECDSA to improve transaction throughput, the improvement compared to a CPU-based system is limited, with a maximal 12% improvement. There are recent efforts 1 2 3 in employing GPU to minimize the latency of individual EC operations. However, achieving the high-throughput requirements of emerging big data applications remains a challenge. To close the gap, we present a high-throughput GPU-based ECC framework, which is holistically optimized to maximize the data processing throughput. The optimizations consist of the following three major aspects. First, we employ Montgomery’s trick  to batch EC operations to enhance the overall throughput. Existing GPU-based ECC solutions solely offer interfaces for individual EC operations, such as single-point addition and single-point multiplication, and therefore they cannot bach EC operations. We reconstruct the entire ECC framework, called\ngECC, consisting of batch EC operations, including point multiplication, point addition, and point doubling.\nHowever, the modular inversion operation in the algorithm incurs significant overhead due to poor parallelism, thus reducing performance.\nTo address the issue, we borrow the wisdom of parallel graph processing systems and incorporate the Gather-Apply-Scatter (GAS) mechanism 4 to reduce the overhead of the modular inversion operation. To the best of our knowledge, gECC is the first system to implement batch PMUL operations on a GPU using Montgomery’s trick. Second, we employ data-locality-aware kernel fusion optimization and design multi-level cache management to minimize the memory access overhead incurred by the frequent data access for point data and the large intermediate results caused by batching EC operations with Montgomery’s Trick.\nEach EC operation computation inherently requires access to the point data and the intermediate results twice.\nThese data need more than hundreds of megabytes of memory space, which far exceeds the limited GPU’s shared memory size.\nFor example, when 2202^{20} EC point additions are performed simultaneously, the total size of data to be temporarily stored is 96 MB96\\text{\\,}\\mathrm{M}\\mathrm{B} and the inputs are 128 MB128\\text{\\,}\\mathrm{M}\\mathrm{B}. Our techniques optimize data access to minimize the pressure on the registers and GPU’s shared memory. Third, all the EC’s arithmetic operations, including addition, subtraction, and multiplication, are based on modular arithmetic on the finite field with at least 256-bit. Among these, the most time-consuming modular multiplication operation is also the most frequently performed operation in all kinds of EC operations. Previous studies 1 2 3 5 6 fall short in evaluating the performance of modular multiplication from the perspective of instructions’ issuance rates at the microarchitectural level.\nFurthermore, there is a noticeable absence of arithmetic optimization for specific prime moduli in the existing work 3 6. We identify that the efficiency of modular multiplication is highly dependent on the\nnumber of Integer Multiply-Add (IMAD) instructions. To eliminate this bottleneck, we propose novel techniques to minimize the\nnumber of IMAD instructions by leveraging predicate registers to pass the carry information. In addition, we develop an arithmetic optimization for the SM2 curve, using addition and subtraction\ninstructions (IADD3) to replace the expensive IMAD instructions. We implement gECC using CUDA and conduct evaluations on the Nvidia A100 GPU to assess its performance. Our comparative analysis includes gECC and the leading GPU-based ECC system, RapidEC 3, highlighting the advancements and improvements offered by our framework. On standard cryptographic benchmarks for two commonly used ECC algorithms, our results demonstrate that gECC achieves a speedup of 4.18×4.18\\times for signature generation and 5.56×5.56\\times for signature verification in ECDSA. If we measure the two key layers in our framework separately, gECC achieves up to 4.04×4.04\\times and 4.94×4.94\\times speedup for fixed-point multiplication and unknown point multiplication of the EC operator layer, and 1.72×1.72\\times speedup in the modular multiplication for SM2 curve in the modular arithmetic layer. In real-world blockchain system, we can achieve 1.56×\\times performance improvements, compared to the state-of-the-art CPU-based systems.\ngECC is completely and freely available at https://github.com/CGCL-codes/gECC.\n\nReference markers found: [7]\n\nContext windows for each [ref]:\n[ref]7: but with a smaller key size and lower computational complexity.\nRecently, ECC gained increased attention due to its efficient privacy protection and fewer interactions in verifiable databases    [ref]7 . ECC serves as a powerful encryption tool widely used in areas such as data encryption, digital signatures, blockchain, secure transmission, and secure multi-party computation. The two most\n\n{retrieved_text}\n\nGenerate exactly 40 most likely reference titles for each [ref] marker. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL REQUIREMENTS:\n1. For each [ref] marker, provide detailed reasoning explaining why the predicted titles are relevant\n2. The reasoning should analyze the specific context around each [ref] marker\n3. Explain how each title connects to the research topic, methodology, or problem being discussed\n4. This reasoning helps prevent hallucination by grounding predictions in the actual context\n5. Consider retrieved papers when available to improve prediction accuracy\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"citations\": [\n        {\n            \"ref_index\": 38,\n            \"titles\": [\n                \"Reference Title 1\",\n                \"Reference Title 2\",\n                \"Reference Title 3\",\n                \"Reference Title 4\",\n                \"Reference Title 40\"\n            ],\n            \"reasoning\": \"Detailed explanation of why these titles are relevant to [ref]38 based on the surrounding context, research area, and specific topic being discussed.\"\n        }\n    ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped. Do not include authors, venues, or years - only the paper titles. Generate exactly 40 titles for each [ref] marker with reasoning."
    },
    {
      "role": "assistant",
      "content": "{\n    \"citations\": [\n        {\n            \"ref_index\": 7,\n            \"titles\": [\n                \"Spitz: A Verifiable Database System\",\n                \"Speeding the pollard and elliptic curve methods of factorization\",\n                \"Use of elliptic curves in cryptography\",\n                \"Elliptic curve cryptosystems\",\n                \"Glassdb: An efficient verifiable ledger database system through transparency\",\n                \"Hybrid blockchain database systems: design and performance\",\n                \"The anatomy of blockchain database systems\",\n                \"Ledgerdb: A centralized ledger database for universal audit and verification\",\n                \"Elliptic curve cryptography (ecc) cipher suites for transport layer security (tls)\",\n                \"The elliptic curve digital signature algorithm (ecdsa)\",\n                \"Database security with aes encryption, elliptic curve encryption and signature\",\n                \"Secured data storage and retrieval using elliptic curve cryptography in cloud\",\n                \"Spot-light: lightweight private set intersection from sparse ot extension\",\n                \"Unbalanced private set intersection with linear communication complexity\",\n                \"Efficient secure computation from sm series cryptography\",\n                \"Practical private intersection-sum protocols with good scalability\",\n                \"Cryptographic primitives in blockchains\",\n                \"Integridb: Verifiable sql for outsourced databases\",\n                \"Scalable verification for outsourced dynamic databases\",\n                \"Amazon quantum ledger database, 2019\",\n                \"Sql ledger: Cryptographically verifiable data in azure sql database\",\n                \"Bitcoin: A peer-to-peer electronic cash system\",\n                \"Ethereum: A secure decentralised generalised transaction ledger\",\n                \"Zerocash: Decentralized anonymous payments from bitcoin\",\n                \"Hyperledger Fabric: A Distributed Operating System for Permissioned Blockchains\",\n                \"Sec 2: Recommended elliptic curve domain parameters\",\n                \"Digital signature standard (dss)\",\n                \"Provably-secure (chinese government) sm2 and simplified sm2 key exchange protocols\",\n                \"Public key cryptographic algorithm sm2 based on elliptic curves\",\n                \"Baldur: A hybrid blockchain database with fpga or gpu acceleration\",\n                \"Dpf-ecc: Accelerating elliptic curve cryptography with floating-point computing power of gpus\",\n                \"Dpf-ecc: A framework for efficient ecc with double precision floating-point computing power\",\n                \"Accelerating elliptic curve digital signature algorithms on gpus\",\n                \"PowerGraph: Distributed Graph-Parallel computation on natural graphs\",\n                \"Cgbn: Cuda accelerated multiple precision arithmetic (big num) using cooperative groups, 2018\",\n                \"Faster modular exponentiation using double precision floating point arithmetic on the gpu\",\n                \"Tls/ssl and crypto library, 2024\",\n                \"An efficient elliptic curve cryptography signature server with gpu acceleration\",\n                \"Guide to elliptic curve cryptography\",\n                \"Accelerating sm2 digital signature algorithm using modern processor features\"\n            ],\n            \"reasoning\": \"Selected these 40 citations for [ref]7 based on the context and research area of gECC: A GPU-based high-throughput framework for Elliptic Curve Cryptography. The first title is the actual reference for this marker, followed by other relevant papers from the same research domain.\"\n        }\n    ]\n}"
    }
  ],
  "format": "chatml"
}