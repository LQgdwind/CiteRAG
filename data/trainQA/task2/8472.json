{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic citation prediction expert. Your task is to predict the most likely citations for [ref] markers in academic paper sections based on the paper content and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract + section text with [ref] markers\n- Output: top {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nTASK DESCRIPTION:\n- Input: Paper section text with [ref] markers + retrieved relevant papers\n- Output: top 40 predicted reference titles for each [ref] marker with reasoning\n- Format: JSON object with \"citations\" array containing objects with \"ref_index\", \"titles\", and \"reasoning\" fields\n\nREQUIREMENTS:\n1. Analyze the context around each [ref] marker to understand what reference is needed\n2. Consider the retrieved papers as potential references (when available)\n3. Consider the surrounding text, research area, and topic\n4. Generate realistic and relevant reference titles that would fit the context\n5. Provide detailed reasoning for each prediction to prevent hallucination\n6. Output format: JSON object with \"citations\" array\n7. Generate exactly 40 most relevant reference titles for each [ref]\n8. Ensure titles are realistic and appropriate for the research area\n9. Include reasoning that explains why each title is relevant to the specific [ref] context\n10. Use proper JSON escaping for special characters (escape quotes with \\\")\n11. Ensure all strings are properly quoted and escaped\n\nEXAMPLE:\nInput:\n\"Federated Learning aims to train models in massively distributed networks [ref]38 at a large scale [ref]5, over multiple sources of heterogeneous data [ref]30.\"\n\nRetrieved papers (top {top_r}):\n1. Title: Communication-efficient learning of deep networks from decentralized data\n   Abstract: We report on a series of experiments with federated learning systems for decentralized data training.\n\n2. Title: Federated Learning: Challenges, Methods, and Future Directions\n   Abstract: A comprehensive survey of federated learning approaches and challenges in distributed settings.\n\nOutput:\n{\n  \"citations\": [\n    {\n      \"ref_index\": 38,\n      \"titles\": [\n        \"Communication-efficient learning of deep networks from decentralized data\",\n        \"Federated Learning: Challenges, Methods, and Future Directions\",\n        \"Federated optimization in heterogeneous networks\",\n        \"Towards federated learning at scale: System design\",\n        \"A performance evaluation of federated learning algorithms\",\n        \"Distributed machine learning: A survey\",\n        \"Communication protocols for distributed learning\",\n        \"Scalable federated learning systems\",\n        \"Efficient distributed training algorithms\",\n        \"Large-scale distributed learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]38 appears in the context of 'massively distributed networks' for federated learning, so it likely refers to foundational papers on federated learning systems, distributed training, and communication-efficient methods in distributed networks.\"\n    },\n    {\n      \"ref_index\": 5,\n      \"titles\": [\n        \"Bagging predictors\",\n        \"Ensemble methods in machine learning\",\n        \"Random forests for classification\",\n        \"Bootstrap methods and their application\",\n        \"Combining multiple classifiers\",\n        \"Large-scale machine learning systems\",\n        \"Distributed ensemble methods\",\n        \"Scalable classification algorithms\",\n        \"Massive data processing techniques\",\n        \"High-performance machine learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]5 appears in the context of 'at a large scale', suggesting it refers to papers on scaling machine learning methods, ensemble techniques, or methods that can handle large-scale data and distributed settings.\"\n    },\n    {\n      \"ref_index\": 30,\n      \"titles\": [\n        \"Learning fair representations\",\n        \"Fair machine learning: A survey\",\n        \"Bias in machine learning systems\",\n        \"Addressing fairness in AI systems\",\n        \"Fair representation learning\",\n        \"Heterogeneous data handling methods\",\n        \"Multi-source learning algorithms\",\n        \"Cross-domain representation learning\",\n        \"Fair learning from diverse data\",\n        \"Bias mitigation in heterogeneous datasets\"\n      ],\n      \"reasoning\": \"This [ref]30 appears in the context of 'heterogeneous data' and 'fair representation learning', indicating it likely refers to papers on heterogenous data handling, bias mitigation, and learning representations that are fair across different data distributions.\"\n    }\n  ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped.\n\nIMPORTANT NOTES ON REASONING:\n- The reasoning field is crucial for preventing hallucination\n- Each reasoning should be specific to the context around the [ref] marker\n- Explain the connection between the predicted titles and the research topic\n- This helps validate that predictions are grounded in the actual content\n- Reasoning should be concise but informative (2-3 sentences)\n- Consider retrieved papers when available to improve prediction accuracy"
    },
    {
      "role": "user",
      "content": "Paper Title: Sampling from exponential distributions in the time domain with superparamagnetic tunnel junctions\n\nPaper Abstract: \n\nPaper Section Text:\nSampling from specific distributions of interest in hardware is an important problem  and can benefit from acceleration as various machine learning and statistical computational models become more prevalent. In conventional digital computing systems, uniform distributions are commonly used as a general sources of randomness; Gaussian distributions are used for discrete-time simulations; and exponential distributions are used for discrete event simulations . Both conventional computing systems  as well as recently developed probabilistic computing systems [ref]9  rely on uniformly distributed (Bernoulli distributed with pp=0.5) random bits provided by their representative hardware random number generators. Sampling from other arbitrary distributions of interest is performed using alias tables, which were proposed by Walker  . Alias tables, which are effectively weighted look-up tables, enable the conversion between distributions and have been implemented in graphical processing units (GPUs) and FPGAs . The prevalence of this operation emphasizes the potential efficiency gains from developing efficient weighted random samplers that can be used to directly sample from arbitrary distributions of interest. The probabilistic delay cell developed in the previous section utilizes the temporal domain to natively sample exponentially distributed analog numbers directly from the device physics of SMTJs. Hence, such an approach has the potential to be more efficient than alias-table-based implementations where multiple random bits need to be sampled to generate an analog value and then processed through a look-up table to sample the distribution of choice . Though carrying out a careful analysis of the tradeoffs between random number generation quality, latency, and energy efficiency is beyond the scope of this work,\nthe technique described in this work can lead to a tradeoff space where exponentially distributed random number generation might become energy and latency-competitive with their uniformly distributed counterparts. In such a situation, temporal operators, implemented with complementary metal oxide semiconductor (CMOS) gates, can be integrated with probabilistic delay circuits to generate digital decisions based on samples from these distributions as shown in Fig. 5. In temporal computing  information is encoded in the arrival time of rising edges (transitions from a low voltage to a high voltage). Decisions can be made by racing signals against one another, with the earlier arriving signals blocking the later arriving ones. The blocking operation is performed by the inhibit gate as shown in Fig. 5(a). If the inhibiting signal (represented by input B for “blocking” in Fig. 5(a)) arrives first, the signal labeled “inhibited” (represented by input I in Fig. 5(a)) gets blocked (inhibited), resulting in a 0 output. If the input signal arrives first, it passes through the inhibit gate, causing the output to rise to 1 (i.e. it is not inhibited). In its simplest form, an inhibit gate can be implemented with a single pp-type metal oxide semiconductor (PMOS) transistor . When a rising edge arrives at the gate of the PMOS transistor, it turns the transistor off, closing the gate and maintaining the existing voltage level by preventing additional charge from coming in or trapped charge from leaking. Fig. 5(b), utilizes the inhibit gate shown in Fig. 5(a) in its simplest possible configuration, with a deterministic delay cell (DDC) feeding into its blocking (B) and a probabilistic delay cell feeding into its inhibited (I) inputs respectively. This circuit operates by allowing all probabilistic samples with a value smaller than the deterministic analog delay value to pass through while blocking all edges that arrive later. Hence, this circuit implementation encodes the probability that a sample drawn from an exponential distribution has a value smaller than a fixed delay value TDT_{D}, which is the delay of the deterministic delay cell. This probability is equal to the value of the cumulative distribution function of the probabilistic delay cell at time t=TDt=T_{D}. Various CMOS implementations of deterministic delay cells have been proposed in the literature    [ref]38. This circuit has a few potential uses. One is to generate uniform random bits. For this application, the median time of the probabilistic delay cell can be determined by evaluating the inverse CDF at 1/21/2. Half of the events occur before τ​ln⁡(2)\\tau\\ln(2), while the other half of the events occur after. Setting the delay of the deterministic delay cell TDT_{D} equal to this value in the circuit shown in Fig. 5(b), causes the inhibit gate to block the output of the probabilistic delay cell with a probability of 1/21/2. By choosing TD=−τ​ln⁡(1−p)T_{D}=-\\tau\\ln(1-p), one can bias the distribution to have probability pp instead of 1/21/2. Such a probabilistic delay circuit can be used in a temporal version of probabilistic computing applications. One example is a stochastic search using a Markov chain Monte Carlo sampler with Metropolis-Hastings transition rules. This approach attempts to generate a thermal distribution of states by stepping through configuration space with probabilities that depend on the energy change due to the step compared to the temperature of the simulation. In the simplest serial version of such an approach, the configuration space is searched by randomly flipping spins and evaluating the change in energy (Δ​Ei\\Delta E_{i}) due to a single spin flip indexed by ii. If this value is negative, then the flip is accepted, but if the value is positive, the flip is accepted with probability equal to the ratio of the proposed and original Boltzmann-distributed probabilities. This approach is common in large statistical simulations   and can benefit from the acceleration provided by the circuits described in Fig. 5(b). As shown in Fig. 5(b), two temporal signals are input to the circuit with values t0+Δ​tt_{0}+\\Delta t and t0+Δ​Ei/ϖt_{0}+\\Delta E_{i}/\\varpi, where ϖ\\varpi is some characteristic power that controls the granularity of the embedding into the temporal domain, and Δ​t\\Delta t is an exponentially distributed random variable with rate parameter ϖ​β\\varpi\\beta. The Δ​Ei/ϖ\\Delta E_{i}/\\varpi value is encoded in the deterministic delay cell while the Δ​t=ϖ​β\\Delta t=\\varpi\\beta is encoded in the probabilistic delay cell. The deterministic signal then uses the circuit in Fig. 5(b) to inhibit the stochastic signal; that is, if t0+Δ​Ei/ϖ<t0+Δ​tt_{0}+\\Delta E_{i}/\\varpi<t_{0}+\\Delta t, the output of the inhibit (⊣\\dashv) gate will be set to Boolean false; otherwise, it will be Boolean true. The probability that the inhibit gate outputs false is from the cumulative distribution describing the Δ​t\\Delta t, where Θ\\Theta is the Heaviside theta function; this step function appears because the probability that Δ​t<0\\Delta t<0 is zero. We then invert this Boolean output to produce a final Boolean value which is true with probability e−Θ​(β​Δ​Ei)e^{-\\Theta(\\beta\\Delta E_{i})}. The value of this random bit tells us precisely whether or not to accept the proposed transition under the Metropolis-Hastings algorithm. In the case of an Ising model, we could use this signal directly to update a stored Boolean value of some associated spin sis_{i}. We leave the details of constructing Δ​E\\Delta E and coupling spins into an Ising machine for future work. Sampling from exponential distributions forms a key building block of a more general kind of sampling from arbitrary distributions, known as weighted random sampling. Weighted random sampling involves picking from a discrete set of items indexed by jj, with a weight wjw_{j}. This fundamental computational task has a wide variety of applications in various fields, such as machine learning , statistical simulation , and database systems 0 1. Conventionally, these methods rely on uniform random samplers and use algorithmic methods to generate weighted samples. In this work, we rely on the principle of the “exponential alarm clocks” method in order to generate weighted random samples with probabilistic delay cells and temporal computing primitives. The exponential clocks method described in  asks: given nn alarm clocks with various rate parameters λj\\lambda_{j}, what is the probability PjP_{j} that the jt​hj^{th} clock will ring first? The solution is given by Such a scheme can be naturally implemented with temporal operators and exponentially distributed probabilistic delay cells with tunable rates. The simplest case is n=2n=2, as shown in figure 5(c), with two probabilistic delay cells feeding into two cross-coupled inhibit gates. The first-arriving of the two delay signals reaches the output before the other signal, similar to the previous case, and blocks the other one from reaching the output. The output that transitions to a Boolean true is the current sampled index. This can be scaled up to nn elements, as shown in Fig. 5(d), by using an OR gate to select the first arriving input signals. The output of the OR gate feeds the inhibiting inputs (input B) of all of the signals, allowing only the first arriving signal to pass through, while effectively blocking all other signals from reaching the output. The output that transitions to a Boolean true represents the index of the sampled element. This is equivalent to rolling an nn-sided die with arbitrary (but normalized) probabilities for each side, where the biases are dictated by the ratio of the rate parameters of the different SMTJs as shown in equation 4. Note that since the rate parameters in Eq. (4) are themselves exponential functions of the current, current-addressing the devices gives direct access to a Boltzmann distribution P​(j)∝e−Ij/IβP(j)\\propto e^{-I_{j}/I_{\\beta}} where IβI_{\\beta} is a characteristic current.\n\nReference markers found: [9]\n\nContext windows for each [ref]:\n[ref]9: discrete-time simulations; and exponential distributions are used for discrete event simulations . Both conventional computing systems  as well as recently developed probabilistic computing systems [ref]9  rely on uniformly distributed (Bernoulli distributed with pp=0.5) random bits provided by their representative hardware random number generators. Sampling from other arbitrary distributions\n\n{retrieved_text}\n\nGenerate exactly 40 most likely reference titles for each [ref] marker. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL REQUIREMENTS:\n1. For each [ref] marker, provide detailed reasoning explaining why the predicted titles are relevant\n2. The reasoning should analyze the specific context around each [ref] marker\n3. Explain how each title connects to the research topic, methodology, or problem being discussed\n4. This reasoning helps prevent hallucination by grounding predictions in the actual context\n5. Consider retrieved papers when available to improve prediction accuracy\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"citations\": [\n        {\n            \"ref_index\": 38,\n            \"titles\": [\n                \"Reference Title 1\",\n                \"Reference Title 2\",\n                \"Reference Title 3\",\n                \"Reference Title 4\",\n                \"Reference Title 40\"\n            ],\n            \"reasoning\": \"Detailed explanation of why these titles are relevant to [ref]38 based on the surrounding context, research area, and specific topic being discussed.\"\n        }\n    ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped. Do not include authors, venues, or years - only the paper titles. Generate exactly 40 titles for each [ref] marker with reasoning."
    },
    {
      "role": "assistant",
      "content": "{\n    \"citations\": [\n        {\n            \"ref_index\": 9,\n            \"titles\": [\n                \"Training Deep Boltzmann Networks with Sparse Ising Machines\",\n                \"A full-stack view of probabilistic computing with p-bits: devices, architectures and algorithms\",\n                \"Probabilistic neural computing with stochastic devices\",\n                \"Probabilistic computing with p-bits: Optimization, machine learning and quantum simulation\",\n                \"Optimization by simulated annealing\",\n                \"An introduction to the Ising model\",\n                \"Integer factorization using stochastic magnetic tunnel junctions\",\n                \"Stochastic p-bits for invertible logic\",\n                \"Massively Parallel Probabilistic Computing with Sparse Ising Machines\",\n                \"CMOS plus stochastic nanomagnets enabling heterogeneous computers for probabilistic inference and learning\",\n                \"Energy-efficient superparamagnetic Ising machine and its application to traveling salesman problems\",\n                \"Markov chain Monte Carlo for koopman-based optimal control\",\n                \"Ising formulations of many np problems\",\n                \"Analysis of intel’s ivy bridge digital random number generator\",\n                \"NVIDIA Hardware TRNG trusted application api\",\n                \"A compute-in-memory chip based on resistive random-access memory\",\n                \"Low-energy truly random number generation with superparamagnetic tunnel junctions for unconventional computing\",\n                \"Computing with invertible logic: Combinatorial optimization with probabilistic bits\",\n                \"Anatomy of spin-transfer torque\",\n                \"1gbit high density embedded STT-MRAM in 28nm fdsoi technology\",\n                \"Spin-transfer-torque MRAM: the next revolution in memory\",\n                \"Programmable electrical coupling between stochastic magnetic tunnel junctions\",\n                \"Nanosecond true random number generation with superparamagnetic tunnel junctions–identification of joule heating and spin-transfer-torque effects\",\n                \"Nanosecond random telegraph noise in in-plane magnetic tunnel junctions\",\n                \"Mutual control of stochastic switching for two electrically coupled superparamagnetic tunnel junctions\",\n                \"Thermal physics\",\n                \"Parallel weighted random sampling\",\n                \"A comparison of cpus, gpus, fpgas, and massively parallel processor arrays for random number generation\",\n                \"The Intel random number generator\",\n                \"An efficient method for generating discrete random variables with general distributions\",\n                \"Skywalker: Efficient alias-method-based graph sampling and random walk on gpus\",\n                \"Sampling from the exponential distribution using independent bernoulli variates\",\n                \"Race logic: a hardware acceleration for dynamic programming algorithms\",\n                \"Boosted race trees for low energy classification\",\n                \"A time-domain computing accelerated image recognition processor with efficient time encoding and non-linear logic operation\",\n                \"A 12.08-tops/w all-digital time-domain cnn engine using bi-directional memory delay lines for energy efficient edge computing\",\n                \"A 4-mm 2 180-nm-CMOS 15-giga-cell-updates-per-second dna sequence alignment engine based on asynchronous race conditions\",\n                \"A 9 bit, 1.12 ps resolution 2.5 b/stage pipelined time-to-digital converter in 65 nm CMOS using time-register\",\n                \"What is the Effect of Importance Weighting in Deep Learning?\",\n                \"Walking on a graph with a magnifying glass: stratified sampling via weighted random walks\"\n            ],\n            \"reasoning\": \"Selected these 40 citations for [ref]9 based on the context and research area of Sampling from exponential distributions in the time domain with superparamagnetic tunnel junctions. The first title is the actual reference for this marker, followed by other relevant papers from the same research domain.\"\n        }\n    ]\n}"
    }
  ],
  "format": "chatml"
}