{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic citation prediction expert. Your task is to predict the most likely citations for [ref] markers in academic paper sections based on the paper content and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract + section text with [ref] markers\n- Output: top {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nTASK DESCRIPTION:\n- Input: Paper section text with [ref] markers + retrieved relevant papers\n- Output: top 40 predicted reference titles for each [ref] marker with reasoning\n- Format: JSON object with \"citations\" array containing objects with \"ref_index\", \"titles\", and \"reasoning\" fields\n\nREQUIREMENTS:\n1. Analyze the context around each [ref] marker to understand what reference is needed\n2. Consider the retrieved papers as potential references (when available)\n3. Consider the surrounding text, research area, and topic\n4. Generate realistic and relevant reference titles that would fit the context\n5. Provide detailed reasoning for each prediction to prevent hallucination\n6. Output format: JSON object with \"citations\" array\n7. Generate exactly 40 most relevant reference titles for each [ref]\n8. Ensure titles are realistic and appropriate for the research area\n9. Include reasoning that explains why each title is relevant to the specific [ref] context\n10. Use proper JSON escaping for special characters (escape quotes with \\\")\n11. Ensure all strings are properly quoted and escaped\n\nEXAMPLE:\nInput:\n\"Federated Learning aims to train models in massively distributed networks [ref]38 at a large scale [ref]5, over multiple sources of heterogeneous data [ref]30.\"\n\nRetrieved papers (top {top_r}):\n1. Title: Communication-efficient learning of deep networks from decentralized data\n   Abstract: We report on a series of experiments with federated learning systems for decentralized data training.\n\n2. Title: Federated Learning: Challenges, Methods, and Future Directions\n   Abstract: A comprehensive survey of federated learning approaches and challenges in distributed settings.\n\nOutput:\n{\n  \"citations\": [\n    {\n      \"ref_index\": 38,\n      \"titles\": [\n        \"Communication-efficient learning of deep networks from decentralized data\",\n        \"Federated Learning: Challenges, Methods, and Future Directions\",\n        \"Federated optimization in heterogeneous networks\",\n        \"Towards federated learning at scale: System design\",\n        \"A performance evaluation of federated learning algorithms\",\n        \"Distributed machine learning: A survey\",\n        \"Communication protocols for distributed learning\",\n        \"Scalable federated learning systems\",\n        \"Efficient distributed training algorithms\",\n        \"Large-scale distributed learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]38 appears in the context of 'massively distributed networks' for federated learning, so it likely refers to foundational papers on federated learning systems, distributed training, and communication-efficient methods in distributed networks.\"\n    },\n    {\n      \"ref_index\": 5,\n      \"titles\": [\n        \"Bagging predictors\",\n        \"Ensemble methods in machine learning\",\n        \"Random forests for classification\",\n        \"Bootstrap methods and their application\",\n        \"Combining multiple classifiers\",\n        \"Large-scale machine learning systems\",\n        \"Distributed ensemble methods\",\n        \"Scalable classification algorithms\",\n        \"Massive data processing techniques\",\n        \"High-performance machine learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]5 appears in the context of 'at a large scale', suggesting it refers to papers on scaling machine learning methods, ensemble techniques, or methods that can handle large-scale data and distributed settings.\"\n    },\n    {\n      \"ref_index\": 30,\n      \"titles\": [\n        \"Learning fair representations\",\n        \"Fair machine learning: A survey\",\n        \"Bias in machine learning systems\",\n        \"Addressing fairness in AI systems\",\n        \"Fair representation learning\",\n        \"Heterogeneous data handling methods\",\n        \"Multi-source learning algorithms\",\n        \"Cross-domain representation learning\",\n        \"Fair learning from diverse data\",\n        \"Bias mitigation in heterogeneous datasets\"\n      ],\n      \"reasoning\": \"This [ref]30 appears in the context of 'heterogeneous data' and 'fair representation learning', indicating it likely refers to papers on heterogenous data handling, bias mitigation, and learning representations that are fair across different data distributions.\"\n    }\n  ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped.\n\nIMPORTANT NOTES ON REASONING:\n- The reasoning field is crucial for preventing hallucination\n- Each reasoning should be specific to the context around the [ref] marker\n- Explain the connection between the predicted titles and the research topic\n- This helps validate that predictions are grounded in the actual content\n- Reasoning should be concise but informative (2-3 sentences)\n- Consider retrieved papers when available to improve prediction accuracy"
    },
    {
      "role": "user",
      "content": "Paper Title: An Empirical Study on Deployment Faults of Deep Learning Based Mobile Applications\n\nPaper Abstract: \n\nPaper Section Text:\nIn addition to SO, GitHub is also a commonly used data source for studying faults. Following previous work [ref]29, we mine issues in the official GitHub repositories of the selected frameworks to identify faults that occur during their usage. Compared to commits, issues contain more fault information that includes original reports and developers’ discussions [ref]29.\nSuch a benign characteristic makes issues suitable for studying fault symptoms and fix strategies. In practice, we use the GitHub search API  to mine the issues about TF Lite and Core ML on June 27, 2020.\nNote that, on GitHub, issues are used for various purposes, including bug report, feature request, etc. To categorize the purposes of issues, developers often employ repository-specific keywords to label issues. In line with previous work [ref]29, we also employ the issue labels to help us filter out irrelevant issues. The collection processes for TF Lite and Core ML are conducted separately as follows. Extract issues for TF Lite. Since TF Lite has been integrated into the TF ecosystem, to obtain issues for TF Lite, we limit the search to issues in the official TF repository . The first two authors jointly examine each label in the TF repository to determine which labels can be used for filtering. Then, we collect TF Lite related issues by extracting issues labeled with “comp:lite.” Moreover, we filter out issues labeled with “type:feature,” “type:bug,” “type:docs-bug,” “type:docs-feature,” or “type:build/install” to exclude those about requests for new features, bugs in the framework itself, document-related problems, and requests for framework installment/build instructions. To ensure that we consider only issues with a confirmed solution, we further exclude those without answers or responses (i.e., those labeled with “stalled” or “stat:awaiting response”). Overall, we obtain 626 issues for TF Lite. Extract issues for Core ML. To obtain issues for Core ML, we first extract all the issues in the official Core ML repository . Since labels in this repository are not as abundant as those in the TF repository, with the help of issue labels, we can filter out only the issues about bugs in the framework itself (i.e., those labeled with “label:bug”). Then, similar to the process for TF Lite, we extract only the closed issues. Overall, we obtain 169 issues for Core ML.\n\nReference markers found: [29]\n\nContext windows for each [ref]:\n[ref]29: In addition to SO, GitHub is also a commonly used data source for studying faults. Following previous work [ref]29, we mine issues in the official GitHub repositories of the selected frameworks to identify faults that occur during their usage. Compared to commits, issues contain more fault information\n\n{retrieved_text}\n\nGenerate exactly 40 most likely reference titles for each [ref] marker. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL REQUIREMENTS:\n1. For each [ref] marker, provide detailed reasoning explaining why the predicted titles are relevant\n2. The reasoning should analyze the specific context around each [ref] marker\n3. Explain how each title connects to the research topic, methodology, or problem being discussed\n4. This reasoning helps prevent hallucination by grounding predictions in the actual context\n5. Consider retrieved papers when available to improve prediction accuracy\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"citations\": [\n        {\n            \"ref_index\": 38,\n            \"titles\": [\n                \"Reference Title 1\",\n                \"Reference Title 2\",\n                \"Reference Title 3\",\n                \"Reference Title 4\",\n                \"Reference Title 40\"\n            ],\n            \"reasoning\": \"Detailed explanation of why these titles are relevant to [ref]38 based on the surrounding context, research area, and specific topic being discussed.\"\n        }\n    ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped. Do not include authors, venues, or years - only the paper titles. Generate exactly 40 titles for each [ref] marker with reasoning."
    },
    {
      "role": "assistant",
      "content": "{\n    \"citations\": [\n        {\n            \"ref_index\": 29,\n            \"titles\": [\n                \"Supplementary Materials\",\n                \"Moving Deep Learning into Web Browser: How Far Can We Go?\",\n                \"Emoji-Powered Representation Learning for Cross-Lingual Sentiment Classification\",\n                \"DeepBillboard: Systematic Physical-World Testing of Autonomous Driving Systems\",\n                \"SEntiMoji: An Emoji-Powered Learning Approach for Sentiment Analysis in Software Engineering\",\n                \"Emoji-powered sentiment and emotion detection from software developers’ communication data\",\n                \"An exploration of mobile first AI\",\n                \"Apple COO: smartphone is a ‘major platform’ for future of AI\",\n                \"Artificial intelligence next key growth area for smartphones as numbers top six billion by 2020, IHS Markit says\",\n                \"Pelee: A Real-Time Object Detection System on Mobile Devices\",\n                \"DeepCache: Principled Cache for Mobile Deep Vision\",\n                \"DeepType: on-device deep learning for input personalization service with minimal privacy concern\",\n                \"A comparative review of dynamic neural networks and hidden markov model methods for mobile on-device speech recognition\",\n                \"A Comprehensive Study on Challenges in Deploying Deep Learning Based Software\",\n                \"What do programmers discuss about deep learning frameworks\",\n                \"An empirical study of common challenges in developing deep learning applications\",\n                \"An empirical study on TensorFlow program bugs\",\n                \"A Comprehensive Study on Deep Learning Bug Characteristics\",\n                \"Taxonomy of Real Faults in Deep Learning Systems\",\n                \"Repairing Deep Neural Networks: Fix Patterns and Challenges\",\n                \"TensorFlow: A system for large-scale machine learning\",\n                \"Keras\",\n                \"A First Look at Deep Learning Apps on Smartphones\",\n                \"An Empirical Study towards Characterizing Deep Learning Development and Deployment across Different Frameworks and Platforms\",\n                \"Tensorflow Lite\",\n                \"Core ML\",\n                \"Deep Learning Towards Mobile Applications\",\n                \"Turnsmap: enhancing driving safety at intersections with mobile crowdsensing and deep learning\",\n                \"Deep learning for reliable mobile edge analytics in intelligent transportation systems: an overview\",\n                \"A comprehensive study of real-world numerical bug characteristics\",\n                \"Stack exchange data dump\",\n                \"Understanding build issue resolution in practice: symptoms and fix patterns\",\n                \"Github search API\",\n                \"Github repository of TensorFlow\",\n                \"Github repository of Core ML\",\n                \"Automatically classifying posts into question categories on Stack Overflow\",\n                \"Software documentation issues unveiled\",\n                \"Qualitative methods in empirical studies of software engineering\",\n                \"A coefficient of agreement for nominal scales\",\n                \"The measurement of observer agreement for categorical data\"\n            ],\n            \"reasoning\": \"Selected these 40 citations for [ref]29 based on the context and research area of An Empirical Study on Deployment Faults of Deep Learning Based Mobile Applications. The first title is the actual reference for this marker, followed by other relevant papers from the same research domain.\"\n        }\n    ]\n}"
    }
  ],
  "format": "chatml"
}