{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic citation prediction expert. Your task is to predict the most likely citations for [ref] markers in academic paper sections based on the paper content and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract + section text with [ref] markers\n- Output: top {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nTASK DESCRIPTION:\n- Input: Paper section text with [ref] markers + retrieved relevant papers\n- Output: top 40 predicted reference titles for each [ref] marker with reasoning\n- Format: JSON object with \"citations\" array containing objects with \"ref_index\", \"titles\", and \"reasoning\" fields\n\nREQUIREMENTS:\n1. Analyze the context around each [ref] marker to understand what reference is needed\n2. Consider the retrieved papers as potential references (when available)\n3. Consider the surrounding text, research area, and topic\n4. Generate realistic and relevant reference titles that would fit the context\n5. Provide detailed reasoning for each prediction to prevent hallucination\n6. Output format: JSON object with \"citations\" array\n7. Generate exactly 40 most relevant reference titles for each [ref]\n8. Ensure titles are realistic and appropriate for the research area\n9. Include reasoning that explains why each title is relevant to the specific [ref] context\n10. Use proper JSON escaping for special characters (escape quotes with \\\")\n11. Ensure all strings are properly quoted and escaped\n\nEXAMPLE:\nInput:\n\"Federated Learning aims to train models in massively distributed networks [ref]38 at a large scale [ref]5, over multiple sources of heterogeneous data [ref]30.\"\n\nRetrieved papers (top {top_r}):\n1. Title: Communication-efficient learning of deep networks from decentralized data\n   Abstract: We report on a series of experiments with federated learning systems for decentralized data training.\n\n2. Title: Federated Learning: Challenges, Methods, and Future Directions\n   Abstract: A comprehensive survey of federated learning approaches and challenges in distributed settings.\n\nOutput:\n{\n  \"citations\": [\n    {\n      \"ref_index\": 38,\n      \"titles\": [\n        \"Communication-efficient learning of deep networks from decentralized data\",\n        \"Federated Learning: Challenges, Methods, and Future Directions\",\n        \"Federated optimization in heterogeneous networks\",\n        \"Towards federated learning at scale: System design\",\n        \"A performance evaluation of federated learning algorithms\",\n        \"Distributed machine learning: A survey\",\n        \"Communication protocols for distributed learning\",\n        \"Scalable federated learning systems\",\n        \"Efficient distributed training algorithms\",\n        \"Large-scale distributed learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]38 appears in the context of 'massively distributed networks' for federated learning, so it likely refers to foundational papers on federated learning systems, distributed training, and communication-efficient methods in distributed networks.\"\n    },\n    {\n      \"ref_index\": 5,\n      \"titles\": [\n        \"Bagging predictors\",\n        \"Ensemble methods in machine learning\",\n        \"Random forests for classification\",\n        \"Bootstrap methods and their application\",\n        \"Combining multiple classifiers\",\n        \"Large-scale machine learning systems\",\n        \"Distributed ensemble methods\",\n        \"Scalable classification algorithms\",\n        \"Massive data processing techniques\",\n        \"High-performance machine learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]5 appears in the context of 'at a large scale', suggesting it refers to papers on scaling machine learning methods, ensemble techniques, or methods that can handle large-scale data and distributed settings.\"\n    },\n    {\n      \"ref_index\": 30,\n      \"titles\": [\n        \"Learning fair representations\",\n        \"Fair machine learning: A survey\",\n        \"Bias in machine learning systems\",\n        \"Addressing fairness in AI systems\",\n        \"Fair representation learning\",\n        \"Heterogeneous data handling methods\",\n        \"Multi-source learning algorithms\",\n        \"Cross-domain representation learning\",\n        \"Fair learning from diverse data\",\n        \"Bias mitigation in heterogeneous datasets\"\n      ],\n      \"reasoning\": \"This [ref]30 appears in the context of 'heterogeneous data' and 'fair representation learning', indicating it likely refers to papers on heterogenous data handling, bias mitigation, and learning representations that are fair across different data distributions.\"\n    }\n  ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped.\n\nIMPORTANT NOTES ON REASONING:\n- The reasoning field is crucial for preventing hallucination\n- Each reasoning should be specific to the context around the [ref] marker\n- Explain the connection between the predicted titles and the research topic\n- This helps validate that predictions are grounded in the actual content\n- Reasoning should be concise but informative (2-3 sentences)\n- Consider retrieved papers when available to improve prediction accuracy"
    },
    {
      "role": "user",
      "content": "Paper Title: ImPress: Securing DRAM Against Data-Disturbance Errors via Implicit Row-Press Mitigation\n\nPaper Abstract: \n\nPaper Section Text:\nRelentless scaling over the last four decades has increased the capacity of DRAM chips from a few megabits to several tens of gigabits. As DRAM cells get smaller, they become prone to inter-cell interference, where the activity in one cell can disturb the data in another cell, leading to Data-Disturbance Errors (DDE). DDEs are not just a reliability concern but also a serious security threat, as attackers can exploit DDEs to compromise system security¬†[ref]38 [ref]9. Rowhammer: The most well-known DDE vulnerability of DRAM is Rowhammer (RH). Rowhammer occurs when an aggressor row is activated a large number of times, which causes bit-flips in the neighboring victim rows. Several studies[ref]38     [ref]9 2 have shown that Rowhammer can be exploited to compromise security. For example, an attacker can flip bits in page-tables to escalate privilege¬†[ref]38, flip bits in instruction opcode to bypass authentication¬†, or analyze flipped bits to infer the data of nearby pages¬†. The number of activations (ACTs) to the aggressor row required to induce a bit-flip is called the Rowhammer Threshold (TRH). The latest publicly available characterization data reports a TRH of 4.8K¬†7. Typical hardware-based defenses for Rowhammer rely on a tracking mechanism¬†6  0 6 8    to identify aggressors and refresh the victim rows¬†0. The tracking can be either at the Memory-Controller (MC) or within the DRAM (in-DRAM). Solutions for mitigating RH are designed for a specific TRH, which assumes DRAM will not incur bit-flips if the activation count is below the specified TRH.\nThese solutions can be broken if a vulnerability causes bit flips with fewer than TRH activations. Row-Press: A recent paper¬† discloses a new DDE vulnerability, Row-Press (RP), which occurs when a row is kept open for a long time. While the row is open, the cells of the neighboring rows slowly leak charge on the bit-lines. The cumulative charge loss increases with time. Therefore, a Row-Press pattern keeps the row open for as long as possible. The row may eventually close due to a row conflict or refresh operation. Such a Row-Press attack pattern is repeated until the charge on the neighboring cell is depleted enough to cause a flip. Figure¬†1 (a) compares the pattern of RH and RP. Impact of Row-Press: The impact of Row-Press depends on how long the row is kept open. Each round incurs an activation of the given row. Luo et al.¬† provide a detailed characterization of Row-Press and show that the number of activation rounds required to succeed is 18x to 160x lower compared to the number of activations required by a standalone RH attack. If the row is kept open for 30ms (note that this is not possible in DDR specifications, as they require that refresh be performed within a few tens of microseconds), then a single round of Row-Press attack may be enough to flip a bit. Figure¬†1 (b) captures the impact of Row-Press on TRH. RP reduces the number of activations required to cause a bit-flip to much lower than TRH (e.g. 18x compared to Rowhammer alone¬†). Thus, RP breaks RH-mitigation designed to tolerate a threshold of TRH, as such solutions inherently assume that no bit-flip occurs if the row gets fewer than TRH activations. Therefore, RP is a serious security vulnerability. Explicit Row-Press Management: \nLuo et al.¬† also proposed a design to tolerate Row-Press attacks, which forces the Memory Controller (MC) to limit the amount of time a row can be kept open to Maximum Row Open time (tMRO). For example, let T‚ÄãR‚ÄãHùëáùëÖùêªTRH denote the threshold for the standalone RH attack.\nThe number of activations, T‚àóT*, required for Row-Press to flip bits is characterized, with the maximum aggressor open time (tON) being limited to tMRO.\nThe proposal redesigns the RH-mitigation to cater to the lower threshold, T*, instead of TRH. We term this design Explicit Row-Press (ExPress) Mitigation. Figure¬†1(c) provides an overview of ExPress. Pitfalls of ExPress:  The key shortcoming of ExPress is that it reduces the tolerated threshold from TRH to T*. Additionally, ExPress suffers from the following three problems: (1) High performance overheads: Early row closure reduces the row buffer hits for workloads with good spatial locality. Furthermore, tuning the RH solution to a lower threshold (T*) increases the rate of mitigation and the associated penalty. (2) High storage overheads: If the tracking mechanism is based on counters, the number of tracking entries increases due to the reduction in threshold from TRH to T*. (3) Incompatibility with in-DRAM Trackers: ExPress is a memory controller-based solution, as it must limit tON to tMRO. Therefore, it is incompatible with in-DRAM Rowhammer schemes that are unaware of tMRO value, unless JEDEC specifications are revised to standardize tMRO. Our Goal: The goal of our paper is a Row-Press solution which (i) does not place any limit on row-open time, (ii) does not affect the TRH tolerated by a Rowhammer solution, (iii) incurs low performance and storage overheads, and (iv) is applicable to both memory controller-based and in-DRAM RH solutions (without requiring changes to JEDEC specifications). Our Insight:  Our key insight is that secure RH-mitigation schemes are designed to handle the case when an activation occurs at every tRC (row-cycle time). If a row is open for a particular time period (say, tRC), then we treat it as equivalent to causing an activation, and the row participates in the RH-mitigation. Doing so, converts the Row-Press attack into an equivalent Rowhammer attack and lets the RH solution transparently handle RP, without limiting the row open time. Our Solution:  We propose Implicit Row-Press (ImPress) Mitigation, as shown in Figure¬†1(d). To drive the design of ImPress, we first develop a Unified Charge-Leakage Model that combines the effect of both Rowhammer and Row-Press into a single metric. Both RP and RH damage the data in the cell by causing charge loss, albeit at a different rate. Our model normalizes the rate-of-damage caused by RP (per tRC) to the rate-of-damage caused by RH (per tRC). Our model estimates the combined damage caused by RH and RP, for any pattern. Our first design, Impress-N (Naive), operates on integer values of damage, to demonstrate the impact of imprecise damage estimation. Impress-N divides the time interval between refresh into windows of tRC. If an activation occurs in the given tRC window, that row participates in RH-tracking. If a row is open for the full tRC window, then that row is treated as equivalent to causing an activation, and also participates in RH-tracking. Impress-N limits the impact of unmitigated RP to at-most one tRC. As Impress-N can underestimate Row-Press activity, it can reduce the threshold (T*) by 1.35x-2x, which is identical to ExPress at the corresponding tON. While ImPress-N has similar impact on threshold, performance, and storage as ExPress, ImPress-N is compatible with in-DRAM tracking as it does not limit row open time. Our optimized design, Impress-P (Precise), operates on precise values of damage, including non-integer values. ImPress-P dynamically tracks the row-open time (tON) and converts it into an Equivalent Activation Count (EACT). We modify the RH trackers to operate on non-integer values. For example, a probabilistic solution that mitigates with probability p would now select the row with probability p√óE‚ÄãA‚ÄãC‚ÄãTùëùùê∏ùê¥ùê∂ùëáp\\times EACT. A counter-based tracker would increment the counter by E‚ÄãA‚ÄãC‚ÄãTùê∏ùê¥ùê∂ùëáEACT instead of 1. As Impress-P is precise, it maintains the same tolerated threshold (TRH) as a system that does not have RP mitigation. We analyze ImPress with both memory controller-based (Graphene and PARA) and in-DRAM (Mithril and MINT) trackers, and show that ImPress is effective at tolerating Row-Press for both categories. The storage required for ImPress-P is 1.25x, whereas it is 2x for both ExPress and ImPress-N. Contributions:  This paper makes the following contributions: We observe that Row-Press can be transparently handled, without limiting tON, by treating a row open for tRC as equivalent to an activation for RH schemes. We develop a Unified Charge-Leakage Model to capture the net effect of RP and RH for any given pattern into a single number and use this metric to guide our design. We propose ImPress-N, which treats a row open for the full time window of tRC as equivalent to an activation. ImPress-N limits the impact of unmitigated Row-Press to tRC, reducing Rowhammer threshold by 1.35x-2x. We propose ImPress-P, which tracks tON and uses the damage due to RP and RH precisely into RH solutions. ImPress-P does not reduce the tolerated RH threshold and tolerates RP with negligible overheads.\n\nReference markers found: [38]\n\nContext windows for each [ref]:\n[ref]38: in another cell, leading to Data-Disturbance Errors (DDE). DDEs are not just a reliability concern but also a serious security threat, as attackers can exploit DDEs to compromise system security¬†[ref]38 [ref]9. Rowhammer: The most well-known DDE vulnerability of DRAM is Rowhammer (RH). Rowhammer occurs when an aggressor row is activated a large number of times, which causes bit-flips in the\n\n{retrieved_text}\n\nGenerate exactly 40 most likely reference titles for each [ref] marker. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL REQUIREMENTS:\n1. For each [ref] marker, provide detailed reasoning explaining why the predicted titles are relevant\n2. The reasoning should analyze the specific context around each [ref] marker\n3. Explain how each title connects to the research topic, methodology, or problem being discussed\n4. This reasoning helps prevent hallucination by grounding predictions in the actual context\n5. Consider retrieved papers when available to improve prediction accuracy\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"citations\": [\n        {\n            \"ref_index\": 38,\n            \"titles\": [\n                \"Reference Title 1\",\n                \"Reference Title 2\",\n                \"Reference Title 3\",\n                \"Reference Title 4\",\n                \"Reference Title 40\"\n            ],\n            \"reasoning\": \"Detailed explanation of why these titles are relevant to [ref]38 based on the surrounding context, research area, and specific topic being discussed.\"\n        }\n    ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped. Do not include authors, venues, or years - only the paper titles. Generate exactly 40 titles for each [ref] marker with reasoning."
    },
    {
      "role": "assistant",
      "content": "{\n    \"citations\": [\n        {\n            \"ref_index\": 38,\n            \"titles\": [\n                \"Mitigating Wordline Crosstalk using Adaptive Trees of Counters\",\n                \"Anvil: Software-based protection against next-generation rowhammer attacks\",\n                \"A systematic study of ddr4 dram faults in the field\",\n                \"Panopticon: A complete in-dram rowhammer mitigation\",\n                \"Exploiting correcting codes: On the effectiveness of ecc memory against rowhammer attacks\",\n                \"Safeguard: Reducing the security risk from row-hammer via low-cost integrity protection\",\n                \"TRRespass: Exploiting the Many Sides of Target Row Refresh\",\n                \"The Championship Simulator: Architectural Simulation for Education and Competition\",\n                \"Another flip in the wall of rowhammer defenses\",\n                \"Rowhammer.js: A remote software-induced fault attack in javascript\",\n                \"Uncovering In-DRAM RowHammer Protection Mechanisms: A New Methodology, Custom RowHammer Patterns, and Implications\",\n                \"DSAC: Low-Cost Rowhammer Mitigation Using In-DRAM Stochastic and Approximate Counting Algorithm\",\n                \"Probabilistic Tracker Management Policies for Low-Cost and Scalable Rowhammer Mitigation\",\n                \"BLACKSMITH: Rowhammering in the Frequency Domain\",\n                \"Jesd79-5c ddr5 sdram standard\",\n                \"Csi: Rowhammer-cryptographic security and integrity against rowhammer\",\n                \"Architectural support for mitigating row hammering in dram memories\",\n                \"Revisiting RowHammer: An Experimental Analysis of Modern DRAM Devices and Mitigation Techniques\",\n                \"Mithril: Cooperative Row Hammer Protection on Commodity DRAM Leveraging Managed Refresh\",\n                \"How to kill the second bird with one ecc: The pursuit of row hammer resilient dram\",\n                \"A 1.1v 16gb ddr5 dram with probabilistic-aggressor tracking, refresh-management functionality, per-row hammer tracking, a multi-step precharge, and core-bias modulation for security and reliability enhancement\",\n                \"Flipping bits in memory without accessing them: An experimental study of dram disturbance errors\",\n                \"Rambleed: Reading bits in memory without accessing them\",\n                \"TWiCe: preventing row-hammering by exploiting time window counters\",\n                \"DRAMsim3: A Cycle-Accurate, Thermal-Capable DRAM Simulator\",\n                \"RowPress: Amplifying Read Disturbance in Modern DRAM Chips\",\n                \"Protrr: Principled yet optimal in-dram target row refresh\",\n                \"REGA: Scalable Rowhammer Mitigation with Refresh-Generating Activations\",\n                \"Memory Bandwidth and Machine Balance in Current High Performance Computers\",\n                \"ABACuS: All-Bank Activation Counters for Scalable and Low Overhead RowHammer Mitigation\",\n                \"Graphene: Strong yet lightweight row hammer protection\",\n                \"Mint: Mint: Securely mitigating rowhammer with a minimalist in-dram tracker\",\n                \"Hydra: enabling low-overhead mitigation of row-hammer at ultra-low thresholds via hybrid tracking\",\n                \"Flip feng shui: Hammering a needle in the software stack\",\n                \"Randomized row-swap: mitigating row hammer by breaking spatial correlation between aggressor and victim rows\",\n                \"Start: Scalable tracking for any rowhammer threshold\",\n                \"Pt-guard: Integrity-protected page tables to defend against breakthrough rowhammer attacks\",\n                \"Aqua: Scalable rowhammer mitigation by quarantining aggressor rows at runtime\",\n                \"Exploiting the DRAM rowhammer bug to gain kernel privileges\",\n                \"Making dram stronger against row hammering\"\n            ],\n            \"reasoning\": \"Selected these 40 citations for [ref]38 based on the context and research area of ImPress: Securing DRAM Against Data-Disturbance Errors via Implicit Row-Press Mitigation. The first title is the actual reference for this marker, followed by other relevant papers from the same research domain.\"\n        }\n    ]\n}"
    }
  ],
  "format": "chatml"
}