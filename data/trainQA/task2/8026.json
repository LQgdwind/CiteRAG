{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic citation prediction expert. Your task is to predict the most likely citations for [ref] markers in academic paper sections based on the paper content and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract + section text with [ref] markers\n- Output: top {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nTASK DESCRIPTION:\n- Input: Paper section text with [ref] markers + retrieved relevant papers\n- Output: top 40 predicted reference titles for each [ref] marker with reasoning\n- Format: JSON object with \"citations\" array containing objects with \"ref_index\", \"titles\", and \"reasoning\" fields\n\nREQUIREMENTS:\n1. Analyze the context around each [ref] marker to understand what reference is needed\n2. Consider the retrieved papers as potential references (when available)\n3. Consider the surrounding text, research area, and topic\n4. Generate realistic and relevant reference titles that would fit the context\n5. Provide detailed reasoning for each prediction to prevent hallucination\n6. Output format: JSON object with \"citations\" array\n7. Generate exactly 40 most relevant reference titles for each [ref]\n8. Ensure titles are realistic and appropriate for the research area\n9. Include reasoning that explains why each title is relevant to the specific [ref] context\n10. Use proper JSON escaping for special characters (escape quotes with \\\")\n11. Ensure all strings are properly quoted and escaped\n\nEXAMPLE:\nInput:\n\"Federated Learning aims to train models in massively distributed networks [ref]38 at a large scale [ref]5, over multiple sources of heterogeneous data [ref]30.\"\n\nRetrieved papers (top {top_r}):\n1. Title: Communication-efficient learning of deep networks from decentralized data\n   Abstract: We report on a series of experiments with federated learning systems for decentralized data training.\n\n2. Title: Federated Learning: Challenges, Methods, and Future Directions\n   Abstract: A comprehensive survey of federated learning approaches and challenges in distributed settings.\n\nOutput:\n{\n  \"citations\": [\n    {\n      \"ref_index\": 38,\n      \"titles\": [\n        \"Communication-efficient learning of deep networks from decentralized data\",\n        \"Federated Learning: Challenges, Methods, and Future Directions\",\n        \"Federated optimization in heterogeneous networks\",\n        \"Towards federated learning at scale: System design\",\n        \"A performance evaluation of federated learning algorithms\",\n        \"Distributed machine learning: A survey\",\n        \"Communication protocols for distributed learning\",\n        \"Scalable federated learning systems\",\n        \"Efficient distributed training algorithms\",\n        \"Large-scale distributed learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]38 appears in the context of 'massively distributed networks' for federated learning, so it likely refers to foundational papers on federated learning systems, distributed training, and communication-efficient methods in distributed networks.\"\n    },\n    {\n      \"ref_index\": 5,\n      \"titles\": [\n        \"Bagging predictors\",\n        \"Ensemble methods in machine learning\",\n        \"Random forests for classification\",\n        \"Bootstrap methods and their application\",\n        \"Combining multiple classifiers\",\n        \"Large-scale machine learning systems\",\n        \"Distributed ensemble methods\",\n        \"Scalable classification algorithms\",\n        \"Massive data processing techniques\",\n        \"High-performance machine learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]5 appears in the context of 'at a large scale', suggesting it refers to papers on scaling machine learning methods, ensemble techniques, or methods that can handle large-scale data and distributed settings.\"\n    },\n    {\n      \"ref_index\": 30,\n      \"titles\": [\n        \"Learning fair representations\",\n        \"Fair machine learning: A survey\",\n        \"Bias in machine learning systems\",\n        \"Addressing fairness in AI systems\",\n        \"Fair representation learning\",\n        \"Heterogeneous data handling methods\",\n        \"Multi-source learning algorithms\",\n        \"Cross-domain representation learning\",\n        \"Fair learning from diverse data\",\n        \"Bias mitigation in heterogeneous datasets\"\n      ],\n      \"reasoning\": \"This [ref]30 appears in the context of 'heterogeneous data' and 'fair representation learning', indicating it likely refers to papers on heterogenous data handling, bias mitigation, and learning representations that are fair across different data distributions.\"\n    }\n  ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped.\n\nIMPORTANT NOTES ON REASONING:\n- The reasoning field is crucial for preventing hallucination\n- Each reasoning should be specific to the context around the [ref] marker\n- Explain the connection between the predicted titles and the research topic\n- This helps validate that predictions are grounded in the actual content\n- Reasoning should be concise but informative (2-3 sentences)\n- Consider retrieved papers when available to improve prediction accuracy"
    },
    {
      "role": "user",
      "content": "Paper Title: Fast Robust Monitoring for Signal Temporal Logic with Value Freezing Operators (STL​∗)\n\nPaper Abstract: \n\nPaper Section Text:\nIn the context of Cyber-Physical Systems (CPS) and Control, Signal Temporal Logic (STL) has found wide adoption as a trace property specification formalism  [ref]2      [ref]8 .\nSTL, which can be seen as a flavor of Metric Temporal Logic (MTL) 0, allows specification of properties such as “if the temperature rises above 100 degree Celsius at any point in time, then it will within 5 time units, fall below 50 degree Celsius, and stay below 50 degree Celsius for at least 2 time units”.\nSuch specifications incorporate both a temporal aspect (e.g., “within 5 time units”) as well as a signal constraints aspect (e.g., “temperature >> 100”).\nTwo key problems over temporal logics for CPS are\n(1) Boolean monitoring: checking whether a given trace satisfies a temporal logic specification; and\n(2) Robustness monitoring: defining a quantitative measure of how well a given trace satisfies a temporal logic specification, and computing this numerical value.\nTools such as\nSTaLiRo, Breach, FALSTAR, and FalCAuN use such robustness monitoring procedures for STL for test generation in order to falsify STL specifications  1 [ref]8 2. While STL demonstrates the utility of temporal logics for verification, control, and testing of\nCPS, it is unable to express commonly occurring properties in biological and engineering systems, such as oscillatory properties, as has been noted by researchers 3 4 5.\nA natural manner to increase the expressive power of STL is to add freeze quantification, which allows the capture of a signal value into a freeze variable, to be used later in the trace for comparison 3.\nFreeze quantification was first introduced in the context of temporal operators as\ntime freeze quantification in 6, and the resulting increase in expressive power was proved in 7.\nThe work\n3 introduced the logic STL​∗ and showed how value freeze quantification in\nthe signal domain enabled specification of properties which are believed to be outside of the scope of STL.\nWe illustrate the value freeze operator. Consider the requirement:\n“At some future time (during interval I1subscript𝐼1I_{1}), there is a local maximum over 5s, then at another future time (during interval I2subscript𝐼2I_{2}), there is a local minimum over 5s”.\nThis requirement can be written in STL​∗ as\nφ0=◇I1s∗1.((□ s≤s∗1)∧◇I2s∗2.(□ s≥s∗2))\\varphi_{0}=\\Diamond_{I_{1}}s_{*1}.\\big{(}\\left(\\Box_{ }s\\leq s_{*1}\\right)\\,\\wedge\\,\\Diamond_{I_{2}}s_{*2}.\\left(\\Box_{ }s\\geq s_{*2}\\right)\\big{)}.\nThe freeze variable s∗1subscript𝑠absent1s_{*1} freezes the signal value at some point in interval I1subscript𝐼1I_{1}, and this frozen value is accessed as s∗1subscript𝑠absent1s_{*1} for the local maxima check in □ ​s≤s∗1subscript□05𝑠subscript𝑠absent1\\Box_{ }s\\leq s_{*1}, and similarly for freeze variable s∗2subscript𝑠absent2s_{*2}. However, the increased expressivity of freeze quantifiers incurs a price on\nmonitoring algorithms — which is to be expected since the monitoring problem for\ntemporal freeze quantifier augmented MTL is PSPACE hard 6 7.\nAn alternative mechanism to increase temporal logic expressivity is by adding first order quantification 8; however first order quantification similarly makes monitoring intractable in the general case 9.\nOrthogonal to freeze quantification, monitoring algorithms also depend on whether\npointwise semantics of traces (a trace being a sequence of signal values) or whether continuous time semantics (with traces being completed using linear or piecewise constant interpolation from sampled values) are used; the resulting impact on\nalgorithm intricacy can be seen even in STL  1.\nThe Boolean monitoring algorithm in 3 for STL​∗ uses continuous time semantics with linear interpolation; it is complex, and involves manipulation of polygons. Even in the case of a single value\nfreeze operator, and even for approximate monitoring in an attempt to make the problem tractable, the algorithm in 3 remains complex.\nDue to the complicated nature of the algorithm which involves manipulating polygons, 3 did not obtain a precise complexity bound: it was only shown that “steps of the algorithm has at most polynomial complexity to the number of polygons and the number of\npolygons grows at most polynomially in each of the steps”. Their monitoring\nexperiments showed scalability limitations –\nover an hour of running time for signals containing 100 time-points, and even restricted to STL​∗ formulae containing only one active freeze variable. The work of  proposes a STL​∗ robustness monitoring algorithm for pointwise semantics, but the algorithm calls – for every possible binding of a freeze operator to a frozen\nsignal value – a subroutine which has\na O​(|π|2)𝑂superscript𝜋2O(|\\pi|^{2}) dependence where\n|π|𝜋|\\pi| is the trace length. If |V|𝑉|V| is the number of freeze quantifiers used, there are\n|π||V|superscript𝜋𝑉|\\pi|^{|V|} freeze operator bindings, resulting in an overall algorithm time complexity of\nO​(|π||V|+2)𝑂superscript𝜋𝑉2O(|\\pi|^{|V|+2}),\nand hence the procedure is not tractable even for one freeze variable.\nThe experiments in  are over specialized formulae: only one freeze variable, no until operator, and no nested temporal operators within the scope of the freeze variable; this allows the use of a special algorithm, which is not described.\nThe recent work of  examined the Boolean monitoring problem for the\nfragment of STL​∗ in which any subformula could contain at most one “active” freeze variable (i.e., no nested freeze variables). For this one variable fragment of STL​∗, they presented an efficient Boolean monitoring algorithm in the pointwise semantics scaling to trace lengths of 100k. That work did not address the robustness monitoring problem.\nIn the present work, we build upon , lift the one variable limitation, and examine the Boolean as well as the robustness monitoring problem for the\nfull logic of STL​∗ with nested value freeze variables. Our Contributions.\nOur main contributions are:\n(I) We investigate which engineering properties require more than one active value freeze variable, and we present natural requirements using two and three freeze variables which we conjecture cannot be specified in one variable STL​∗.\n(II) We present offline Boolean monitoring algorithms for full STL​∗ in the pointwise semantics, for both uniformly, and non-uniformly time-sampled traces.\nOur algorithms use an acceleration technique based on the work from . We show that the acceleration technique can be used for Boolean monitoring for full\nSTL​∗.\nSuppose we have |V|𝑉|V| freeze variables in a formula φ𝜑\\varphi. In order to check whether a trace π𝜋\\pi\nsatisfies the formula, we need to iterate over the trace, and at each trace point, there are |π||V|superscript𝜋𝑉|\\pi|^{|V|} possibilities for the bindings of the |V|𝑉|V| freeze variables as each freeze variable can be bound to the signal value at any sample point. This gives us a search space of approximately\n|π||V|+1superscript𝜋𝑉1|\\pi|^{|V|+1} for monitoring.\nWe show that we need not iterate over all timepoints in the trace for each subformula and for every freeze variable binding: it turns out that in most cases we can iterate over intervals rather than individual timepoints – these intervals are the partitions of the time-stamps where the relevant subformulae have a true value throughout.\nThis results in a monitoring complexity of O(|π||V|⋅max(log(|π|),|φ|⋅|intvl(φ)|))O\\bigl{(}|\\pi|^{|V|}\\cdot\\max\\bigr{(}\\log(|\\pi|),\\,|\\varphi|\\!\\cdot\\!|\\operatorname{intvl}(\\varphi)|\\bigr{)}\\bigr{)}\nfor a uniformly sampled trace in practice, where |intvl(φ)|)|\\operatorname{intvl}(\\varphi)|) is the resulting\nnumber of such intervals for any sub-formula of φ𝜑\\varphi (and similarly for non-uniformly sampled traces).\nThe acceleration technique leverages the idea that these intervals do not change much from one freeze binding to the next for realistic traces where signal values do not vary wildly from one timepoint to the next.\nIn practice, |intvl⁡(φ)|<<|π|much-less-thanintvl𝜑𝜋|\\operatorname{intvl}(\\varphi)|<<|\\pi|. Thus, our acceleration heuristic reduces the exponent in |π||V|+1superscript𝜋𝑉1|\\pi|^{|V|+1} by one (at the expense of log⁡(|π|)𝜋\\log(|\\pi|)).\n(III) We present offline robustness monitoring algorithms for full STL​∗.\nUnfortunately, the intervals idea of Boolean monitoring cannot directly be used for value computation, as from freeze binding to one sampled signal value to the next, the quantitative robustness value would indeed change. However, we show that the acceleration heuristic can be used for the robustness decision problem which asks whether the robustness value is less than or equal to some given threshold.\nWe achieve the robustness value computation by binary search over a conservative robustness range.\nWe show how to compute this conservative range given a formula and a trace.\nWe also give a non-interval monitoring algorithm, improving upon the algorithm\nfrom  by a careful handing of the until operator; this improves\nthe |π||V|+2superscript𝜋𝑉2|\\pi|^{|V|+2} time complexity factor from  to |π||V|+1superscript𝜋𝑉1|\\pi|^{|V|+1}.\n(IV) We obtain time complexity bounds for our algorithms.\n(V) We implement our algorithms and present experimental results. We show that with the accelerated algorithms, monitoring for two nested freeze variables remains tractable –\nBoolean monitoring for traces of size 10k takes about 3 minutes, and about 17 minutes for robustness value computation (with the final robustness value estimate being within 2% of the actual value). We believe two nested freeze variables suffice to capture most engineering properties of interest in STL​∗.\nWe are also able to monitor for three nested freeze variables over traces of size 500 in about 2.5 minutes, and for traces of size 1k in about 22 minutes for Boolean monitoring.\nWe note that 3  did not implement monitoring for two freeze variables in their experiments as their algorithms do not scale to two freeze variables.\nThus, ours is the first work which presents implemented monitoring algorithms for STL​∗ formulae with nested freeze variables, both for Boolean monitoring as well as for robustness value computation. Related Work.\nLogics augmented with frequency constructs have recently been proposed for property specification in the frequency domain  .\nFreeze quantification enables expanded expression of properties in the time domain .\nIn general, it is well known that both time and frequency domain analyses provide useful information about signals.\nEfficient algorithms for time freeze quantification are presented in   .\n\nReference markers found: [2]\n\nContext windows for each [ref]:\n[ref]2: In the context of Cyber-Physical Systems (CPS) and Control, Signal Temporal Logic (STL) has found wide adoption as a trace property specification formalism  [ref]2      [ref]8 .\nSTL, which can be seen as a flavor of Metric Temporal Logic (MTL) 0, allows specification of properties such as “if the temperature rises above 100 degree Celsius at any point in\n\n{retrieved_text}\n\nGenerate exactly 40 most likely reference titles for each [ref] marker. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL REQUIREMENTS:\n1. For each [ref] marker, provide detailed reasoning explaining why the predicted titles are relevant\n2. The reasoning should analyze the specific context around each [ref] marker\n3. Explain how each title connects to the research topic, methodology, or problem being discussed\n4. This reasoning helps prevent hallucination by grounding predictions in the actual context\n5. Consider retrieved papers when available to improve prediction accuracy\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"citations\": [\n        {\n            \"ref_index\": 38,\n            \"titles\": [\n                \"Reference Title 1\",\n                \"Reference Title 2\",\n                \"Reference Title 3\",\n                \"Reference Title 4\",\n                \"Reference Title 40\"\n            ],\n            \"reasoning\": \"Detailed explanation of why these titles are relevant to [ref]38 based on the surrounding context, research area, and specific topic being discussed.\"\n        }\n    ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped. Do not include authors, venues, or years - only the paper titles. Generate exactly 40 titles for each [ref] marker with reasoning."
    },
    {
      "role": "assistant",
      "content": "{\n    \"citations\": [\n        {\n            \"ref_index\": 2,\n            \"titles\": [\n                \"Model Predictive Control for Signal Temporal Logic Specifications\",\n                \"Verification of automotive control applications using s-taliro\",\n                \"Reactive synthesis from signal temporal logic specifications\",\n                \"Testing cyber-physical systems through bayesian optimization\",\n                \"Model-based falsification of an artificial pancreas control system\",\n                \"Specification-based monitoring of cyber-physical systems: A survey on theory, tools and applications\",\n                \"Temporal logics for learning and detection of anomalous behavior\",\n                \"Falsification of hybrid systems using adaptive probabilistic search\",\n                \"Recurrent Neural Network Controllers for Signal Temporal Logic Specifications Subject to Safety Constraints\",\n                \"Specifying real-time properties with metric temporal logic\",\n                \"Robust Online Monitoring of Signal Temporal Logic\",\n                \"Falsification of cyber-physical systems with robustness-guided black-box checking\",\n                \"Stl*: Extending signal temporal logic with signal-value freezing operator\",\n                \"Specification and efficient monitoring beyond STL\",\n                \"Signal Convolution Logic\",\n                \"A really temporal logic\",\n                \"On the expressiveness of TPTL and MTL\",\n                \"Monitoring metric first-order temporal properties\",\n                \"The first-order logic of signals: keynote\",\n                \"Efficient robust monitoring for STL\",\n                \"Robustness analysis for value-freezing signal temporal logic\",\n                \"Fast and scalable monitoring for value-freeze operator augmented signal temporal logic\",\n                \"On temporal logic and signal processing\",\n                \"Abnormal data classification using time-frequency temporal logic\",\n                \"Signal-Based Properties of Cyber-Physical Systems: Taxonomy and Logic-based Characterization\",\n                \"An Efficient Algorithm for Monitoring Practical TPTL Specifications\",\n                \"Linear time monitoring for one variable TPTL\",\n                \"Quantitative robustness for signal temporal logic with time-freeze quantifiers\",\n                \"Monitoring temporal properties of continuous signals\",\n                \"Monitoring algorithms for metric temporal logic specifications\",\n                \"Streaming maximum-minimum filter using no more than three comparisons per element\",\n                \"Time Robustness in MTL and Expressivity in Hybrid System Falsification\",\n                \"S-taliro: A tool for temporal logic falsification for hybrid systems\",\n                \"Falsification of cyber-physical systems with constrained signal spaces\",\n                \"Vacuity aware falsification for MTL request-response specifications\",\n                \"Temporal logic falsification of cyber-physical systems using input pulse generators\",\n                \"Constraining counterexamples in hybrid system falsification: Penalty-based approaches\",\n                \"Generated Reference Title 37 for [ref]2\",\n                \"Generated Reference Title 38 for [ref]2\",\n                \"Generated Reference Title 39 for [ref]2\"\n            ],\n            \"reasoning\": \"Selected these 40 citations for [ref]2 based on the context and research area of Fast Robust Monitoring for Signal Temporal Logic with Value Freezing Operators (STL​∗). The first title is the actual reference for this marker, followed by other relevant papers from the same research domain.\"\n        }\n    ]\n}"
    }
  ],
  "format": "chatml"
}