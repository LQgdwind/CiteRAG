{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic citation prediction expert. Your task is to predict the most likely citations for [ref] markers in academic paper sections based on the paper content and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract + section text with [ref] markers\n- Output: top {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nTASK DESCRIPTION:\n- Input: Paper section text with [ref] markers + retrieved relevant papers\n- Output: top 40 predicted reference titles for each [ref] marker with reasoning\n- Format: JSON object with \"citations\" array containing objects with \"ref_index\", \"titles\", and \"reasoning\" fields\n\nREQUIREMENTS:\n1. Analyze the context around each [ref] marker to understand what reference is needed\n2. Consider the retrieved papers as potential references (when available)\n3. Consider the surrounding text, research area, and topic\n4. Generate realistic and relevant reference titles that would fit the context\n5. Provide detailed reasoning for each prediction to prevent hallucination\n6. Output format: JSON object with \"citations\" array\n7. Generate exactly 40 most relevant reference titles for each [ref]\n8. Ensure titles are realistic and appropriate for the research area\n9. Include reasoning that explains why each title is relevant to the specific [ref] context\n10. Use proper JSON escaping for special characters (escape quotes with \\\")\n11. Ensure all strings are properly quoted and escaped\n\nEXAMPLE:\nInput:\n\"Federated Learning aims to train models in massively distributed networks [ref]38 at a large scale [ref]5, over multiple sources of heterogeneous data [ref]30.\"\n\nRetrieved papers (top {top_r}):\n1. Title: Communication-efficient learning of deep networks from decentralized data\n   Abstract: We report on a series of experiments with federated learning systems for decentralized data training.\n\n2. Title: Federated Learning: Challenges, Methods, and Future Directions\n   Abstract: A comprehensive survey of federated learning approaches and challenges in distributed settings.\n\nOutput:\n{\n  \"citations\": [\n    {\n      \"ref_index\": 38,\n      \"titles\": [\n        \"Communication-efficient learning of deep networks from decentralized data\",\n        \"Federated Learning: Challenges, Methods, and Future Directions\",\n        \"Federated optimization in heterogeneous networks\",\n        \"Towards federated learning at scale: System design\",\n        \"A performance evaluation of federated learning algorithms\",\n        \"Distributed machine learning: A survey\",\n        \"Communication protocols for distributed learning\",\n        \"Scalable federated learning systems\",\n        \"Efficient distributed training algorithms\",\n        \"Large-scale distributed learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]38 appears in the context of 'massively distributed networks' for federated learning, so it likely refers to foundational papers on federated learning systems, distributed training, and communication-efficient methods in distributed networks.\"\n    },\n    {\n      \"ref_index\": 5,\n      \"titles\": [\n        \"Bagging predictors\",\n        \"Ensemble methods in machine learning\",\n        \"Random forests for classification\",\n        \"Bootstrap methods and their application\",\n        \"Combining multiple classifiers\",\n        \"Large-scale machine learning systems\",\n        \"Distributed ensemble methods\",\n        \"Scalable classification algorithms\",\n        \"Massive data processing techniques\",\n        \"High-performance machine learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]5 appears in the context of 'at a large scale', suggesting it refers to papers on scaling machine learning methods, ensemble techniques, or methods that can handle large-scale data and distributed settings.\"\n    },\n    {\n      \"ref_index\": 30,\n      \"titles\": [\n        \"Learning fair representations\",\n        \"Fair machine learning: A survey\",\n        \"Bias in machine learning systems\",\n        \"Addressing fairness in AI systems\",\n        \"Fair representation learning\",\n        \"Heterogeneous data handling methods\",\n        \"Multi-source learning algorithms\",\n        \"Cross-domain representation learning\",\n        \"Fair learning from diverse data\",\n        \"Bias mitigation in heterogeneous datasets\"\n      ],\n      \"reasoning\": \"This [ref]30 appears in the context of 'heterogeneous data' and 'fair representation learning', indicating it likely refers to papers on heterogenous data handling, bias mitigation, and learning representations that are fair across different data distributions.\"\n    }\n  ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped.\n\nIMPORTANT NOTES ON REASONING:\n- The reasoning field is crucial for preventing hallucination\n- Each reasoning should be specific to the context around the [ref] marker\n- Explain the connection between the predicted titles and the research topic\n- This helps validate that predictions are grounded in the actual content\n- Reasoning should be concise but informative (2-3 sentences)\n- Consider retrieved papers when available to improve prediction accuracy"
    },
    {
      "role": "user",
      "content": "Paper Title: Going Beyond Linear Mode Connectivity: The Layerwise Linear Feature Connectivity\n\nPaper Abstract: \n\nPaper Section Text:\nNotation and Setup. Denote [k]={1,2,…,k}delimited-[]𝑘12…𝑘[k]=\\{1,2,\\ldots,k\\}.\nWe consider a classification dataset 𝒟={(𝒙i,yi)}i=1n𝒟superscriptsubscriptsubscript𝒙𝑖subscript𝑦𝑖𝑖1𝑛\\mathcal{D}=\\{({\\boldsymbol{x}}_{i},y_{i})\\}_{i=1}^{n}, where 𝒙i∈ℝd0subscript𝒙𝑖superscriptℝsubscript𝑑0{\\boldsymbol{x}}_{i}\\in\\mathbb{R}^{d_{0}} represents the input and yi∈[c]subscript𝑦𝑖delimited-[]𝑐y_{i}\\in[c] represents the label of the i𝑖i-th data point. Here, n𝑛n is the dataset size, d0subscript𝑑0{d_{0}} is the input dimension and c𝑐c is the number of classes. Moreover, we use 𝑿∈ℝd0×n𝑿superscriptℝsubscript𝑑0𝑛{\\boldsymbol{X}}\\in\\mathbb{R}^{d_{0}\\times n} to stack all the input data into a matrix. We consider an L𝐿L-layer neural network of the form f​(𝜽;𝒙)𝑓𝜽𝒙f(\\boldsymbol{\\theta};\\boldsymbol{x}), where 𝜽𝜽{\\boldsymbol{\\theta}} represents the model parameters, 𝒙𝒙\\boldsymbol{x} is the input, and f​(𝜽;𝒙)∈ℝc𝑓𝜽𝒙superscriptℝ𝑐f(\\boldsymbol{\\theta};\\boldsymbol{x})\\in\\mathbb{R}^{c}. Let the ℓℓ\\ell-th layer feature (post-activation) of the network be f(ℓ)​(𝜽;𝒙)∈ℝdℓsuperscript𝑓ℓ𝜽𝒙superscriptℝsubscript𝑑ℓf^{(\\ell)}(\\boldsymbol{\\theta};\\boldsymbol{x})\\in\\mathbb{R}^{d_{\\ell}}, where dℓsubscript𝑑ℓd_{\\ell} is the dimension of the ℓℓ\\ell-th layer (0≤ℓ≤L0ℓ𝐿0\\leq\\ell\\leq L) and dL=csubscript𝑑𝐿𝑐d_{L}=c. Note that f(0)​(𝜽;𝒙)=𝒙superscript𝑓0𝜽𝒙𝒙f^{(0)}(\\boldsymbol{\\theta};\\boldsymbol{x})=\\boldsymbol{x} and f(L)​(𝜽;𝒙)=f​(𝜽;𝒙)superscript𝑓𝐿𝜽𝒙𝑓𝜽𝒙f^{(L)}(\\boldsymbol{\\theta};\\boldsymbol{x})=f(\\boldsymbol{\\theta};\\boldsymbol{x}).\nFor an input data matrix 𝑿𝑿\\boldsymbol{X}, we also use f​(𝜽;𝑿)∈ℝc×n𝑓𝜽𝑿superscriptℝ𝑐𝑛f(\\boldsymbol{\\theta};\\boldsymbol{X})\\in\\mathbb{R}^{c\\times n} and f(ℓ)​(𝜽;𝑿)∈ℝdℓ×nsuperscript𝑓ℓ𝜽𝑿superscriptℝsubscript𝑑ℓ𝑛f^{(\\ell)}(\\boldsymbol{\\theta};\\boldsymbol{X})\\in\\mathbb{R}^{d_{\\ell}\\times n} to denote the collection of the network outputs and features on all the datapoints, respectively.\nWhen 𝑿𝑿\\boldsymbol{X} is clear from the context, we simply write f(ℓ)​(𝜽)=f(ℓ)​(𝜽;𝑿)superscript𝑓ℓ𝜽superscript𝑓ℓ𝜽𝑿f^{(\\ell)}(\\boldsymbol{\\theta})=f^{(\\ell)}(\\boldsymbol{\\theta};\\boldsymbol{X}) and f​(𝜽)=f​(𝜽;𝑿)𝑓𝜽𝑓𝜽𝑿f(\\boldsymbol{\\theta})=f(\\boldsymbol{\\theta};\\boldsymbol{X}).\nUnless otherwise specified, in this paper we consider models trained on a training set, and then all the investigations are evaluated on a test set. We use Err𝒟⁡(𝜽)subscriptErr𝒟𝜽\\operatorname{Err}_{\\mathcal{D}}(\\boldsymbol{\\theta}) to denote the classification error of the network f​(𝜽;⋅)𝑓𝜽⋅f(\\boldsymbol{\\theta};\\cdot) on the dataset 𝒟𝒟\\mathcal{D}. Linear Mode Connectivity (LMC). We recall the notion of LMC in Definition 1. Given a test dataset 𝒟𝒟\\mathcal{D} and two modes111Following the terminology in literature, a mode refers to an optimal solution obtained at the end of training. 𝛉Asubscript𝛉𝐴{\\boldsymbol{\\theta}}_{A} and 𝛉Bsubscript𝛉𝐵{\\boldsymbol{\\theta}}_{B} such that Err𝒟⁡(𝛉A)≈Err𝒟⁡(𝛉B)subscriptErr𝒟subscript𝛉𝐴subscriptErr𝒟subscript𝛉𝐵\\operatorname{Err}_{\\mathcal{D}}({\\boldsymbol{\\theta}}_{A})\\approx\\operatorname{Err}_{\\mathcal{D}}({\\boldsymbol{\\theta}}_{B}), we say 𝛉Asubscript𝛉𝐴{\\boldsymbol{\\theta}}_{A} and 𝛉Bsubscript𝛉𝐵{\\boldsymbol{\\theta}}_{B} are linearly connected if they satisfy As Definition 1 shows, 𝜽Asubscript𝜽𝐴{\\boldsymbol{\\theta}}_{A} and 𝜽Bsubscript𝜽𝐵{\\boldsymbol{\\theta}}_{B} satisfy LMC if the error metric on the linear path connecting their weights is nearly constant.\nThere are two known methods to obtain linearly connected modes, the spawning method [ref]9 [ref]7 and the permutation method [ref]6 . Spawning Method.\nWe start from random initialization 𝜽(0)superscript𝜽0{\\boldsymbol{\\theta}}^{(0)} and train the model for k𝑘k steps to obtain 𝜽(k)superscript𝜽𝑘{\\boldsymbol{\\theta}}^{(k)}. Then we create two copies of 𝜽(k)superscript𝜽𝑘{\\boldsymbol{\\theta}}^{(k)} and continue training the two models separately using independent SGD randomnesses (mini-batch order and data augmentations) until convergence.\nBy selecting a proper value of k𝑘k (usually a small fraction of the total training steps), we can obtain two linearly connected modes. Permutation Method.\nDue to permutation symmetry, it is possible to permute the weights in a neural network appropriately while not changing the function being computed. Given two modes 𝜽Asubscript𝜽𝐴{\\boldsymbol{\\theta}}_{A} and 𝜽Bsubscript𝜽𝐵{\\boldsymbol{\\theta}}_{B} which are independently trained (and not linearly connected), the permutation method aims to find a permutation π𝜋\\pi\nsuch that the permuted mode 𝜽B′=π​(𝜽B)superscriptsubscript𝜽𝐵′𝜋subscript𝜽𝐵{\\boldsymbol{\\theta}}_{B}^{\\prime}=\\pi({\\boldsymbol{\\theta}}_{B}) is functionally equivalent to 𝜽Bsubscript𝜽𝐵{\\boldsymbol{\\theta}}_{B} and that 𝜽B′superscriptsubscript𝜽𝐵′{\\boldsymbol{\\theta}}_{B}^{\\prime} and 𝜽Asubscript𝜽𝐴{\\boldsymbol{\\theta}}_{A} are linearly connected. In other words, even if two modes are not linearly connected in the parameter space, they might still be linearly connected if permutation invariance is taken into account. Among existing permutation methods, Git Re-Basin  is a representative one, which successfully achieved linear connectivity between two independently trained ResNet models on CIFAR-10.\nSpecifically, a permutation π𝜋\\pi that maintains functionally equivalent network can be formulated by a set of per-layer permutations π={𝑷(ℓ)}ℓ=1L−1𝜋superscriptsubscriptsuperscript𝑷ℓℓ1𝐿1\\pi=\\{\\boldsymbol{P}^{(\\ell)}\\}_{\\ell=1}^{L-1} where 𝑷(ℓ)∈ℝdℓ×dℓsuperscript𝑷ℓsuperscriptℝsubscript𝑑ℓsubscript𝑑ℓ\\boldsymbol{P}^{(\\ell)}\\in\\mathbb{R}^{d_{\\ell}\\times d_{\\ell}} is a permutation matrix.\nAinsworth et al.  proposed two distinct matching objectives for aligning the neurons of independently trained models via permutation: weight matching and activation matching: Here, 𝑯A(ℓ)=f(ℓ)​(𝜽A;𝑿)superscriptsubscript𝑯𝐴ℓsuperscript𝑓ℓsubscript𝜽𝐴𝑿\\boldsymbol{H}_{A}^{(\\ell)}=f^{(\\ell)}(\\boldsymbol{\\theta}_{A};\\boldsymbol{X}) is the ℓℓ\\ell-th layer feature matrix, and 𝑯B(ℓ)superscriptsubscript𝑯𝐵ℓ\\boldsymbol{H}_{B}^{(\\ell)} is defined similarly. Main Experimental Setup. In this paper, we use both the spawning method and the permutation method to obtain linearly connected modes. Following Frankle et al. [ref]9, Ainsworth et al. , we perform our experiments on commonly used image classification datasets MNIST 8, CIFAR-10 5, and Tiny-ImageNet7, and with the standard network architectures ResNet-20/50 2, VGG-16 , and MLP. We follow the same training procedures and hyper-parameters as in Frankle et al. [ref]9, Ainsworth et al. .\nDue to space limit, we defer some of the experimental results to the appendix. Notice that  increased the width of ResNet by 32 times in order to achieve zero barrier, and we also followed this setting in the experiments of the permutation method.\nThe detailed settings and hyper-parameters are also described in Section B.1.\n\nReference markers found: [9]\n\nContext windows for each [ref]:\n[ref]9: satisfy LMC if the error metric on the linear path connecting their weights is nearly constant.\nThere are two known methods to obtain linearly connected modes, the spawning method [ref]9 [ref]7 and the permutation method [ref]6 . Spawning Method.\nWe start from random initialization 𝜽(0)superscript𝜽0{\\boldsymbol{\\theta}}^{(0)} and train the model for k𝑘k steps to obtain\n\n{retrieved_text}\n\nGenerate exactly 40 most likely reference titles for each [ref] marker. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL REQUIREMENTS:\n1. For each [ref] marker, provide detailed reasoning explaining why the predicted titles are relevant\n2. The reasoning should analyze the specific context around each [ref] marker\n3. Explain how each title connects to the research topic, methodology, or problem being discussed\n4. This reasoning helps prevent hallucination by grounding predictions in the actual context\n5. Consider retrieved papers when available to improve prediction accuracy\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"citations\": [\n        {\n            \"ref_index\": 38,\n            \"titles\": [\n                \"Reference Title 1\",\n                \"Reference Title 2\",\n                \"Reference Title 3\",\n                \"Reference Title 4\",\n                \"Reference Title 40\"\n            ],\n            \"reasoning\": \"Detailed explanation of why these titles are relevant to [ref]38 based on the surrounding context, research area, and specific topic being discussed.\"\n        }\n    ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped. Do not include authors, venues, or years - only the paper titles. Generate exactly 40 titles for each [ref] marker with reasoning."
    },
    {
      "role": "assistant",
      "content": "{\n    \"citations\": [\n        {\n            \"ref_index\": 9,\n            \"titles\": [\n                \"Topology and Geometry of Half-Rectified Network Optimization\",\n                \"Git Re-Basin: Merging Models Modulo Permutation Symmetries\",\n                \"A method for finding similarity between multi-layer perceptrons by forward bipartite alignment\",\n                \"Revisiting Model Stitching to Compare Neural Representations\",\n                \"Benign Overfitting in Two-layer Convolutional Neural Networks\",\n                \"Essentially No Barriers in Neural Network Energy Landscape\",\n                \"The Role of Permutation Invariance in Linear Mode Connectivity of Neural Networks\",\n                \"Deep learning versus kernel learning: an empirical study of loss landscape geometry and the time evolution of the Neural Tangent Kernel\",\n                \"The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks\",\n                \"Linear Mode Connectivity and the Lottery Ticket Hypothesis\",\n                \"Loss Surfaces, Mode Connectivity, and Fast Ensembling of DNNs\",\n                \"Deep Residual Learning for Image Recognition\",\n                \"On the algebraic structure of feedforward network weight spaces\",\n                \"Assignment problems and the location of economic activities\",\n                \"Learning multiple layers of features from tiny images\",\n                \"Explaining landscape connectivity of low-cost solutions for multilayer nets\",\n                \"Tiny imagenet visual recognition challenge\",\n                \"Gradient-based learning applied to document recognition\",\n                \"Understanding image representations by measuring their equivariance and equivalence\",\n                \"Convergent Learning: Do different neural networks learn the same representations?\",\n                \"Understanding the Loss Surface of Neural Networks for Binary Classification\",\n                \"Deep neural network fusion via graph matching with applications to model ensemble and federated learning\",\n                \"Mechanistic Mode Connectivity\",\n                \"Uniform convergence may be unable to explain generalization in deep learning\",\n                \"On Connected Sublevel Sets in Deep Learning\",\n                \"On the loss landscape of a class of deep neural networks with no bad local valleys\",\n                \"Learning internal representations by error propagation\",\n                \"Scaling up exact neural network compression by reLU stability\",\n                \"Very Deep Convolutional Networks for Large-Scale Image Recognition\",\n                \"Model Fusion via Optimal Transport\",\n                \"Optimizing Mode Connectivity via Neuron Alignment\",\n                \"Spurious valleys in one-hidden-layer neural network optimization landscapes\",\n                \"Federated learning with matched averaging\",\n                \"Neural Graph Matching Network: Learning Lawler's Quadratic Assignment Problem with Extension to Hypergraph and Multiple-graph Matching\",\n                \"Model soups: averaging weights of multiple fine-tuned models improves accuracy without increasing inference time\",\n                \"Benign Overfitting and Grokking in ReLU Networks for XOR Cluster Data\",\n                \"Generalizing graph matching beyond quadratic assignment model\",\n                \"On convexity and linear mode connectivity in neural networks\",\n                \"Benign Overfitting in Deep Neural Networks under Lazy Training\",\n                \"Generated Reference Title 39 for [ref]9\"\n            ],\n            \"reasoning\": \"Selected these 40 citations for [ref]9 based on the context and research area of Going Beyond Linear Mode Connectivity: The Layerwise Linear Feature Connectivity. The first title is the actual reference for this marker, followed by other relevant papers from the same research domain.\"\n        }\n    ]\n}"
    }
  ],
  "format": "chatml"
}