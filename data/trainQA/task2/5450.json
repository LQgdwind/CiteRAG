{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic citation prediction expert. Your task is to predict the most likely citations for [ref] markers in academic paper sections based on the paper content and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract + section text with [ref] markers\n- Output: top {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nTASK DESCRIPTION:\n- Input: Paper section text with [ref] markers + retrieved relevant papers\n- Output: top 40 predicted reference titles for each [ref] marker with reasoning\n- Format: JSON object with \"citations\" array containing objects with \"ref_index\", \"titles\", and \"reasoning\" fields\n\nREQUIREMENTS:\n1. Analyze the context around each [ref] marker to understand what reference is needed\n2. Consider the retrieved papers as potential references (when available)\n3. Consider the surrounding text, research area, and topic\n4. Generate realistic and relevant reference titles that would fit the context\n5. Provide detailed reasoning for each prediction to prevent hallucination\n6. Output format: JSON object with \"citations\" array\n7. Generate exactly 40 most relevant reference titles for each [ref]\n8. Ensure titles are realistic and appropriate for the research area\n9. Include reasoning that explains why each title is relevant to the specific [ref] context\n10. Use proper JSON escaping for special characters (escape quotes with \\\")\n11. Ensure all strings are properly quoted and escaped\n\nEXAMPLE:\nInput:\n\"Federated Learning aims to train models in massively distributed networks [ref]38 at a large scale [ref]5, over multiple sources of heterogeneous data [ref]30.\"\n\nRetrieved papers (top {top_r}):\n1. Title: Communication-efficient learning of deep networks from decentralized data\n   Abstract: We report on a series of experiments with federated learning systems for decentralized data training.\n\n2. Title: Federated Learning: Challenges, Methods, and Future Directions\n   Abstract: A comprehensive survey of federated learning approaches and challenges in distributed settings.\n\nOutput:\n{\n  \"citations\": [\n    {\n      \"ref_index\": 38,\n      \"titles\": [\n        \"Communication-efficient learning of deep networks from decentralized data\",\n        \"Federated Learning: Challenges, Methods, and Future Directions\",\n        \"Federated optimization in heterogeneous networks\",\n        \"Towards federated learning at scale: System design\",\n        \"A performance evaluation of federated learning algorithms\",\n        \"Distributed machine learning: A survey\",\n        \"Communication protocols for distributed learning\",\n        \"Scalable federated learning systems\",\n        \"Efficient distributed training algorithms\",\n        \"Large-scale distributed learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]38 appears in the context of 'massively distributed networks' for federated learning, so it likely refers to foundational papers on federated learning systems, distributed training, and communication-efficient methods in distributed networks.\"\n    },\n    {\n      \"ref_index\": 5,\n      \"titles\": [\n        \"Bagging predictors\",\n        \"Ensemble methods in machine learning\",\n        \"Random forests for classification\",\n        \"Bootstrap methods and their application\",\n        \"Combining multiple classifiers\",\n        \"Large-scale machine learning systems\",\n        \"Distributed ensemble methods\",\n        \"Scalable classification algorithms\",\n        \"Massive data processing techniques\",\n        \"High-performance machine learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]5 appears in the context of 'at a large scale', suggesting it refers to papers on scaling machine learning methods, ensemble techniques, or methods that can handle large-scale data and distributed settings.\"\n    },\n    {\n      \"ref_index\": 30,\n      \"titles\": [\n        \"Learning fair representations\",\n        \"Fair machine learning: A survey\",\n        \"Bias in machine learning systems\",\n        \"Addressing fairness in AI systems\",\n        \"Fair representation learning\",\n        \"Heterogeneous data handling methods\",\n        \"Multi-source learning algorithms\",\n        \"Cross-domain representation learning\",\n        \"Fair learning from diverse data\",\n        \"Bias mitigation in heterogeneous datasets\"\n      ],\n      \"reasoning\": \"This [ref]30 appears in the context of 'heterogeneous data' and 'fair representation learning', indicating it likely refers to papers on heterogenous data handling, bias mitigation, and learning representations that are fair across different data distributions.\"\n    }\n  ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped.\n\nIMPORTANT NOTES ON REASONING:\n- The reasoning field is crucial for preventing hallucination\n- Each reasoning should be specific to the context around the [ref] marker\n- Explain the connection between the predicted titles and the research topic\n- This helps validate that predictions are grounded in the actual content\n- Reasoning should be concise but informative (2-3 sentences)\n- Consider retrieved papers when available to improve prediction accuracy"
    },
    {
      "role": "user",
      "content": "Paper Title: Hierarchically Composing Level Generators for the Creation of Complex Structures\n\nPaper Abstract: \n\nPaper Section Text:\nMuch work has also been done on combining different PCG methods to generate more complex pieces of content, or even entire games . For instance, Togelius et al.  combine an Answer Set Programming (ASP)-based approach  with a genetic algorithm that searches over variables for the ASP.\nLiapis et al.  advocate for game design orchestration, where different content generators are combined to generate full, coherent, games. One benefit of this compositional approach is allowing algorithms to specialise in (and thus excel at generating) specific pieces of content. There are still numerous open problems in this field, however, such as how to best coordinate automated generators and human designers. Hierarchy can also be used to improve the generation speed of PCG methods. For example, Smith and Bryson  find that using ASPs to generate large levels is infeasibly slow but that using hierarchy can lead to much faster generation. They first generate the high-level structure of a level and subsequently fill in the details within this fixed structure. However, this approach uses hand-designed high-level structures, which may not be easily generalisable to new games . Snodgrass and Ontanon  also leverage hierarchy to generate structures at different scales. From a set of example levels, they extract a set of high-level and low-level patterns and fit two multi-dimensional Markov chains to this data. To generate a level, then, the high-level model generates the structure while the low-level generator fills in the details. This method results in improved generation compared to a non-hierarchical approach, but requires example levels as training data, which may not always be available [ref]29. Hierarchy can also be used to separately construct different aspects of a level.\nFor instance, Dormans  first generates the “mission”: the high-level task that the player must complete. The physical layout of the level is then generated based on the mission.\nSimilarly, in Unexplored , a graph representing the level is created by applying a set of replacement rules to create, remove and modify nodes to obtain certain properties.\nThis graph is then mapped onto a grid, and each node is transformed into a room . Although this approach is hierarchical, each of the 5000 replacement rules is hand-designed, hindering application to other settings. Another use of composition is to increase the resolution of high-level sketches provided by a designer. For instance, Liapis et al.  allow a designer to draw a high-level, low-resolution sketch of a level. Then, using techniques such as genetic algorithms, the PCG system replaces each high-level tile with a more detailed and fleshed-out component. While this can be used to obtain a high-resolution version of a designer’s sketch, it may be less suitable when a complex structure consisting of several specific components is desired.\nInstead of hand-designing the high-level sketch, Liapis  allows the designer to specify a fitness function that is used to evolve it. The sketch is then parsed into a graph indicating which segments are connected, thereby defining constraints for each segment (such as the number and location of doors). Using these constraints, each segment is evolved and placed in the high-level sketch to form a complete level. While this work is promising, it focuses on dungeon levels, without a clear way to apply the same technique when generating other types of levels. Furthermore, this approach directly evolves the sketch and the low-level segments, meaning that evolution occurs at generation time, which may be prohibitively slow [ref]9. Dormans and Leijnen [ref]50 take a different perspective: their two-step process first generates a large amount of diverse content, and the second step reorganises this content into an actual level.\nWhile this simplifies the generation step, the content is reorganised without any hierarchical elements. Other methods create levels by generating and combining different layers, effectively composing together different generators. However, these methods generally focus on iteratively furnishing a level, as opposed to hierarchically generating a complex layout.\nFor instance, Green et al.  first generate the structure of a dungeon level—tiles such as walls and the floor. Then, a different method furnishes this structure by placing items such as treasure and enemies.\nAlso following a similar layered approach, Wu et al.  generate natural levels. They break the level down into several layers such as ocean, land, and forests, with each layer being generated by a cellular automaton (CA).\nThis approach is a promising way to generate landscapes, but the handcrafted rules could be difficult to generalise to other domains. Furthermore, although CAs can generate landscapes, they may be less well-suited to generating structures that satisfy certain complex constraints—for instance, cities where houses must be reachable by roads.\nDwarf Fortress  also uses multiple layers; here, the world, history and several other aspects evolve over time in a rule-based simulation. This process begins by first generating the world and progressively adding more specialised designed systems.\nThe world is created by generating an elevation map using a randomised fractal, followed by multiple layers of maps including temperature, rainfall and vegetation. Once the world is created, the simulation of civilisation begins where settlements are built, trade routes are formed, and wars are fought. The simulation stops at a designated point in time, and the player starts the game in a unique living world.\n\nReference markers found: [29]\n\nContext windows for each [ref]:\n[ref]29: generator fills in the details. This method results in improved generation compared to a non-hierarchical approach, but requires example levels as training data, which may not always be available [ref]29. Hierarchy can also be used to separately construct different aspects of a level.\nFor instance, Dormans  first generates the “mission”: the high-level task that the player must complete. The\n\n{retrieved_text}\n\nGenerate exactly 40 most likely reference titles for each [ref] marker. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL REQUIREMENTS:\n1. For each [ref] marker, provide detailed reasoning explaining why the predicted titles are relevant\n2. The reasoning should analyze the specific context around each [ref] marker\n3. Explain how each title connects to the research topic, methodology, or problem being discussed\n4. This reasoning helps prevent hallucination by grounding predictions in the actual context\n5. Consider retrieved papers when available to improve prediction accuracy\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"citations\": [\n        {\n            \"ref_index\": 38,\n            \"titles\": [\n                \"Reference Title 1\",\n                \"Reference Title 2\",\n                \"Reference Title 3\",\n                \"Reference Title 4\",\n                \"Reference Title 40\"\n            ],\n            \"reasoning\": \"Detailed explanation of why these titles are relevant to [ref]38 based on the surrounding context, research area, and specific topic being discussed.\"\n        }\n    ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped. Do not include authors, venues, or years - only the paper titles. Generate exactly 40 titles for each [ref] marker with reasoning."
    },
    {
      "role": "assistant",
      "content": "{\n    \"citations\": [\n        {\n            \"ref_index\": 29,\n            \"titles\": [\n                \"Deep Learning for Procedural Content Generation\",\n                \"Search-based procedural content generation: A taxonomy and survey\",\n                \"Procedural content generation for games: A survey\",\n                \"Procedural content generation: An overview\",\n                \"Procedural content generation for game props? A study on the effects on user experience\",\n                \"Computerized dungeons and randomly generated worlds: From rogue to minecraft [scanning our past]\",\n                \"Evolving Mario Levels in the Latent Space of a Deep Convolutional Generative Adversarial Network\",\n                \"Adversarial Reinforcement Learning for Procedural Content Generation\",\n                \"Illuminating Diverse Neural Cellular Automata for Level Generation\",\n                \"Procedural Content Generation using Neuroevolution and Novelty Search for Diverse Video Game Levels\",\n                \"PCGRL: Procedural Content Generation via Reinforcement Learning\",\n                \"A multi-population genetic algorithm for procedural generation of levels for platform games\",\n                \"The 2010 mario AI championship: Level generation track\",\n                \"Procedural content generation: Goals, challenges and actionable steps\",\n                \"Evocraft: A new challenge for open-endedness\",\n                \"Generative design in minecraft (GDMC): settlement generation competition\",\n                \"Learning Controllable 3D Level Generators\",\n                \"Open-ended evolution for Minecraft building generation\",\n                \"The AI settlement generation challenge in Minecraft: First year report\",\n                \"Hierarchical reinforcement learning: A comprehensive survey\",\n                \"A Boolean Task Algebra For Reinforcement Learning\",\n                \"Reinforcement learning - an introduction\",\n                \"Why does hierarchy (sometimes) work so well in reinforcement learning?\",\n                \"Hierarchical Approaches\",\n                \"Genetic Algorithms in Search\",\n                \"Evolving neural networks through augmenting topologies\",\n                \"Abandoning objectives: Evolution through the search for novelty alone\",\n                \"Fundamental principles of deception in genetic search\",\n                \"Learning controllable content generators\",\n                \"Procedural Content Generation via Machine Learning (PCGML)\",\n                \"Experience-driven PCG via reinforcement learning: A super mario bros study\",\n                \"Organic Building Generation in Minecraft\",\n                \"Transforming Exploratory Creativity with DeLeNoX\",\n                \"Illuminating Generalization in Deep Reinforcement Learning through Procedural Level Generation\",\n                \"Quantifying Generalization in Reinforcement Learning\",\n                \"Learning to Generate Levels From Nothing\",\n                \"Evolving Curricula with Regret-Based Environment Design\",\n                \"Paired open-ended trailblazer (POET): endlessly generating increasingly complex and diverse learning environments and their solutions\",\n                \"Co-generation of game levels and game-playing agents\",\n                \"A hierarchical mdmc approach to 2d video game map generation\"\n            ],\n            \"reasoning\": \"Selected these 40 citations for [ref]29 based on the context and research area of Hierarchically Composing Level Generators for the Creation of Complex Structures. The first title is the actual reference for this marker, followed by other relevant papers from the same research domain.\"\n        }\n    ]\n}"
    }
  ],
  "format": "chatml"
}