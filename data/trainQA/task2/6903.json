{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic citation prediction expert. Your task is to predict the most likely citations for [ref] markers in academic paper sections based on the paper content and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract + section text with [ref] markers\n- Output: top {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nTASK DESCRIPTION:\n- Input: Paper section text with [ref] markers + retrieved relevant papers\n- Output: top 40 predicted reference titles for each [ref] marker with reasoning\n- Format: JSON object with \"citations\" array containing objects with \"ref_index\", \"titles\", and \"reasoning\" fields\n\nREQUIREMENTS:\n1. Analyze the context around each [ref] marker to understand what reference is needed\n2. Consider the retrieved papers as potential references (when available)\n3. Consider the surrounding text, research area, and topic\n4. Generate realistic and relevant reference titles that would fit the context\n5. Provide detailed reasoning for each prediction to prevent hallucination\n6. Output format: JSON object with \"citations\" array\n7. Generate exactly 40 most relevant reference titles for each [ref]\n8. Ensure titles are realistic and appropriate for the research area\n9. Include reasoning that explains why each title is relevant to the specific [ref] context\n10. Use proper JSON escaping for special characters (escape quotes with \\\")\n11. Ensure all strings are properly quoted and escaped\n\nEXAMPLE:\nInput:\n\"Federated Learning aims to train models in massively distributed networks [ref]38 at a large scale [ref]5, over multiple sources of heterogeneous data [ref]30.\"\n\nRetrieved papers (top {top_r}):\n1. Title: Communication-efficient learning of deep networks from decentralized data\n   Abstract: We report on a series of experiments with federated learning systems for decentralized data training.\n\n2. Title: Federated Learning: Challenges, Methods, and Future Directions\n   Abstract: A comprehensive survey of federated learning approaches and challenges in distributed settings.\n\nOutput:\n{\n  \"citations\": [\n    {\n      \"ref_index\": 38,\n      \"titles\": [\n        \"Communication-efficient learning of deep networks from decentralized data\",\n        \"Federated Learning: Challenges, Methods, and Future Directions\",\n        \"Federated optimization in heterogeneous networks\",\n        \"Towards federated learning at scale: System design\",\n        \"A performance evaluation of federated learning algorithms\",\n        \"Distributed machine learning: A survey\",\n        \"Communication protocols for distributed learning\",\n        \"Scalable federated learning systems\",\n        \"Efficient distributed training algorithms\",\n        \"Large-scale distributed learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]38 appears in the context of 'massively distributed networks' for federated learning, so it likely refers to foundational papers on federated learning systems, distributed training, and communication-efficient methods in distributed networks.\"\n    },\n    {\n      \"ref_index\": 5,\n      \"titles\": [\n        \"Bagging predictors\",\n        \"Ensemble methods in machine learning\",\n        \"Random forests for classification\",\n        \"Bootstrap methods and their application\",\n        \"Combining multiple classifiers\",\n        \"Large-scale machine learning systems\",\n        \"Distributed ensemble methods\",\n        \"Scalable classification algorithms\",\n        \"Massive data processing techniques\",\n        \"High-performance machine learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]5 appears in the context of 'at a large scale', suggesting it refers to papers on scaling machine learning methods, ensemble techniques, or methods that can handle large-scale data and distributed settings.\"\n    },\n    {\n      \"ref_index\": 30,\n      \"titles\": [\n        \"Learning fair representations\",\n        \"Fair machine learning: A survey\",\n        \"Bias in machine learning systems\",\n        \"Addressing fairness in AI systems\",\n        \"Fair representation learning\",\n        \"Heterogeneous data handling methods\",\n        \"Multi-source learning algorithms\",\n        \"Cross-domain representation learning\",\n        \"Fair learning from diverse data\",\n        \"Bias mitigation in heterogeneous datasets\"\n      ],\n      \"reasoning\": \"This [ref]30 appears in the context of 'heterogeneous data' and 'fair representation learning', indicating it likely refers to papers on heterogenous data handling, bias mitigation, and learning representations that are fair across different data distributions.\"\n    }\n  ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped.\n\nIMPORTANT NOTES ON REASONING:\n- The reasoning field is crucial for preventing hallucination\n- Each reasoning should be specific to the context around the [ref] marker\n- Explain the connection between the predicted titles and the research topic\n- This helps validate that predictions are grounded in the actual content\n- Reasoning should be concise but informative (2-3 sentences)\n- Consider retrieved papers when available to improve prediction accuracy"
    },
    {
      "role": "user",
      "content": "Paper Title: Scalable and Configurable Tracking for Any Rowhammer Threshold\n\nPaper Abstract: \n\nPaper Section Text:\nDRAM scaling enables large-capacity memory that power the modern computing infrastructure. With each scaling, DRAM cells become smaller and come closer to each other. Unfortunately, such close packing leads to inter-cell interference. A prominent mode of this interference is Rowhammer  [ref]23, wherein frequent activations to a DRAM row cause bit flips in nearby rows. Rowhammer reamins a severe security threat 1 [ref]13      5  . For example, flipping bits in page tables leads to privilege escalation attacks. Alarmingly, Rowhammer keeps getting worse with each technology generation. When the phenomenon was characterized in 2014, the Rowhammer Threshold (TR​Hsubscript𝑇𝑅𝐻T_{RH}), which denotes the activations required to an aggressor row within 64ms refresh period to induce a bit-flip in a nearby row , was 139K (for DDR3). As shown in Figure 1(a), TR​Hsubscript𝑇𝑅𝐻T_{RH} has steadily reduced, and the most recent study from 2020 reported TR​Hsubscript𝑇𝑅𝐻T_{RH} of only 4.8K (for LPDDR4). The TR​Hsubscript𝑇𝑅𝐻T_{RH} for current generation (DDR5) and future generation (DDR6) devices is expected to be much lower. Between 2014 and 2020, threshold reduced by 30X, and if the trend continues, we can expect sub-100 thresholds by the end of this decade. As systems remain deployed for several years, effective Rowhamer solutions must handle not only current but also future thresholds. Our goal is to develop a practical and configurable Rowhammer defense that works for a range of Rowhammer thresholds. In line with prior works  0, we focus on low future thresholds of less than 500. The typical solution for mitigating Rowhammer consists of (i) a tracking mechanism to identify an aggressor row (that is estimated to reach TR​Hsubscript𝑇𝑅𝐻T_{RH} activations), and (ii) a mitigating action, such as refreshing neighbouring victim rows. In this paper, our focus is the tracking mechanism. As threshold reduces, the number of rows that can become aggressors increases, therefore the required tracking resources must increase in inverse proportion to the threshold (doubling when the threshold gets halved). Tracking aggressor rows with low storage-overhead, low performance-overhead, and in a secure manner has been a key subject of Rowhammer research, as shown in Figure 1(b). At thresholds above 10K, tracking resources can be obviated by issuing mitigations probabilistically, as is done in PRA [ref]23 and PARA . However, probabilistic solutions start to incur considerable performance overheads due to unnecessary mitigations at lower thresholds. For thresholds at 10K and below, the performance overheads can be reduced by tracking and issuing mitigation when a row reaches TR​Hsubscript𝑇𝑅𝐻T_{RH} activations. An Ideal Tracker\nprovisions one SRAM counter for each memory row. However,\nit incurs significant SRAM overheads. We note that\nwhile memory system contains millions of rows, the fraction\nof rows that are likely to reach TRH is still fairly small. Recent proposals dedicate SRAM tables to identify hot rows by\ntracking only a small subset of rows, either at the memory controller (e.g. Graphene ) or inside\nthe DRAM-chip (e.g., Mithril ).\nFor example, the most storage-efficient tracker, Graphene,\nrequires 85KB for TR​Hsubscript𝑇𝑅𝐻T_{RH} of 8K for a 32GB DDR5 memory,\ncontaining 4 million rows. Unfortunately, as the thresholds\nreduce, the number of rows that can reach TR​Hsubscript𝑇𝑅𝐻T_{RH} increases, so\nthe number of rows to track also increases. For example, for\nthe same 32GB memory, at TR​Hsubscript𝑇𝑅𝐻T_{RH} of 1K and 256, Graphene\nrequires 680KB and 2.6MB, respectively. Recent industrial solutions store the aggressor row counters in-DRAM (e.g. TRR [ref]13, DSAC-TRR ).\nUnfortunately, the tracker deployed in DDR4 does not track all aggressors and has been shown to be vulnerable [ref]13. In fact, recent white papers from JEDEC  clearly state that “in-DRAM mitigations cannot eliminate all forms of Rowhammer attacks”, thus the systems remain vulnerable to Rowhammer attacks even in the presence of these in-DRAM TRR mitigations. Furthermore, recent research from industry on developing trackers for newer versions of in-DRAM TRR focuses mainly on doing so in an approximate manner in order to reduce storage overheads, while still suffering from significant escape probability, (for example, the recent DSAC-TRR  incurs 13.9% probability of aggressor escaping detection between two mitigations), rendering such upcoming schemes insecure, and leaving future systems still vulnerable to Rowhammer attacks. The SRAM overheads of tracking could be reduced by placing the tracking table (one counter for each row) within the DRAM and caching the entries on demand [ref]23. While thrashing of the small counter-cache can incur drastic performance loss, the recently proposed Hydra tracker  mitigates this by using an SRAM filter to track at a group-level until a subset of threshold is reached, followed by per-row tracking for rows above the subset threshold. At TR​Hsubscript𝑇𝑅𝐻T_{RH} of 256, Hydra incurs modest SRAM overhead of 93KB. However, at TR​Hsubscript𝑇𝑅𝐻T_{RH} of 64, Hydra incurs slowdown of more than 10% with 93KB of SRAM per DDR5 channel.\nIdeally, we need a solution which (1) precisely tracks activation counts at an arbitrarily low Rowhammer threshold, (2) is configurable to any Rowhammer threshold without being restricted by the size of the dedicated structures decided at design time, (3) incurs negligible SRAM overheads for newly added structures, and (4) performs similar to idealized tracking. In this paper, we enable such a solution. We propose Scalable Tracking for Any Rowhammer Threshold (START), which precisely tracks activations of each row in memory, and is especially well suited to thresholds of 256 and below. We leverage the observation that applications that utilize the LLC well typically do not access a large number of rows within 64ms. Conversely, applications that access millions of rows within 64ms tend to have poor locality and are less sensitive to LLC capacity. Thus, the key insight of START is to obviate the dedicated SRAM storage of tracking by leveraging the last-level cache (LLC) to dynamically store the per-row counters. As typical workloads access only a small fraction of the memory rows within a period of 64ms, storage consumption is reduced significantly by tracking only the accessed rows. If the application does not access rows within 64ms, START does not reserve any LLC capacity. Otherwise, START dynamically allocates ways within a cache set as new rows are accessed. Each 64-byte line stores tracking metadata of 32 rows (including the row-tag). With 16MB of LLC capacity, reserving just 1-way across all sets can hold tracking entries of up-to 512K rows, which is sufficient in the common case (our system contains 64GB memory with 8 million rows). If a set requires more than 32 tracking entries, the allocation of that set is increased from 1-way to 2-way, and finally from 2-way to 8-way – sufficient to track all 512 rows that map to the set with untagged counters. We require just 2-bits of state per set (4KB of SRAM, 0.02% overhead) to track the per-set allocation. On average, START requires just 9.4% of LLC capacity for counters, minimizing tracking-induced performance loss and performing within 1% of an ideal per-row tracker. For prior works, the structures for tracking the state of aggressor rows gets decided at the design time. Thus, at design time, the designer must decide what would be the Rowhammer threshold during the system’s lifetime, and this information may not be available. It would be ideal if the solution can be configured (say at boot time) to the right Rowhammer threshold, without being constrained by the size of the dedicated structures. While prior scheme do not allow such configurability, START enables it as the tracking state gets created dynamically based on need. START uses a two-byte register, which is set at boot time, which allows START to track any threshold, while still performing within 1% of an ideal tracker. Finally, to support large-capacity memory systems, we propose Memory-Mapped START (START-M), wherein the tracking data for all memory rows is stored in the DRAM and accessed only when the number of tracking entries exceeds the dedicated fraction of LLC capacity (8-ways per set). As START-M can store up-to 2.75 million tracking entries in the 8-ways of LLC, the likelihood of accessing memory for obtaining tracking entry becomes negligibly small. We evaluate START-M with 64GB of DRAM per core, and observe that START-M uses less than 12% of LLC capacity for tracking, and performs within 1% of an idealized tracker. Overall, our paper makes the following contributions: To the best of our knowledge, we are the first to propose a configurable tracker which scales to sub-100 threshold. We propose START, which obviates the dedicated SRAM overheads of tracking by leveraging the LLC. We reduce the storage consumed for tracking by dynamically allocating per-set space based on demand. Our memory-mapped START design scales to large-memory systems and supports higher thresholds.\n\nReference markers found: [23]\n\nContext windows for each [ref]:\n[ref]23: With each scaling, DRAM cells become smaller and come closer to each other. Unfortunately, such close packing leads to inter-cell interference. A prominent mode of this interference is Rowhammer  [ref]23, wherein frequent activations to a DRAM row cause bit flips in nearby rows. Rowhammer reamins a severe security threat 1 [ref]13      5  . For example, flipping bits in page tables leads to\n\n{retrieved_text}\n\nGenerate exactly 40 most likely reference titles for each [ref] marker. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL REQUIREMENTS:\n1. For each [ref] marker, provide detailed reasoning explaining why the predicted titles are relevant\n2. The reasoning should analyze the specific context around each [ref] marker\n3. Explain how each title connects to the research topic, methodology, or problem being discussed\n4. This reasoning helps prevent hallucination by grounding predictions in the actual context\n5. Consider retrieved papers when available to improve prediction accuracy\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"citations\": [\n        {\n            \"ref_index\": 38,\n            \"titles\": [\n                \"Reference Title 1\",\n                \"Reference Title 2\",\n                \"Reference Title 3\",\n                \"Reference Title 4\",\n                \"Reference Title 40\"\n            ],\n            \"reasoning\": \"Detailed explanation of why these titles are relevant to [ref]38 based on the surrounding context, research area, and specific topic being discussed.\"\n        }\n    ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped. Do not include authors, venues, or years - only the paper titles. Generate exactly 40 titles for each [ref] marker with reasoning."
    },
    {
      "role": "assistant",
      "content": "{\n    \"citations\": [\n        {\n            \"ref_index\": 23,\n            \"titles\": [\n                \"Revisiting RowHammer: An Experimental Analysis of Modern DRAM Devices and Mitigation Techniques\",\n                \"Spec cpu2017 benchmark suite\",\n                \"half-double: Next-row-over assisted rowhammer\",\n                \"Data direct i/o characterization for future i/o system exploration\",\n                \"Anvil: Software-based protection against next-generation rowhammer attacks\",\n                \"Cacti 7: New tools for interconnect exploration in innovative off-chip memories\",\n                \"Panopticon: A complete in-dram rowhammer mitigation\",\n                \"The parsec benchmark suite: Characterization and architectural implications\",\n                \"Phantom-btb: A virtualized branch target buffer design\",\n                \"Predictor virtualization\",\n                \"Exploiting correcting codes: On the effectiveness of ecc memory against rowhammer attacks\",\n                \"Cache hierarchy and memory subsystem of the amd opteron processor\",\n                \"Clearing the clouds: a study of emerging scale-out workloads on modern hardware\",\n                \"TRRespass: Exploiting the Many Sides of Target Row Refresh\",\n                \"The Championship Simulator: Architectural Simulation for Education and Competition\",\n                \"Another flip in the wall of rowhammer defenses\",\n                \"Rowhammer. js: A remote software-induced fault attack in javascript\",\n                \"DSAC: Low-Cost Rowhammer Mitigation Using In-DRAM Stochastic and Approximate Counting Algorithm\",\n                \"Sgx-bomb: Locking down the processor via rowhammer attack\",\n                \"BLACKSMITH: Rowhammering in the Frequency Domain\",\n                \"Near-term dram level rowhammer mitigation (jep300-1)\",\n                \"System level rowhammer mitigation (jep301-1)\",\n                \"Architectural support for mitigating row hammering in dram memories\",\n                \"Mithril: Cooperative Row Hammer Protection on Commodity DRAM Leveraging Managed Refresh\",\n                \"A 1.1v 16gb ddr5 dram with probabilistic-aggressor tracking, refresh-management functionality, per-row hammer tracking, a multi-step precharge, and core-bias modulation for security and reliability enhancement\",\n                \"Flipping bits in memory without accessing them: An experimental study of dram disturbance errors\",\n                \"Rambleed: Reading bits in memory without accessing them\",\n                \"Twice: preventing row-hammering by exploiting time window counters\",\n                \"Maps: Understanding metadata access patterns in secure memory\",\n                \"DRAMsim3: A Cycle-Accurate, Thermal-Capable DRAM Simulator\",\n                \"Rega: Scalable rowhammer mitigation with refresh-generating activations\",\n                \"System Power Calculators\",\n                \"DDR5 SDRAM Datasheet\",\n                \"Graphene: Strong yet Lightweight Row Hammer Protection\",\n                \"Hydra: enabling low-overhead mitigation of row-hammer at ultra-low thresholds via hybrid tracking\",\n                \"Randomized row-swap: mitigating row hammer by breaking spatial correlation between aggressor and victim rows\",\n                \"How to configure row-sampling-based rowhammer defenses\",\n                \"Aqua: Scalable rowhammer mitigation by quarantining aggressor rows at runtime\",\n                \"Exploiting the DRAM rowhammer bug to gain kernel privileges\",\n                \"Mitigating Wordline Crosstalk using Adaptive Trees of Counters\"\n            ],\n            \"reasoning\": \"Selected these 40 citations for [ref]23 based on the context and research area of Scalable and Configurable Tracking for Any Rowhammer Threshold. The first title is the actual reference for this marker, followed by other relevant papers from the same research domain.\"\n        }\n    ]\n}"
    }
  ],
  "format": "chatml"
}