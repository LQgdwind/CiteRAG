{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic citation prediction expert. Your task is to predict the most likely citations for [ref] markers in academic paper sections based on the paper content and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract + section text with [ref] markers\n- Output: top {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nTASK DESCRIPTION:\n- Input: Paper section text with [ref] markers + retrieved relevant papers\n- Output: top 40 predicted reference titles for each [ref] marker with reasoning\n- Format: JSON object with \"citations\" array containing objects with \"ref_index\", \"titles\", and \"reasoning\" fields\n\nREQUIREMENTS:\n1. Analyze the context around each [ref] marker to understand what reference is needed\n2. Consider the retrieved papers as potential references (when available)\n3. Consider the surrounding text, research area, and topic\n4. Generate realistic and relevant reference titles that would fit the context\n5. Provide detailed reasoning for each prediction to prevent hallucination\n6. Output format: JSON object with \"citations\" array\n7. Generate exactly 40 most relevant reference titles for each [ref]\n8. Ensure titles are realistic and appropriate for the research area\n9. Include reasoning that explains why each title is relevant to the specific [ref] context\n10. Use proper JSON escaping for special characters (escape quotes with \\\")\n11. Ensure all strings are properly quoted and escaped\n\nEXAMPLE:\nInput:\n\"Federated Learning aims to train models in massively distributed networks [ref]38 at a large scale [ref]5, over multiple sources of heterogeneous data [ref]30.\"\n\nRetrieved papers (top {top_r}):\n1. Title: Communication-efficient learning of deep networks from decentralized data\n   Abstract: We report on a series of experiments with federated learning systems for decentralized data training.\n\n2. Title: Federated Learning: Challenges, Methods, and Future Directions\n   Abstract: A comprehensive survey of federated learning approaches and challenges in distributed settings.\n\nOutput:\n{\n  \"citations\": [\n    {\n      \"ref_index\": 38,\n      \"titles\": [\n        \"Communication-efficient learning of deep networks from decentralized data\",\n        \"Federated Learning: Challenges, Methods, and Future Directions\",\n        \"Federated optimization in heterogeneous networks\",\n        \"Towards federated learning at scale: System design\",\n        \"A performance evaluation of federated learning algorithms\",\n        \"Distributed machine learning: A survey\",\n        \"Communication protocols for distributed learning\",\n        \"Scalable federated learning systems\",\n        \"Efficient distributed training algorithms\",\n        \"Large-scale distributed learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]38 appears in the context of 'massively distributed networks' for federated learning, so it likely refers to foundational papers on federated learning systems, distributed training, and communication-efficient methods in distributed networks.\"\n    },\n    {\n      \"ref_index\": 5,\n      \"titles\": [\n        \"Bagging predictors\",\n        \"Ensemble methods in machine learning\",\n        \"Random forests for classification\",\n        \"Bootstrap methods and their application\",\n        \"Combining multiple classifiers\",\n        \"Large-scale machine learning systems\",\n        \"Distributed ensemble methods\",\n        \"Scalable classification algorithms\",\n        \"Massive data processing techniques\",\n        \"High-performance machine learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]5 appears in the context of 'at a large scale', suggesting it refers to papers on scaling machine learning methods, ensemble techniques, or methods that can handle large-scale data and distributed settings.\"\n    },\n    {\n      \"ref_index\": 30,\n      \"titles\": [\n        \"Learning fair representations\",\n        \"Fair machine learning: A survey\",\n        \"Bias in machine learning systems\",\n        \"Addressing fairness in AI systems\",\n        \"Fair representation learning\",\n        \"Heterogeneous data handling methods\",\n        \"Multi-source learning algorithms\",\n        \"Cross-domain representation learning\",\n        \"Fair learning from diverse data\",\n        \"Bias mitigation in heterogeneous datasets\"\n      ],\n      \"reasoning\": \"This [ref]30 appears in the context of 'heterogeneous data' and 'fair representation learning', indicating it likely refers to papers on heterogenous data handling, bias mitigation, and learning representations that are fair across different data distributions.\"\n    }\n  ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped.\n\nIMPORTANT NOTES ON REASONING:\n- The reasoning field is crucial for preventing hallucination\n- Each reasoning should be specific to the context around the [ref] marker\n- Explain the connection between the predicted titles and the research topic\n- This helps validate that predictions are grounded in the actual content\n- Reasoning should be concise but informative (2-3 sentences)\n- Consider retrieved papers when available to improve prediction accuracy"
    },
    {
      "role": "user",
      "content": "Paper Title: Learning to Reason and Memorize with Self-Notes\n\nPaper Abstract: \n\nPaper Section Text:\nIn this section, we explain each task we test our models on. Table 1 shows a sample for two task with different methods: Vanilla, Scratchpad, and Self-Notes. For each task, we evaluate on both an in-distribution and out-of-distribution (OOD) test set. More detailed descriptions of each dataset and a summary of dataset statistics is provided in the Appendix. Toy-Story.\nInspired by the bAbI tasks , we introduce a new synthetic QA task for testing the ability of language models to do multi-step reasoning.\nThe task is to answer a question after reading a short story that consists of multiple sentences.\nThe challenge in this dataset is that by applying pragmatic principles, unseen relations can be inferred from observed relations.\nFor example, given the text “Alice is at the park.  Bob is with Alice.”, we can infer that “Bob is at the park.”.\nFurthermore, a newly inferred relation can lead to inference of another unseen relation.\nIn the previous example, if the next sentence is “Bob has the key.”, then we can infer that “The key is at the park” using our previous inference about Bob’s location.\nThis recursive inference in Toy-Story makes it possible to create questions that require multi-step reasoning. We use Self-Notes to infer all implied relations.\nWithin a Self-Note, the model can ask and answer a question, e.g., “SQ: Where is Bob?  Bob is at the park.”. The Scratchpad method should infer the same relations, but it will be forced to do it after the question is asked, requiring backward-reasoning.\nTo test generalization, we train the model on 10k 1-hop and 2-hop queries, and test on 3-hop and 4-hop queries. Algorithmic.\nTo evaluate the ability of tracking the state or value of an entity over multiple steps, we adopt the Algorithmic task from , where the context is the sequence of statements, e.g. “x = 1 ; x++ ; y = 3 ; if x > 2: y++ ;”, and the final question is to print the last value of one of the variables, e.g. “print x”.\nWhile the original task has separate input and label tokens, we unify them into a single sequence to fit the language modeling task. For the Self-Notes model, the notes are print statements specifying the intermediate value of a certain variable as they are modified. For example, if the previous statement was “x++ ;”, the Self-Note would be to print the value of x: “print x x = 1 ;”.\nThe Scratchpad method generates the identical print statements, but it also has to copy all of the original statements to the scratchpad and figure out where to insert the prints, thus introducing an additional “alignment” complexity in comparison to the Self-Notes method.\nWe train the models on 2 to 100 statements in each sample. We test on 2-100 (in-distribution) and 101-200 (OOD) statements. Boolean Variable.\nIn this task, the context consists of a valid Python program where each statement contains a boolean variable assignment operation. The question is to print the final value of an arbitrary variable (True or False). The main difference to the Algorithmic task is that the statements are constrained to boolean logic operations.\nWe use the “chain-like“ split from Anil et al. [ref]16, which consists only of operations that compose the values of already defined variables. This results in long chains of dependencies between values of the variable. Similar to the Algorithmic task, Self-Notes prints the value of the variable that was modified in the previous statement, e.g. “print x True;”. Following Anil et al. [ref]16, we train on 3-8 statements and test on 3-8 and 9-19 statements. Chess Piecetype.\nThe goal of this task is to track the state of chess pieces over a sequence of moves in a real chess game . Chess games written in UCI notation consist of a sequence of (start position, end position) pairs, e.g. c2 c4, which denotes a move of the piece from c2 to c4. The piecetypes of the moves are never given explicitly, but since each game begins with pieces in the same positions, the piecetypes can be implicitly tracked given the moves.\nGiven a long sequence of moves, e.g. “c2 c4 e7 e5 g2 g3 b8 c6 f1 g2 g8 f6 b1 c3 f8 b4 c6”, the objective is to predict the piece at the last position mentioned (“c6”). For our proposed method, we consider the Self-Notes to be the piecetypes.\nA Self-Note is inserted after the start position of each move to explicitly remind the model which piecetype is at that position. So the previous example would look like: “c2 P c4 e7 P e5 g2 P g3 b8 N c6 f1 B g2 g8 N f6 b1 N c3 f8 B b4 c6”, and it is therefore much easier with Self-Notes to predict the piecetype at “c6”, since we know that the last piece moved to “c6” was a knight during the move “b8 N c6”.\nTo test length generalization, we consider more moves during testing than seen during training. Chess Move.\nThis task is to predict the end position of the current move given the start position . For example, given the sequence of moves “c2 c4 e7 e5 g2 g3 b8 c6 f1 g2 g8 f6 b1 c3 f8 b4 c6”, the answer is the ground truth final position made in the game: “e5”. This task is harder than the Chess Piecetype task as the model needs to learn, state tracking, chess rules, and chess strategy in order to predict the most likely move.\nThe Self-Notes are the same as chess piece, where the model is trained to generate the piece at each starting square as it makes a move, e.g. “c2 P c4”. Math Word Problems.\nFor the few-shot prompting, we consider two real-world math tasks that require solving multi-step elementary-level arithmetic word problems: MultiArith [ref]18 and GSM8K . For example, the following example in the MultiArith format requires language understanding, as well as tracking the value of the entities: “Alice had 4 cupcakes and 2 cookies.  Alice then ate 1 cupcake.  After Alice gives 1 cookie to Bob, how many treats does she have left?”. In the few-shot prompt, we wrote useful intermediate reasoning and calculations in Self-Notes surrounded by parenthesis. For example the Self-Notes for the previous sample should look like: “Alice had 4 cupcakes and 2 cookies. (4 + 2 = 6 total) Alice then ate 1 cupcake. (6 - 1 = 5 left)  After Alice gives 1 cookie to Bob, how many treats does she have left? (5 - 1 = 4 left)”. For MultiArith, we use the few-shot training samples from . GSM8K contains more challenging problems that requires more diverse reasoning. We selected 5 random samples in the training set to use as the few-shot demonstrations in the prompt. For Chain-of-Thought, we used the original solutions (minus the calculation annotations written inside “<< >>”) given in the dataset. For Self-Notes, we manually annotated the few-shot examples with Self-Notes (shown in the Appendix).\n\nReference markers found: [16]\n\nContext windows for each [ref]:\n[ref]16: an arbitrary variable (True or False). The main difference to the Algorithmic task is that the statements are constrained to boolean logic operations.\nWe use the “chain-like“ split from Anil et al. [ref]16, which consists only of operations that compose the values of already defined variables. This results in long chains of dependencies between values of the variable. Similar to the Algorithmic\n\n{retrieved_text}\n\nGenerate exactly 40 most likely reference titles for each [ref] marker. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL REQUIREMENTS:\n1. For each [ref] marker, provide detailed reasoning explaining why the predicted titles are relevant\n2. The reasoning should analyze the specific context around each [ref] marker\n3. Explain how each title connects to the research topic, methodology, or problem being discussed\n4. This reasoning helps prevent hallucination by grounding predictions in the actual context\n5. Consider retrieved papers when available to improve prediction accuracy\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"citations\": [\n        {\n            \"ref_index\": 38,\n            \"titles\": [\n                \"Reference Title 1\",\n                \"Reference Title 2\",\n                \"Reference Title 3\",\n                \"Reference Title 4\",\n                \"Reference Title 40\"\n            ],\n            \"reasoning\": \"Detailed explanation of why these titles are relevant to [ref]38 based on the surrounding context, research area, and specific topic being discussed.\"\n        }\n    ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped. Do not include authors, venues, or years - only the paper titles. Generate exactly 40 titles for each [ref] marker with reasoning."
    },
    {
      "role": "assistant",
      "content": "{\n    \"citations\": [\n        {\n            \"ref_index\": 16,\n            \"titles\": [\n                \"Chess as a Testbed for Language Model State Tracking\",\n                \"Attention Is All You Need\",\n                \"Language Models are Few-Shot Learners\",\n                \"Show Your Work: Scratchpads for Intermediate Computation with Language Models\",\n                \"Chain-of-Thought Prompting Elicits Reasoning in Large Language Models\",\n                \"Sparks of artificial general intelligence: Early experiments with gpt-4\",\n                \"Program Synthesis with Large Language Models\",\n                \"Measuring and Narrowing the Compositionality Gap in Language Models\",\n                \"Selection-Inference: Exploiting Large Language Models for Interpretable Logical Reasoning\",\n                \"STaR: Bootstrapping Reasoning With Reasoning\",\n                \"Inner Monologue: Embodied Reasoning through Planning with Language Models\",\n                \"Addressing Some Limitations of Transformers with Feedback Memory\",\n                \"Long Short-Term Memory\",\n                \"Staircase Attention for Recurrent Processing of Sequences\",\n                \"Block-Recurrent Transformers\",\n                \"Reading between the lines\",\n                \"Exploring Length Generalization in Large Language Models\",\n                \"Solving general arithmetic word problems\",\n                \"Training Verifiers to Solve Math Word Problems\",\n                \"Language Models are Unsupervised Multitask Learners\",\n                \"HuggingFace’s Transformers: State-of-the-art Natural Language Processing\",\n                \"Towards AI-Complete Question Answering: A Set of Prerequisite Toy Tasks\",\n                \"Gpt-j-6b: A 6 billion parameter autoregressive language model\",\n                \"Llama 2: Open Foundation and Fine-Tuned Chat Models\",\n                \"From machine learning to machine reasoning: An essay\",\n                \"End-to-End Memory Networks\",\n                \"Tracking the World State with Recurrent Entity Networks\",\n                \"BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding\",\n                \"Universal Transformers\",\n                \"e-SNLI: Natural Language Inference with Natural Language Explanations\",\n                \"Program Induction by Rationale Generation: Learning to Solve and Explain Algebraic Word Problems\",\n                \"Large Language Models are Zero-Shot Reasoners\",\n                \"Interleaving Retrieval with Chain-of-Thought Reasoning for Knowledge-Intensive Multi-Step Questions\",\n                \"Do As I Can, Not As I Say: Grounding Language in Robotic Affordances\",\n                \"Toolformer: Language Models Can Teach Themselves to Use Tools\",\n                \"Train Short, Test Long: Attention with Linear Biases Enables Input Length Extrapolation\",\n                \"On the Relation between Position Information and Sentence Length in Neural Machine Translation\",\n                \"SHAPE: Shifted Absolute Position Embedding for Transformers\",\n                \"Compositionality decomposed: How do neural networks generalise?\",\n                \"The Curious Case of Absolute Position Embeddings\"\n            ],\n            \"reasoning\": \"Selected these 40 citations for [ref]16 based on the context and research area of Learning to Reason and Memorize with Self-Notes. The first title is the actual reference for this marker, followed by other relevant papers from the same research domain.\"\n        }\n    ]\n}"
    }
  ],
  "format": "chatml"
}