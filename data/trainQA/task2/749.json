{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic citation prediction expert. Your task is to predict the most likely citations for [ref] markers in academic paper sections based on the paper content and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract + section text with [ref] markers\n- Output: top {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nTASK DESCRIPTION:\n- Input: Paper section text with [ref] markers + retrieved relevant papers\n- Output: top 40 predicted reference titles for each [ref] marker with reasoning\n- Format: JSON object with \"citations\" array containing objects with \"ref_index\", \"titles\", and \"reasoning\" fields\n\nREQUIREMENTS:\n1. Analyze the context around each [ref] marker to understand what reference is needed\n2. Consider the retrieved papers as potential references (when available)\n3. Consider the surrounding text, research area, and topic\n4. Generate realistic and relevant reference titles that would fit the context\n5. Provide detailed reasoning for each prediction to prevent hallucination\n6. Output format: JSON object with \"citations\" array\n7. Generate exactly 40 most relevant reference titles for each [ref]\n8. Ensure titles are realistic and appropriate for the research area\n9. Include reasoning that explains why each title is relevant to the specific [ref] context\n10. Use proper JSON escaping for special characters (escape quotes with \\\")\n11. Ensure all strings are properly quoted and escaped\n\nEXAMPLE:\nInput:\n\"Federated Learning aims to train models in massively distributed networks [ref]38 at a large scale [ref]5, over multiple sources of heterogeneous data [ref]30.\"\n\nRetrieved papers (top {top_r}):\n1. Title: Communication-efficient learning of deep networks from decentralized data\n   Abstract: We report on a series of experiments with federated learning systems for decentralized data training.\n\n2. Title: Federated Learning: Challenges, Methods, and Future Directions\n   Abstract: A comprehensive survey of federated learning approaches and challenges in distributed settings.\n\nOutput:\n{\n  \"citations\": [\n    {\n      \"ref_index\": 38,\n      \"titles\": [\n        \"Communication-efficient learning of deep networks from decentralized data\",\n        \"Federated Learning: Challenges, Methods, and Future Directions\",\n        \"Federated optimization in heterogeneous networks\",\n        \"Towards federated learning at scale: System design\",\n        \"A performance evaluation of federated learning algorithms\",\n        \"Distributed machine learning: A survey\",\n        \"Communication protocols for distributed learning\",\n        \"Scalable federated learning systems\",\n        \"Efficient distributed training algorithms\",\n        \"Large-scale distributed learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]38 appears in the context of 'massively distributed networks' for federated learning, so it likely refers to foundational papers on federated learning systems, distributed training, and communication-efficient methods in distributed networks.\"\n    },\n    {\n      \"ref_index\": 5,\n      \"titles\": [\n        \"Bagging predictors\",\n        \"Ensemble methods in machine learning\",\n        \"Random forests for classification\",\n        \"Bootstrap methods and their application\",\n        \"Combining multiple classifiers\",\n        \"Large-scale machine learning systems\",\n        \"Distributed ensemble methods\",\n        \"Scalable classification algorithms\",\n        \"Massive data processing techniques\",\n        \"High-performance machine learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]5 appears in the context of 'at a large scale', suggesting it refers to papers on scaling machine learning methods, ensemble techniques, or methods that can handle large-scale data and distributed settings.\"\n    },\n    {\n      \"ref_index\": 30,\n      \"titles\": [\n        \"Learning fair representations\",\n        \"Fair machine learning: A survey\",\n        \"Bias in machine learning systems\",\n        \"Addressing fairness in AI systems\",\n        \"Fair representation learning\",\n        \"Heterogeneous data handling methods\",\n        \"Multi-source learning algorithms\",\n        \"Cross-domain representation learning\",\n        \"Fair learning from diverse data\",\n        \"Bias mitigation in heterogeneous datasets\"\n      ],\n      \"reasoning\": \"This [ref]30 appears in the context of 'heterogeneous data' and 'fair representation learning', indicating it likely refers to papers on heterogenous data handling, bias mitigation, and learning representations that are fair across different data distributions.\"\n    }\n  ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped.\n\nIMPORTANT NOTES ON REASONING:\n- The reasoning field is crucial for preventing hallucination\n- Each reasoning should be specific to the context around the [ref] marker\n- Explain the connection between the predicted titles and the research topic\n- This helps validate that predictions are grounded in the actual content\n- Reasoning should be concise but informative (2-3 sentences)\n- Consider retrieved papers when available to improve prediction accuracy"
    },
    {
      "role": "user",
      "content": "Paper Title: Compositional Generalization via Neural-Symbolic Stack Machines\n\nPaper Abstract: \n\nPaper Section Text:\nThe SCAN benchmark has been widely used to evaluate the compositional generalization of neural networks, where the input sequence is a navigation command in English, and the output is the corresponding action sequence [ref]26. See Figure 1 for a sample usage of NeSS for the SCAN tasks. Evaluation setup. Similar to prior work   [ref]38, we evaluate the following four settings. (1) Length generalization: the output sequences in the training set include at most 22 actions, while the output lengths in the test set are between 24 and 48. (2) Template generalization for “around right”: the phrase “around right” is held out from the training set; however, both “around” and “right” occurs in the training set separately. For example, the phrases “around left” and “opposite right” are included in the training set. (3) Primitive generalization for “jump”: all commands not including “jump” are included in the training set, but the primitive “jump” only appears as a single command in the training set. The test set includes commands combining “jump” with other primitives and templates, such as “jump twice” and “jump after walk”. (4) Simple split: randomly split samples into training and test sets. In this case, no compositional generalization is required. Previous approaches. We compare NeSS with two classes of existing approaches on SCAN benchmark. The first class of approaches propose different neural network architectures, without additional data to provide training supervision. Specifically, sequence-to-sequence models (seq2seq) [ref]26 and convolutional neural networks (CNN)  are standard neural network architectures, Stack LSTM learns an LSTM to operate a differentiable stack , while the equivariant sequence-to-sequence model  incorporates convolution operations into the recurrent neural networks, so as to achieve local equivariance discussed in Section 2.1.1. On the other hand, the syntactic attention model  and primitive substitution [ref]30 learn two attention maps for primitives and templates separately. The second class of approaches design different schemes to generate auxiliary training data. Specifically, GECA  performs data augmentation by replacing fragments of training samples with different fragments from other similar samples, while the meta sequence-to-sequence model  and the rule synthesizer model (synth) [ref]38 are trained with samples drawn from a meta-grammar with the format close to the SCAN grammar. Results. Table 6 summarizes our results on SCAN tasks. In the top block, we compare with models trained without additional data. Among these approaches, NeSS is the only one achieving 100%percent100100\\% test accuracies on tasks that require compositional generalization, and the performance is consistent among 5 independent runs. In particular, the best generalization accuracy on the length split is only around 20%percent2020\\% for the baseline models. Note that the stack LSTM does not achieve better results, demonstrating that without a symbolic stack machine that supports recursion and sequence manipulation, augmenting neural networks with a stack alone is not sufficient. Meanwhile, without category predictors, NeSS still achieves 100%percent100100\\% test accuracy in 2 runs, but the accuracy drops to around 20%percent2020\\% for other 3 runs. A main reason is that existing models could not generalize to the input template “around left/right thrice”, when the training set only includes the template “around left/right twice”. Although NeSS correctly learns the parsing rules for different words, without category predictors, NeSS still may not learn that the parsing rule for “thrice” has the same priority as “twice”. For example, in the test set, there is a new pattern “jump around right thrice”. The correct translation is to parse “jump around right” first, then repeat the action sequence thrice, resulting in 24 actions. Without category prediction, NeSS could mistakenly parse “right thrice” first, concatenate the action sequences of “jump” and “right thrice”, then repeat it for four times, resulting in 16 actions. Such a model could still achieve 100%percent100100\\% training accuracy, because this pattern does not occur in the training set, but the test accuracy drops dramatically due to the wrong order for applying rules. Therefore, to achieve generalization, besides the parsing rules for each individual word, the model also needs to understand the order of applying different rules, which is not captured by the primitive equivalence  [ref]30  or local equivariance  studied in prior work. On the other hand, as shown in Table 2, the operational equivalence defined in Section 2.1.1 enables the model to learn the priorities of different parsing rules, e.g., categorizing “twice” and “thrice” together, which is crucial in achieving length generalization. Next, we compare NeSS with models trained with additional data. In particular, the meta sequence-to-sequence model is trained with different permutations of primitive assignment, i.e., different one-to-one mapping of {run, look, jump, walk} to {RUN, LOOK, JUMP, WALK}, denoted as “(perm)”. We consider two evaluation modes of the rule synthesizer model (synth) [ref]38, where the first variant performs greedy decoding, denoted as “(no search)”; the second one performs a search process, where the model samples candidate grammars, and returns the one that matches the training samples. We observe that even with additional training supervision, Synth (with search) is the only baseline approach that is able to achieve 100%percent100100\\% generalization on all these SCAN splits. Although both Synth and NeSS achieve perfect generalization, there are key differences we would like to highlight. First, the meta-grammar designed in Synth restricts the search space to only include grammars with a similar format to the SCAN grammar [ref]38. For example, each grammar has between 4 and 9 primitive rules that map a single word to a single primitive (e.g., run →→\\rightarrow RUN), and 3 to 7 higher order rules that encode variable transformations given by a single word (e.g., x1 and x2 →→\\rightarrow [x1] [x2]). Therefore, Synth cannot be applied to other two benchmarks in our evaluation. Unlike Synth, NeSS does not make such assumptions about the number of rules nor their formats. Also, NeSS does not perform any search during the inference, while Synth requires a search procedure to ensure that the synthesized grammar satisfies the training samples.\n\nReference markers found: [26]\n\nContext windows for each [ref]:\n[ref]26: has been widely used to evaluate the compositional generalization of neural networks, where the input sequence is a navigation command in English, and the output is the corresponding action sequence [ref]26. See Figure 1 for a sample usage of NeSS for the SCAN tasks. Evaluation setup. Similar to prior work   [ref]38, we evaluate the following four settings. (1) Length generalization: the output\n\n{retrieved_text}\n\nGenerate exactly 40 most likely reference titles for each [ref] marker. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL REQUIREMENTS:\n1. For each [ref] marker, provide detailed reasoning explaining why the predicted titles are relevant\n2. The reasoning should analyze the specific context around each [ref] marker\n3. Explain how each title connects to the research topic, methodology, or problem being discussed\n4. This reasoning helps prevent hallucination by grounding predictions in the actual context\n5. Consider retrieved papers when available to improve prediction accuracy\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"citations\": [\n        {\n            \"ref_index\": 38,\n            \"titles\": [\n                \"Reference Title 1\",\n                \"Reference Title 2\",\n                \"Reference Title 3\",\n                \"Reference Title 4\",\n                \"Reference Title 40\"\n            ],\n            \"reasoning\": \"Detailed explanation of why these titles are relevant to [ref]38 based on the surrounding context, research area, and specific topic being discussed.\"\n        }\n    ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped. Do not include authors, venues, or years - only the paper titles. Generate exactly 40 titles for each [ref] marker with reasoning."
    },
    {
      "role": "assistant",
      "content": "{\n    \"citations\": [\n        {\n            \"ref_index\": 26,\n            \"titles\": [\n                \"Compositional generalization through meta sequence-to-sequence learning\",\n                \"Good-Enough Compositional Data Augmentation\",\n                \"Learning regular sets from queries and counterexamples\",\n                \"Neural Machine Translation by Jointly Learning to Align and Translate\",\n                \"CLOSURE: Assessing Systematic Generalization of CLEVR Models\",\n                \"An all-subtrees approach to unsupervised parsing\",\n                \"Making neural programming architectures generalize via recursion\",\n                \"Automatically Composing Representation Transformations as a Means for Generalization\",\n                \"Towards synthesizing complex programs from input-output examples\",\n                \"Syntactic structures\",\n                \"Span-Based Constituency Parsing with a Structure-Label System and Provably Optimal Dynamic Oracles\",\n                \"Grammatical inference: learning automata and grammars\",\n                \"Cnns found to jump around more skillfully than rnns: Compositional generalization in seq2seq convolutional networks\",\n                \"BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding\",\n                \"Neural logic machines\",\n                \"Language to Logical Form with Neural Attention\",\n                \"Permutation equivariant models for compositional generalization in language\",\n                \"Neural turing machines\",\n                \"Learning to Transduce with Unbounded Memory\",\n                \"Long short-term memory\",\n                \"Compositional Attention Networks for Machine Reasoning\",\n                \"CLEVR: A Diagnostic Dataset for Compositional Language and Elementary Visual Reasoning\",\n                \"Inferring Algorithmic Patterns with Stack-Augmented Recurrent Nets\",\n                \"Neural gpus learn algorithms\",\n                \"Measuring Compositional Generalization: A Comprehensive Method on Realistic Data\",\n                \"Neural random-access machines\",\n                \"Generalization without Systematicity: On the Compositional Skills of Sequence-to-Sequence Recurrent Networks\",\n                \"Human few-shot learning of compositional instructions\",\n                \"Building Machines That Learn and Think Like People\",\n                \"Compositional generalization for primitive substitutions\",\n                \"Shift-Reduce Constituent Parsing with Neural Lookahead Features\",\n                \"Rearranging the familiar: Testing compositional generalization in recurrent networks\",\n                \"Neurally-Guided Structure Inference\",\n                \"The Neuro-Symbolic Concept Learner: Interpreting Scenes, Words, and Sentences from Natural Supervision\",\n                \"Neural shift-reduce ccg semantic parsing\",\n                \"Universal grammar\",\n                \"Compositional Generalization in Image Captioning\",\n                \"Learning Compositional Rules via Neural Program Synthesis\",\n                \"Learning Compositional Neural Programs with Recursive Tree Search and Planning\",\n                \"Neural Programmer-Interpreters\"\n            ],\n            \"reasoning\": \"Selected these 40 citations for [ref]26 based on the context and research area of Compositional Generalization via Neural-Symbolic Stack Machines. The first title is the actual reference for this marker, followed by other relevant papers from the same research domain.\"\n        }\n    ]\n}"
    }
  ],
  "format": "chatml"
}