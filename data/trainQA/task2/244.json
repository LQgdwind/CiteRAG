{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic citation prediction expert. Your task is to predict the most likely citations for [ref] markers in academic paper sections based on the paper content and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract + section text with [ref] markers\n- Output: top {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nTASK DESCRIPTION:\n- Input: Paper section text with [ref] markers + retrieved relevant papers\n- Output: top 40 predicted reference titles for each [ref] marker with reasoning\n- Format: JSON object with \"citations\" array containing objects with \"ref_index\", \"titles\", and \"reasoning\" fields\n\nREQUIREMENTS:\n1. Analyze the context around each [ref] marker to understand what reference is needed\n2. Consider the retrieved papers as potential references (when available)\n3. Consider the surrounding text, research area, and topic\n4. Generate realistic and relevant reference titles that would fit the context\n5. Provide detailed reasoning for each prediction to prevent hallucination\n6. Output format: JSON object with \"citations\" array\n7. Generate exactly 40 most relevant reference titles for each [ref]\n8. Ensure titles are realistic and appropriate for the research area\n9. Include reasoning that explains why each title is relevant to the specific [ref] context\n10. Use proper JSON escaping for special characters (escape quotes with \\\")\n11. Ensure all strings are properly quoted and escaped\n\nEXAMPLE:\nInput:\n\"Federated Learning aims to train models in massively distributed networks [ref]38 at a large scale [ref]5, over multiple sources of heterogeneous data [ref]30.\"\n\nRetrieved papers (top {top_r}):\n1. Title: Communication-efficient learning of deep networks from decentralized data\n   Abstract: We report on a series of experiments with federated learning systems for decentralized data training.\n\n2. Title: Federated Learning: Challenges, Methods, and Future Directions\n   Abstract: A comprehensive survey of federated learning approaches and challenges in distributed settings.\n\nOutput:\n{\n  \"citations\": [\n    {\n      \"ref_index\": 38,\n      \"titles\": [\n        \"Communication-efficient learning of deep networks from decentralized data\",\n        \"Federated Learning: Challenges, Methods, and Future Directions\",\n        \"Federated optimization in heterogeneous networks\",\n        \"Towards federated learning at scale: System design\",\n        \"A performance evaluation of federated learning algorithms\",\n        \"Distributed machine learning: A survey\",\n        \"Communication protocols for distributed learning\",\n        \"Scalable federated learning systems\",\n        \"Efficient distributed training algorithms\",\n        \"Large-scale distributed learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]38 appears in the context of 'massively distributed networks' for federated learning, so it likely refers to foundational papers on federated learning systems, distributed training, and communication-efficient methods in distributed networks.\"\n    },\n    {\n      \"ref_index\": 5,\n      \"titles\": [\n        \"Bagging predictors\",\n        \"Ensemble methods in machine learning\",\n        \"Random forests for classification\",\n        \"Bootstrap methods and their application\",\n        \"Combining multiple classifiers\",\n        \"Large-scale machine learning systems\",\n        \"Distributed ensemble methods\",\n        \"Scalable classification algorithms\",\n        \"Massive data processing techniques\",\n        \"High-performance machine learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]5 appears in the context of 'at a large scale', suggesting it refers to papers on scaling machine learning methods, ensemble techniques, or methods that can handle large-scale data and distributed settings.\"\n    },\n    {\n      \"ref_index\": 30,\n      \"titles\": [\n        \"Learning fair representations\",\n        \"Fair machine learning: A survey\",\n        \"Bias in machine learning systems\",\n        \"Addressing fairness in AI systems\",\n        \"Fair representation learning\",\n        \"Heterogeneous data handling methods\",\n        \"Multi-source learning algorithms\",\n        \"Cross-domain representation learning\",\n        \"Fair learning from diverse data\",\n        \"Bias mitigation in heterogeneous datasets\"\n      ],\n      \"reasoning\": \"This [ref]30 appears in the context of 'heterogeneous data' and 'fair representation learning', indicating it likely refers to papers on heterogenous data handling, bias mitigation, and learning representations that are fair across different data distributions.\"\n    }\n  ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped.\n\nIMPORTANT NOTES ON REASONING:\n- The reasoning field is crucial for preventing hallucination\n- Each reasoning should be specific to the context around the [ref] marker\n- Explain the connection between the predicted titles and the research topic\n- This helps validate that predictions are grounded in the actual content\n- Reasoning should be concise but informative (2-3 sentences)\n- Consider retrieved papers when available to improve prediction accuracy"
    },
    {
      "role": "user",
      "content": "Paper Title: NPENAS: Neural Predictor Guided Evolution for Neural Architecture Search\n\nPaper Abstract: \n\nPaper Section Text:\nNeural architecture search (NAS) aims to automatically design network architecture, which is essentially an optimization problem of finding an architecture with the best performance in specific search space with constrained resources  . As the search space is often huge, a critical challenge of NAS is how to effectively and efficiently explore the search space. Among the various search strategies proposed previously, Bayesian optimization(BO) [ref]3 [ref]4 and evolutionary algorithms (EA) [ref]5     are two commonly used methods. However, the previous BO- and EA-based methods for NAS are still suffering from high computational cost, challenge to implement, or inefficient exploration ability. To tackle these problems, we propose a neural predictor guided evolutionary search strategy, which fits both BO- and EA-based frameworks. Our insight comes from the following observation. BO-based search strategy regards NAS as a noisy black-box function optimization problem. The diagram of BO for NAS is demonstrated in Fig. 1. It employs a surrogate model to represent the distribution of the black-box function and utilizes an acquisition function to rank the performance of candidate architectures, which is beneficial to balance the exploration and exploitation for architecture search. Because of the huge search space, the acquisition function canâ€™t rank all the architectures. Therefore, evolutionary algorithms are usually employed to generate candidate architectures for the acquisition function to select potential superior architectures [ref]3 [ref]4. However, previous studies adopted the Gaussian process [ref]3 or an ensemble of neural networks [ref]4 as the surrogate model, which makes the surrogate model computationally intensive and cannot be trained end-to-end. EA-based search strategy selects several parents from a population of architectures and generates offspring through mutation from the selected parents. Because the architectures in search space exhibit locality  and EA usually generates offspring that are close to their parents 0, it restricts EA to efficiently explore the search space. Moreover, since previous studies using EA for NAS mostly evaluate the performance of offspring via the training and validation procedures [ref]5    , the searching cost is catastrophic for ordinary researchers. The pipeline in Fig. 1 can be understood from the perspective of EA, where an evolutionary algorithm selects a number of parents from the architecture pool and generates a collection of candidate architectures. Then the acquisition function is used as a performance predictor to rank the candidate architectures. Finally, the top performance architectures are selected and trained, to update the architecture pool. Inspired by the above observation, we propose a neural predictor guided evolutionary algorithm that combines EA with a neural performance predictor for NAS, named as NPENAS. The pipeline of NPENAS is illustrated in Fig. 2a. One of the main differences between NPENAS and the existing EA-based methods [ref]5     is that we generate multiple, instead of one, candidate architectures from each parent. This candidate generation strategy will improve the exploration ability of EA. But it will cause another problem - it is computationally expensive to evaluate all the candidates via the training and validation procedures. Therefore, we propose to utilize a neural predictor to rank the candidate architectures, and only the top performance neural architectures are selected to evaluate and update the architecture pool. The critical issue of NPENAS is how to design neural performance predictors. In this paper, we propose two kinds of neural predictors (Fig. 2b). Firstly, since the acquisition function of BO can be viewed as a neural predictor, which needs a surrogate model to describe the distribution of the black-box function, we design a new surrogate model for BO. Specifically, we employ a graph encoding method to represent the neural architecture (Fig. 2c). Then we design a graph-based uncertainty estimation network that takes the graph encoding as input and outputs the mean and standard deviation of a Gaussian distribution to represent the distribution of the input architectureâ€™s performance (Fig. 2d). The graph-based uncertainty estimation network is adopted as the surrogate model for BO, from which an acquisition function is defined to search the potential superior architectures. We name NPENAS using this neural predictor as NPENAS-BO. The competitive advantage of the proposed surrogate model lies in its low computational complexity by avoiding the computationally intensive matrix inversion operation and its simplicity of being able to train end-to-end. The design of the acquisition function to effectively balance the exploration and exploitation for NAS is a cumbersome task. Therefore, instead of employing the BO theory, we propose a graph-based neural predictor to directly outputs the performance prediction of input architecture (Fig. 2e). The corresponding NPENAS method with this neural predictor is termed as NPEANS-NP. We conducted extensive experiments to demonstrate the superiority of NPENAS in comparison with existing NAS algorithms. Our main contributions can be summarized as follows. We propose a neural predictor guided evolutionary algorithm for NAS, namely NPENAS. The combination of EA with a neural predictor can enhance the exploration ability of EA and is beneficial to balance the exploration and exploitation for NAS. To the best of our knowledge, this is the first paper focusing on the combination of EA with a neural predictor for NAS. We design two kinds of neural predictors for NPENAS. The first one is an acquisition function defined from a graph-based uncertainty estimation network. The second one is a graph-based neural predictor. The variants of NPENAS using these two kinds of neural predictors are termed as NPEANS-BO and NPEANS-NP respectively. We investigate the drawbacks of the default architecture sampling method on NASBench-101  and demonstrate that sampling architectures directly from the search space is beneficial for performance improvement. We evaluate NPENAS-BO for 600 trials on the NASBench-101 benchmark . With a search budget of 150 queried architectures, NPENAS-BO achieves a mean test error of 5.9%percent5.95.9\\%, which is slightly better than that of BANANAS [ref]4 (5.91%percent5.915.91\\%). On the NASBench-201 benchmark 1, with only 100 queried architectures, averaged over 600 trials NPENAS-BO achieves a mean test error of 8.93%percent8.938.93\\% which is close to the ORACLE baseline 2 8.92%percent8.928.92\\%. On the DARTS 3 search space, with 2.5 GPU days, NPENAS-BO finds an architecture with the mean test error of 2.64%percent2.642.64\\% and the best test error of 2.52%percent2.522.52\\%. The search speed is 4.7x faster than BANANAS [ref]4, and the searched architectureâ€™s test error is better than that of BANANAS [ref]4 (2.54%percent2.542.54\\%). NPENAS-BO outperforms most of the existing NAS algorithms and is much faster than existing NAS algorithms that do not use weight sharing. NPENAS-NP achieves a mean test error of 5.86%percent5.865.86\\% average over 600 trials on the NASBench-101 benchmark with a search budget of 150 neural architecture queries, which is close to the ORACLE baseline 2 5.77%percent5.775.77\\%. On the NASBench-201 benchmark, with 100 queried architectures and averaged over 600 trials, NPENAS-NP achieves a mean test error of 8.95%percent8.958.95\\% that is comparable with the best performance 8.92%percent8.928.92\\%. On the DARTS search space, NPENAS-NP finds an architecture that achieves state-of-the-art performance with the mean test error of 2.54%percent2.542.54\\% and the best test error of 2.44%percent2.442.44\\%, with only 1.8 GPU days. The search speed is 6.56.56.5x faster than that of BANANAS [ref]4 and is comparable with that of some gradient-based NAS algorithms, e.g., DARTS 3 (1.51.51.5 GPU days).\n\nReference markers found: [3]\n\nContext windows for each [ref]:\n[ref]3: space is often huge, a critical challenge of NAS is how to effectively and efficiently explore the search space. Among the various search strategies proposed previously, Bayesian optimization(BO) [ref]3 [ref]4 and evolutionary algorithms (EA) [ref]5     are two commonly used methods. However, the previous BO- and EA-based methods for NAS are still suffering from high computational cost,\n\n{retrieved_text}\n\nGenerate exactly 40 most likely reference titles for each [ref] marker. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL REQUIREMENTS:\n1. For each [ref] marker, provide detailed reasoning explaining why the predicted titles are relevant\n2. The reasoning should analyze the specific context around each [ref] marker\n3. Explain how each title connects to the research topic, methodology, or problem being discussed\n4. This reasoning helps prevent hallucination by grounding predictions in the actual context\n5. Consider retrieved papers when available to improve prediction accuracy\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"citations\": [\n        {\n            \"ref_index\": 38,\n            \"titles\": [\n                \"Reference Title 1\",\n                \"Reference Title 2\",\n                \"Reference Title 3\",\n                \"Reference Title 4\",\n                \"Reference Title 40\"\n            ],\n            \"reasoning\": \"Detailed explanation of why these titles are relevant to [ref]38 based on the surrounding context, research area, and specific topic being discussed.\"\n        }\n    ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped. Do not include authors, venues, or years - only the paper titles. Generate exactly 40 titles for each [ref] marker with reasoning."
    },
    {
      "role": "assistant",
      "content": "{\n    \"citations\": [\n        {\n            \"ref_index\": 3,\n            \"titles\": [\n                \"BANANAS: Bayesian Optimization with Neural Architectures for Neural Architecture Search\",\n                \"A Comprehensive Survey of Neural Architecture Search: Challenges and Solutions\",\n                \"NAS-bench-101: Towards reproducible neural architecture search\",\n                \"Neural architecture search with bayesian optimisation and optimal transport\",\n                \"Large-Scale Evolution of Image Classifiers\",\n                \"Regularized Evolution for Image Classifier Architecture Search\",\n                \"Automatically designing cnn architectures using the genetic algorithm for image classification\",\n                \"Completely automated cnn architecture design based on blocks\",\n                \"Evolving Deep Convolutional Neural Networks for Image Classification\",\n                \"Adam: A method for stochastic optimization\",\n                \"NAS-Bench-201: Extending the Scope of Reproducible Neural Architecture Search\",\n                \"Neural predictor for neural architecture search\",\n                \"DARTS: Differentiable architecture search\",\n                \"Neural Architecture Search using Deep Neural Networks and Monte Carlo Tree Search\",\n                \"A Generic Graph-based Neural Architecture Encoding Scheme for Predictor-based NAS\",\n                \"Bayesnas: A bayesian approach for neural architecture search\",\n                \"Accelerating neural architecture search using performance prediction\",\n                \"Neural Architecture Search with Reinforcement Learning\",\n                \"Semi-Supervised Classification with Graph Convolutional Networks\",\n                \"The emerging field of signal processing on graphs: Extending high-dimensional data analysis to networks and other irregular domains\",\n                \"Simplifying Graph Convolutional Networks\",\n                \"How Powerful are Graph Neural Networks?\",\n                \"Neural Message Passing for Quantum Chemistry\",\n                \"Efficient Neural Architecture Search via Parameter Sharing\",\n                \"Learning Transferable Architectures for Scalable Image Recognition\",\n                \"Progressive neural architecture search\",\n                \"SNAS: stochastic neural architecture search\",\n                \"Progressive differentiable architecture search: Bridging the depth gap between search and evaluation\",\n                \"PC-DARTS: Partial Channel Connections for Memory-Efficient Architecture Search\",\n                \"Neural Architecture Search: A Survey\",\n                \"Random Search and Reproducibility for Neural Architecture Search\",\n                \"Evaluating The Search Phase of Neural Architecture Search\",\n                \"Taking the human out of the loop: A review of bayesian optimization\",\n                \"A tutorial on bayesian optimization\",\n                \"A Tutorial on Thompson Sampling\",\n                \"Pattern recognition and machine learning\",\n                \"PyTorch: An Imperative Style, High-Performance Deep Learning Library\",\n                \"Fast Graph Representation Learning with PyTorch Geometric\",\n                \"Code for NPENAS\",\n                \"Learning multiple layers of features from tiny images\"\n            ],\n            \"reasoning\": \"Selected these 40 citations for [ref]3 based on the context and research area of NPENAS: Neural Predictor Guided Evolution for Neural Architecture Search. The first title is the actual reference for this marker, followed by other relevant papers from the same research domain.\"\n        }\n    ]\n}"
    }
  ],
  "format": "chatml"
}