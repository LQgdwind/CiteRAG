{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic citation prediction expert. Your task is to predict the most likely citations for [ref] markers in academic paper sections based on the paper content and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract + section text with [ref] markers\n- Output: top {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nTASK DESCRIPTION:\n- Input: Paper section text with [ref] markers + retrieved relevant papers\n- Output: top 40 predicted reference titles for each [ref] marker with reasoning\n- Format: JSON object with \"citations\" array containing objects with \"ref_index\", \"titles\", and \"reasoning\" fields\n\nREQUIREMENTS:\n1. Analyze the context around each [ref] marker to understand what reference is needed\n2. Consider the retrieved papers as potential references (when available)\n3. Consider the surrounding text, research area, and topic\n4. Generate realistic and relevant reference titles that would fit the context\n5. Provide detailed reasoning for each prediction to prevent hallucination\n6. Output format: JSON object with \"citations\" array\n7. Generate exactly 40 most relevant reference titles for each [ref]\n8. Ensure titles are realistic and appropriate for the research area\n9. Include reasoning that explains why each title is relevant to the specific [ref] context\n10. Use proper JSON escaping for special characters (escape quotes with \\\")\n11. Ensure all strings are properly quoted and escaped\n\nEXAMPLE:\nInput:\n\"Federated Learning aims to train models in massively distributed networks [ref]38 at a large scale [ref]5, over multiple sources of heterogeneous data [ref]30.\"\n\nRetrieved papers (top {top_r}):\n1. Title: Communication-efficient learning of deep networks from decentralized data\n   Abstract: We report on a series of experiments with federated learning systems for decentralized data training.\n\n2. Title: Federated Learning: Challenges, Methods, and Future Directions\n   Abstract: A comprehensive survey of federated learning approaches and challenges in distributed settings.\n\nOutput:\n{\n  \"citations\": [\n    {\n      \"ref_index\": 38,\n      \"titles\": [\n        \"Communication-efficient learning of deep networks from decentralized data\",\n        \"Federated Learning: Challenges, Methods, and Future Directions\",\n        \"Federated optimization in heterogeneous networks\",\n        \"Towards federated learning at scale: System design\",\n        \"A performance evaluation of federated learning algorithms\",\n        \"Distributed machine learning: A survey\",\n        \"Communication protocols for distributed learning\",\n        \"Scalable federated learning systems\",\n        \"Efficient distributed training algorithms\",\n        \"Large-scale distributed learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]38 appears in the context of 'massively distributed networks' for federated learning, so it likely refers to foundational papers on federated learning systems, distributed training, and communication-efficient methods in distributed networks.\"\n    },\n    {\n      \"ref_index\": 5,\n      \"titles\": [\n        \"Bagging predictors\",\n        \"Ensemble methods in machine learning\",\n        \"Random forests for classification\",\n        \"Bootstrap methods and their application\",\n        \"Combining multiple classifiers\",\n        \"Large-scale machine learning systems\",\n        \"Distributed ensemble methods\",\n        \"Scalable classification algorithms\",\n        \"Massive data processing techniques\",\n        \"High-performance machine learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]5 appears in the context of 'at a large scale', suggesting it refers to papers on scaling machine learning methods, ensemble techniques, or methods that can handle large-scale data and distributed settings.\"\n    },\n    {\n      \"ref_index\": 30,\n      \"titles\": [\n        \"Learning fair representations\",\n        \"Fair machine learning: A survey\",\n        \"Bias in machine learning systems\",\n        \"Addressing fairness in AI systems\",\n        \"Fair representation learning\",\n        \"Heterogeneous data handling methods\",\n        \"Multi-source learning algorithms\",\n        \"Cross-domain representation learning\",\n        \"Fair learning from diverse data\",\n        \"Bias mitigation in heterogeneous datasets\"\n      ],\n      \"reasoning\": \"This [ref]30 appears in the context of 'heterogeneous data' and 'fair representation learning', indicating it likely refers to papers on heterogenous data handling, bias mitigation, and learning representations that are fair across different data distributions.\"\n    }\n  ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped.\n\nIMPORTANT NOTES ON REASONING:\n- The reasoning field is crucial for preventing hallucination\n- Each reasoning should be specific to the context around the [ref] marker\n- Explain the connection between the predicted titles and the research topic\n- This helps validate that predictions are grounded in the actual content\n- Reasoning should be concise but informative (2-3 sentences)\n- Consider retrieved papers when available to improve prediction accuracy"
    },
    {
      "role": "user",
      "content": "Paper Title: Accelerating Sparse Tensor Decomposition Using Adaptive Linearized Representation\n\nPaper Abstract: \n\nPaper Section Text:\nFormally, an ALTO tensor 𝒳𝒳\\mathcal{X} ={=\\{x1subscript𝑥1{x}_{1}, x2subscript𝑥2{x}_{2}, ……\\dots, xMsubscript𝑥𝑀{x}_{M}}}\\} is an ordered set of nonzero elements, where each element xisubscript𝑥𝑖{x}_{i} =⟨vi,pi⟩absentsubscript𝑣𝑖subscript𝑝𝑖=\\langle v_{i},p_{i}\\rangle is represented by a value visubscript𝑣𝑖v_{i} and a position pisubscript𝑝𝑖p_{i}.\nThe position pisubscript𝑝𝑖p_{i} corresponds to a compact mode-agnostic encoding of the indexing metadata, which is used to quickly generate the tuple (i1,i2,…,iN)subscript𝑖1subscript𝑖2…subscript𝑖𝑁(i_{1},i_{2},\\dots,i_{N}) that locates a nonzero element in the multi-dimensional Cartesian space. The generation of an ALTO tensor is carried out in two stages: linearization and ordering. First, ALTO constructs the indexing metadata using a compressed encoding scheme, based on the cardinalities of tensor modes, to map each nonzero element to a position on a compact line. Second, it arranges the nonzero elements in linearized storage according to their line positions, i.e., the values of their ALTO index.\nTypically, the ordering stage dominates the format generation time. However,\ncompared to the other compressed sparse tensor formats [ref]20 [ref]25    [ref]30, ALTO requires a minimal generation time because ordering the linearized tensors incurs a fraction of the cost required to sort multi-dimensional index sets (due to the reduction in comparison operations, as detailed in §§\\S5). Figure 4 shows the ALTO format for the sparse tensor from Figure 3(a).\nThe multi-dimensional indices (i1subscript𝑖1i_{1}, i2subscript𝑖2i_{2}, and i3subscript𝑖3i_{3}) are color coded and the rt​hsuperscript𝑟𝑡ℎr^{th} bit of their binary representation is denoted bin,rsubscript𝑏subscript𝑖𝑛𝑟b_{i_{n},r}.\nSpecifically, ALTO keeps the value of a nonzero element along with a linearized index, where each bit of this index is selected to partition the multi-dimensional space into two hyperplanes.\nFor example, the ALTO encoding in Figure 4 uses a compact line of length 646464 (i.e., a 666-bit linearized index) to represent the target tensor of size 4×8×24824\\times 8\\times 2. This index consists of three groups of bits with variable sizes (resolutions) to efficiently handle high-order data of arbitrary dimensionality. Within each bit group, ALTO arranges the modes in increasing order of their length (i.e., the shortest mode first), which is equivalent to partitioning the multi-dimensional space along the longest mode first.\nSuch an encoding aims to generate a balanced linearization of irregular Cartesian spaces, where the position resolution of a nonzero element increases with every consecutive bit, starting from the most significant bit. Therefore, the line segments encode subspaces with mode intervals of equivalent lengths, e.g., the line segments [0−31]delimited-[]031[0-31], [0−15]delimited-[]015[0-15], and [0−7]delimited-[]07[0-7] encode subspaces of 4×4×24424\\times 4\\times 2, 4×2×24224\\times 2\\times 2, and 2×2×22222\\times 2\\times 2 dimensions, respectively. Due to this adaptive encoding of the multi-dimensional data, ALTO represents the resulting linearized index using the minimum number of bits, and it improves data locality across all modes of a given sparse tensor. Hence, a mode-N𝑁N tensor, whose dimensions are I1×I2×⋯×INsubscript𝐼1subscript𝐼2⋯subscript𝐼𝑁I_{1}\\times I_{2}\\times\\cdots\\times I_{N}, can be efficiently represented using a single ALTO format with indexing metadata of size: where M𝑀M is the number of nonzero elements. As a result, compared to the de facto COO format, ALTO reduces the storage requirement regardless of the tensor’s characteristics. That is, the metadata compression ratio of the ALTO format relative to COO is always ≥1absent1\\geq 1. On a hardware architecture with a word-level memory addressing mode, this compression ratio is given by: where Wbsubscript𝑊𝑏W_{b} is the word size in bits.\nFor example, on an architecture with byte-level addressing (i.e., Wb=8subscript𝑊𝑏8W_{b}=8 bits), the sparse tensor in Figure 4 requires three bytes to store the mode indices\n(coordinates) for each nonzero element in the list-based COO format, whereas only a single byte is required to store the linearized index in the ALTO format: the metadata compression ratio of ALTO compared to the list-based COO is three. Moreover, the ALTO format not only reduces the memory traffic of sparse tensor computations, but also decreases the number of memory transactions required to access the indexing metadata of a sparse tensor, as reading the linearized index requires fewer accesses compared to reading several multi-dimensional indices. In addition, this natural coalescing of the multi-dimensional indices into a single linearized index increases the memory transaction size to make more efficient use of the main memory bandwidth. It is important to note that ALTO uses a non-fractal111A fractal pattern is a hierarchically self-similar pattern that looks the same at increasingly smaller scales. encoding scheme, unlike the traditional space-filling curves (SFCs) . In contrast, SFCs (e.g., Z-Morton order ) are based on continuous self-similar (or fractal) functions that target dense data, which can be extremely inefficient when used to encode the irregularly shaped multi-dimensional spaces that emerge in higher-order sparse tensor algorithms as they require indexing metadata of size: Therefore, in sparse tensor computations, SFCs have been only used to reorder the nonzero elements to improve their\ndata locality rather than compressing the indexing metadata . Figure 5 shows the compact encoding generated by ALTO compared to the fractal encoding scheme of the Z-Morton curve. In this example, ALTO reduces the length of the encoding line by a factor of eight, which not only decreases the overall size of the indexing metadata, but also reduces the linearization/de-linearization time required to map the multi-dimensional space to/from the encoding line. To allow fast indexing of linearized tensors during sparse tensor computations, the ALTO encoding is implemented using a set of simple N𝑁N bit masks, where N𝑁N is the number of modes, on top of common data processing primitives. Figure 6 shows the linearization and de-linearization mechanisms, which are used during the ALTO format generation and the sparse tensor computations, respectively. The linearization process is implemented as a bit-level gather, while the de-linearization is performed as a bit-level scatter. Thus, although the compressed representation of the proposed ALTO format comes at the cost of a de-linearization (decompression) overhead, such a computational overhead is minimal and can be effectively overlapped with the memory accesses of the memory-intensive sparse tensor operations, as shown in §§\\S5.\n\nReference markers found: [20]\n\nContext windows for each [ref]:\n[ref]20: to their line positions, i.e., the values of their ALTO index.\nTypically, the ordering stage dominates the format generation time. However,\ncompared to the other compressed sparse tensor formats [ref]20 [ref]25    [ref]30, ALTO requires a minimal generation time because ordering the linearized tensors incurs a fraction of the cost required to sort multi-dimensional index sets (due to the\n\n{retrieved_text}\n\nGenerate exactly 40 most likely reference titles for each [ref] marker. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL REQUIREMENTS:\n1. For each [ref] marker, provide detailed reasoning explaining why the predicted titles are relevant\n2. The reasoning should analyze the specific context around each [ref] marker\n3. Explain how each title connects to the research topic, methodology, or problem being discussed\n4. This reasoning helps prevent hallucination by grounding predictions in the actual context\n5. Consider retrieved papers when available to improve prediction accuracy\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"citations\": [\n        {\n            \"ref_index\": 38,\n            \"titles\": [\n                \"Reference Title 1\",\n                \"Reference Title 2\",\n                \"Reference Title 3\",\n                \"Reference Title 4\",\n                \"Reference Title 40\"\n            ],\n            \"reasoning\": \"Detailed explanation of why these titles are relevant to [ref]38 based on the surrounding context, research area, and specific topic being discussed.\"\n        }\n    ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped. Do not include authors, venues, or years - only the paper titles. Generate exactly 40 titles for each [ref] marker with reasoning."
    },
    {
      "role": "assistant",
      "content": "{\n    \"citations\": [\n        {\n            \"ref_index\": 20,\n            \"titles\": [\n                \"A Unified Optimization Approach for Sparse Tensor Operations on GPUs\",\n                \"Marble: High-throughput phenotyping from electronic health records via sparse nonnegative tensor factorization\",\n                \"Rubik: Knowledge guided tensor factorization and completion for health data analytics\",\n                \"Extracting the multi-timescale activity patterns of online financial markets\",\n                \"Tensor-based anomaly detection: An interdisciplinary survey\",\n                \"Scalable tensor decompositions for multi-aspect data mining\",\n                \"Tensors for data mining and data fusion: Models, applications, and scalable algorithms\",\n                \"Tensor decompositions for learning latent variable models\",\n                \"Tensor Decomposition for Signal Processing and Machine Learning\",\n                \"FROSTT: The formidable repository of open sparse tensors and tools\",\n                \"Tensor decompositions and applications\",\n                \"Efficient matlab computations with sparse and factored tensors\",\n                \"Temporal link prediction using matrix and tensor factorizations\",\n                \"Beyond streams and graphs: Dynamic tensor analysis\",\n                \"On tensors, sparsity, and nonnegative factorizations\",\n                \"Blocking optimization techniques for sparse tensor computation\",\n                \"Scalable sparse tensor decompositions in distributed memory systems\",\n                \"Efficient, Out-of-Memory Sparse MTTKRP on Massively Parallel Architectures\",\n                \"Hicoo: Hierarchical storage of sparse tensors\",\n                \"Sptfs: Sparse tensor format selection for mttkrp via deep learning\",\n                \"Splatt: Efficient and parallel sparse tensor-matrix multiplication\",\n                \"Sparten: Leveraging kokkos for on-node parallelism in a second-order method for fitting canonical polyadic tensor models to poisson data\",\n                \"Computationally efficient cp tensor decomposition update framework for emerging component discovery in streaming data\",\n                \"Efficient and scalable computations with sparse tensors\",\n                \"Tensor-matrix products with a compressed sparse tensor\",\n                \"Software for sparse tensor decomposition on emerging computing architectures\",\n                \"Efficient and effective sparse tensor reordering\",\n                \"Load-balanced sparse mttkrp on gpus\",\n                \"An efficient mixed-mode representation of sparse tensors\",\n                \"ALTO: Adaptive Linearized Storage of Sparse Tensors\",\n                \"Dynamic tensor linearization and time slicing for efficient factorization of infinite data streams\",\n                \"Format Abstraction for Sparse Tensor Algebra Compilers\",\n                \"TensorFlow: A system for large-scale machine learning\",\n                \"Tensorlab 3.0 — numerical optimization strategies for large-scale constrained and coupled matrix/tensor factorization\",\n                \"Accelerating the tucker decomposition with compressed sparse tensors\",\n                \"High performance rearrangement and multiplication routines for sparse tensor arithmetic\",\n                \"Hadamard, khatri-rao, kronecker, and other matrix products\",\n                \"Newton-based optimization for Kullback-Leibler nonnegative tensor factorizations\",\n                \"Sur une courbe, qui remplit toute une aire plane\",\n                \"A computer oriented geodetic data base; and a new technique in file sequencing\"\n            ],\n            \"reasoning\": \"Selected these 40 citations for [ref]20 based on the context and research area of Accelerating Sparse Tensor Decomposition Using Adaptive Linearized Representation. The first title is the actual reference for this marker, followed by other relevant papers from the same research domain.\"\n        }\n    ]\n}"
    }
  ],
  "format": "chatml"
}