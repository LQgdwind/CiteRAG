{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic citation prediction expert. Your task is to predict the most likely citations for [ref] markers in academic paper sections based on the paper content and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract + section text with [ref] markers\n- Output: top {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nTASK DESCRIPTION:\n- Input: Paper section text with [ref] markers + retrieved relevant papers\n- Output: top 40 predicted reference titles for each [ref] marker with reasoning\n- Format: JSON object with \"citations\" array containing objects with \"ref_index\", \"titles\", and \"reasoning\" fields\n\nREQUIREMENTS:\n1. Analyze the context around each [ref] marker to understand what reference is needed\n2. Consider the retrieved papers as potential references (when available)\n3. Consider the surrounding text, research area, and topic\n4. Generate realistic and relevant reference titles that would fit the context\n5. Provide detailed reasoning for each prediction to prevent hallucination\n6. Output format: JSON object with \"citations\" array\n7. Generate exactly 40 most relevant reference titles for each [ref]\n8. Ensure titles are realistic and appropriate for the research area\n9. Include reasoning that explains why each title is relevant to the specific [ref] context\n10. Use proper JSON escaping for special characters (escape quotes with \\\")\n11. Ensure all strings are properly quoted and escaped\n\nEXAMPLE:\nInput:\n\"Federated Learning aims to train models in massively distributed networks [ref]38 at a large scale [ref]5, over multiple sources of heterogeneous data [ref]30.\"\n\nRetrieved papers (top {top_r}):\n1. Title: Communication-efficient learning of deep networks from decentralized data\n   Abstract: We report on a series of experiments with federated learning systems for decentralized data training.\n\n2. Title: Federated Learning: Challenges, Methods, and Future Directions\n   Abstract: A comprehensive survey of federated learning approaches and challenges in distributed settings.\n\nOutput:\n{\n  \"citations\": [\n    {\n      \"ref_index\": 38,\n      \"titles\": [\n        \"Communication-efficient learning of deep networks from decentralized data\",\n        \"Federated Learning: Challenges, Methods, and Future Directions\",\n        \"Federated optimization in heterogeneous networks\",\n        \"Towards federated learning at scale: System design\",\n        \"A performance evaluation of federated learning algorithms\",\n        \"Distributed machine learning: A survey\",\n        \"Communication protocols for distributed learning\",\n        \"Scalable federated learning systems\",\n        \"Efficient distributed training algorithms\",\n        \"Large-scale distributed learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]38 appears in the context of 'massively distributed networks' for federated learning, so it likely refers to foundational papers on federated learning systems, distributed training, and communication-efficient methods in distributed networks.\"\n    },\n    {\n      \"ref_index\": 5,\n      \"titles\": [\n        \"Bagging predictors\",\n        \"Ensemble methods in machine learning\",\n        \"Random forests for classification\",\n        \"Bootstrap methods and their application\",\n        \"Combining multiple classifiers\",\n        \"Large-scale machine learning systems\",\n        \"Distributed ensemble methods\",\n        \"Scalable classification algorithms\",\n        \"Massive data processing techniques\",\n        \"High-performance machine learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]5 appears in the context of 'at a large scale', suggesting it refers to papers on scaling machine learning methods, ensemble techniques, or methods that can handle large-scale data and distributed settings.\"\n    },\n    {\n      \"ref_index\": 30,\n      \"titles\": [\n        \"Learning fair representations\",\n        \"Fair machine learning: A survey\",\n        \"Bias in machine learning systems\",\n        \"Addressing fairness in AI systems\",\n        \"Fair representation learning\",\n        \"Heterogeneous data handling methods\",\n        \"Multi-source learning algorithms\",\n        \"Cross-domain representation learning\",\n        \"Fair learning from diverse data\",\n        \"Bias mitigation in heterogeneous datasets\"\n      ],\n      \"reasoning\": \"This [ref]30 appears in the context of 'heterogeneous data' and 'fair representation learning', indicating it likely refers to papers on heterogenous data handling, bias mitigation, and learning representations that are fair across different data distributions.\"\n    }\n  ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped.\n\nIMPORTANT NOTES ON REASONING:\n- The reasoning field is crucial for preventing hallucination\n- Each reasoning should be specific to the context around the [ref] marker\n- Explain the connection between the predicted titles and the research topic\n- This helps validate that predictions are grounded in the actual content\n- Reasoning should be concise but informative (2-3 sentences)\n- Consider retrieved papers when available to improve prediction accuracy"
    },
    {
      "role": "user",
      "content": "Paper Title: EPiC: Cost-effective Search-based Prompt Engineering of LLMs for Code Generation\n\nPaper Abstract: \n\nPaper Section Text:\nA prompt is an input or query provided to a model to generate a response or perform a task.\nPrompt engineering refers to the process of designing and refining prompts to achieve desired outcomes when using LLMs 111https://platform.openai.com/docs/guides/prompt-engineering. There are multiple categories of prompt engineering, including approaches without training, reasoning and logic, reducing hallucination, and evolutionary-based methods . Zero-shot [ref]5 and few-shot [ref]33 prompting fall under the category of approaches without training. Techniques such as chain-of-thought (CoT) prompting [ref]12, Automatic Chain-of-Thought (Auto-CoT) , Self-Consistency , and knowledge prompting  exemplify reasoning and logic-based methods. To reduce hallucination for prompt engineering, techniques such as Retrieval Augmented Generation (RAG) , ReAct Prompting , and Chain-of-Knowledge (CoK) Prompting  are employed. Evolutionary algorithms are utilized to optimize prompts, as demonstrated by EvoPrompt  and PromptBreeder . There are other solutions such as Automated Prompt Engineering  and Prompt Optimization with Textual Gradients (ProTeGi) . Zero-shot prompting, as described in [ref]5, eliminates the necessity for extensive training data by employing accurately designed prompts to direct the model toward executing new tasks. The model receives a task description without labeled training data and employs its pre-existing knowledge to generate predictions based on the prompt. Few-shot prompting [ref]33 uses a limited number of input-output examples to help models understand tasks, unlike zero-shot prompting which provides no examples. However, this method requires additional tokens, which can be impractical for longer texts. The selection and composition of examples can also significantly influence model behavior and introduce biases. CoT [ref]12 improves the reasoning abilities of large language models by incorporating intermediate reasoning steps within prompts. This technique breaks down complex tasks into smaller sub-tasks, mimicking human problem-solving. It significantly enhances performance in arithmetic, commonsense, and symbolic reasoning, especially with larger models. Auto-CoT   is an approach designed to enhance the reasoning capabilities of LLMs by automating the generation of intermediate reasoning steps. It automates the creation of reasoning chains and demonstrations using diversity-based sampling to generate multiple reasoning paths. Automated prompt engineering approaches use an agent or a similar automated engine to interact with LLM and typically get some feedback to improve the prompt.\nZhou et al.  proposed APE, a framework designed for the automatic generation and selection of instructions. In this framework, they used an LLM to generate instruction candidates and then search for candidate solutions to maximize a selected score function, treating prompt engineering as an optimization problem. Pryzan et al.  proposed Prompt Optimization with Textual Gradients (ProTeGi), which improves prompts for LLMs using a non-parametric approach inspired by numerical gradient descent. It uses natural language gradients from training data to critique and edit prompts, employing a process guided by beam search and bandit selection. This approach improved the efficiency of previous prompt editing techniques across various NLP tasks, including the novel challenge of LLM jailbreak detection. Evolutionary algorithms have been used in the past for prompt engineering of LLMs in generic NLP tasks. For example, EvoPrompt , a framework designed to automate the prompt engineering process for LLMs. EvoPrompt begins with an initial population of prompts and iteratively generates new ones using evolutionary operators such as mutation and crossover, which are performed by LLMs. Another similar approach is PromptBreeder , which employs task prompts to condition the LLM and mutation prompts to modify task prompts. The interplay between task and mutation prompts drives iterative improvement in PromptBreeder. Similar approaches for prompt enhancement using LLMs through EAs are also proposed in  and . In contrast to existing evolutionary prompt engineering techniques, EPiC is particularly tailored for prompt engineering in coding tasks, with a fitness function defined based on the pass rate of test cases. In addition, it focuses on cost-efficiency throughout the process. To achieve this, it minimizes the calls to external LLMs and implements the mutation operator using local lightweight word embeddings libraries.\n\nReference markers found: [5]\n\nContext windows for each [ref]:\n[ref]5: There are multiple categories of prompt engineering, including approaches without training, reasoning and logic, reducing hallucination, and evolutionary-based methods . Zero-shot [ref]5 and few-shot [ref]33 prompting fall under the category of approaches without training. Techniques such as chain-of-thought (CoT) prompting [ref]12, Automatic Chain-of-Thought (Auto-CoT) ,\n\n{retrieved_text}\n\nGenerate exactly 40 most likely reference titles for each [ref] marker. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL REQUIREMENTS:\n1. For each [ref] marker, provide detailed reasoning explaining why the predicted titles are relevant\n2. The reasoning should analyze the specific context around each [ref] marker\n3. Explain how each title connects to the research topic, methodology, or problem being discussed\n4. This reasoning helps prevent hallucination by grounding predictions in the actual context\n5. Consider retrieved papers when available to improve prediction accuracy\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"citations\": [\n        {\n            \"ref_index\": 38,\n            \"titles\": [\n                \"Reference Title 1\",\n                \"Reference Title 2\",\n                \"Reference Title 3\",\n                \"Reference Title 4\",\n                \"Reference Title 40\"\n            ],\n            \"reasoning\": \"Detailed explanation of why these titles are relevant to [ref]38 based on the surrounding context, research area, and specific topic being discussed.\"\n        }\n    ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped. Do not include authors, venues, or years - only the paper titles. Generate exactly 40 titles for each [ref] marker with reasoning."
    },
    {
      "role": "assistant",
      "content": "{\n    \"citations\": [\n        {\n            \"ref_index\": 5,\n            \"titles\": [\n                \"CodeXGLUE: A Machine Learning Benchmark Dataset for Code Understanding and Generation\",\n                \"A comprehensive review of State-of-The-Art methods for Java code generation from Natural Language Text\",\n                \"CodeBERT: A Pre-Trained Model for Programming and Natural Languages\",\n                \"BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding\",\n                \"CodeSearchNet Challenge Evaluating the State of Semantic Code Search\",\n                \"Language models are unsupervised multitask learners\",\n                \"Automatic Code Generation using Pre-Trained Language Models\",\n                \"Evaluating Large Language Models Trained on Code\",\n                \"Code Llama: Open Foundation Models for Code\",\n                \"Llama 2: Open Foundation and Fine-Tuned Chat Models\",\n                \"Magicoder: Source Code Is All You Need\",\n                \"Chain-of-thought prompting elicits reasoning in large language models\",\n                \"Generated Knowledge Prompting for Commonsense Reasoning\",\n                \"Large Language Models are Human-Level Prompt Engineers\",\n                \"Automatic Prompt Optimization with “Gradient Descent” and Beam Search\",\n                \"Connecting Large Language Models with Evolutionary Algorithms Yields Powerful Prompt Optimizers\",\n                \"Parsel : Algorithmic Reasoning with Language Models by Composing Decompositions\",\n                \"ANPL: Towards Natural Programming with Interactive Decomposition\",\n                \"Dynamic LLM-Agent Network: An LLM-agent Collaboration Framework with Agent Team Optimization\",\n                \"Reflexion: Language Agents with Verbal Reinforcement Learning.(2023)\",\n                \"Language Agent Tree Search Unifies Reasoning Acting and Planning in Language Models\",\n                \"AgentCoder: Multi-Agent-based Code Generation with Iterative Testing and Optimisation\",\n                \"LDB: A Large Language Model Debugger via Verifying Runtime Execution Step-by-step\",\n                \"Program Synthesis with Large Language Models\",\n                \"Promptbreeder: Self-Referential Self-Improvement via Prompt Evolution\",\n                \"Spell: Semantic prompt evolution based on a llm\",\n                \"InstOptima: Evolutionary Multi-objective Instruction Optimization via Large Language Model-based Instruction Operators\",\n                \"Prompt Engineering or Fine Tuning: An Empirical Assessment of Large Language Models in Automated Software Engineering Tasks\",\n                \"MetaGPT: Meta Programming for a Multi-Agent Collaborative Framework\",\n                \"Large Language Models for Software Engineering: Survey and Open Problems\",\n                \"Can ChatGPT Support Developers? An Empirical Evaluation of Large Language Models for Code Generation\",\n                \"Software Testing with Large Language Models: Survey, Landscape, and Vision\",\n                \"Language Models are Few-Shot Learners\",\n                \"What Makes Good In-Context Examples for GPT-3?\",\n                \"Retrieval-Augmented Generation for Knowledge-Intensive NLP Tasks\",\n                \"HyperPrompt: Prompt-based Task-Conditioning of Transformers\",\n                \"Iterative Zero-Shot LLM Prompting for Knowledge Graph Construction\",\n                \"A Systematic Survey of Prompt Engineering in Large Language Models: Techniques and Applications\",\n                \"Automatic chain of thought prompting in large language models.\",\n                \"Self-Consistency Improves Chain of Thought Reasoning in Language Models\"\n            ],\n            \"reasoning\": \"Selected these 40 citations for [ref]5 based on the context and research area of EPiC: Cost-effective Search-based Prompt Engineering of LLMs for Code Generation. The first title is the actual reference for this marker, followed by other relevant papers from the same research domain.\"\n        }\n    ]\n}"
    }
  ],
  "format": "chatml"
}