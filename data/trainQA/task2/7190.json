{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic citation prediction expert. Your task is to predict the most likely citations for [ref] markers in academic paper sections based on the paper content and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract + section text with [ref] markers\n- Output: top {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nTASK DESCRIPTION:\n- Input: Paper section text with [ref] markers + retrieved relevant papers\n- Output: top 40 predicted reference titles for each [ref] marker with reasoning\n- Format: JSON object with \"citations\" array containing objects with \"ref_index\", \"titles\", and \"reasoning\" fields\n\nREQUIREMENTS:\n1. Analyze the context around each [ref] marker to understand what reference is needed\n2. Consider the retrieved papers as potential references (when available)\n3. Consider the surrounding text, research area, and topic\n4. Generate realistic and relevant reference titles that would fit the context\n5. Provide detailed reasoning for each prediction to prevent hallucination\n6. Output format: JSON object with \"citations\" array\n7. Generate exactly 40 most relevant reference titles for each [ref]\n8. Ensure titles are realistic and appropriate for the research area\n9. Include reasoning that explains why each title is relevant to the specific [ref] context\n10. Use proper JSON escaping for special characters (escape quotes with \\\")\n11. Ensure all strings are properly quoted and escaped\n\nEXAMPLE:\nInput:\n\"Federated Learning aims to train models in massively distributed networks [ref]38 at a large scale [ref]5, over multiple sources of heterogeneous data [ref]30.\"\n\nRetrieved papers (top {top_r}):\n1. Title: Communication-efficient learning of deep networks from decentralized data\n   Abstract: We report on a series of experiments with federated learning systems for decentralized data training.\n\n2. Title: Federated Learning: Challenges, Methods, and Future Directions\n   Abstract: A comprehensive survey of federated learning approaches and challenges in distributed settings.\n\nOutput:\n{\n  \"citations\": [\n    {\n      \"ref_index\": 38,\n      \"titles\": [\n        \"Communication-efficient learning of deep networks from decentralized data\",\n        \"Federated Learning: Challenges, Methods, and Future Directions\",\n        \"Federated optimization in heterogeneous networks\",\n        \"Towards federated learning at scale: System design\",\n        \"A performance evaluation of federated learning algorithms\",\n        \"Distributed machine learning: A survey\",\n        \"Communication protocols for distributed learning\",\n        \"Scalable federated learning systems\",\n        \"Efficient distributed training algorithms\",\n        \"Large-scale distributed learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]38 appears in the context of 'massively distributed networks' for federated learning, so it likely refers to foundational papers on federated learning systems, distributed training, and communication-efficient methods in distributed networks.\"\n    },\n    {\n      \"ref_index\": 5,\n      \"titles\": [\n        \"Bagging predictors\",\n        \"Ensemble methods in machine learning\",\n        \"Random forests for classification\",\n        \"Bootstrap methods and their application\",\n        \"Combining multiple classifiers\",\n        \"Large-scale machine learning systems\",\n        \"Distributed ensemble methods\",\n        \"Scalable classification algorithms\",\n        \"Massive data processing techniques\",\n        \"High-performance machine learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]5 appears in the context of 'at a large scale', suggesting it refers to papers on scaling machine learning methods, ensemble techniques, or methods that can handle large-scale data and distributed settings.\"\n    },\n    {\n      \"ref_index\": 30,\n      \"titles\": [\n        \"Learning fair representations\",\n        \"Fair machine learning: A survey\",\n        \"Bias in machine learning systems\",\n        \"Addressing fairness in AI systems\",\n        \"Fair representation learning\",\n        \"Heterogeneous data handling methods\",\n        \"Multi-source learning algorithms\",\n        \"Cross-domain representation learning\",\n        \"Fair learning from diverse data\",\n        \"Bias mitigation in heterogeneous datasets\"\n      ],\n      \"reasoning\": \"This [ref]30 appears in the context of 'heterogeneous data' and 'fair representation learning', indicating it likely refers to papers on heterogenous data handling, bias mitigation, and learning representations that are fair across different data distributions.\"\n    }\n  ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped.\n\nIMPORTANT NOTES ON REASONING:\n- The reasoning field is crucial for preventing hallucination\n- Each reasoning should be specific to the context around the [ref] marker\n- Explain the connection between the predicted titles and the research topic\n- This helps validate that predictions are grounded in the actual content\n- Reasoning should be concise but informative (2-3 sentences)\n- Consider retrieved papers when available to improve prediction accuracy"
    },
    {
      "role": "user",
      "content": "Paper Title: Malla: Demystifying Real-world Large Language Model Integrated Malicious Services\n\nPaper Abstract: \n\nPaper Section Text:\nIn this section, we explore the research question: how effectively does Malla generate malicious content (malware, phishing email, and phishing site)? By assessing the capabilities associated with Mallas, we will gain insights into the potential threats posed by Mallas. Methods and metrics.\nIn our study, we assessed the performance of nine Malla services and 198 Malla projects (Dpsubscriptùê∑ùëùD_{p}) in response to 31 malicious prompts, respectively. Note that, in this experiment, we excluded malicious prompts from PmsubscriptùëÉùëöP_{m} that were not associated with malware written in Python or C/C++. Also, we posed each malicious prompt to a Malla service and project three times and assessed the average performance.\nOur evaluation employed five key metrics to assess the effectiveness of Malla as below: ‚àô‚àô\\bullet Format compliance (F).\nThis metric measured the extent to which Malla responses adhered to the expected format (i.e., code, email, HTML) defined in the malicious prompts. In our study, we employed regular expressions to verify the presence of the target format.\nHere we define the format compliance rate as the ratio of responses that meet the format requirements to the total number of responses from this Malla. ‚àô‚àô\\bullet Compilability (C) and validity (V).\nThis metric was designed to examine the compilability of malware code snippets and the validity of HTML/CSS code generated by Mallas.\nIn our study, we implemented an automated pipeline for malware and phishing site-related malicious prompts. For each malware code snippet and phishing site generated by Mallas, we first conducted a syntax check to confirm that the code (e.g., Python, C/C++, and HTML/CSS) adhered to the correct language‚Äôs syntax. In our implementation, we utilized syntax checkers ast¬†[ref]1 for Python, Clang¬† for C/C++, and W3C Markup Validation Service¬† for HTML/CSS.\nFor each malware code snippet that passed the syntax check, it was compiled using the appropriate compiler or interpreter for the respective programming language (i.e., codeop¬† for Python and Clang¬† for C/C++). This step aimed to identify any compilation errors that could prevent the code from running.\nSimilarly, for each phishing site code snippet that passed the syntax check, we executed them within web browsers (Chrome and Firefox). This step aimed to validate the code‚Äôs integrity and adherence to HTML/CSS standards, confirming that it could render and function as intended in real-world browser environments.\nHere the compilability rate of Mallas is defined as the proportion of malware code snippets that can be compiled by the compiler or interpreter, out of all malware generation responses.\nSimilarly, the validity rate of HTML/CSS code produced by Mallas is defined as the percentage of code snippets executable within web browsers among the total number of phishing site generation responses. ‚àô‚àô\\bullet Readability (R).\nThis metric assessed the linguistic fluency and coherence of phishing emails generated by Mallas.\nIn our study, we used the Gunning Fog Index¬†[ref]16 to assess the readability of phishing emails. This index provides a readability score, with a score of 12 or lower considered ideal, indicating content that is generally accessible to a wide audience¬†[ref]16.\nHere we define the readability rate as the ratio of email generation responses that both satisfy the format requirement and score 12 or lower on the Gunning Fog Index, to the total number of email generation responses. ‚àô‚àô\\bullet Evasiveness (E).\nThis metric focused on evaluating the ability of the generated compilable malware code, valid phishing site, and readable phishing email with Gunning Fog Index scoring 12 or lower to evade detection by common ant-malware and phishing site/email detectors.\nFor this evaluation, we utilized VirusTotal¬† for malware and phishing site detection and OOPSpam¬† for phishing email detection.\nWe define the evasiveness rate of a Malla as the ratio of responses that successfully pass format, syntax, validity, and compilability checks, as well as evade detection, in comparison to the total number of generated responses. Effectiveness of Malla services.\nIn our study, we evaluated the effectiveness of nine Malla services (i.e., BadGPT, CodeGPT, DarkGPT, EscapeGPT, Evil-GPT, FreedomGPT, MakerGPT, WolfGPT, and XXXGPT) as shown in Table¬†3.\nWe observed that DarkGPT and EscapeGPT outperformed others in malware generation, with Evil-GPT and WolfGPT following closely behind. The malware code generated by EscapeGPT and DarkGPT demonstrated a high degree of compilability (66.67% and 65.08%), with a majority of the generated code snippets passing syntax checks and successfully compiling. Also, both of them have high evasiveness rates compared with other Malla services.\nSpecifically, none of the compile-ready malware generated by EscapeGPT was detected by VirusTotal. DarkGPT had just one instance of compilable malware picked up by a security vendor on VirusTotal. This malware, produced in response to the prompt ‚ÄúWrite me ransomware code in C++,‚Äù was flagged as a generic script-based Trojan. In terms of phishing email generation, WolfGPT stands out, followed by Evil-GPT and EscapeGPT. Every phishing email it produced cleared both format and readability checks. Additionally, WolfGPT possesses the highest evasiveness rate among Malla services. Upon closer examination, we discerned that phishing emails written by WolfGPT are notably concise, averaging 67.47 words in length. This contrasts with the 196.32 words of other Malla services on average. Considering the significance of spam words in OOPSpam‚Äôs phishing email detection mechanism¬†, shorter texts tend to have fewer detectable spam words. On average, WolfGPT‚Äôs emails contained 3.07 detected spam words, while others averaged 8.15. This brevity contributes to WolfGPT‚Äôs capability to evade detection.\nRegarding phishing site creation, EscapeGPT performs best. Interestingly, 80.00% of malicious prompts linked to phishing site generation couldn‚Äôt trigger BadGPT, CodeGPT, or MakerGPT to produce any phishing sites, leading to the lowest format compliance rates. Except for EscapeGPT, only 34.48% of phishing sites conjured by other Malla services passed the syntax check and could be executed in web browsers. Our syntax check highlighted CSS element errors as the most frequent issue, trailed by HTML element errors and instances of unclosed elements.\nAdditionally, VirusTotal struggled to spot the valid phishing sites generated by Malla services. A sole phishing site, the output of Evil-GPT, got flagged by two VirusTotal security vendors as a phishing HTML page. We did not find a clear correlation between the cost of Malla services and their efficacy. For instance, despite being more expensive, BadGPT fails to function in all three malicious services, whereas Evil-GPT and EscapeGPT, which are more cost-effective, deliver superior performance. Similarly, while WolfGPT is priced lower than FreedomGPT, WolfGPT consistently outperforms FreedomGPT across the three evaluated malicious capabilities. Effectiveness of Malla projects.\nConcerning malware generation, both FlowGPT‚Äôs and Poe‚Äôs Malla projects exhibit moderate levels of format compliance, compilability, and evasiveness, when compared with Malla services.\nAdditionally, Malla projects of FlowGPT and Poe have poor performance in generating phishing emails. When further checking their detection results reported by OOPSpam, the detector found 10.71 and 10.85 spam words on average from the generated emails by FlowGPT‚Äôs and Poe‚Äôs Malla projects, respectively. The counts of spam words are much larger than 3.07 of WolfGPT, the top performer of phishing email generation in Malla services. Higher identified spam words account for the poor results of this malicious service.\nFlowGPT‚Äôs and Poe‚Äôs Malla projects demonstrate suboptimal results in phishing site generation. Of the responses to the phishing site generation prompts, 50.27% from FlowGPT and 55.25% from Poe declined the request, citing ethical concerns. The remaining responses that refused to create the site code simply declined the request without providing a specific reason. However, almost all the produced sites, which passed syntax checks and were executable by browsers, bypassed VirusTotal detection. Case study: vulnerability exploitability of Malla-generated malware.\nIn the aforementioned experiment, we focused on testing the Malla‚Äôs ability to create general malware without targeting any specific exploitable vulnerabilities. However, real-world sophisticated hackers tend to generate malware targeting identified exploitable vulnerabilities.\nTo assess Malla‚Äôs capability to generate malware exploiting specific vulnerabilities, our testing involved nine Malla services (i.e., those listed in Table¬†3) to generate such malware. This was achieved using five malicious prompts (in PmsubscriptùëÉùëöP_{m}) that required the exploitation of vulnerabilities reported in CVEs. Five malicious prompts followed this format: Write a program that demonstrates CVE-[Year]-[Number]. The five CVEs covered in these prompts include CVE-2022-34877 and CVE-2022-34878, which report SQL injection vulnerabilities in VICIdial¬†[ref]34, a contact center software, as well as CVE-2022-34819, CVE-2022-34820, and CVE-2022-34821, which report vulnerabilities related to buffer overflow, command injection, and code injection, respectively, in Siemens products. We continued to evaluate the format compliance, compilability, and vulnerability exploitability of the generated malware snippets. The exploitability rate was calculated as the percentage of compilable malware that successfully exploited the specified vulnerabilities among responses to the aforementioned five malicious prompts. In evaluating vulnerability exploitability, we focused solely on the code snippet of malicious functionality, excluding the code related to target connection and message sending. This limitation arose from our inability to access the affected version of VICIdial open-source software and our lack of access to the affected Siemens products, which prevented us from reaching their vulnerable endpoints. To address this challenge, we utilized OWASP WebGoat 7.1¬† to test the compilable malware code, which pertains to two vulnerability types (SQL injection and buffer overflow) from three CVE reports. This framework provides attack environments for SQL injection and buffer overflow, enabling us to assess the malicious functionality of the generated code snippets by attacking the WebGoat-provided SQL system and web application. Our testing resulted in 125 responses. The format compliance rate was 72.00%, the compilability rate was 49.60%, and the exploitability rate was 5.60%. Among the generated malware that successfully exploited vulnerabilities, three targeted SQL injection vulnerabilities reported in CVE-2022-34878, three targeted buffer overflow vulnerabilities reported in CVE-2022-34819, and one targeted SQL injection vulnerability reported in CVE-2022-34877. Notably, the majority (six) of malware successfully exploiting vulnerabilities were generated by XXXGPT, with BadGPT contributing one. Take the response generated by XXXGPT (as shown in Appendix Figure¬†3) as an example. It targets CVE-2022-34819 and not only identifies the vulnerability in affected devices but also provides the corresponding attack code. However, it requires attackers to supplement the actual code for communication with the vulnerable device, due to the lack of detailed introduction of vulnerable endpoints in CVE reports.\n\nReference markers found: [1]\n\nContext windows for each [ref]:\n[ref]1: we first conducted a syntax check to confirm that the code (e.g., Python, C/C++, and HTML/CSS) adhered to the correct language‚Äôs syntax. In our implementation, we utilized syntax checkers ast¬†[ref]1 for Python, Clang¬† for C/C++, and W3C Markup Validation Service¬† for HTML/CSS.\nFor each malware code snippet that passed the syntax check, it was compiled using the appropriate compiler or\n\n{retrieved_text}\n\nGenerate exactly 40 most likely reference titles for each [ref] marker. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL REQUIREMENTS:\n1. For each [ref] marker, provide detailed reasoning explaining why the predicted titles are relevant\n2. The reasoning should analyze the specific context around each [ref] marker\n3. Explain how each title connects to the research topic, methodology, or problem being discussed\n4. This reasoning helps prevent hallucination by grounding predictions in the actual context\n5. Consider retrieved papers when available to improve prediction accuracy\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"citations\": [\n        {\n            \"ref_index\": 38,\n            \"titles\": [\n                \"Reference Title 1\",\n                \"Reference Title 2\",\n                \"Reference Title 3\",\n                \"Reference Title 4\",\n                \"Reference Title 40\"\n            ],\n            \"reasoning\": \"Detailed explanation of why these titles are relevant to [ref]38 based on the surrounding context, research area, and specific topic being discussed.\"\n        }\n    ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped. Do not include authors, venues, or years - only the paper titles. Generate exactly 40 titles for each [ref] marker with reasoning."
    },
    {
      "role": "assistant",
      "content": "{\n    \"citations\": [\n        {\n            \"ref_index\": 1,\n            \"titles\": [\n                \"Ïù∏Í≥µÏßÄÎä• Í∏∞Î∞ò Í≥µÍ≤© Í∑∏ÎûòÌîÑ ÏÉùÏÑ±\",\n                \"ast ‚Äî abstract syntax trees ‚Äî python documentation\",\n                \"Blockchain explorer - bitcoin tracker & more | blockchain\",\n                \"Charybdis worm | many infections | spread widely | discord | telegram | lan |and more\",\n                \"Clang c language family frontend for llvm\",\n                \"codeop ‚Äî compile python code ‚Äî python documentation\",\n                \"Digital selling with ease | sellix\",\n                \"Eleutherai/gpt-j-6b ¬∑ hugging face\",\n                \"Ethereum (eth) blockchain explorer\",\n                \"Evil confidant | jailbreakchat\",\n                \"Freedomgpt/renderer/localmodels/offlinemodels\",\n                \"Gunning fog index - wikipedia\",\n                \"jaro-winkler | levenshtein 0\",\n                \"michellejieli/nsfw_text_classifier ¬∑ hugging face\",\n                \"Netlify: Develop and deploy websites and apps in record time\",\n                \"Oopspam anti-spam api: A powerful spam filter for any content exchange\",\n                \"openai/tiktoken: tiktoken is a fast bpe tokeniser for use with openai‚Äôs models\",\n                \"Owasp webgoat | owasp foundation\",\n                \"Pygmalionai/pygmalion-2-13b ¬∑ hugging face\",\n                \"Semantic textual similarity | sentence-transformers documentation\",\n                \"Tap-m/luna-ai-llama2-uncensored ¬∑ hugging face\",\n                \"Thebloke/luna-ai-llama2-uncensored-gguf ¬∑ hugging face\",\n                \"Thebloke/pygmalion-2-13b-gptq ¬∑ hugging face\",\n                \"Tor project | anonymity online\",\n                \"The w3c markup validation service\",\n                \"Wormgpt and fraudgpt ‚Äì the rise of malicious llms\",\n                \"Wormgpt service has been shut down by its developer\",\n                \"Wormgpt ‚Äì the generative ai tool cybercriminals are using to launch business email compromise attacks\",\n                \"code2vec: Learning Distributed Representations of Code\",\n                \"Under the shadow of sunshine: Understanding and detecting bulletproof hosting on legitimate service provider networks\",\n                \"The menlo report\",\n                \"Authorship Attribution of Source Code: A Language-Agnostic Approach and Applicability in Software Engineering\",\n                \"Evaluating the Susceptibility of Pre-Trained Language Models via Handcrafted Adversarial Examples\",\n                \"Language Models are Few-Shot Learners\",\n                \"Truth, lies, and automation: How language models could change disinformation\",\n                \"Andarwin: Scalable detection of semantically similar android applications\",\n                \"TinyStories: How Small Can Language Models Be and Still Speak Coherent English?\",\n                \"The pile: An 800gb dataset of diverse text for language modeling\",\n                \"More than you‚Äôve asked for: A comprehensive analysis of novel prompt injection threats to application-integrated large language models\",\n                \"From ChatGPT to ThreatGPT: Impact of Generative AI in Cybersecurity and Privacy\"\n            ],\n            \"reasoning\": \"Selected these 40 citations for [ref]1 based on the context and research area of Malla: Demystifying Real-world Large Language Model Integrated Malicious Services. The first title is the actual reference for this marker, followed by other relevant papers from the same research domain.\"\n        }\n    ]\n}"
    }
  ],
  "format": "chatml"
}