{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic citation prediction expert. Your task is to predict the most likely citations for [ref] markers in academic paper sections based on the paper content and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract + section text with [ref] markers\n- Output: top {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nTASK DESCRIPTION:\n- Input: Paper section text with [ref] markers + retrieved relevant papers\n- Output: top 40 predicted reference titles for each [ref] marker with reasoning\n- Format: JSON object with \"citations\" array containing objects with \"ref_index\", \"titles\", and \"reasoning\" fields\n\nREQUIREMENTS:\n1. Analyze the context around each [ref] marker to understand what reference is needed\n2. Consider the retrieved papers as potential references (when available)\n3. Consider the surrounding text, research area, and topic\n4. Generate realistic and relevant reference titles that would fit the context\n5. Provide detailed reasoning for each prediction to prevent hallucination\n6. Output format: JSON object with \"citations\" array\n7. Generate exactly 40 most relevant reference titles for each [ref]\n8. Ensure titles are realistic and appropriate for the research area\n9. Include reasoning that explains why each title is relevant to the specific [ref] context\n10. Use proper JSON escaping for special characters (escape quotes with \\\")\n11. Ensure all strings are properly quoted and escaped\n\nEXAMPLE:\nInput:\n\"Federated Learning aims to train models in massively distributed networks [ref]38 at a large scale [ref]5, over multiple sources of heterogeneous data [ref]30.\"\n\nRetrieved papers (top {top_r}):\n1. Title: Communication-efficient learning of deep networks from decentralized data\n   Abstract: We report on a series of experiments with federated learning systems for decentralized data training.\n\n2. Title: Federated Learning: Challenges, Methods, and Future Directions\n   Abstract: A comprehensive survey of federated learning approaches and challenges in distributed settings.\n\nOutput:\n{\n  \"citations\": [\n    {\n      \"ref_index\": 38,\n      \"titles\": [\n        \"Communication-efficient learning of deep networks from decentralized data\",\n        \"Federated Learning: Challenges, Methods, and Future Directions\",\n        \"Federated optimization in heterogeneous networks\",\n        \"Towards federated learning at scale: System design\",\n        \"A performance evaluation of federated learning algorithms\",\n        \"Distributed machine learning: A survey\",\n        \"Communication protocols for distributed learning\",\n        \"Scalable federated learning systems\",\n        \"Efficient distributed training algorithms\",\n        \"Large-scale distributed learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]38 appears in the context of 'massively distributed networks' for federated learning, so it likely refers to foundational papers on federated learning systems, distributed training, and communication-efficient methods in distributed networks.\"\n    },\n    {\n      \"ref_index\": 5,\n      \"titles\": [\n        \"Bagging predictors\",\n        \"Ensemble methods in machine learning\",\n        \"Random forests for classification\",\n        \"Bootstrap methods and their application\",\n        \"Combining multiple classifiers\",\n        \"Large-scale machine learning systems\",\n        \"Distributed ensemble methods\",\n        \"Scalable classification algorithms\",\n        \"Massive data processing techniques\",\n        \"High-performance machine learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]5 appears in the context of 'at a large scale', suggesting it refers to papers on scaling machine learning methods, ensemble techniques, or methods that can handle large-scale data and distributed settings.\"\n    },\n    {\n      \"ref_index\": 30,\n      \"titles\": [\n        \"Learning fair representations\",\n        \"Fair machine learning: A survey\",\n        \"Bias in machine learning systems\",\n        \"Addressing fairness in AI systems\",\n        \"Fair representation learning\",\n        \"Heterogeneous data handling methods\",\n        \"Multi-source learning algorithms\",\n        \"Cross-domain representation learning\",\n        \"Fair learning from diverse data\",\n        \"Bias mitigation in heterogeneous datasets\"\n      ],\n      \"reasoning\": \"This [ref]30 appears in the context of 'heterogeneous data' and 'fair representation learning', indicating it likely refers to papers on heterogenous data handling, bias mitigation, and learning representations that are fair across different data distributions.\"\n    }\n  ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped.\n\nIMPORTANT NOTES ON REASONING:\n- The reasoning field is crucial for preventing hallucination\n- Each reasoning should be specific to the context around the [ref] marker\n- Explain the connection between the predicted titles and the research topic\n- This helps validate that predictions are grounded in the actual content\n- Reasoning should be concise but informative (2-3 sentences)\n- Consider retrieved papers when available to improve prediction accuracy"
    },
    {
      "role": "user",
      "content": "Paper Title: Syntax-Aware On-the-Fly Code Completion\n\nPaper Abstract: \n\nPaper Section Text:\nCode completion, or AutoCompletion, is one of the most essential features in modern Integrated Development Environments (IDEs) (e.g., GitHub’s Copilot, Intellisense in Visual Studio Code ).\nThe goal of code completion is to automatically recommend source code based on a given context, which could help developers reduce the amount of typing and coding iteration time and eliminate the number of typo errors.\nA recent study conducted by Google found that the current code completion feature could reduce developers’ effort by 6% and context switching by 7% . Recent code completion approaches often leverage modern deep learning architectures (e.g., Recurrent Neural Network, Transformer architecture) to exploit their strong representation power.\nMore specifically, state-of-the-art code completion models (e.g., CodeGPT , GPT-2 , GPT-C , TavTrans [ref]6, CodeFill [ref]7) are based on code-focused large language models (LLMs) that are trained from large codebase and natural language corpora (e.g., the CodeSearchNet corpus with 2 million GitHub repositories). These LLMs are fine-tuned on a specific dataset to perform specific tasks (e.g., code completion).\nHowever, existing code completion approaches have the following limitations. Limitation 1: On-the-fly code completions approaches do not consider syntactic information.\nOn-the-fly code completion approaches are designed to generate code tokens based on a given context without requiring the completeness of prior context.\nRepresent techniques include GPT-2 , a Transformer-based decoder model for generative tasks pre-trained on English webpage datasets; CodeGPT , a GPT-2 model architecture pre-trained on source code datasets; and GPT-C , a GPT-2 model architecture pre-trained on multi-language source code. In their pre-training, these models learn to complete the next code tokens.\nIn doing so, the performance of these on-the-fly code completion approaches is limited by their lack of consideration of syntactic information. Limitation 2: Existing syntax-aware code completion approaches are not on-the-fly.\nTo ensure that the generated source code is syntactically correct , researchers proposed to leverage the Abstract Syntax Tree (AST) information [ref]9 0 [ref]6 1 [ref]7 2.\nFor example, Kim et al. [ref]6 proposed TravTrans,\na Transformer-based architecture consuming syntactic information from a variety representations of ASTs traversal;\nIzadi et al. [ref]7 proposed CodeFill, a multi-task,\nTransformer-based architecture consuming source code and AST types.\nWhile existing AST-based code completion approaches may generate code that is more syntactically correct, the application scenario remains limited.\nIn particular, the existing AST-based code completion approaches [ref]9 0 [ref]6 1 [ref]7 2 require source code to be completed (i.e., all the previous tokens are valid and parsable) at the inference time so the AST information can be obtained from the source code.\nHowever, our motivating analysis found that in practice, two thirds of the source code characters is incomplete and not parsable (e.g., containing syntax errors), making the existing AST-based code completion approaches inapplicable in real-world scenarios. In this paper, we propose PyCoder, an automated code completion approach that can generate source code at any time regardless of the completeness of the source code, i.e., syntax-aware on-the-fly code completion.\nOur approach is designed to consider the syntactic information of the source code during the learning phase, but does not require syntactic information during the inference phase.\nInstead of using the AST information like in previous works [ref]6 [ref]7 [ref]9 0 1 2, we propose to leverage the token type information (e.g., String, Number, Name, Keyword), which is a readily-available and light-weight syntactic information without requiring the completeness of the source code.\nDuring the learning process, we design our approach to carry out two prediction tasks, i.e., the token prediction task and the type prediction task.\nTo ensure that our model captures both syntactic and semantic information during the training process, we leverage Multi-Task Training (MTT) techniques to learn both the token prediction task and the type prediction task.\nGiven a sequence of code tokens, our approach performs the following steps: (1) extract the token type information of each token, (2) perform the sub-word tokenization on each token, (3) align token type data with sub-word source code data, and (4) build a code completion model using a GPT-2 architecture based on a pre-trained CodeGPT language model with a multi-task training technique.\n In our experiment, we compare our PyCoder with five existing state-of-the-art models (i.e., Pointer Mixture Network [ref]9, TravTrans [ref]6, GPT-2 , CodeGPT , and UniXcoder 3).\nDuring the inference phase, we evaluate our approach based on the token-level and line-level prediction tasks.\nThrough an extensive evaluation on the PY150 4 standard benchmark Python dataset for the code completion task that is used in Microsoft’s CodeXGLUE benchmark , we answer the following research questions: What is the performance of our PyCoder for the token-level and line-level code completion tasks when compared to state-of-the-art models?\nResults. \nPyCoder achieves the first rank on the CodeXGLUE leaderboard with an accuracy of 77.12% for the token-level predictions, which is 0.43%-24.25% more accurate than baselines.\nIn addition, PyCoder achieves an exact match of 43.37% for the line-level predictions, which is 3.63%-84.73% more accurate than baselines. What is the impact of the training strategies on the performance of our PyCoder?\nResults. \nMulti-task training strategies have an impact on PyCoder for both token-level and line-level predictions.\nWe find that PyCoder-Hard performs best; followed by PyCoder-IFN and PyCoder-Soft. What is the impact of the task weighting parameters in multi-task learning on the performance of our PyCoder?\nResults. PyCoder is generally robust to the task weighting parameters, achieving comparative (without task weighting) or better (with task weighting) performance when compared to the baselines. What is the impact of the decoding methods on the performance of our PyCoder?\nResults. Decoding methods have an impact on the performance of PyCoder with an exact match varying from 33.80% to 41.52% for line-level predictions.\nBeam Search performs best, while Sampling performs worst.\n Novelty. The key novelty of our work is as follows:\n PyCoder is the first to leverage the standard token type information for code completion with a variety of multi-task training techniques, which is different from existing work that leverages AST token type information. PyCoder is the first to extensively explore the sensitivity of the task weighting parameter and decoding methods in code completion. PyCoder surpasses five state-of-the-art code completion techniques in our setting and the CodeXGLUE Benchmark setting, achieving the highest performance in both token-level and line-level predictions. PyCoder111https://huggingface.co/Wannita/PyCoder is publicly available on HuggingFace together with the code dataset222https://huggingface.co/datasets/Wannita/PyCoder and token type dataset333https://huggingface.co/datasets/Wannita/PyCoder-Type. Our source code also available on GitHub444https://github.com/awsm-research/pycoder. Paper Organization.\nThe paper is organized as follows.\nSection 2 describes the background, motivation, and limitations of the state-of-the-art approaches.\nSection 3 presents our PyCoder approach.\nSection 4 describes the experimental setup and state-of-the-art baselines.\nSection 5 presents the experimental results and discussions.\nSection 6 discusses the results of our PyCoder.\nSection 7 describes related work to code completion.\nSection 8 discloses the threats to validity.\nSection 9 draws the conclusion.\n\nReference markers found: [6]\n\nContext windows for each [ref]:\n[ref]6: Recurrent Neural Network, Transformer architecture) to exploit their strong representation power.\nMore specifically, state-of-the-art code completion models (e.g., CodeGPT , GPT-2 , GPT-C , TavTrans [ref]6, CodeFill [ref]7) are based on code-focused large language models (LLMs) that are trained from large codebase and natural language corpora (e.g., the CodeSearchNet corpus with 2 million GitHub\n\n{retrieved_text}\n\nGenerate exactly 40 most likely reference titles for each [ref] marker. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL REQUIREMENTS:\n1. For each [ref] marker, provide detailed reasoning explaining why the predicted titles are relevant\n2. The reasoning should analyze the specific context around each [ref] marker\n3. Explain how each title connects to the research topic, methodology, or problem being discussed\n4. This reasoning helps prevent hallucination by grounding predictions in the actual context\n5. Consider retrieved papers when available to improve prediction accuracy\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"citations\": [\n        {\n            \"ref_index\": 38,\n            \"titles\": [\n                \"Reference Title 1\",\n                \"Reference Title 2\",\n                \"Reference Title 3\",\n                \"Reference Title 4\",\n                \"Reference Title 40\"\n            ],\n            \"reasoning\": \"Detailed explanation of why these titles are relevant to [ref]38 based on the surrounding context, research area, and specific topic being discussed.\"\n        }\n    ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped. Do not include authors, venues, or years - only the paper titles. Generate exactly 40 titles for each [ref] marker with reasoning."
    },
    {
      "role": "assistant",
      "content": "{\n    \"citations\": [\n        {\n            \"ref_index\": 6,\n            \"titles\": [\n                \"CodeFill: Multi-token Code Completion by Jointly Learning from Structure and Naming Sequences\",\n                \"Intellisense in visual studio code\",\n                \"Ml-enhanced code completion improves developer productivity\",\n                \"CodeXGLUE: A Machine Learning Benchmark Dataset for Code Understanding and Generation\",\n                \"Language models are unsupervised multitask learners\",\n                \"IntelliCode Compose: Code Generation using Transformer\",\n                \"Code Prediction by Feeding Trees to Transformers\",\n                \"Generative Code Modeling with Graphs\",\n                \"Code Completion with Neural Attention and Pointer Networks\",\n                \"Pythia: AI-assisted Code Completion System\",\n                \"A Self-Attentional Neural Architecture for Code Completion with Multi-Task Learning\",\n                \"A unified multi-task learning model for ast-level and token-level code completion\",\n                \"UniXcoder: Unified Cross-Modal Pre-training for Code Representation\",\n                \"Probabilistic model for code with decision trees\",\n                \"Towards a better code completion system by api grouping, filtering, and popularity-based ranking\",\n                \"How program history can improve code completion\",\n                \"Learning from examples to improve code completion systems\",\n                \"On the naturalness of software\",\n                \"Code Completion by Modeling Flattened Abstract Syntax Trees as Graphs\",\n                \"Neural machine translation of rare words with subword units\",\n                \"Gpt2sp: A transformer-based agile story point estimation approach\",\n                \"Big code!= big vocabulary: Open-vocabulary models for source code\",\n                \"Autotransform: Automated code transformation to support modern code review process\",\n                \"Sentence Encoders on STILTs: Supplementary Training on Intermediate Labeled-data Tasks\",\n                \"An overview of multi-task learning in deep neural networks\",\n                \"Matrix computations\",\n                \"Attention Is All You Need\",\n                \"CodeSearchNet Challenge Evaluating the State of Semantic Code Search\",\n                \"The curious case of neural text degeneration\",\n                \"Deep reinforcement learning for dialogue generation\",\n                \"Challenges in Data-to-Document Generation\",\n                \"A learning algorithm for boltzmann machines\",\n                \"Multi-task learning for dense prediction tasks: A survey\",\n                \"Multi-Task Learning as Multi-Objective Optimization\",\n                \"Towards Full-line Code Completion with Neural Language Models\",\n                \"PyTorch: An Imperative Style, High-Performance Deep Learning Library\",\n                \"Huggingface’s transformers: State-of-the-art natural language processing\",\n                \"Adam: A method for stochastic optimization\",\n                \"Binary Codes Capable of Correcting Deletions, Insertions and Reversals\",\n                \"Bleu: a method for automatic evaluation of machine translation\"\n            ],\n            \"reasoning\": \"Selected these 40 citations for [ref]6 based on the context and research area of Syntax-Aware On-the-Fly Code Completion. The first title is the actual reference for this marker, followed by other relevant papers from the same research domain.\"\n        }\n    ]\n}"
    }
  ],
  "format": "chatml"
}