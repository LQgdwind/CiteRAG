{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 49 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Combining Neural Architecture Search and Automatic Code Optimization: A Survey\n\nPaper Abstract: Abstract Deep Learning (DL) models have experienced exponential growth in complexity and resource demands in recent years. Accelerating these models for efficient execution on resource-constrained devices has become more crucial than ever. Two notable techniques employed to achieve this goal are Hardware-aware Neural Architecture Search (HW-NAS) and Automatic Code Optimization (ACO). HW-NAS automatically designs accurate yet hardware-friendly Neural Networks, while ACO involves searching for the best compiler optimizations to apply on NNs for efficient mapping and inference on the target hardware. This survey explores recent works that combine these two techniques within a single framework. We present the fundamental principles of both domains and demonstrate their sub-optimality when performed independently. We then investigate their integration into a joint optimization process that we call Hardware Aware-Neural Architecture and Compiler Optimizations co-Search (NACOS).\n\n{retrieved_text}\n\nGenerate exactly 49 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 49\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Efficient deep learning: A survey on making deep learning models smaller, faster, and better\",\n        \"Quantization and training of neural networks for efficient integer-arithmetic-only inference\",\n        \"Distilling the knowledge in a neural network\",\n        \"Pytorch: An imperative style, high-performance deep learning library\",\n        \"A deep learning based cost model for automatic code optimization\",\n        \"Learning to optimize tensor programs\",\n        \"Hardware acceleration of sparse and irregular tensor computations of ml models: A survey and insights\",\n        \"Joint neural architecture search and quantization\",\n        \"Hardware/software co-exploration of neural architectures\",\n        \"Cocopie: enabling real-time ai on off-the-shelf mobile devices via compression-compilation co-design\",\n        \"Neural architecture search: a survey\",\n        \"ProxylessNAS: Direct neural architecture search on target task and hardware\",\n        \"Nas-fpn: Learning scalable feature pyramid architecture for object detection\",\n        \"Autokws: Keyword spotting with differentiable architecture search\",\n        \"A comprehensive survey on hardware-aware neural architecture search\",\n        \"Fast hardware-aware neural architecture search\",\n        \"Fbnet: Hardware-aware efficient convnet design via differentiable neural architecture search\",\n        \"Mnasnet: Platform-aware neural architecture search for mobile\",\n        \"Efficientnet: Rethinking model scaling for convolutional neural networks\",\n        \"Mixed precision neural architecture search for energy efficient deep learning\",\n        \"Nascaps: a framework for neural architecture search to optimize the accuracy and hardware efficiency of convolutional capsule networks\",\n        \"Hardware-aware neural architecture search: Survey and taxonomy\",\n        \"Learning to optimize halide with tree search and random programs\",\n        \"Tiramisu: A polyhedral compiler for expressing fast and portable code\",\n        \"Tvm: An automated end-to-end optimizing compiler for deep learning\",\n        \"Very deep convolutional networks for large-scale image recognition\",\n        \"Imagenet: A large-scale hierarchical image database\",\n        \"Mlir: scaling compiler infrastructure for domain specific computation\",\n        \"Mobilenets: Efficient convolutional neural networks for mobile vision applications\",\n        \"Deep residual learning for image recognition\",\n        \"Mcunet: Tiny deep learning on iot devices\",\n        \"A framework for neural network architecture and compile co-optimization\",\n        \"Efficient neural architecture search via parameters sharing\",\n        \"Squeeze-and-excitation networks\",\n        \"Weight-sharing neural architecture search: A battle to shrink the optimization gap\",\n        \"Neural architecture search as program transformation exploration\",\n        \"The organization of computations for uniform recurrence equations\",\n        \"Blockswap: Fisher-guided block substitution for network compression on a budget\",\n        \"How powerful are performance predictors in neural architecture search?\",\n        \"Naas: Neural accelerator architecture search\",\n        \"Once for all: Train one network and specialize it for efficient deployment\",\n        \"Low-power digital design\",\n        \"Compiler-aware neural architecture search for on-mobile real-time super-resolution\",\n        \"Adaptation in Natural and Artificial Systems: An Introductory Analysis with Applications to Biology, Control and Artificial Intelligence\",\n        \"Nas-bench-nlp: neural architecture search benchmark for natural language processing\",\n        \"Adversarialnas: Adversarial neural architecture search for gans\",\n        \"NAS-bench-101: Towards reproducible neural architecture search\",\n        \"Nas-bench-201: Extending the scope of reproducible neural architecture search\",\n        \"{HW}-{nas}-bench: Hardware-aware neural architecture search benchmark\"\n    ],\n    \"reasoning\": \"Selected these 49 references because they represent foundational work and recent advances in Combining Neural Architecture Search and Automatic Code Optimization: A Survey, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}