{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 46 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Stale Profile Matching\n\nPaper Abstract: Abstract. Profile-guided optimizations rely on profile data for directing compilers to generate optimized code. To achieve the maximum performance boost, profile data needs to be collected on the same version of the binary that is being optimized. In practice however, there is typically a gap between the profile collection and the release, which makes a portion of the profile invalid for optimizations. This phenomenon is known as profile staleness, and it is a serious practical problem for data-center workloads both for compilers and binary optimizers. In this paper we thoroughly study the staleness problem and propose the first practical solution for utilizing profiles collected on binaries built from several revisions behind the release. Our algorithm is developed and implemented in a mainstream open-source post-link optimizer, BOLT. An extensive evaluation on a variety of standalone benchmarks and production services indicates that the new method recovers up to 0.80.80.8 of the maximum BOLT benefit, even when most of the input profile data is stale and would have been discarded by the optimizer otherwise.\n\n{retrieved_text}\n\nGenerate exactly 46 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 46\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Binary analysis overview\",\n        \"Branch prediction for free\",\n        \"AutoFDO: Automatic feedback-directed optimization for warehouse-scale applications\",\n        \"Taming hardware event samples for precise and versatile feedback directed optimizations\",\n        \"The effect of code expanding optimizations on instruction cache design\",\n        \"Inlining for code size reduction\",\n        \"Register allocation for compressed ISAs in LLVM\",\n        \"A survey of binary code similarity\",\n        \"Profile inference revisited\",\n        \"Optimizing function layout for mobile applications\",\n        \"LLVM: A compilation framework for lifelong program analysis & transformation\",\n        \"Codestitcher: inter-procedural basic block layout optimization\",\n        \"Adaptive correction of sampling bias in dynamic call graphs\",\n        \"Efficient profile-guided size optimization for native mobile applications\",\n        \"Scalable size inliner for mobile applications (WIP)\",\n        \"Complementing missing and inaccurate profiling using a minimum cost circulation algorithm\",\n        \"Linker code size optimization for native mobile applications\",\n        \"Combinatorial register allocation and instruction scheduling\",\n        \"Ispike: A post-link optimizer for the Intel® Itanium® architecture\",\n        \"On the Extended TSP problem\",\n        \"Beetle: A feature-based approach to reduce staleness in profile data\",\n        \"VESPA: static profiling for binary optimization\",\n        \"Improved basic block reordering\",\n        \"Establishing a base of trust with performance counters for enterprise workloads\",\n        \"HHVM JIT: A profile-guided, region-based compiler for PHP and Hack\",\n        \"HHVM Jump-Start: Boosting both warmup and steady-state performance at scale\",\n        \"Optimizing function placement for large-scale data-center applications\",\n        \"BOLT: a practical binary optimizer for data centers and beyond\",\n        \"Lightning BOLT: powerful, fast, and scalable binary optimization\",\n        \"Profile guided code positioning\",\n        \"Learning branch probabilities in compiler from datacenter workloads\",\n        \"Google-wide profiling: A continuous profiling infrastructure for data centers\",\n        \"Loop rolling for code size reduction\",\n        \"HyFM: Function merging for free\",\n        \"Effective function merging in the SSA form\",\n        \"Profile guided optimization without profiles: A machine learning approach\",\n        \"PLTO: A link-time optimizer for the Intel IA-32 architecture\",\n        \"Propeller: A profile guided, relinking optimizer for warehouse-scale applications\",\n        \"Understanding and exploiting optimal function inlining\",\n        \"BMAT – A binary matching tool for stale profile propagation\",\n        \"Simple profile rectifications go a long way\",\n        \"Static branch frequency and program profile analysis\",\n        \"Can we trust profiling results? Understanding and fixing the inaccuracy in modern profilers\",\n        \"On the precision of precise event based sampling\",\n        \"Online code layout optimizations via OCOLOS\",\n        \"Examining and reducing the influence of sampling errors on feedback-driven optimizations\"\n    ],\n    \"reasoning\": \"Selected these 46 references because they represent foundational work and recent advances in Stale Profile Matching, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}