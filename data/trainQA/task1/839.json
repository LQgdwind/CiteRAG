{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 54 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: HetPipe: Enabling Large DNN Training on (Whimpy) Heterogeneous GPU Clusters through Integration of Pipelined Model Parallelism and Data Parallelism\n\nPaper Abstract: Abstract Deep Neural Network (DNN) models have continuously been growing in size in order to improve the accuracy and quality of the models. Moreover, for training of large DNN models, the use of heterogeneous GPUs is inevitable due to the short release cycle of new GPU architectures. In this paper, we investigate how to enable training of large DNN models on a heterogeneous GPU cluster that possibly includes whimpy GPUs that, as a standalone, could not be used for training. We present a DNN training system, HetPipe (Heterogeneous Pipeline), that integrates pipelined model parallelism (PMP) with data parallelism (DP). In HetPipe, a group of multiple GPUs, called a virtual worker, processes minibatches in a pipelined manner, and multiple such virtual workers employ data parallelism for higher performance. We also propose a novel parameter synchronization model, which we refer to as Wave Synchronous Parallel (WSP) to accommodate both PMP and DP for virtual workers, and provide convergence proof of WSP. Our experimental results on a given heterogeneous setting show that with HetPipe, DNN models converge up to 49% faster compared to the state-of-the-art DP technique.\n\n{retrieved_text}\n\nGenerate exactly 54 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 54\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"TensorFlow: A System for Large-Scale Machine Learning\",\n        \"Amazon EC2 Pricing\",\n        \"Latent Dirichlet Allocation\",\n        \"Large-Scale Machine Learning with Stochastic Gradient Descent\",\n        \"Efficient and Robust Parallel DNN Training through Model Parallelism on Multi-GPU Platform\",\n        \"Pipelined Back-Propagation for Context-Dependent Deep Neural Networks\",\n        \"Project Adam: Building an Efficient and Scalable Deep Learning Training System\",\n        \"A Unified Architecture for Natural Language Processing: Deep Neural Networks with Multitask Learning\",\n        \"Exploiting Bounded Staleness to Speed Up Big Data Analytics\",\n        \"Large Scale Distributed Deep Networks\",\n        \"ImageNet: A Large-Scale Hierarchical Image Database\",\n        \"CatBoost: gradient boosting with categorical features support\",\n        \"Accurate, large minibatch sgd: Training imagenet in 1 hour\",\n        \"Deep Residual Learning for Image Recognition\",\n        \"Deep Neural Networks for Acoustic Modeling in Speech Recognition\",\n        \"More Effective Distributed ML via a Stale Synchronous Parallel Parameter Server\",\n        \"GPipe: Efficient Training of Giant Neural Networks using Pipeline Parallelism\",\n        \"CPLEX-Optimizer\",\n        \"Priority-based Parameter Propagation for Distributed DNN Training\",\n        \"Beyond Data and Model Parallelism for Deep Neural Networks\",\n        \"Heterogeneity-aware Distributed Parameter Servers\",\n        \"A Novel Stochastic Gradient Descent Algorithm Based on Grouping over Heterogeneous Cluster Systems for Distributed Deep Learning\",\n        \"Split-CNN: Splitting Window-based Operations in Convolutional Neural Networks for Memory System Optimization\",\n        \"STRADS: A Distributed Framework for Scheduled Model Parallel Machine Learning\",\n        \"One weird trick for parallelizing convolutional neural networks\",\n        \"ImageNet Classification with Deep Convolutional Neural Networks\",\n        \"On Model Parallelization and Scheduling Strategies for Distributed Machine Learning\",\n        \"Scaling Distributed Machine Learning with the Parameter Server\",\n        \"Pipe-SGD: A Decentralized Pipelined SGD Framework for Distributed Deep Net Training\",\n        \"Asynchronous Decentralized Parallel Stochastic Gradient Descent\",\n        \"Hop: Heterogeneity-aware Decentralized Training\",\n        \"MLlib: Machine Learning in Apache Spark\",\n        \"Microsoft Azure Pricing\",\n        \"PipeDream: Generalized Pipeline Parallelism for DNN Training\",\n        \"GeForce RTX 2060\",\n        \"Quadro P4000\",\n        \"TITAN RTX\",\n        \"TITAN V\",\n        \"Optimizing Multi-GPU Parallelization Strategies for Deep Learning Training\",\n        \"Bandwidth Optimal All-reduce Algorithms for Clusters of Workstations\",\n        \"Paleo: A Performance Model for Deep Neural Networks\",\n        \"Regularized Evolution for Image Classifier Architecture Search\",\n        \"HOGWILD!: A Lock-Free Approach to Parallelizing Stochastic Gradient Descent\",\n        \"A Study on Detecting Drones Using Deep Convolutional Neural Networks\",\n        \"Horovod: fast and easy distributed deep learning in TensorFlow\",\n        \"Very Deep Convolutional Networks for Large-Scale Image Recognition\",\n        \"tf.train.replica_device_setter\",\n        \"Attention Is All You Need\",\n        \"Supporting Very Large Models using Automatic Dataflow Graph Partitioning\",\n        \"Internal Transfer Learning for Improving Performance in Human Action Recognition for Small Datasets\",\n        \"Image Quality Classification for DR Screening Using Deep Learning\",\n        \"Fast Asynchronous Parallel Stochastic Gradient Descent: A Lock-Free Approach with Convergence Guarantee\",\n        \"Benchmarking and Analyzing Deep Neural Network Training\",\n        \"Slow Learners are Fast\"\n    ],\n    \"reasoning\": \"Selected these 54 references because they represent foundational work and recent advances in HetPipe: Enabling Large DNN Training on (Whimpy) Heterogeneous GPU Clusters through Integration of Pipelined Model Parallelism and Data Parallelism, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}