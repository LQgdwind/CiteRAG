{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 49 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: COX: CUDA on X86 by Exposing Warp-Level Functions to CPUs\n\nPaper Abstract: Abstract As CUDA programs become the de facto program among data parallel applications such as high-performance computing or machine learning applications, running CUDA on other platforms has been a compelling option. Although several efforts have attempted to support CUDA on other than NVIDIA GPU devices, due to extra steps in the translation, the support is always behind a few years from supporting CUDA’s latest features. The examples are DPC, Hipfy, where CUDA source code have to be translated to their native supporting language and then they are supported. In particular, the new CUDA programming model exposes the warp concept in the programming language, which greatly changes the way the CUDA code should be mapped to CPU programs. In this paper, hierarchical collapsing that correctly supports CUDA warp-level functions on CPUs is proposed. Based on hierarchical collapsing, a framework, COX, is developed that allows CUDA programs with the latest features to be executed efficiently on CPU platforms. COX consists of a compiler IR transformation (new LLVM pass) and a runtime system to execute the transformed programs on CPU devices. COX can support the most recent CUDA features, and the application coverage is much higher (90%) than for previous frameworks (68%) with comparable performance. We also show that the warp-level functions in CUDA can be efficiently executed by utilizing CPU SIMD (AVX) instructions.\n\n{retrieved_text}\n\nGenerate exactly 49 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 49\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Hip\",\n        \"Dpct\",\n        \"Impact of cuda and opencl on parallel and distributed computing\",\n        \"2020gpgpu roundup\",\n        \"Mcuda: An efficient implementation of cuda kernels for multi-core cpus\",\n        \"Ocelot: a dynamic optimization framework for bulk-synchronous applications in heterogeneous systems\",\n        \"pocl: A performance-portable opencl implementation\",\n        \"Efficient compilation of fine-grained spmd-threaded programs for multicore cpus\",\n        \"Hipify\",\n        \"Intel-opencl\",\n        \"Pgi\",\n        \"Improving performance of opencl on cpus\",\n        \"A dynamic optimization framework for bulk-synchronous applications in heterogeneous systems\",\n        \"Compiling and executing cuda programs in emulation mode\",\n        \"Enabling simt execution model on homogeneous multi-core system\",\n        \"Twin peaks: a software platform for heterogeneous computing on general-purpose and graphics processors\",\n        \"Performance portability in accelerated parallel kernels\",\n        \"Performance of sse and avx instruction sets\",\n        \"Auto-vectorization of interleaved data for simd\",\n        \"Multi-platform auto-vectorization\",\n        \"Whole-function vectorization\",\n        \"Autovectorization in gcc–two years later\",\n        \"An evaluation of vectorizing compilers\",\n        \"Supergraph-slp auto-vectorization\",\n        \"Loop-aware slp in gcc\",\n        \"The opencl specification\",\n        \"Improving performance portability in opencl programs\",\n        \"Chunking parallel loops in the presence of synchronization\",\n        \"Cumulus-translating cuda to sequential c++: Simplifying the process of debugging cuda programs\",\n        \"Cub\",\n        \"Graphbig: understanding graph computing in the context of industrial solutions\",\n        \"Nvvm\",\n        \"A virtual gpu as developer-friendly openmp offload target\",\n        \"Cuda-sync\",\n        \"Llvm loop terminology\",\n        \"Hetero-mark, a benchmark suite for cpu-gpu collaborative computing\",\n        \"Supporting cuda for an extended risc-v gpu architecture\",\n        \"Porting a sparse linear algebra math library to intel gpus\",\n        \"Tomo3d 2.0–exploitation of advanced vector extensions (avx) for 3d reconstruction\",\n        \"Fast sorting algorithms using avx-512 on intel knights landing\",\n        \"A spmd compiler for high-performance cpu programming\",\n        \"Correctly treating synchronizations in compiling fine-grained spmd-threaded programs for cpu\",\n        \"Horus: A modular gpu emulator framework\",\n        \"Mapcg: Writing parallel program portable between cpu and gpu\",\n        \"Boosting cuda applications with cpu–gpu hybrid computing\",\n        \"Swan: A tool for porting cuda programs to opencl\",\n        \"On the portability of cpu-accelerated applications via automated source-to-source translation\",\n        \"Cuda-on-cl: a compiler and runtime for running nvidia® cuda™ c++ 11 applications on opencl™ 1.2 devices\",\n        \"Snucl: an opencl framework for heterogeneous cpu/gpu clusters\"\n    ],\n    \"reasoning\": \"Selected these 49 references because they represent foundational work and recent advances in COX: CUDA on X86 by Exposing Warp-Level Functions to CPUs, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}