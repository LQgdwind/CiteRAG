{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 49 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: DeepOnto: A Python Package for Ontology Engineering with Deep Learning\n\nPaper Abstract: Abstract Applying deep learning techniques, particularly language models (LMs), in ontology engineering has raised widespread attention. However, deep learning frameworks like PyTorch and Tensorflow are predominantly developed for Python programming, while widely-used ontology APIs, such as the OWL API and Jena, are primarily Java-based. To facilitate seamless integration of these frameworks and APIs, we present DeepOnto, a Python package designed for ontology engineering. The package encompasses a core ontology processing module founded on the widely-recognised and reliable OWL API, encapsulating its fundamental features in a more “Pythonic” manner and extending its capabilities to include other essential components including reasoning, verbalisation, normalisation, projection, and more. Building on this module, DeepOnto offers a suite of tools, resources, and algorithms that support various ontology engineering tasks, such as ontology alignment and completion, by harnessing deep learning methodologies, primarily pre-trained LMs. In this paper, we also demonstrate the practical utility of DeepOnto through two use-cases: the Digital Health Coaching in Samsung Research UK and the Bio-ML track of the Ontology Alignment Evaluation Initiative (OAEI).\n\n{retrieved_text}\n\nGenerate exactly 49 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 49\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Handbook on ontologies\",\n        \"Logmap: Logic-based and scalable ontology matching\",\n        \"BERTMap: a BERT-based ontology alignment system\",\n        \"Attention is all you need\",\n        \"HermiT: an OWL 2 reasoner\",\n        \"Ontology completion using graph convolutional networks\",\n        \"Contextual semantic embeddings for ontology subsumption prediction\",\n        \"Owl2vec*: Embedding of owl ontologies\",\n        \"TensorFlow: learning functions at scale\",\n        \"Pytorch: An imperative style, high-performance deep learning library\",\n        \"OWL 2 web ontology language profiles\",\n        \"The owl api: A java api for owl ontologies\",\n        \"Jena: implementing the semantic web recommendations\",\n        \"mOWL: Python library for machine learning with biomedical ontologies\",\n        \"Box2 EL: Concept and Role Box Embeddings for the Description Logic EL++\",\n        \"Reveal the Unknown: Out-of-Knowledge-Base Mention Discovery with Entity Linking\",\n        \"The protégé project: a look back and a look forward\",\n        \"ROBOT: a tool for automating ontology workflows\",\n        \"Owlready: Ontology-oriented programming in Python with automatic classification and high level constructs for biomedical ontologies\",\n        \"Huggingface’s transformers: State-of-the-art natural language processing\",\n        \"Openprompt: An open-source framework for prompt-learning\",\n        \"Language models are few-shot learners\",\n        \"Machine Learning-Friendly Biomedical Datasets for Equivalence and Subsumption Ontology Matching\",\n        \"Language Model Analysis for Ontology Subsumption Inference\",\n        \"Ontology modularization for knowledge selection: Experiments and evaluations\",\n        \"Pushing the EL envelope\",\n        \"El embeddings: Geometric construction of models for the description logic el++\",\n        \"OptiqueVQS: A visual query system over ontologies for industry\",\n        \"Bert: Pre-training of deep bidirectional transformers for language understanding\",\n        \"Roberta: A robustly optimized bert pretraining approach\",\n        \"Albert: A lite bert for self-supervised learning of language representations\",\n        \"BioBERT: a pre-trained biomedical language representation model for biomedical text mining\",\n        \"Clinicalbert: Modeling clinical notes and predicting hospital readmission\",\n        \"SNOMED-CT: The advanced terminology and coding system for eHealth\",\n        \"The foundational model of anatomy ontology\",\n        \"NCI Thesaurus: a semantic model integrating cancer-related clinical and molecular information\",\n        \"OMIM. org: Online Mendelian Inheritance in Man (OMIM®), an online catalog of human genes and genetic disorders\",\n        \"Ordo: an ontology connecting rare disease, epidemiology and genetic data\",\n        \"Disease Ontology: a backbone for disease semantic integration\",\n        \"The unified medical language system (UMLS): integrating biomedical terminology\",\n        \"Mondo Disease Ontology: harmonizing disease concepts across the world\",\n        \"Results of the Ontology Alignment Evaluation Initiative 2022\",\n        \"Language Models as Knowledge Bases?\",\n        \"Llama: Open and efficient foundation language models\",\n        \"Palm 2 technical report\",\n        \"Semantic Feature Verification in FLAN-T5\",\n        \"Ontology engineering\",\n        \"Deep learning with Keras\",\n        \"Structured prompt interrogation and recursive extraction of semantics (SPIRES): A method for populating knowledge bases using zero-shot learning\"\n    ],\n    \"reasoning\": \"Selected these 49 references because they represent foundational work and recent advances in DeepOnto: A Python Package for Ontology Engineering with Deep Learning, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}