{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 50 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Grounded Language Design for Lightweight Diagramming for Formal Methods\n\nPaper Abstract: Abstract. Model finding, as embodied by SAT solvers and similar tools, is used widely, both in embedding settings and as a tool in its own right. For instance, tools like Alloy target SAT to enable users to incrementally define, explore, verify, and diagnose sophisticated specifications for a large number of complex systems. These tools critically include a visualizer that lets users graphically explore these generated models. As we show, however, default visualizers, which know nothing about the domain, are unhelpful and even actively violate presentational and cognitive principles. At the other extreme, full-blown visualizations require significant effort as well as knowledge a specifier might not possess; they can also exhibit bad failure modes (including silent failure). Instead, we need a language to capture essential domain information for lightweight diagramming. We ground our language design in both the cognitive science literature on diagrams and on a large number of example custom visualizations. This identifies the key elements of lightweight diagrams. We distill these into a small set of orthogonal primitives. We extend an Alloy-like tool to support these primitives. We evaluate the effectiveness of the produced diagrams, finding them good for reasoning. We then compare this against many other drawing languages and tools to show that this work defines a new niche that is lightweight, effective, and driven by sound principles.\n\n{retrieved_text}\n\nGenerate exactly 50 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 50\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"The Cassowary linear arithmetic constraint solving algorithm\",\n        \"Exploring D3 implementation challenges on Stack Overflow\",\n        \"D3 data-driven documents\",\n        \"Information visualization principles, techniques, and software\",\n        \"1973 MBTA Rapid Transit Map Card\",\n        \"Self-stabilizing systems in spite of distributed control\",\n        \"cola.js: Constraint-Based Layout in the Browser\",\n        \"Sterling JS Demo\",\n        \"Sterling: A web-based visualizer for relational modeling languages\",\n        \"Applying cognitive principles to model-finding output: the positive value of negative information\",\n        \"An efficient method for obtaining similarity data\",\n        \"Setcola: High-level constraints for graph layout\",\n        \"Software Abstractions: Logic, Language, and Analysis (2 ed.)\",\n        \"Lightweight Formal Methods\",\n        \"Perception: an introduction to the Gestalt-Theorie\",\n        \"A Translation from Alloy to B\",\n        \"BMotionWeb: A Tool for Rapid Creation of Formal Prototypes\",\n        \"Why a diagram is (sometimes) worth ten thousand words\",\n        \"ProB: A Model Checker for B\",\n        \"How domain experts create conceptual diagrams and implications for tool design\",\n        \"The scratch programming language and environment\",\n        \"An empirical study assessing software modeling in Alloy\",\n        \"The user-widgets system\",\n        \"Bordeaux: A tool for thinking outside the box\",\n        \"The Lean 4 Theorem Prover and Programming Language\",\n        \"Interactive visual analytics on Big Data: Tableau vs D3. js\",\n        \"Expert blind spot: When content knowledge eclipses pedagogical content knowledge\",\n        \"Expert blind spot among preservice teachers\",\n        \"An Extensible User Interface for Lean 4\",\n        \"Forge: A Tool and Language for Teaching Formal Methods\",\n        \"Declarative program development in Prolog with GUPU\",\n        \"Visualizing Solutions with Viewers.\",\n        \"Dagre: A JavaScript library for directed graph layouts\",\n        \"Bluefish: Composing Diagrams with Declarative Relations\",\n        \"Which aesthetic has the greatest effect on human understanding?\",\n        \"Cytoscape: a software environment for integrated models of biomolecular interaction networks\",\n        \"Scope marking in computer conditionalsâ€”a psychological evaluation\",\n        \"The Quorum Programming Language (Abstract Only)\",\n        \"An empirical investigation into programming language syntax\",\n        \"Chord: A scalable peer-to-peer lookup service for internet applications\",\n        \"Studies of interference in serial verbal reactions\",\n        \"Evidence for cognitive load theory\",\n        \"The visual display of quantitative information. Vol. 2\",\n        \"The behavior of gradual types: a user study\",\n        \"Can we crowdsource language design?\",\n        \"Spatial schemas in depictions\",\n        \"VisB: A Lightweight Tool to Visualize Formal Models with SVG Graphics\",\n        \"Interference in identifying attributes and attribute names\",\n        \"animate-lean-proofs\",\n        \"Penrose: from mathematical notation to beautiful diagrams\"\n    ],\n    \"reasoning\": \"Selected these 50 references because they represent foundational work and recent advances in Grounded Language Design for Lightweight Diagramming for Formal Methods, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}