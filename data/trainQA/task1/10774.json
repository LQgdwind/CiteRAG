{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 42 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Orca-Math: Unlocking the potential of SLMs in Grade School Math\n\nPaper Abstract: Abstract We show that an SLM can reach ∼87%similar-toabsentpercent87\\sim 87\\% pass@1 on GSM8K while trained on only 200K synthetic math problems. Mathematical word problem-solving has long been recognized as a complex task for small language models (SLMs). A recent study hypothesized that the smallest model size, needed to achieve over 80% accuracy on the GSM8K benchmark, is 34 billion parameters. To reach this level of performance with smaller models, researcher often train SLMs to generate Python code or use tools to help avoid calculation errors. Additionally, they employ ensembling, where outputs of up to 100 model runs are combined to arrive at a more accurate result. Result selection is done using consensus, majority vote or a separate a verifier model used in conjunction with the SLM. Ensembling provides a substantial boost in accuracy but at a significant cost increase with multiple calls to the model (e.g., Phi-GSM uses top-48 to boost the performance from 68.2 to 81.5, [38] uses top-100 to boost LLAMA-2’s performance from 38.6% to 71.9%). In this work, we present Orca-Math, a 7-billion-parameter SLM based on the Mistral-7B, which achieves 86.81% on GSM8k without the need for multiple model calls or the use of verifiers, code execution or any other external tools. Our approach has the following key elements: (1) A high quality synthetic dataset of 200K math problems created using a multi-agent setup where agents collaborate to create the data, (2) An iterative learning techniques that enables the SLM to practice solving problems, receive feedback on its solutions and learn from preference pairs incorporating the SLM solutions and the feedback. When trained with Supervised Fine-Tuning alone, Orca-Math achieves 81.50% on GSM8k pass@1 metric. With iterative preference learning, Orca-Math achieves 86.81% pass@1. Orca-Math surpasses the performance of significantly larger models such as LLAMA-2-70B, WizardMath-70B, Gemini-Pro, ChatGPT-3.5. It also significantly outperforms other smaller models while using much smaller data (hundreds of thousands vs. millions of problems).\n\n{retrieved_text}\n\nGenerate exactly 42 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 42\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Gpt-4 technical report\",\n        \"Mathqa: Towards interpretable math word problem solving with operation-based formalisms\",\n        \"A general theoretical paradigm to understand learning from human preferences\",\n        \"Llemma: An open language model for mathematics\",\n        \"Self-play fine-tuning converts weak language models to strong language models\",\n        \"Adapting large language models via reading comprehension\",\n        \"Training verifiers to solve math word problems\",\n        \"Ultrafeedback: Boosting language models with high-quality feedback\",\n        \"Enhancing chat language models by scaling high-quality instructional conversations\",\n        \"Kto: Model alignment as prospect theoretic optimization\",\n        \"Gemini: A family of highly capable multimodal models\",\n        \"Tora: A tool-integrated reasoning agent for mathematical problem solving\",\n        \"Learning to solve arithmetic word problems with verb categorization\",\n        \"Mistral 7b\",\n        \"It ain’t over: A multi-aspect diverse math word problem dataset\",\n        \"Parsing algebraic word problems into equations\",\n        \"Learning to automatically solve algebra word problems\",\n        \"Camel: Communicative agents for \\\"mind\\\" exploration of large scale language model society\",\n        \"Textbooks are all you need ii: phi-1.5 technical report\",\n        \"Openorca: An open dataset of gpt augmented flan reasoning traces\",\n        \"Tinygsm: achieving> 80% on gsm8k with small language models\",\n        \"Statistical rejection sampling improves preference optimization\",\n        \"Wizardmath: Empowering mathematical reasoning for large language models via reinforced evol-instruct\",\n        \"A diverse corpus for evaluating and developing english math word problem solvers\",\n        \"Lila: A unified benchmark for mathematical reasoning\",\n        \"Numglue: A suite of fundamental yet challenging mathematical reasoning tasks\",\n        \"Orca 2: Teaching small language models how to reason\",\n        \"Orca: Progressive learning from complex explanation traces of gpt-4\",\n        \"Are nlp models really able to solve simple math word problems?\",\n        \"Direct preference optimization: Your language model is secretly a reward model\",\n        \"Solving general arithmetic word problems\",\n        \"Reasoning about quantities in natural language\",\n        \"Llama 2: Open foundation and fine-tuned chat models\",\n        \"Draw: A challenging and diverse algebra word problem set\",\n        \"Self-instruct: Aligning language model with self generated instructions\",\n        \"Autogen: Enabling next-gen llm applications via multi-agent conversation framework\",\n        \"Outcome-supervised verifiers for planning in mathematical reasoning\",\n        \"Metamath: Bootstrap your own mathematical questions for large language models\",\n        \"Self-rewarding language models\",\n        \"Mammoth: Building math generalist models through hybrid instruction tuning\",\n        \"Templatemath: Syntactic data generation for mathematical problems\",\n        \"Lima: Less is more for alignment\"\n    ],\n    \"reasoning\": \"Selected these 42 references because they represent foundational work and recent advances in Orca-Math: Unlocking the potential of SLMs in Grade School Math, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}