{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 65 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: FLAC: A Robust Failure-Aware Atomic Commit Protocol for Distributed Transactions (Extended Version)\n\nPaper Abstract: Abstract. In distributed transaction processing, atomic commit protocol (ACP) is used to ensure database consistency. With the use of commodity compute nodes and networks, failures such as system crashes and network partitioning are common. It is therefore important for ACP to dynamically adapt to the operating condition for efficiency while ensuring the consistency of the database. Existing ACPs often assume stable operating conditions, hence, they are either non-generalizable to different environments or slow in practice. In this paper, we propose a novel and practical ACP, called Failure-Aware Atomic Commit (FLAC). In essence, FLAC includes three protocols, which are specifically designed for three different environments: (i) no failure occurs, (ii) participant nodes might crash but there is no delayed connection, or (iii) both crashed nodes and delayed connection can occur. It models these environments as the failure-free, crash-failure, and network-failure robustness levels. During its operation, FLAC can monitor if any failure occurs and dynamically switch to operate the most suitable protocol, using a robustness level state machine, whose parameters are fine-tuned by reinforcement learning. Consequently, it improves both the response time and throughput, and effectively handles nodes distributed across the Internet where crash and network failures might occur. We implement FLAC in a distributed transactional key-value storage system based on Google Percolator and evaluate its performance with both a micro benchmark and a macro benchmark of real workload. The results show that FLAC achieves up to 2.22x throughput improvement and 2.82x latency speedup, compared to existing ACPs for high-contention workloads.\n\n{retrieved_text}\n\nGenerate exactly 65 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 65\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Source code of FLAC\",\n        \"fla\",\n        \"One-phase commit: does it make sense?\",\n        \"The Implicit-Yes Vote Commit Protocol with Delegation of Commitment\",\n        \"ML-1-2PC: An Adaptive Multi-level Atomic Commit Protocol, Vol. 3255\",\n        \"1-2PC: The One-Two Phase Atomic Commit Protocol\",\n        \"Enhancing the performance of presumed commit protocol\",\n        \"The presumed-either two-phase commit protocol\",\n        \"Practical Byzantine fault tolerance and proactive recovery\",\n        \"Unreliable Failure Detectors for Asynchronous Distributed Systems\",\n        \"Data-intensive applications, challenges, techniques and technologies: A survey on Big Data\",\n        \"Achieving low tail-latency and high scalability for serializable transactions in edge computing\",\n        \"Recovery and performance of atomic commit processing in distributed database systems\",\n        \"Benchmarking cloud serving systems with YCSB\",\n        \"Spanner: Google’s globally distributed database\",\n        \"TPC benchmark C (standard specification, revision 5.11), 2010\",\n        \"Understanding fault-tolerant distributed systems\",\n        \"FlashStore: High throughput persistent key-value store\",\n        \"Dynamo: Amazon’s highly available key-value store\",\n        \"Cryptographic protocols\",\n        \"Impossibility of distributed consensus with one faulty process\",\n        \"Quality-of-service specification in distributed object systems\",\n        \"Consensus on transaction commit\",\n        \"Transaction processing: concepts and techniques\",\n        \"Non-blocking atomic commit in asynchronous distributed systems with failure detectors\",\n        \"The Weakest Failure Detectors To Solve Quittable Consensus And Nonblocking Atomic Commit\",\n        \"Non-Blocking Atomic Commitment with an Unreliable Failure Detector\",\n        \"How Fast Can a Distributed Transaction Commit?\",\n        \"EasyCommit: A Non-blocking Two-phase Commit Protocol.\",\n        \"Efficient and non-blocking agreement protocols\",\n        \"Reliability mechanisms for SDD-1: A system for distributed databases\",\n        \"Gray failure: The achilles’ heel of cloud-scale systems\",\n        \"P4DB - The Case for In-Network OLTP (Extended Technical Report)\",\n        \"Design and implementation of Three Phase Commit Protocol (3PC) algorithm\",\n        \"Fast paxos\",\n        \"A new presumed commit optimization for two phase commit\",\n        \"An optimistic commit protocol for distributed transaction management\",\n        \"Qtune: A query-aware database tuning system with deep reinforcement learning\",\n        \"Epoch-based commit and replication in distributed OLTP databases\",\n        \"Fides: Managing data on untrusted infrastructure\",\n        \"Unifying consensus and atomic commitment for effective cloud data management\",\n        \"Transaction management in the R* distributed database management system\",\n        \"A two-phase commit protocol for mobile wireless environment\",\n        \"Reducing late-timing failure at scale: Straggler root-cause analysis in cloud datacenters\",\n        \"Large-scale incremental processing using distributed transactions and notifications\",\n        \"Zygos: Achieving low tail latency for microsecond-scale networked tasks\",\n        \"Highly Available Queue-oriented Speculative Transaction Processing\",\n        \"Fine-grained, secure and efficient data provenance on blockchain systems\",\n        \"Self-Adaptive Component-Based Transaction Commit Management\",\n        \"Nonblocking Commit Protocols\",\n        \"A quorum-based commit protocol\",\n        \"A formal model of crash recovery in a distributed system\",\n        \"A low-cost atomic commit protocol\",\n        \"Coordinator log transaction execution protocol\",\n        \"Concurrency control and consistency of multiple copies of data in distributed INGRES\",\n        \"C3: Cutting tail latency in cloud data stores via adaptive replica selection\",\n        \"Q-learning\",\n        \"Domino: using network measurements to reduce state machine replication latency in wans\",\n        \"OceanBase: A 707 Million tpmC Distributed Relational Database System\",\n        \"Mutant: Balancing storage cost and latency in lsm-tree data stores\",\n        \"Practical online failure prediction for blue gene/p: Period-based vs event-driven\",\n        \"A Dynamic Two-Phase Commit Protocol for Adaptive Composite Services\",\n        \"Sundial: Harmonizing Concurrency Control and Caching in a Distributed OLTP Database Management System\",\n        \"Building consistent transactions with inconsistent replication\",\n        \"Failure prediction in IBM BlueGene/L event logs\"\n    ],\n    \"reasoning\": \"Selected these 65 references because they represent foundational work and recent advances in FLAC: A Robust Failure-Aware Atomic Commit Protocol for Distributed Transactions (Extended Version), providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}