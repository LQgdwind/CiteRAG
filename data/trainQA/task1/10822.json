{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 43 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: CLAP: Learning Transferable Binary Code Representations with Natural Language Supervision\n\nPaper Abstract: Abstract. Binary code representation learning has shown significant performance in binary analysis tasks. But existing solutions often have poor transferability, particularly in few-shot and zero-shot scenarios where few or no training samples are available for the tasks. To address this problem, we present CLAP (Contrastive Language-Assembly Pre-training), which employs natural language supervision to learn better representations of binary code (i.e., assembly code) and get better transferability. At the core, our approach boosts superior transfer learning capabilities by effectively aligning binary code with their semantics explanations (in natural language), resulting a model able to generate better embeddings for binary code. To enable this alignment training, we then propose an efficient dataset engine that could automatically generate a large and diverse dataset comprising of binary code and corresponding natural language explanations. We have generated 195 million pairs of binary code and explanations and trained a prototype of CLAP. The evaluations of CLAP across various downstream tasks in binary analysis all demonstrate exceptional performance. Notably, without any task-specific training, CLAP is often competitive with a fully supervised baseline, showing excellent transferability. We release our pre-trained model and code at https://github.com/Hustcw/CLAP.\n\n{retrieved_text}\n\nGenerate exactly 43 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 43\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Improving language models by retrieving from trillions of tokens\",\n        \"Language Models are Few-Shot Learners\",\n        \"Ubuntu: Enterprise open source and linux\",\n        \"Vicuna: An open-source chatbot impressing gpt-4 with 90%* chatgpt quality\",\n        \"Neural nets can learn function type signatures from binaries\",\n        \"Investigating Graph Embedding Methods for Cross-Platform Binary Code Similarity Detection\",\n        \"Asm2Vec: Boosting Static Representation Robustness for Binary Clone Search against Code Obfuscation and Compiler Optimization\",\n        \"Deepvsa: Facilitating value-set analysis with deep learning for postmortem program analysis\",\n        \"Ida pro disassembler and debugger\",\n        \"Long short-term memory\",\n        \"Semi-supervised classification with graph convolutional networks\",\n        \"Subword regularization: Improving neural network translation models with multiple subword candidates\",\n        \"Dire: A neural approach to decompiled identifier naming\",\n        \"Gradient-based learning applied to document recognition\",\n        \"PalmTree: Learning an Assembly Language Model for Instruction Embedding\",\n        \"Graph matching networks for learning the similarity of graph structured objects\",\n        \"Œ±ùõº\\\\alphadiff: cross-version binary code similarity detection with dnn\",\n        \"CMA-CLIP: Cross-Modality Attention CLIP for Image-Text Classification\",\n        \"RoBERTa: A Robustly Optimized BERT Pretraining Approach\",\n        \"Clang: a c language family frontend for llvm\",\n        \"VulHawk: Cross-architecture Vulnerability Detection with Entropy-based Binary Code Search\",\n        \"How Machine Learning Is Solving the Binary Function Similarity Problem\",\n        \"Investigating Graph Embedding Neural Networks with Unsupervised Features Extraction for Binary Analysis\",\n        \"SAFE: Self-Attentive Function Embeddings for Binary Similarity\",\n        \"Representation learning with contrastive predictive coding\",\n        \"GPT-4 Technical Report\",\n        \"Chatgpt\",\n        \"Pytorch: An imperative style, high-performance deep learning library\",\n        \"Trex: Learning Execution Semantics from Micro-Traces for Binary Similarity\",\n        \"Learning Transferable Visual Models From Natural Language Supervision\",\n        \"Language Models are Unsupervised Multitask Learners\",\n        \"Malware detection by eating a whole exe\",\n        \"Sentence transformer: Mpnet-base-v2\",\n        \"Recognizing functions in binaries with neural networks\",\n        \"LLaMA: Open and Efficient Foundation Language Models\",\n        \"Visualizing data using t-sne\",\n        \"Order Matters: Sequence to sequence for sets\",\n        \"jTrans: Jump-aware transformer for binary code similarity detection\",\n        \"Neural network-based graph embedding for cross-platform binary code similarity detection\",\n        \"Codee: a tensor embedding scheme for binary code search\",\n        \"Order Matters: Semantic-Aware Neural Networks for Binary Code Similarity Detection\",\n        \"CodeCMR: Cross-Modal Retrieval For Function-Level Binary Source Code Matching\",\n        \"LIMA: Less Is More for Alignment\"\n    ],\n    \"reasoning\": \"Selected these 43 references because they represent foundational work and recent advances in CLAP: Learning Transferable Binary Code Representations with Natural Language Supervision, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}