{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 44 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Learning Logic Programs From Noisy Failures\n\nPaper Abstract: Abstract Inductive Logic Programming (ILP) is a form of machine learning (ML) which in contrast to many other state of the art ML methods typically produces highly interpretable and reusable models. However, many ILP systems lack the ability to naturally learn from any noisy or partially missclassified training data. We introduce the relaxed learning from failures approach to ILP, a noise handling modification of the previously introduced learning from failures (LFF) approach [13] which is incapable of handling noise. We additionally introduce the novel Noisy Popper ILP system which implements this relaxed approach and is a modification of the existing Popper system [13]. Like Popper, Noisy Popper takes a generate-test-constrain loop to search its hypothesis space wherein failed hypotheses are used to construct hypothesis constraints. These constraints are used to prune the hypothesis space, making the hypothesis search more efficient. However, in the relaxed setting, constraints are generated in a more lax fashion as to avoid allowing noisy training data to lead to hypothesis constraints which prune optimal hypotheses. Constraints unique to the relaxed setting are generated via hypothesis comparison. Additional constraints are generated by weighing the accuracy of hypotheses against their sizes to avoid overfitting through an application of the minimum description length. We support this new setting through theoretical proofs as well as experimental results which suggest that Noisy Popper improves the noise handling capabilities of Popper but at the cost of overall runtime efficiency.\n\n{retrieved_text}\n\nGenerate exactly 44 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 44\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Efficient program synthesis using constraint satisfaction in inductive logic programming\",\n        \"Improving numerical reasoning capabilities of inductive logic programming systems\",\n        \"Learning through hypothesis refinement using answer set programming\",\n        \"Top-down induction of first-order logical decision trees\",\n        \"End to end learning for self-driving cars\",\n        \"Refining complete hypotheses in ILP\",\n        \"Inductive logic programming in answer set programming\",\n        \"Efficiently learning efficient programs\",\n        \"Playgol: Learning programs through play\",\n        \"Forgetting to learn logic programs\",\n        \"Turning 30: New ideas in inductive logic programming\",\n        \"Inductive general game playing\",\n        \"Learning programs by learning from failures\",\n        \"Learning higher-order logic programs\",\n        \"Logical reduction of metarules\",\n        \"Imagenet: A large-scale hierarchical image database\",\n        \"Learning explanatory rules from noisy data\",\n        \"The international general game playing competition\",\n        \"Minimum description length revisited\",\n        \"Exploiting answer set programming with external sources for meta-interpretive learning\",\n        \"Np-completeness of the set unification and matching problems\",\n        \"Mcnemar test\",\n        \"Building machines that learn and think like people\",\n        \"Inductive learning of answer set programs\",\n        \"Inductive learning of answer set programs from noisy examples\",\n        \"Bias reformulation for one-shot function induction\",\n        \"Machine learning in the next five years\",\n        \"A bounded search space of clausal theories\",\n        \"Machine learning, International Edition\",\n        \"Never-ending learning\",\n        \"Inductive logic programming\",\n        \"Inverse entailment and progol\",\n        \"Meta-interpretive learning from noisy images\",\n        \"Meta-interpretive learning of higher-order dyadic datalog: predicate invention revisited\",\n        \"Ultra-strong machine learning: comprehensibility of programs learned with ILP\",\n        \"Foundations of inductive logic programming, volume 1228\",\n        \"Automatic methods of inductive inference\",\n        \"Induction of decision trees\",\n        \"Learning logical definitions from relations\",\n        \"Inferring decision trees using the minimum description length principle\",\n        \"Modeling by shortest data description\",\n        \"Best-effort inductive logic programming via fine-grained cost-based hypothesis generation - the inspire system at the inductive logic programming competition\",\n        \"Mastering the game of go with deep neural networks and tree search\",\n        \"The aleph manual\"\n    ],\n    \"reasoning\": \"Selected these 44 references because they represent foundational work and recent advances in Learning Logic Programs From Noisy Failures, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}