{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 50 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: KerGNNs: Interpretable Graph Neural Networks with Graph Kernels\n\nPaper Abstract: Abstract Graph kernels are historically the most widely-used technique for graph classification tasks. However, these methods suffer from limited performance because of the hand-crafted combinatorial features of graphs. In recent years, graph neural networks (GNNs) have become the state-of-the-art method in downstream graph-related tasks due to their superior performance. Most GNNs are based on Message Passing Neural Network (MPNN) frameworks. However, recent studies show that MPNNs can not exceed the power of the Weisfeiler-Lehman (WL) algorithm in graph isomorphism test. To address the limitations of existing graph kernel and GNN methods, in this paper, we propose a novel GNN framework, termed Kernel Graph Neural Networks (KerGNNs), which integrates graph kernels into the message passing process of GNNs. Inspired by convolution filters in convolutional neural networks (CNNs), KerGNNs adopt trainable hidden graphs as graph filters which are combined with subgraphs to update node embeddings using graph kernels. In addition, we show that MPNNs can be viewed as special cases of KerGNNs. We apply KerGNNs to multiple graph-related tasks and use cross-validation to make fair comparisons with benchmarks. We show that our method achieves competitive performance compared with existing state-of-the-art methods, demonstrating the potential to increase the representation ability of GNNs. We also show that the trained graph filters in KerGNNs can reveal the local graph structures of the dataset, which significantly improves the model interpretability compared with conventional GNN models111https://github.com/asFeng/kergnns.\n\n{retrieved_text}\n\nGenerate exactly 50 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 50\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Mixhop: Higher-order graph convolutional architectures via sparsified neighborhood mixing\",\n        \"Explainability techniques for graph convolutional networks\",\n        \"Shortest-path kernels on graphs\",\n        \"Protein function prediction via graph kernels\",\n        \"Convolutional kernel networks for graph-structured data\",\n        \"Simple and deep graph convolutional networks\",\n        \"Supervised community detection with line graph neural networks\",\n        \"Distinguishing enzyme structures from non-enzymes without alignments\",\n        \"Graph neural tangent kernel: Fusing graph neural networks with graph kernels\",\n        \"A fair comparison of graph neural networks for graph classification\",\n        \"On graph kernels: Hardness results and efficient alternatives\",\n        \"Neural message passing for quantum chemistry\",\n        \"Inductive representation learning on large graphs\",\n        \"Convolution kernels on discrete structures\",\n        \"Marginalized kernels between labeled graphs\",\n        \"Benchmark Data Sets for Graph Kernels\",\n        \"Semi-supervised classification with graph convolutional networks\",\n        \"Predict then propagate: Graph neural networks meet personalized pagerank\",\n        \"Directional message passing for molecular graphs\",\n        \"A survey on graph kernels\",\n        \"Deriving neural architectures from sequence and graph kernels\",\n        \"A reduction of a graph to a canonical form and an algebra arising during this reduction\",\n        \"End-to-end kernel learning with supervised convolutional kernel networks\",\n        \"Convolutional kernel networks\",\n        \"Provably powerful graph networks\",\n        \"Weisfeiler and leman go neural: Higher-order graph neural networks\",\n        \"Pre-training graph neural networks with kernels\",\n        \"Propagation kernels: efficient graph kernels from propagated information\",\n        \"Graph Homomorphism Convolution\",\n        \"Kernel graph convolutional neural networks\",\n        \"Random Walk Graph Neural Networks\",\n        \"Geom-gcn: Geometric graph convolutional networks\",\n        \"Explainability methods for graph convolutional neural networks\",\n        \"Multi-scale attributed node embedding\",\n        \"Approximation ratios of graph neural networks for combinatorial problems\",\n        \"BRENDA, the enzyme database: updates and major new developments\",\n        \"Collective classification in network data\",\n        \"Weisfeiler-lehman graph kernels\",\n        \"Efficient graphlet kernels for large graph comparison\",\n        \"GraKeL: A Graph Kernel Library in Python\",\n        \"Dynamic edge-conditioned filters in convolutional neural networks on graphs\",\n        \"Graph attention networks\",\n        \"Fast computation of graph kernels\",\n        \"How powerful are graph neural networks?\",\n        \"Representation learning on graphs with jumping knowledge networks\",\n        \"Deep graph kernels\",\n        \"Gnnexplainer: Generating explanations for graph neural networks\",\n        \"Hierarchical graph representation learning with differentiable pooling\",\n        \"Link prediction based on graph neural networks\",\n        \"An end-to-end deep learning architecture for graph classification\"\n    ],\n    \"reasoning\": \"Selected these 50 references because they represent foundational work and recent advances in KerGNNs: Interpretable Graph Neural Networks with Graph Kernels, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}