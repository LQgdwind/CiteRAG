{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 47 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Think Outside the Code: Brainstorming Boosts Large Language Models in Code Generation\n\nPaper Abstract: Abstract Code generation aims to automatically generate source code from high-level task specifications, which can significantly increase productivity of software engineering. Recently, approaches based on large language models (LLMs) have shown remarkable code generation abilities on simple tasks. However, generate code for more complex tasks, such as competition-level problems, remains challenging. In this paper, we introduce Brainstorm framework for code generation. It leverages a brainstorming step that generates and selects diverse thoughts on the problem to facilitate algorithmic reasoning, where the thoughts are possible blueprint of solving the problem. We demonstrate that Brainstorm significantly enhances the ability of LLMs to solve competition-level programming problems, resulting in a more than 50% increase in the pass@kùëòk metrics for ChatGPT on the CodeContests benchmark, achieving state-of-the-art performance. Furthermore, our experiments conducted on LeetCode contests show that our framework boosts the ability of ChatGPT to a level comparable to that of human programmers.\n\n{retrieved_text}\n\nGenerate exactly 47 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 47\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Language models are few-shot learners\",\n        \"Program synthesis with large language models\",\n        \"Evaluating large language models trained on code\",\n        \"Codegen: An open large language model for code with multi-turn program synthesis\",\n        \"ChatGPT: Optimizing language models for dialogue\",\n        \"GPT-4 technical report\",\n        \"Competition-level code generation with alphacode\",\n        \"Parsel: A unified natural language framework for algorithmic reasoning\",\n        \"CodeRL: Mastering code generation through pretrained models and deep reinforcement learning\",\n        \"Measuring coding challenge competence with APPS\",\n        \"Application of theorem proving to problem solving\",\n        \"Toward automatic program synthesis\",\n        \"Automating string processing in spreadsheets using input-output examples\",\n        \"Latent predictor networks for code generation\",\n        \"A syntactic neural model for general-purpose code generation\",\n        \"Mapping language to code in programmatic context\",\n        \"TreeGen: A tree-based transformer architecture for code generation\",\n        \"Probabilistic model for code with decision trees\",\n        \"Neural sketch learning for conditional program generation\",\n        \"Learning autocompletion from real-world datasets\",\n        \"Learning to complete code with sketches\",\n        \"RobustFill: Neural program learning under noisy i/o\",\n        \"SPoC: Search-based pseudocode to code\",\n        \"Attention is all you need\",\n        \"BERT: Pre-training of deep bidirectional transformers for language understanding\",\n        \"Language models are unsupervised multitask learners\",\n        \"Exploring the limits of transfer learning with a unified text-to-text transformer\",\n        \"Learning and evaluating contextual embedding of source code\",\n        \"CodeBERT: A pre-trained model for programming and natural languages\",\n        \"PyMT5: Multi-mode translation of natural language and Python code with transformers\",\n        \"GraphCodeBERT: Pre-training code representations with data flow\",\n        \"CodeT5: Identifier-aware unified pre-trained encoder-decoder models for code understanding and generation\",\n        \"CodeXGLUE: A machine learning benchmark dataset for code understanding and generation\",\n        \"UniXcoder: Unified cross-modal pre-training for code representation\",\n        \"A systematic evaluation of large language models of code\",\n        \"GPT-NeoX-20B: An open-source autoregressive language model\",\n        \"InCoder: A generative model for code infilling and synthesis\",\n        \"CodeT: Code generation with generated tests\",\n        \"Fault-aware neural code rankers\",\n        \"Text generation by learning from demonstrations\",\n        \"Investigating softmax tempering for training neural machine translation models\",\n        \"Sparks of artificial general intelligence: Early experiments with GPT-4\",\n        \"The curious case of neural text degeneration\",\n        \"Xlnet: Generalized autoregressive pretraining for language understanding\",\n        \"Chain of thought prompting elicits reasoning in large language models\",\n        \"GPT-Neo: Large Scale Autoregressive Language Modeling with Mesh-Tensorflow\",\n        \"GPT-J-6B: A 6 Billion Parameter Autoregressive Language Model\"\n    ],\n    \"reasoning\": \"Selected these 47 references because they represent foundational work and recent advances in Think Outside the Code: Brainstorming Boosts Large Language Models in Code Generation, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}