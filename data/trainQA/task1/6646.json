{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 44 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Cornet: Learning Table Formatting Rules By Example\n\nPaper Abstract: Abstract. Spreadsheets are widely used for table manipulation and presentation. Stylistic formatting of these tables is an important property for both presentation and analysis. As a result, popular spreadsheet software, such as Excel, supports automatically formatting tables based on rules. Unfortunately, writing such formatting rules can be challenging for users as it requires knowledge of the underlying rule language and data logic. We present Cornet, a system that tackles the novel problem of automatically learning such formatting rules from user examples in the form of formatted cells. Cornet takes inspiration from advances in inductive programming and combines symbolic rule enumeration with a neural ranker to learn conditional formatting rules. To motivate and evaluate our approach, we extracted tables with over 450K unique formatting rules from a corpus of over 1.8M real worksheets. Since we are the first to introduce conditional formatting, we compare Cornet to a wide range of symbolic and neural baselines adapted from related domains. Our results show that Cornet accurately learns rules across varying evaluation setups. Additionally, we show that Cornet finds shorter rules than those that a user has written and discovers rules in spreadsheets that users have manually formatted.\n\n{retrieved_text}\n\nGenerate exactly 44 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 44\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Spreadsheet Conditional Formatting: An Untapped Resource for Mathematics Education\",\n        \"Fuse: a reproducible, extendable, internet-scale corpus of spreadsheets\",\n        \"Top-down induction of first-order logical decision trees\",\n        \"SpreadsheetCoder: Formula Prediction from Semi-structured Context\",\n        \"Learning Programs by Learning from Failures\",\n        \"BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding\",\n        \"SPARQLByE: Querying RDF Data by Example\",\n        \"Neural Formatting for Spreadsheet Tables\",\n        \"Wrex: A Unified Programming-by-Example Interaction for Synthesizing Readable Code for Data Scientists\",\n        \"Learning to Learn Programs from Examples: Going Beyond Program Structure\",\n        \"Excel Tech Help Forum\",\n        \"Example-Driven Query Intent Discovery: Abductive Reasoning Using Semantic Similarity\",\n        \"CoCo: Interactive Exploration of Conformance Constraints for Data Understanding and Data Cleaning\",\n        \"Component-Based Synthesis of Table Consolidation and Transformation Tasks from Examples\",\n        \"CodeBERT: A Pre-Trained Model for Programming and Natural Languages\",\n        \"The EUSES spreadsheet corpus: a shared resource for supporting experimentation with spreadsheet dependability mechanisms\",\n        \"Automating String Processing in Spreadsheets using Input-Output Examples\",\n        \"Structure interpretation of text formats\",\n        \"Tapas: Weakly Supervised Table Parsing via Pre-training\",\n        \"Toward tighter tables\",\n        \"Finding groups in data: an introduction to cluster analysis\",\n        \"FlashExtract: a framework for data extraction by examples\",\n        \"Stacked Cross Attention for Image-Text Matching\",\n        \"Query from Examples: An Iterative, Data-Driven Approach to Query Construction\",\n        \"Can we generate shellcodes via natural language? An empirical study\",\n        \"Active layout engine: Algorithms and applications in variable data printing\",\n        \"Exemplar Queries: A New Way of Searching\",\n        \"Number of Google Sheets and Excel Users Worldwide\",\n        \"Learning Natural Programs from a Few Examples in Real-Time\",\n        \"The Active Modeler: Mathematical Modeling With Microsoft Excel\",\n        \"BUSTLE: Bottom-up program-Synthesis Through Learning-guided Exploration\",\n        \"FlashProfile: Interactive Synthesis of Syntactic Profiles\",\n        \"Synchromesh: Reliable code generation from pre-trained language models\",\n        \"FlashMeta: A Framework for Inductive Program Synthesis\",\n        \"Automated Data Extraction using Predictive Program Synthesis\",\n        \"Web data extraction using hybrid program synthesis: A combination of top-down and bottom-up inference\",\n        \"Discovering Queries Based on Example Tuples\",\n        \"A Hybrid Probabilistic Approach for Table Understanding\",\n        \"Attention is all you need\",\n        \"Constrained K-Means Clustering with Background Knowledge\",\n        \"Synthesizing Highly Expressive SQL Queries from Input-Output Examples\",\n        \"TUTA: Tree-Based Transformers for Generally Structured Table Pre-Training\",\n        \"TaBERT: Pretraining for Joint Understanding of Textual and Tabular Data\",\n        \"Interactive Program Synthesis by Augmented Examples\"\n    ],\n    \"reasoning\": \"Selected these 44 references because they represent foundational work and recent advances in Cornet: Learning Table Formatting Rules By Example, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}