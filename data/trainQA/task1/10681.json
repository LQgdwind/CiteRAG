{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 51 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: When Dataflow Analysis Meets Large Language Models\n\nPaper Abstract: Abstract Dataflow analysis is a powerful code analysis technique that reasons dependencies between program values, offering support for code optimization, program comprehension, and bug detection. Existing approaches require the successful compilation of the subject program and customizations for downstream applications. This paper introduces LLMDFA, an LLM-powered dataflow analysis framework that analyzes arbitrary code snippets without requiring a compilation infrastructure and automatically synthesizes downstream applications. Inspired by summary-based dataflow analysis, LLMDFA decomposes the problem into three sub-problems, which are effectively resolved by several essential strategies, including few-shot chain-of-thought prompting and tool synthesis. Our evaluation has shown that the design can mitigate the hallucination and improve the reasoning ability, obtaining high precision and recall in detecting dataflow-related bugs upon benchmark programs, outperforming state-of-the-art (classic) tools, including a very recent industrial analyzer.\n\n{retrieved_text}\n\nGenerate exactly 51 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 51\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Program analysis and specialization for the c programming language\",\n        \"Flowdroid: precise context, flow, field, object-sensitive and lifecycle-aware taint analysis for android apps\",\n        \"Partial dead code elimination using slicing transformations\",\n        \"Juliet 1.1 C/C++ and java test suite\",\n        \"Language models are few-shot learners\",\n        \"Tree-sitter-a new parsing system for programming tools\",\n        \"KLEE: unassisted and automatic generation of high-coverage tests for complex systems programs\",\n        \"Compositional shape analysis by means of bi-abduction\",\n        \"Ranking llm-generated loop invariants for program verification\",\n        \"What developers want and need from program analysis: an empirical study\",\n        \"Clang: a C language family frontend for LLVM\",\n        \"CWE-369: Divide By Zero\",\n        \"CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)\",\n        \"Z3: an efficient SMT solver\",\n        \"Large language models are zero-shot fuzzers: Fuzzing deep-learning libraries via large language models\",\n        \"Unsupervised learning of API alias specifications\",\n        \"The Daikon system for dynamic detection of likely invariants\",\n        \"Can chatgpt support software verification?\",\n        \"Towards mitigating LLM hallucination via self reflection\",\n        \"Finding inductive loop invariants using large language models\",\n        \"LLVM: A compilation framework for lifelong program analysis & transformation\",\n        \"SLING: using dynamic analysis to infer program invariants in separation logic\",\n        \"The hitchhiker’s guide to program analysis: A journey with large language models\",\n        \"An efficient data dependence analysis for parallelizing compilers\",\n        \"Automatic documentation generation via source code summarization of method context\",\n        \"Large language model guided protocol fuzzing\",\n        \"Static program analysis\",\n        \"GPT-4 technical report\",\n        \"Can large language models reason about program invariants?\",\n        \"A machine-learning approach for classifying and categorizing android sources and sinks\",\n        \"Precise interprocedural dataflow analysis via graph reachability\",\n        \"Code llama: Open foundation models for code\",\n        \"GitHub Code Scanning\",\n        \"Pinpoint: fast and precise sparse value flow analysis for million lines of code\",\n        \"How to better utilize code graphs in semantic code search?\",\n        \"Repository-level prompt generation for large language models of code\",\n        \"Points-to analysis in almost linear time\",\n        \"SVF: interprocedural static value-flow analysis in LLVM\",\n        \"Soot - a java bytecode optimization framework\",\n        \"Generating variable explanations via zero-shot prompt learning\",\n        \"Codet5: Identifier-aware unified pre-trained encoder-decoder models for code understanding and generation\",\n        \"Chain-of-thought prompting elicits reasoning in large language models\",\n        \"Copiloting the copilots: Fusing large language models with completion engines for automated program repair\",\n        \"Universal fuzzing via large language models\",\n        \"Codefuse-query: A data-centric static code analysis system for large-scale organizations\",\n        \"Commit message generation for source code changes\",\n        \"If LLM is the wizard, then code is the wand: A survey on how code empowers large language models to serve as intelligent agents\",\n        \"Program analysis via efficient symbolic abstraction\",\n        \"Tree of thoughts: Deliberate problem solving with large language models\",\n        \"Siren’s song in the AI ocean: A survey on hallucination in large language models\",\n        \"Cumulative reasoning with large language models\"\n    ],\n    \"reasoning\": \"Selected these 51 references because they represent foundational work and recent advances in When Dataflow Analysis Meets Large Language Models, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}