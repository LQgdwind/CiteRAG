{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 45 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Learning to Optimise General TSP Instances\n\nPaper Abstract: Abstract The Travelling Salesman Problem (TSP) is a classical combinatorial optimisation problem. Deep learning has been successfully extended to meta-learning, where previous solving efforts assist in learning how to optimise future optimisation instances. In recent years, learning to optimise approaches have shown success in solving TSP problems. However, they focus on one type of TSP problem, namely ones where the points are uniformly distributed in Euclidean spaces and have issues in generalising to other embedding spaces, e.g., spherical distance spaces, and to TSP instances where the points are distributed in a non-uniform manner. An aim of learning to optimise is to train once and solve across a broad spectrum of (TSP) problems. Although supervised learning approaches have shown to achieve more optimal solutions than unsupervised approaches, they do require the generation of training data and running a solver to obtain solutions to learn from, which can be time-consuming and difficult to find reasonable solutions for harder TSP instances. Hence this paper introduces a new learning-based approach to solve a variety of different and common TSP problems that are trained on easier instances which are faster to train and are easier to obtain better solutions. We name this approach the non-Euclidean TSP network (NETSP-Net). The approach is evaluated on various TSP instances using the benchmark TSPLIB dataset and popular instance generator used in the literature. We performed extensive experiments that indicate our approach generalises across many types of instances and scales to instances that are larger than what was used during training.\n\n{retrieved_text}\n\nGenerate exactly 45 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 45\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"The traveling salesman problem: a computational study\",\n        \"Worst-case analysis of a new heuristic for the travelling salesman problem\",\n        \"An emerging direction in modern search technology\",\n        \"Deep learning\",\n        \"Learning to optimize neural nets\",\n        \"Pointer networks\",\n        \"Neural combinatorial optimization with reinforcement learning\",\n        \"Learning heuristics for the tsp by policy gradient\",\n        \"Attention solves your tsp\",\n        \"Reinforcement learning for solving the vehicle routing problem\",\n        \"Concorde tsp solver\",\n        \"An analysis of the hardness of tsp instances for two high performance algorithms\",\n        \"Creating hard-to-solve instances of travelling salesman problem\",\n        \"A comparison of exact and heuristic algorithms to solve the travelling salesman problem\",\n        \"Tsplib95\",\n        \"An analysis of the performance of traveling salesman heuristics on infinite-size fractal instances in the euclidean plane\",\n        \"On the solution of the traveling salesman problem: a novel heuristic that uses frequency of anchored nearest neighbors\",\n        \"Tsplib—a traveling salesman problem library\",\n        \"Convolutional networks for images, speech, and time series\",\n        \"Long short-term memory\",\n        \"Branch-and-bound methods: A survey\",\n        \"Metaheuristics in combinatorial optimization\",\n        \"An effective implementation of the lin–kernighan traveling salesman heuristic\",\n        \"Or-tools\",\n        \"Neural machine translation by jointly learning to align and translate\",\n        \"An efficient graph convolutional network technique for the travelling salesman problem\",\n        \"Learning combinatorial optimization algorithms over graphs\",\n        \"Attention is all you need\",\n        \"A comprehensive survey on graph neural networks\",\n        \"A graph neural network assisted monte carlo tree search approach to traveling salesman problem\",\n        \"Deep optimisation: Solving combinatorial optimisation problems using deep neural networks\",\n        \"A novel solution to the att48 benchmark problem\",\n        \"The cosine-haversine formula\",\n        \"Learning to solve np-complete problems: A graph neural network for decision tsp\",\n        \"Self-critical sequence training for image captioning\",\n        \"The tsp phase transition\",\n        \"Understanding tsp difficulty by learning from evolved instances\",\n        \"Adam: A method for stochastic optimization\",\n        \"Solution of a large-scale traveling-salesman problem\",\n        \"A branch-and-cut algorithm for the resolution of large-scale symmetric traveling salesman problems\",\n        \"Implementing the dantzig-fulkerson-johnson algorithm for large traveling salesman problems\",\n        \"Investigating tsp heuristics for location-based services\",\n        \"A method for solving traveling-salesman problems\",\n        \"Finding minimum spanning trees\",\n        \"End-to-end learning of multi-scale convolutional neural network for stereo matching\"\n    ],\n    \"reasoning\": \"Selected these 45 references because they represent foundational work and recent advances in Learning to Optimise General TSP Instances, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}