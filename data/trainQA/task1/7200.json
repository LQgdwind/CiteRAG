{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 53 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: TuneUp: A Simple Improved Training Strategy for Graph Neural Networks\n\nPaper Abstract: Abstract Despite recent advances in Graph Neural Networks (GNNs), their training strategies remain largely under-explored. The conventional training strategy learns over all nodes in the original graph(s) equally, which can be sub-optimal as certain nodes are often more difficult to learn than others. Here we present TuneUp, a simple curriculum-based training strategy for improving the predictive performance of GNNs. TuneUp trains a GNN in two stages. In the first stage, TuneUp applies conventional training to obtain a strong base GNN. The base GNN tends to perform well on head nodes (nodes with large degrees) but less so on tail nodes (nodes with small degrees). Therefore, the second stage of TuneUp focuses on improving prediction on the difficult tail nodes by further training the base GNN on synthetically generated tail node data. We theoretically analyze TuneUp and show it provably improves generalization performance on tail nodes. TuneUp is simple to implement and applicable to a broad range of GNN architectures and prediction tasks. Extensive evaluation of TuneUp on five diverse GNN architectures, three types of prediction tasks, and both transductive and inductive settings shows that TuneUp significantly improves the performance of the base GNN on tail nodes, while often even improving the performance on head nodes. Altogether, TuneUp produces up to 57.6% and 92.2% relative predictive performance improvement in the transductive and the challenging inductive settings, respectively.\n\n{retrieved_text}\n\nGenerate exactly 53 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 53\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Curriculum learning\",\n        \"Simple and deep graph convolutional networks\",\n        \"Power-law distributions in empirical data\",\n        \"Principal neighbourhood aggregation for graph nets\",\n        \"Data augmentation for deep graph learning: A survey\",\n        \"Learning theory can (sometimes) explain generalisation in graph neural networks\",\n        \"Graph random neural networks for semi-supervised learning on graphs\",\n        \"Fast Graph Representation Learning with PyTorch Geometric\",\n        \"node2vec: Scalable feature learning for networks\",\n        \"Inductive Representation Learning on Large Graphs\",\n        \"Ups and downs: Modeling the visual evolution of fashion trends with one-class collaborative filtering\",\n        \"Lightgcn: Simplifying and powering graph convolution network for recommendation\",\n        \"Probability Inequalities for Sums of Bounded Random Variables\",\n        \"Open graph benchmark: Datasets for machine learning on graphs\",\n        \"Combining label propagation and simple models out-performs graph neural networks\",\n        \"Mixgcf: An improved training method for graph neural network-based recommender systems\",\n        \"Rawlsgcn: Towards rawlsian difference principle on graph convolutional network\",\n        \"Adam: A method for stochastic optimization\",\n        \"Variational graph auto-encoders\",\n        \"Semi-Supervised Classification with Graph Convolutional Networks\",\n        \"Predict then propagate: Graph neural networks meet personalized pagerank\",\n        \"Flag: Adversarial data augmentation for graph neural networks\",\n        \"On sampled metrics for item recommendation\",\n        \"Pseudo-label: The simple and efficient semi-supervised learning method for deep neural networks\",\n        \"Training graph neural networks with 1000 layers\",\n        \"Deepgcns: Can gcns go as deep as cnns?\",\n        \"Deeper Insights into Graph Convolutional Networks for Semi-Supervised Learning\",\n        \"Modeling user exposure in recommendation\",\n        \"Facing the cold start problem in recommender systems\",\n        \"Local augmentation for graph neural networks\",\n        \"Tail-gnn: Tail-node graph neural networks\",\n        \"PyTorch: An imperative style, high-performance deep learning library\",\n        \"BPR: Bayesian personalized ranking from implicit feedback\",\n        \"DropEdge: Towards Deep Graph Convolutional Networks on Node Classification\",\n        \"SIGN: Scalable Inception Graph Neural Networks\",\n        \"Masked label prediction: Unified message passing model for semi-supervised classification\",\n        \"RUnimp: SOLUTION FOR KDDCUP 2021 MAG240M-LSC\",\n        \"Graph Attention Networks\",\n        \"Graphmix: Improved training of gnns for semi-supervised learning\",\n        \"Neural graph collaborative filtering\",\n        \"Simplifying graph convolutional networks\",\n        \"How Powerful are Graph Neural Networks?\",\n        \"Representation Learning on Graphs with Jumping Knowledge Networks\",\n        \"Graph Convolutional Neural Networks for Web-Scale Recommender Systems\",\n        \"Identity-aware graph neural networks\",\n        \"Design space for graph neural networks\",\n        \"Graph contrastive learning with augmentations\",\n        \"GraphSaint: Graph sampling based inductive learning method\",\n        \"Link prediction based on graph neural networks\",\n        \"Graph-less neural networks: Teaching old mlps new tricks via distillation\",\n        \"Pairnorm: Tackling oversmoothing in gnns\",\n        \"Data augmentation for graph neural networks\",\n        \"Cold brew: Distilling graph node representations with incomplete or missing neighborhoods\"\n    ],\n    \"reasoning\": \"Selected these 53 references because they represent foundational work and recent advances in TuneUp: A Simple Improved Training Strategy for Graph Neural Networks, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}