{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 49 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Securing Optimized Code Against Power Side Channels\n\nPaper Abstract: Abstract Side-channel attacks impose a serious threat to cryptographic algorithms, including widely employed ones, such as AES and RSA. These attacks take advantage of the algorithm implementation in hardware or software to extract secret information via side channels. Software masking is a mitigation approach against power side-channel attacks aiming at hiding the secret-revealing dependencies from the power footprint of a vulnerable implementation. However, this type of software mitigation often depends on general-purpose compilers, which do not preserve non-functional properties. Moreover, microarchitectural features, such as the memory bus and register reuse, may also leak secret information. These abstractions are not visible at the high-level implementation of the program. Instead, they are decided at compile time. To remedy these problems, security engineers often sacrifice code efficiency by turning off compiler optimization and/or performing local, post-compilation transformations. This paper proposes Secure by Construction Code Generation (SecCG), a constraint-based compiler approach that generates optimized yet secure against power side channels code. SecCG controls the quality of the mitigated program by efficiently searching the best possible low-level implementation according to a processor cost model. In our experiments with twelve masked cryptographic functions up to 100 lines of code on Mips32 and ARM Thumb, SecCG speeds up the generated code from 75% to 8 times compared to non-optimized secure code with an overhead of up to 7% compared to non-secure optimized code at the expense of a high compilation cost. For security and compiler researchers, this paper proposes a formal model to generate power side channel free low-level code. For software engineers, SecCG provides a practical approach to optimize performance critical and vulnerable cryptographic implementations that preserves security properties against power side channels.\n\n{retrieved_text}\n\nGenerate exactly 49 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 49\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Timing Attacks on Implementations of Diffie-Hellman, RSA, DSS, and Other Systems\",\n        \"Differential Power Analysis\",\n        \"On Second-Order Differential Power Analysis\",\n        \"Provably Secure Higher-Order Masking of AES\",\n        \"Higher-Order Side Channel Security and Mask Refreshing\",\n        \"Sleuth: Automated Verification of Software Power Analysis Countermeasures\",\n        \"Mitigating power side channels during compilation\",\n        \"Formal Verification of Software Countermeasures against Side-Channel Attacks\",\n        \"Secure Compilation of Constant-Resource Programs\",\n        \"Constantine: Automatic Side-Channel Resistance Using Efficient Control and Data Flow Linearization\",\n        \"Rosita: Towards Automatic Elimination of Power-Analysis Leakage in Ciphers\",\n        \"Use of Simulators for Side-Channel Analysis\",\n        \"Mind the Gap: Towards Secure 1st-Order Masking in Software\",\n        \"Secure delivery of program properties through optimizing compilation\",\n        \"Reconciling optimization with secure compilation\",\n        \"Combinatorial Register Allocation and Instruction Scheduling\",\n        \"LLVM: a compilation framework for lifelong program analysis amp; transformation\",\n        \"Investigations of power analysis attacks on smartcards.\",\n        \"Correlation Power Analysis with a Leakage Model\",\n        \"Verifying and Quantifying Side-channel Resistance of Masked Software Implementations\",\n        \"Supplemental material: Securing optimized code against power side channels\",\n        \"Integrated Code Generation for Loops\",\n        \"An efficient model for DSP code generation: Performance, code size, estimated energy\",\n        \"Handbook of constraint programming\",\n        \"Using Constraint Programming and Local Search Methods to Solve Vehicle Routing Problems\",\n        \"Gecode: Generic constraint development environment\",\n        \"MiniZinc: Towards a Standard CP Modelling Language\",\n        \"Improving combinatorial optimization\",\n        \"Google OR-Tools\",\n        \"Verified Proofs of Higher-Order Masking\",\n        \"Constraint-based Diversification of JOP Gadgets\",\n        \"Algebraic Side-Channel Attacks Beyond the Hamming Weight Leakage Model\",\n        \"A Formally Verified Compiler Back-end\",\n        \"An auditable constraint programming solver\",\n        \"Automatic detection and repair of transition-based leakage in software binaries\",\n        \"Synthesis of Masking Countermeasures against Side Channel Attacks\",\n        \"Vale: Verifying {}High-Performance{} Cryptographic Assembly Code\",\n        \"Jasmin: High-Assurance and High-Speed Cryptography\",\n        \"HACL*: A Verified Modern Cryptographic Library\",\n        \"FaCT: A Flexible, Constant-Time Programming Language\",\n        \"Information-Flow Preservation in Compiler Optimisations\",\n        \"The Correctness-Security Gap in Compiler Optimization\",\n        \"Using the GNU Compiler Collection: a GNU manual for GCC version 4.3.3\",\n        \"Survey on Combinatorial Register Allocation and Instruction Scheduling\",\n        \"A compact, machine-independent peephole optimizer\",\n        \"Souper: A synthesizing superoptimizer\",\n        \"Crow: Code diversification for webassembly\",\n        \"Towards Efficient and Automated Side Channel Evaluations at Design Time\",\n        \"Coco:{Co-Design} and {Co-Verification} of masked software implementations on {CPUs}\"\n    ],\n    \"reasoning\": \"Selected these 49 references because they represent foundational work and recent advances in Securing Optimized Code Against Power Side Channels, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}