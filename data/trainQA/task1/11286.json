{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 48 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: LLM-Assisted Static Analysis for Detecting Security Vulnerabilities\n\nPaper Abstract: Abstract Software is prone to security vulnerabilities. Program analysis tools to detect them have limited effectiveness in practice. While large language models (or LLMs) have shown impressive code generation capabilities, they cannot do complex reasoning over code to detect such vulnerabilities, especially because this task requires whole-repository analysis. In this work, we propose IRIS, the first approach that systematically combines LLMs with static analysis to perform whole-repository reasoning to detect security vulnerabilities. We curate a new dataset, CWE-Bench-Java, comprising 120 manually validated security vulnerabilities in real-world Java projects. These projects are complex, with an average of 300,000 lines of code and a maximum of up to 7 million. Out of 120 vulnerabilities in CWE-Bench-Java, IRIS detects 69 using GPT-4, while the state-of-the-art static analysis tool only detects 27. Further, IRIS also significantly reduces the number of false alarms (by more than 80% in the best case).\n\n{retrieved_text}\n\nGenerate exactly 48 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 48\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Ql: Object-oriented queries on relational data\",\n        \"Improving java deserialization gadget chain mining via overriding-guided object generation\",\n        \"Deep learning based vulnerability detection: Are we there yet?\",\n        \"Checker Framework\",\n        \"Path-sensitive code embedding via contrastive learning for software vulnerability detection\",\n        \"Scalable taint specification inference with big code\",\n        \"Code Checker\",\n        \"CPPCheck\",\n        \"CVE Trends\",\n        \"Vulnerability detection with code language models: How far are we?\",\n        \"Fb Infer\",\n        \"FlawFinder\",\n        \"Linevul: A transformer-based line-level vulnerability prediction\",\n        \"Codeql\",\n        \"Github advisory database\",\n        \"Github security advisories\",\n        \"Large language models for code: Security hardening and adversarial testing\",\n        \"A model building process for identifying actionable static analysis alerts\",\n        \"Linevd: Statement-level vulnerability detection using graph neural networks\",\n        \"Swe-bench: Can language models resolve real-world github issues?\",\n        \"Why donâ€™t software developers use static analysis tools to find bugs?\",\n        \"Repair is nearly generation: Multilingual program repair with llms\",\n        \"Taming false alarms from a domain-unaware c analyzer by a bayesian statistical post analysis\",\n        \"Detecting false alarms from automatic static analysis tools: How far are we?\",\n        \"Understanding the effectiveness of large language models in detecting security vulnerabilities\",\n        \"Codamosa: Escaping coverage plateaus in test generation with pre-trained large language models\",\n        \"Enhancing static analysis for practical bug detection: An llm-integrated approach\",\n        \"Comparison and evaluation on static application security testing (sast) tools for java\",\n        \"Vulnerability detection with fine-grained interpretations\",\n        \"Sysevr: A framework for using deep learning to detect software vulnerabilities\",\n        \"Vuldeelocator: A deep learning-based fine-grained vulnerability detector\",\n        \"An empirical study on the effectiveness of static c code analyzers for vulnerability detection\",\n        \"Merlin: Specification inference for explicit information flow problems\",\n        \"Lost in translation: A study of bugs introduced by large language models while translating code\",\n        \"Finding patterns in static analysis alerts\",\n        \"The semgrep platform\",\n        \"Using datalog for fast and easy program analysis\",\n        \"Snyk.io\",\n        \"SonarQube\",\n        \"Dataflow analysis-inspired deep learning for efficient vulnerability detection\",\n        \"A comprehensive study of the capabilities of large language models for vulnerability detection\",\n        \"SWE Agent\",\n        \"Less training, more repairing please: revisiting automated program repair via zero-shot learning\",\n        \"Automated program repair in the era of large pre-trained language models\",\n        \"Fuzz4all: Universal fuzzing with large language models\",\n        \"Large language models for test-free fault localization\",\n        \"Autocoderover: Autonomous program improvement\",\n        \"Devign: Effective vulnerability identification by learning comprehensive program semantics via graph neural networks\"\n    ],\n    \"reasoning\": \"Selected these 48 references because they represent foundational work and recent advances in LLM-Assisted Static Analysis for Detecting Security Vulnerabilities, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}