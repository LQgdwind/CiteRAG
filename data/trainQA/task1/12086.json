{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 52 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: 1 Introduction\n\nPaper Abstract: Abstract The transition from x86 to ARM architecture is becoming increasingly common across various domains, primarily driven by ARM’s energy efficiency and improved performance across traditional sectors. However, this ISA shift poses significant challenges, mainly due to the extensive legacy ecosystem of x86 software, and lack of portability across proprietary ecosystems and software stacks. This paper introduces CRT, a lightweight LLM-based transpiler that automatically converts x86 assembly to ARM assembly. Our approach bridges the fundamental architectural gap between x86’s CISC-based and ARM’s RISC-based computing paradigms while preserving program semantics and optimizing performance. We evaluate CRT on diverse real-world applications, achieving 79.25% translation accuracy from x86 to ARMv5 on our comprehensive test suite, and a 88.68% accuracy from x86 to RISC-V. In practical deployments on Apple M2 hardware (ARMv8), our transpiled code achieves 1.73x speedup compared to Apple’s Rosetta 2 virtualization engine, while delivering 2.41x memory efficiency and 1.47x better energy consumption. Through testing and analysis, we show that CRT successfully navigates the CISC/RISC divide, and generates correctly executable RISC code despite machine ”language” barriers. We release our code, models, training datasets, and benchmarks at: https://ahmedheakl.github.io/asm2asm/\n\n{retrieved_text}\n\nGenerate exactly 52 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 52\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Meet yi-coder: A small but mighty llm for code\",\n        \"Windows on ARM64: Architecture, implementation, and performance analysis\",\n        \"Apple’s rosetta 2 overview, 2020\",\n        \"SLaDe: A Portable Small Language Model Decompiler for Optimized Assembly\",\n        \"QEMU, a fast and portable dynamic translator\",\n        \"Evaluating large language models trained on code\",\n        \"Tree-to-tree neural networks for program translation\",\n        \"What are arm-based servers? comparison with x86, benefits and drawbacks, 2023\",\n        \"The gnu compiler collection\",\n        \"Meta large language model compiler: Foundation models of compiler optimization\",\n        \"Anghabench: A suite with one million compilable c benchmarks for code-size reduction\",\n        \"Daisy: dynamic compilation for 100% architectural compatibility\",\n        \"Codebert: A pre-trained model for programming and natural languages\",\n        \"How not to lie with statistics: the correct way to summarize benchmark results\",\n        \"Github - ggerganov/llama.cpp: Llm inference in c/c++\",\n        \"Accurate, large minibatch sg d: training imagenet in 1 hour\",\n        \"ARM-Based Servers Market Size, Share, & Trends Analysis Report By Core Type (ARM Cortex-A Core, ARM Cortex-M Core), By OS, By Processor, By Application, By Vertical, By Region, And Segment Forecasts, 2024 - 2030, 2024\",\n        \"Deepseek-coder: When the large language model meets programming–the rise of code intelligence\",\n        \"A survey of processing-in-memory architecture and techniques\",\n        \"Degpt: Optimizing decompiler output with llm\",\n        \"In-datacenter performance analysis of a tensor processing unit\",\n        \"Why warmup the learning rate? underlying mechanisms and improvements\",\n        \"Co-architecting controllers and dram to enhance dram process scaling\",\n        \"Scaling laws for neural language models\",\n        \"Unsupervised translation of programming languages\",\n        \"Layered gradient accumulation and modular pipeline parallelism: fast and efficient training of large language models\",\n        \"Crafting papers on machine learning\",\n        \"Binary coors capable or ‘correcting deletions, insertions, and reversals\",\n        \"Guess & sketch: Language model guided transpilation\",\n        \"Bart: Denoising sequence-to-sequence pre-training for natural language generation, translation, and comprehension\",\n        \"Deepseek-v2: A strong, economical, and efficient mixture-of-experts language model\",\n        \"Decoupled weight decay regularization\",\n        \"Nvidia tensor core programmability, performance & precision\",\n        \"Windows on ARM FAQ, 2024\",\n        \"Inside amazon’s graviton3 arm server processor\",\n        \"The art of software testing\",\n        \"Hello gpt4-o\",\n        \"Radcolor/ARM-linux-gnueabi: Bleeding edge GNU gcc toolchains (cc only) built from sources with latest binutils and glibc (for arm)\",\n        \"Redefining computing: Rise of arm from consumer to cloud for energy efficiency\",\n        \"Code llama: Open foundation models for code\",\n        \"Adafactor: Adaptive learning rates with sublinear memory cost\",\n        \"Apple finishes dumping Intel entirely, touts results, 8 2023\",\n        \"Binary translation\",\n        \"Llm4decompile: Decompiling binary code with large language models\",\n        \"Attention is all you need\",\n        \"Jtrans: Jump-aware transformer for binary code similarity detection\",\n        \"Codet5: Identifier-aware unified pre-trained encoder-decoder models for code understanding and generation\",\n        \"Performance optimization for infiniband virtualization on qemu/kvm\",\n        \"The rise of arm in data centers: Apple, amazon, and beyond\",\n        \"Improving binary code similarity transformer models by semantics-driven instruction deemphasis\",\n        \"Order matters: Semantic-aware neural networks for binary code similarity detection\",\n        \"Deepseek-coder-v2: Breaking the barrier of closed-source models in code intelligence\"\n    ],\n    \"reasoning\": \"Selected these 52 references because they represent foundational work and recent advances in 1 Introduction, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}