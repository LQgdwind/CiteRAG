{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 47 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: NeuroCodeBench: a plain C neural network benchmark for software verification\n\nPaper Abstract: Abstract Safety-critical systems with neural network components require strong guarantees. While existing neural network verification techniques have shown great progress towards this goal, they cannot prove the absence of software faults in the network implementation. This paper presents NeuroCodeBench – a verification benchmark for neural network code written in plain C. It contains 323232 neural networks with 607607607 safety properties divided into 666 categories: maths library, activation functions, error-correcting networks, transfer function approximation, probability density estimation and reinforcement learning. Our preliminary evaluation shows that state-of-the-art software verifiers struggle to provide correct verdicts, due to their incomplete support of the standard C mathematical library and the complexity of larger neural networks.\n\n{retrieved_text}\n\nGenerate exactly 47 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 47\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Information capacity of the hopfield model\",\n        \"Veriabs : Verification by abstraction and test generation\",\n        \"Pytorch\",\n        \"Competition on software verification and witness validation: Sv-comp 2023\",\n        \"Cpachecker: A tool for configurable software verification\",\n        \"Reliable benchmarking: requirements and solutions\",\n        \"Pitfalls in machine learning research: Reexamining the development cycle\",\n        \"Pattern recognition and machine learning, volume 4\",\n        \"Tensorflow\",\n        \"Brick: Path enumeration based bounded reachability checking of c program (competition contribution)\",\n        \"Bipartite expander hopfield networks as self-decoding high-capacity error correcting codes\",\n        \"2023 cwe top 25 most dangerous software weaknesses, 2023\",\n        \"Open neural network exchange: The open standard for machine learning interoperability, 2023\",\n        \"keras2c github repository, 2023\",\n        \"Keras2c: A library for converting keras neural networks to real-time compatible c\",\n        \"Veriabsl: Scalable verification by abstraction and strategy prediction (competition contribution)\",\n        \"Differential testing of cross deep learning framework APIs: Revealing inconsistencies and vulnerabilities\",\n        \"Exploring the limits of out-of-distribution detection\",\n        \"Esbmc 5.0: An industrial-strength c model checker\",\n        \"Audee: Automated testing for deep learning frameworks\",\n        \"Ultimate automizer and the commuhash normal form\",\n        \"Gaussian error linear units (gelus), 2023\",\n        \"A survey of safety and trustworthiness of deep neural networks: Verification, testing, adversarial attack and defence, and interpretability\",\n        \"Taxonomy of real faults in deep learning systems\",\n        \"Ieee standard for floating-point arithmetic\",\n        \"Iso c standard 1999\",\n        \"Reluplex: An efficient smt solver for verifying deep neural networks\",\n        \"CBMC–c bounded model checker\",\n        \"Cape: Encoding relative positions with continuous augmented positional embeddings\",\n        \"Neurocodebench, Aug. 2023\",\n        \"Neurocodebench github repository, 2023\",\n        \"Deep learning-based wave digital modeling of rate-dependent hysteretic nonlinearities for virtual analog applications\",\n        \"Ceg4n: Counter-example guided neural network quantization refinement\",\n        \"Learning density distribution of reachable states for autonomous systems\",\n        \"Bugs in machine learning-based systems: a faultload benchmark\",\n        \"The third international verification of neural networks competition (vnn-comp 2022): Summary and results, 2023\",\n        \"Simple black-box adversarial attacks on deep neural networks\",\n        \"Activation functions : comparison of trends in practice and research for deep learning\",\n        \"TensorFuzz: Debugging neural networks with coverage-guided fuzzing\",\n        \"Safe reinforcement learning benchmark environments for aerospace control systems\",\n        \"Pesco: Predicting sequential combinations of verifiers\",\n        \"Verifying quantized neural networks using smt-based model checking, 2021\",\n        \"A framework for understanding sources of harm throughout the machine learning life cycle\",\n        \"Vnn-lib: The international benchmarks standard for the verification of neural networks, 2023\",\n        \"onnx2c github repository, 2023\",\n        \"Beta-crown: Efficient bound propagation with per-neuron split constraints for neural network robustness verification\",\n        \"Neural-based dynamic modeling of nonlinear microwave circuits\"\n    ],\n    \"reasoning\": \"Selected these 47 references because they represent foundational work and recent advances in NeuroCodeBench: a plain C neural network benchmark for software verification, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}