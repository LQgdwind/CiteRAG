{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 47 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Counterfactual Explanations for Models of Code\n\nPaper Abstract: Abstract. Machine learning (ML) models play an increasingly prevalent role in many software engineering tasks. However, because most models are now powered by opaque deep neural networks, it can be difficult for developers to understand why the model came to a certain conclusion and how to act upon the model’s prediction. Motivated by this problem, this paper explores counterfactual explanations for models of source code. Such counterfactual explanations constitute minimal changes to the source code under which the model “changes its mind”. We integrate counterfactual explanation generation to models of source code in a real-world setting. We describe considerations that impact both the ability to find realistic and plausible counterfactual explanations, as well as the usefulness of such explanation to the user of the model. In a series of experiments we investigate the efficacy of our approach on three different models, each based on a BERT-like architecture operating over source code.\n\n{retrieved_text}\n\nGenerate exactly 47 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 47\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"A Transformer-based Approach for Source Code Summarization\",\n        \"code2vec: Learning distributed representations of code\",\n        \"Learning Autocompletion from Real-World Datasets\",\n        \"AI in Software Engineering at Facebook\",\n        \"Navigate, understand, communicate: How developers locate performance bugs\",\n        \"Autofocus: interpreting attention-based neural networks by code perturbation\",\n        \"What developers want and need from program analysis: an empirical study\",\n        \"Explaining Mispredictions of Machine Learning Models Using Rule Induction\",\n        \"What Does BERT Look at? An Analysis of BERT’s Attention\",\n        \"BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding\",\n        \"Towards a rigorous science of interpretable machine learning\",\n        \"HotFlip: White-Box Adversarial Examples for Text Classification\",\n        \"Pathologies of Neural Models Make Interpretations Difficult\",\n        \"CodeBERT: A Pre-Trained Model for Programming and Natural Languages\",\n        \"Attention in natural language processing\",\n        \"Attention is not Explanation\",\n        \"On weighted Shapley values\",\n        \"Algorithmic recourse: from counterfactual explanations to interventions\",\n        \"Interpretable & explorable approximations of black box models\",\n        \"Visualizing and Understanding Neural Models in NLP\",\n        \"Understanding neural networks through representation erasure\",\n        \"Generate Your Counterfactuals: Towards Controlled Counterfactual Generation for Text\",\n        \"Explaining data-driven document classifications\",\n        \"Explanation in artificial intelligence: Insights from the social sciences\",\n        \"General pitfalls of model-agnostic interpretation methods for machine learning models\",\n        \"A unifying view on dataset shift in classification\",\n        \"FACE: Feasible and actionable counterfactual explanations\",\n        \"Typewriter: Neural type prediction with search-based validation\",\n        \"Deepbugs: A learning approach to name-based bug detection\",\n        \"Learning to Deceive with Attention-Based Explanations\",\n        \"Understanding Neural Code Intelligence through Program Simplification\",\n        \"Semantic robustness of models of source code\",\n        \"Beyond Individualized Recourse: Interpretable and Interactive Summaries of Actionable Recourses\",\n        \"” Why should i trust you?” Explaining the predictions of any classifier\",\n        \"Anchors: High-Precision Model-Agnostic Explanations\",\n        \"Explaining NLP Models via Minimal Contrastive Editing (MiCE)\",\n        \"Automated vulnerability detection in source code using deep representation learning\",\n        \"Lessons from building static analysis tools at google\",\n        \"A survey of contrastive and counterfactual explanation generation methods for explainable artificial intelligence\",\n        \"Axiomatic attribution for deep networks\",\n        \"Probing Model Signal-Awareness via Prediction-Preserving Input Minimization\",\n        \"Attention interpretability across nlp tasks\",\n        \"Attention is all you need\",\n        \"Polyjuice: Generating Counterfactuals for Explaining, Evaluating, and Improving Models\",\n        \"Generative Counterfactuals for Neural Networks via Attribute-Informed Perturbation\",\n        \"Adversarial examples for models of code\",\n        \"Retrieval-based neural source code summarization\"\n    ],\n    \"reasoning\": \"Selected these 47 references because they represent foundational work and recent advances in Counterfactual Explanations for Models of Code, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}