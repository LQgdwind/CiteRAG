{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 50 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Target-independent XLA optimization using Reinforcement Learning\n\nPaper Abstract: Abstract An important challenge in Machine Learning compilers like XLA is multi-pass optimization and analysis. There has been recent interest chiefly in XLA target-dependent optimization on the graph-level, subgraph-level, and kernel-level phases. We specifically focus on target-independent optimization XLA HLO pass ordering: our approach aims at finding the optimal sequence of compiler optimization passes, which is decoupled from target-dependent optimization. However, there is little domain specific study in pass ordering for XLA HLO. To this end, we propose introducing deep Reinforcement Learning (RL) based search for optimal XLA HLO pass ordering. We also propose enhancements to the deep RL algorithms to further improve optimal search performance and open the research direction for domain-specific guidance for RL. We create an XLA Gym experimentation framework as a tool to enable RL algorithms to interact with the compiler for passing optimizations and thereby train agents. Overall, in our experimentation we observe an average of 13.3%percent13.313.3\\% improvement in operation count reduction on a benchmark of GPT-2 training graphs and 10.4%percent10.410.4\\% improvement on a diverse benchmark including GPT-2, BERT, and ResNet graphs using the proposed approach over the compilerâ€™s default phase ordering.\n\n{retrieved_text}\n\nGenerate exactly 50 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 50\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Compiling machine learning programs via high-level tracing\",\n        \"Llvm: A compilation framework for lifelong program analysis & transformation\",\n        \"A survey on compiler autotuning using machine learning\",\n        \"Evaluating iterative optimization across 1000 datasets\",\n        \"A collaborative filtering approach for the automatic tuning of compiler optimisations\",\n        \"A graph-based iterative compiler pass selection and phase ordering approach\",\n        \"Cobayn: Compiler autotuning framework using bayesian networks\",\n        \"A reinforcement learning environment for polyhedral optimizations\",\n        \"Neurovectorizer: end-to-end vectorization with deep reinforcement learning\",\n        \"Mlgo: a machine learning guided compiler optimizations framework\",\n        \"Autophase: Juggling hls phase orderings in random forests with deep reinforcement learning\",\n        \"Static neural compiler optimization via deep reinforcement learning\",\n        \"Machine learning in compilers: Past, present and future\",\n        \"Opentuner: An extensible framework for program autotuning\",\n        \"Yacos: a complete infrastructure to the design and exploration of code optimization sequences\",\n        \"Compy-learn: A toolbox for exploring machine learning representations for compilers\",\n        \"Compilergym: robust, performant compiler optimization environments for ai research\",\n        \"Tenset: A large-scale program performance dataset for learned tensor compilers\",\n        \"{{\\\\{TVM}}}: An automated {{\\\\{End-to-End}}} optimizing compiler for deep learning\",\n        \"Learning to optimize tensor programs\",\n        \"Ansor: Generating {{\\\\{High-Performance}}} tensor programs for deep learning\",\n        \"Flextensor: An automatic schedule exploration and optimization framework for tensor computation on heterogeneous system\",\n        \"Learning to optimize halide with tree search and random programs\",\n        \"Chameleon: Adaptive code optimization for expedited deep neural network compilation\",\n        \"Adatune: Adaptive tensor program compilation made efficient\",\n        \"Tensor comprehensions: Framework-agnostic high-performance machine learning abstractions\",\n        \"Welcome to aws neuron\",\n        \"Akg: automatic kernel generation for neural processing units using polyhedral transformations\",\n        \"Mind mappings: enabling efficient algorithm-accelerator mapping space search\",\n        \"Value learning for throughput optimization of deep learning workloads\",\n        \"Transferable graph optimizers for ml compilers\",\n        \"The deep learning compiler: A comprehensive survey\",\n        \"Xla: Optimizing compiler for tensorflow\",\n        \"Openai gym\",\n        \"Reinforcement learning: An introduction\",\n        \"Human-level control through deep reinforcement learning\",\n        \"Asynchronous methods for deep reinforcement learning\",\n        \"Trust region policy optimization\",\n        \"Proximal policy optimization algorithms\",\n        \"Language models are unsupervised multitask learners\",\n        \"Megatron-lm: Training multi-billion parameter language models using model parallelism\",\n        \"Aws neuron sdk to optimize machine learning inference on aws inferentia chips\",\n        \"A2c is a special case of ppo\",\n        \"Policy invariance under reward transformations: Theory and application to reward shaping\",\n        \"A new potential-based reward shaping for reinforcement learning agent\",\n        \"Transfer learning for reinforcement learning domains: A survey\",\n        \"Bert: Pre-training of deep bidirectional transformers for language understanding\",\n        \"Deep residual learning for image recognition\",\n        \"Beyond variance reduction: Understanding the true impact of baselines on policy optimization\",\n        \"Programl: A graph-based program representation for data flow analysis and compiler optimizations\"\n    ],\n    \"reasoning\": \"Selected these 50 references because they represent foundational work and recent advances in Target-independent XLA optimization using Reinforcement Learning, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}