{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 48 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: AdaCoder: Adaptive Prompt Compression for Programmatic Visual Question Answering\n\nPaper Abstract: Abstract. Visual question answering aims to provide responses to natural language questions given visual input. Recently, visual programmatic models (VPMs), which generate executable programs to answer questions through large language models (LLMs), have attracted research interest. However, they often require long input prompts to provide the LLM with sufficient API usage details to generate relevant code. To address this limitation, we propose AdaCoder, an adaptive prompt compression framework for VPMs. AdaCoder operates in two phases: a compression phase and an inference phase. In the compression phase, given a preprompt that describes all API definitions in the Python language with example snippets of code, a set of compressed preprompts is generated, each depending on a specific question type. In the inference phase, given an input question, AdaCoder predicts the question type and chooses the appropriate corresponding compressed preprompt to generate code to answer the question. Notably, AdaCoder employs a single frozen LLM and pre-defined prompts, negating the necessity of additional training and maintaining adaptability across different powerful black-box LLMs such as GPT and Claude. In experiments, we apply AdaCoder to ViperGPT and demonstrate that it reduces token length by 71.1%, while maintaining or even improving the performance of visual question answering.\n\n{retrieved_text}\n\nGenerate exactly 48 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 48\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Bottom-up and top-down attention for image captioning and visual question answering\",\n        \"Anthropic Claude AIP\",\n        \"VQA: Visual question answering\",\n        \"Token Merging: Your ViT But Faster\",\n        \"Language models are few-shot learners\",\n        \"Deconfounded Visual Question Generation with Causal Inference\",\n        \"VTQA2023: ACM Multimedia 2023 Visual Text Question Answering Challenge\",\n        \"Evaluating Large Language Models Trained on Code\",\n        \"Adapting Language Models to Compress Contexts\",\n        \"BLINK: Multimodal Large Language Models Can See but Not Perceive\",\n        \"Recursive Visual Programming\",\n        \"Extensible Prompts for Language Models on Zero-shot Language Style Customization\",\n        \"Power-bert: Accelerating BERT inference via progressive word-vector elimination\",\n        \"Making the V in VQA matter: Elevating the role of image understanding in Visual Question Answering\",\n        \"Visual Programming: Compositional visual reasoning without training\",\n        \"Visual Program Distillation: Distilling Tools and Programmatic Reasoning into Vision-Language Models\",\n        \"A diagnostic study of visual question answering with analogical reasoning\",\n        \"GQA: A New Dataset for Real-World Visual Reasoning and Compositional Question Answering\",\n        \"LLMLingua: Compressing Prompts for Accelerated Inference of Large Language Models\",\n        \"Tab-CoT: Zero-shot Tabular Chain of Thought\",\n        \"Length-adaptive transformer: Train once with length drop, use anytime with search\",\n        \"Learned Token Pruning for Transformers\",\n        \"Improving Zero-shot Visual Question Answering via Large Language Models with Reasoning Question Prompts\",\n        \"Vision and text transformer for predicting answerability on visual question answering\",\n        \"Unsupervised Vision-and-Language Pre-training Without Parallel Images and Captions\",\n        \"Grounded language-image pre-training\",\n        \"AI-VQA: Visual Question Answering based on Agent Interaction with Interpretability\",\n        \"Ask Your Neurons: A Neural-based Approach to Answering Questions about Images\",\n        \"Learning to Compress Prompts with Gist Tokens\",\n        \"LLMLingua-2: Data Distillation for Efficient and Faithful Task-Agnostic Prompt Compression\",\n        \"Code llama: Open foundation models for code\",\n        \"Grad-CAM aware supervised attention for visual question answering for post-disaster damage assessment\",\n        \"Pyramid Coder: Hierarchical Code Generator for Compositional Visual Question Answering\",\n        \"Modular Visual Question Answering via Code Generation\",\n        \"A Corpus for Reasoning About Natural Language Grounded in Photographs\",\n        \"ViperGPT: Visual Inference via Python Execution for Reasoning\",\n        \"Gemini: a family of highly capable multimodal models\",\n        \"Llama 2: Open foundation and fine-tuned chat models\",\n        \"Towards Reasoning Ability in Scene Text Visual Question Answering\",\n        \"Prompt Compression and Contrastive Conditioning for Controllability and Toxicity Reduction in Language Models\",\n        \"Ques-to-Visual Guided Visual Question Answering\",\n        \"AVQA: A Dataset for Audio-Visual Question Answering on Videos\",\n        \"Stacked Attention Networks for Image Question Answering\",\n        \"Tree of Thoughts: Deliberate Problem Solving with Large Language Models\",\n        \"Modeling context in referring expressions\",\n        \"Self-PT: Adaptive Self-Prompt Tuning for Low-Resource Visual Question Answering\",\n        \"Context Relation Fusion Model for Visual Question Answering\",\n        \"MagicBrush: A manually annotated dataset for instruction-guided image editing\"\n    ],\n    \"reasoning\": \"Selected these 48 references because they represent foundational work and recent advances in AdaCoder: Adaptive Prompt Compression for Programmatic Visual Question Answering, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}