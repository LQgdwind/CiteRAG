{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 47 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: D2A: A Dataset Built for AI-Based Vulnerability Detection Methods Using Differential Analysis\n\nPaper Abstract: Abstract Static analysis tools are widely used for vulnerability detection as they understand programs with complex behavior and millions of lines of code. Despite their popularity, static analysis tools are known to generate an excess of false positives. The recent ability of Machine Learning models to understand programming languages opens new possibilities when applied to static analysis. However, existing datasets to train models for vulnerability identification suffer from multiple limitations such as limited bug context, limited size, and synthetic and unrealistic source code. We propose D2A, a differential analysis based approach to label issues reported by static analysis tools. The D2A dataset is built by analyzing version pairs from multiple open source projects. From each project, we select bug fixing commits and we run static analysis on the versions before and after such commits. If some issues detected in a before-commit version disappear in the corresponding after-commit version, they are very likely to be real bugs that got fixed by the commit. We use D2A to generate a large labeled dataset to train models for vulnerability identification. We show that the dataset can be used to build a classifier to identify possible false alarms among the issues reported by static analysis, hence helping developers prioritize and investigate potential true positives first.\n\n{retrieved_text}\n\nGenerate exactly 47 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 47\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Maintaining mental models: A study of developer work habits\",\n        \"The design space of bug fixes and how developers navigate it\",\n        \"Using static analysis to find bugs\",\n        \"Using findbugs on production software\",\n        \"Automatic inference of search patterns for taint-style vulnerabilities\",\n        \"Smoke: Scalable path-sensitive memory leak detection for millions of lines of code\",\n        \"Finding security vulnerabilities in java applications with static analysis\",\n        \"Saving the world wide web from vulnerable javascript\",\n        \"Automated classification of static code analysis alerts: A case study\",\n        \"ALETHEIA: Improving the Usability of Static Security Analysis\",\n        \"Learning a classifier for false positive error reports emitted by static code analysis tools\",\n        \"Automated vulnerability detection in source code using deep representation learning\",\n        \"Vuldeepecker: A deep learning-based system for vulnerability detection\",\n        \"Towards security defect prediction with AI\",\n        \"Devign: Effective vulnerability identification by learning comprehensive program semantics via graph neural networks\",\n        \"Exploring software naturalness through neural language models\",\n        \"Learning to map source code to software vulnerability using code-as-a-graph\",\n        \"Inferring crypto api rules from code changes\",\n        \"National vulnerability database\",\n        \"Common vulnerabilities and exposures\",\n        \"Juliet test suite for c/c++ version 1.3\",\n        \"Why donâ€™t software developers use static analysis tools to find bugs?\",\n        \"Review efforts reduction by partitioning of static analysis warnings\",\n        \"Survey of approaches for handling static analysis alarms\",\n        \"Z-ranking: Using statistical analysis to counter the impact of static analysis approximations\",\n        \"Taming false alarms from a domain-unaware c analyzer by a bayesian statistical post analysis\",\n        \"Finding patterns in static analysis alerts: Improving actionable alert ranking\",\n        \"Combining the logical and the probabilistic in program analysis\",\n        \"Identifying and documenting false positive patterns generated by static code analysis tools\",\n        \"User-guided program reasoning using bayesian inference\",\n        \"An empirical assessment of machine learning approaches for triaging reports of a java static analysis tool\",\n        \"End-to-end prediction of buffer overruns from raw source code via neural memory networks\",\n        \"Software vulnerability detection using deep neural networks: A survey\",\n        \"Flow2vec: Value-flow-based precise code embedding\",\n        \"The clang static analyzer\",\n        \"Infer static analyzer\",\n        \"Evolution of semantic similarity - A survey\",\n        \"A web-based kernel function for measuring the similarity of short text snippets\",\n        \"Cppcheck\",\n        \"Flawfinder\",\n        \"infer reportdiff\",\n        \"Infer is not deterministic, infer issue #1110\",\n        \"Parallelism gives inconsistent results, infer issue #1239\",\n        \"Clang tooling\",\n        \"Infer issue types\",\n        \"Libav\",\n        \"Test suites as a source of training data for static analysis alert classifiers\"\n    ],\n    \"reasoning\": \"Selected these 47 references because they represent foundational work and recent advances in D2A: A Dataset Built for AI-Based Vulnerability Detection Methods Using Differential Analysis, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}