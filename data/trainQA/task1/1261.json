{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 46 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Technical Report: Benefits of Stabilization versus Rollback in Self-Stabilizing Graph-Based Applications on Eventually Consistent Key-Value Stores This work is supported by NSF XPS 1533802.\n\nPaper Abstract: Abstract In this paper, we evaluate and compare the performance of two approaches, namely self-stabilization and rollback, to handling consistency violating faults (c‚Äãv‚Äãfùëêùë£ùëìcvf) that occur when a self-stabilizing distributed graph-based program is executed on an eventually consistent key-value store. Consistency violating faults are caused by reading wrong values due to weaker level of consistency provided by the key-value store. One way to deal with these faults is to utilize rollback whereas another way is to rely on the property of self-stabilization that is expected to provide recovery from arbitrary states. We evaluate both these approaches in different case studies ‚Äìplanar graph coloring, arbitrary graph coloring, and maximal matching‚Äì as well as for different problem dimensions such as input data characteristics, workload partition, and network latency. We also consider the effect of executing non-stabilizing algorithm with rollback with a similar stabilizing algorithm that does not utilize rollback.\n\n{retrieved_text}\n\nGenerate exactly 46 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 46\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"A survey on self-stabilizing algorithms for independence, domination, coloring, and matching in graphs\",\n        \"Trusses: Cohesive subgraphs for social network analysis\",\n        \"A tale of two mechanisms: student placement\",\n        \"Complex networks: principles, methods and applications\",\n        \"Thinking like a vertex: A survey of vertex-centric frameworks for large-scale distributed graph processing\",\n        \"Distributed graphlab: a framework for machine learning and data mining in the cloud\",\n        \"Distributed algorithms\",\n        \"Trinity: A distributed graph engine on a memory cloud\",\n        \"Self-Stabilization.\",\n        \"How to make a multiprocessor computer that correctly executes multiprocess programs\",\n        \"Dynamo: Amazon‚Äôs highly available key-value store\",\n        \"Cassandra: a decentralized structured storage system\",\n        \"Project voldemort\",\n        \"DKVF: a framework for rapid prototyping and evaluating distributed key-value stores\",\n        \"Eventually consistent\",\n        \"Benefit of self-stabilizing protocols in eventually consistent key-value stores: a case study\",\n        \"Using weaker consistency models with monitoring and recovery for improving performance of key-value stores\",\n        \"Self-stabilizing systems in spite of distributed control\",\n        \"Supplementary materials for the paper ‚ÄùBenefits of Stabilization versus Rollback in Self-Stabilizing Graph-Based Applications on Eventually Consistent Key-Value Stores‚Äù\",\n        \"Correctness of self-stabilizing algorithms under the dolev model when adapted to composite atomicity models\",\n        \"Detection of global predicates: Techniques and their limitations\",\n        \"Self-stabilizing vertex coloration and arbitrary graphs\",\n        \"A self-stabilizing algorithm for coloring planar graphs\",\n        \"A new self-stabilizing maximal matching algorithm\",\n        \"Uniform random sampling of planar graphs in linear time\",\n        \"Overview of networkx\",\n        \"Multilevel algorithms for partitioning power-law graphs\",\n        \"Distributed algorithms for message-passing systems\",\n        \"Towards robust distributed systems (abstract)\",\n        \"Brewer‚Äôs conjecture and the feasibility of consistent, available, partition-tolerant web services\",\n        \"Distributed systems: an algorithmic approach\",\n        \"Detection of global state predicates\",\n        \"A distributed abstraction algorithm for online predicate detection\",\n        \"Decentralized runtime verification of LTL specifications in distributed systems\",\n        \"Eidetic systems\",\n        \"Retrospective lightweight distributed snapshots using loosely synchronized clocks\",\n        \"Closure and convergence: A foundation of fault-tolerant computing\",\n        \"Memory requirements for silent stabilization\",\n        \"The theory of weak stabilization\",\n        \"Probabilistic self-stabilization\",\n        \"Fault-containing self-stabilizing algorithms\",\n        \"Fault-containing self-stabilization in asynchronous systems with constant fault-gap\",\n        \"Active stabilization\",\n        \"Self-stabilizing extensions for message-passing systems\",\n        \"Myths about the mutual exclusion problem\",\n        \"Derivation of a termination detection algorithm for distributed computations\"\n    ],\n    \"reasoning\": \"Selected these 46 references because they represent foundational work and recent advances in Technical Report: Benefits of Stabilization versus Rollback in Self-Stabilizing Graph-Based Applications on Eventually Consistent Key-Value Stores This work is supported by NSF XPS 1533802., providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}