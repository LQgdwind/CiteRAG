{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 52 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: A New Constructive Heuristic driven by Machine Learning for the Traveling Salesman Problem\n\nPaper Abstract: Abstract Recent systems applying Machine Learning (ML) to solve the Traveling Salesman Problem (TSP) exhibit issues when they try to scale up to real case scenarios with several hundred vertices. The use of Candidate Lists (CLs) has been brought up to cope with the issues. An initialisation procedure selects a smaller set of promising edges linked to a given vertex, the CL. These edges are believable to be found in the optimal tour. The procedure is repeated for each vertex in the TSP, and it allows to restrict the search space during solution creation, consequently reducing the solver computational burden. So far, ML were engaged to create CLs and values on the edges of these CLs expressing ML preferences at solution insertion. Although promising, these systems do not clearly restrict what the ML learns and does to create solutions, bringing with them some generalization issues. Therefore, motivated by exploratory and statistical studies, in this work we instead use a machine learning model to confirm the addition in the solution just for high probable edges. The restricted use of ML to a simpler and smaller task is motivated by the choice of avoiding the troubles that ML models can encounter with outliers and the detection of under-represented events. CLs of the high probable edge are employed as input, and the ML is in charge of distinguishing cases where such edges are in the optimal solution from those where they are not. . This strategy enables a better generalization and creates an efficient balance between machine learning and searching techniques. Our ML-Constructive heuristic is trained on small instances. Then, it is able to produce solutions, without losing quality, to large problems as well. We compare our results with classic constructive heuristics, showing good performances for TSPLIB instances up to 1748 cities. Although our heuristic exhibits an expensive constant time operation, we proved that the computational complexity in worst-case scenario, for the solution construction after training, is O‚Äã(n2‚Äãlog‚Å°n2)ùëÇsuperscriptùëõ2superscriptùëõ2O(n^{2}\\log n^{2}), being nùëõn the number of vertices in the TSP instance.\n\n{retrieved_text}\n\nGenerate exactly 52 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 52\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"The Traveling Salesman Problem: A Computational Study\",\n        \"The extrapolation problem: How can we learn from the experience of others?\",\n        \"Neural combinatorial optimization with reinforcement learning\",\n        \"Machine learning for combinatorial optimization: a methodological tour d‚Äôhorizon\",\n        \"Fast algorithms for geometric traveling salesman problems\",\n        \"Experiments on traveling salesman heuristics\",\n        \"A hybrid algorithm for the dna sequencing problem\",\n        \"Worst-case analysis of a new heuristic for the travelling salesman problem\",\n        \"Scheduling of vehicles from a central depot to a number of delivery points\",\n        \"The reproducibility of research and the misinterpretation of p-values\",\n        \"Learning 2-opt heuristics for the traveling salesman problem via deep reinforcement learning\",\n        \"Learning combinatorial optimization algorithms over graphs\",\n        \"Solution of a large-scale traveling-salesman problem\",\n        \"A tutorial on the cross-entropy method\",\n        \"Modeling the flying sidekick traveling salesman problem with multiple drones\",\n        \"Learning heuristics for the tsp by policy gradient\",\n        \"Ant colonies for the travelling salesman problem\",\n        \"Learning to sparsify travelling salesman problem instances\",\n        \"Generalize a small pre-trained model to arbitrarily large tsp instances\",\n        \"Learning from class-imbalanced data: Review of methods and applications\",\n        \"Deep residual learning for image recognition\",\n        \"A dynamic programming approach to sequencing problems\",\n        \"An effective implementation of the lin‚Äìkernighan traveling salesman heuristic\",\n        \"Edge elimination in tsp instances\",\n        \"Comparing greedy constructive heuristic subtour elimination methods for the traveling salesman problem\",\n        \"Experimental analysis of heuristics for the stsp\",\n        \"Learning tsp requires rethinking generalization\",\n        \"Actor-critic algorithms\",\n        \"Attention, learn to solve routing problems!\",\n        \"Learning from imbalanced data: open challenges and future directions\",\n        \"Two algorithms for constructing a delaunay triangulation\",\n        \"Imbalanced-learn: A python toolbox to tackle the curse of imbalanced datasets in machine learning\",\n        \"Combinatorial optimization by graph pointer networks and hierarchical reinforcement learning\",\n        \"Human performance on the traveling salesman problem\",\n        \"Deep learning: A critical appraisal\",\n        \"Traveling salesman problem: an overview of applications, formulations, and solution approaches\",\n        \"Reinforcement learning and additional rewards for the traveling salesman problem\",\n        \"Machine learning approaches for the traveling salesman problem: A survey\",\n        \"Solving traveling salesman problem with image-based classification\",\n        \"Applying deep learning and reinforcement learning to traveling salesman problem\",\n        \"Tutorial review‚Äîoutliers in experimental data and their treatment\",\n        \"Minimum power symmetric connectivity problem in wireless networks: a new approach\",\n        \"Automatic differentiation in pytorch\",\n        \"Tsplib‚Äîa traveling salesman problem library\",\n        \"Some improved algorithms for computer solution of the traveling salesman problem\",\n        \"Popmusic for the travelling salesman problem\",\n        \"Python tutorial, volume 620\",\n        \"Pointer networks\",\n        \"A distance matrix based algorithm for solving the traveling salesman problem\",\n        \"Simple statistical gradient-following algorithms for connectionist reinforcement learning\",\n        \"Combining reinforcement learning with lin-kernighan-helsgaun algorithm for the traveling salesman problem\",\n        \"Deep learning limitations and flaws\"\n    ],\n    \"reasoning\": \"Selected these 52 references because they represent foundational work and recent advances in A New Constructive Heuristic driven by Machine Learning for the Traveling Salesman Problem, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}