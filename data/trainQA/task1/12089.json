{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 48 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: J-P: MDP. FP. PP.This research was partially supported by the ERC AdG project 787914 FRAPPANT, the European Union’s Horizon 2020 research and innovation programme under the Marie Skłodowska-Curie grant agreement No 101008233 (MISSION), the DFG Research Training Group 2236 UnRAVeL, and the DFF project AuRoRa.\n\nPaper Abstract: Abstract Markov decision processes (MDPs) with rewards are a widespread and well-studied model for systems that make both probabilistic and nondeterministic choices. A fundamental result about MDPs is that their minimal and maximal expected rewards satisfy Bellmann’s optimality equations. For various classes of MDPs – notably finite-state MDPs, positive bounded models, and negative models – expected rewards are known to be the least solution of those equations. However, these classes of MDPs are too restrictive for probabilistic program verification. In particular, they assume that all rewards are finite. This is already not the case for the expected runtime of a simple probabilisitic program modeling a 1-dimensional random walk. In this paper, we develop a generalized least fixed point characterization of expected rewards in MDPs without those restrictions. Furthermore, we demonstrate how said characterization can be leveraged to prove weakest-preexpectation-style calculi sound with respect to an operational MDP model.\n\n{retrieved_text}\n\nGenerate exactly 48 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 48\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Principles of model checking\",\n        \"The contraction principle as a particular case of Kleene’s fixed point theorem\",\n        \"Foundations of probabilistic programming\",\n        \"Automated Deductive Verification of Probabilistic Programs\",\n        \"Programmatic strategy synthesis: Resolving nondeterminism in probabilistic programs\",\n        \"Probabilistic program verification via inductive synthesis of inductive invariants\",\n        \"Latticed k-induction with an application to probabilistic programs\",\n        \"PrIC3: Property directed reachability for MDPs\",\n        \"How long, O Bayesian network, will I sample thee? - A program analysis perspective on expected sampling times\",\n        \"Relatively complete verification of probabilistic programs: an expressive language for expectation-based reasoning\",\n        \"Quantitative separation logic: A logic for reasoning about probabilistic pointer programs\",\n        \"A calculus for amortized expected runtimes\",\n        \"A Markovian decision process\",\n        \"Deterministic stream-sampling for probabilistic programming: semantics and verification\",\n        \"A Storm is coming: A modern probabilistic model checker\",\n        \"Guarded commands, nondeterminacy and formal derivation of programs\",\n        \"Handbook of Weighted Automata\",\n        \"Design for dependability: A simulation-based approach\",\n        \"Prinsys – On a quest for probabilistic loop invariants\",\n        \"Operational versus weakest pre-expectation semantics for the probabilistic guarded command language\",\n        \"Interval iteration algorithm for MDPs and IMDPs\",\n        \"Aiming low is harder: Induction for lower bounds in probabilistic program verification\",\n        \"Optimistic value iteration\",\n        \"An axiomatic basis for computer programming\",\n        \"Conditioning in probabilistic programming\",\n        \"Advanced Weakest Precondition Calculi for Probabilistic Programs\",\n        \"On the hardness of almost-sure termination\",\n        \"A weakest pre-expectation semantics for mixed-sign expectations\",\n        \"On the hardness of analyzing probabilistic programs\",\n        \"Weakest precondition reasoning for expected run-times of probabilistic programs\",\n        \"Weakest precondition reasoning for expected runtimes of randomized algorithms\",\n        \"Un théorème sur les functions d’ensembles\",\n        \"Semantics of probabilistic programs\",\n        \"A probabilistic PDL\",\n        \"PRISM: probabilistic symbolic model checker\",\n        \"Abstraction, Refinement and Proof for Probabilistic Systems\",\n        \"A new proof rule for almost-sure termination\",\n        \"Fixpoint induction and proofs of program properties\",\n        \"The origins of structural operational semantics\",\n        \"Markov Decision Processes: Discrete Stochastic Dynamic Programming\",\n        \"Sound value iteration\",\n        \"Stochastic lambda calculus and monads of probability distributions\",\n        \"On the supervisory control of distributed high-performance computing systems in engineering\",\n        \"Probabilistic turing machines and computability\",\n        \"A deductive verification infrastructure for probabilistic programs\",\n        \"A lattice-theoretical fixpoint theorem and its applications\",\n        \"Course 221: Hilary term 2007. Section 6: The extended real number system\",\n        \"The formal semantics of programming languages – an introduction\"\n    ],\n    \"reasoning\": \"Selected these 48 references because they represent foundational work and recent advances in J-P: MDP. FP. PP.This research was partially supported by the ERC AdG project 787914 FRAPPANT, the European Union’s Horizon 2020 research and innovation programme under the Marie Skłodowska-Curie grant agreement No 101008233 (MISSION), the DFG Research Training Group 2236 UnRAVeL, and the DFF project AuRoRa., providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}