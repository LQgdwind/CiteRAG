{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 50 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: A Critical Analysis of Classifier Selection in Learned Bloom Filters\n\nPaper Abstract: Abstract Learned Bloom Filters, i.e., models induced from data via machine learning techniques and solving the approximate set membership problem, have recently been introduced with the aim of enhancing the performance of standard Bloom Filters, with special focus on space occupancy. Unlike in the classical case, the “complexity” of the data used to build the filter might heavily impact on its performance. Therefore, here we propose the first in-depth analysis, to the best of our knowledge, for the performance assessment of a given Learned Bloom Filter, in conjunction with a given classifier, on a dataset of a given classification complexity. Indeed, we propose a novel methodology, supported by software, for designing, analyzing and implementing Learned Bloom Filters in function of specific constraints on their multi-criteria nature (that is, constraints involving space efficiency, false positive rate, and reject time). Our experiments show that the proposed methodology and the supporting software are valid and useful: we find out that only two classifiers have desirable properties in relation to problems with different data complexity, and, interestingly, none of them has been considered so far in the literature. We also experimentally show that the Sandwiched variant of Learned Bloom filters is the most robust to data complexity and classifier performance variability, as well as those usually having smaller reject times. The software can be readily used to test new Learned Bloom Filter proposals, which can be compared with the best ones identified here.\n\n{retrieved_text}\n\nGenerate exactly 50 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 50\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"On learning algorithm selection for classification\",\n        \"Learned sorted table search and static indexes in small model space (Extended Abstract)\",\n        \"Space/time trade-offs in hash coding with allowable errors\",\n        \"A “learned” approach to quicken and compress rank/select dictionaries\",\n        \"Random Forests\",\n        \"Classification and regression trees\",\n        \"Network Applications of Bloom Filters: A Survey\",\n        \"Classification of imbalanced remote-sensing data by neural networks\",\n        \"Analysis of data complexity measures for classification\",\n        \"Universal classes of hash functions\",\n        \"On the properties of neural machine translation: Encoder–decoder approaches\",\n        \"Genomic DNA k-mer spectra: models and modalities\",\n        \"The regression analysis of binary sequences\",\n        \"Adaptive learned bloom filter (ada-bf): Efficient utilization of the classifier\",\n        \"Adaptive Learned Bloom Filter (Ada-BF): Efficient utilization of the classifier with application to real-time information filtering on the web\",\n        \"Pattern Classification and Scene Analysis\",\n        \"Pattern Classification, 2nd Edition\",\n        \"To petabytes and beyond: recent advances in probabilistic and signal processing algorithms and their application to metagenomics\",\n        \"On the performance of learned data structures\",\n        \"The PGM-index: a fully-dynamic compressed learned index with provable worst-case bounds\",\n        \"Domains of competence of the semi-naive bayesian network classifiers\",\n        \"Statistical Models : Theory and Practice\",\n        \"On the choice of general purpose classifiers in learned bloom filters: An initial analysis within basic filters\",\n        \"Neural networks: a comprehensive foundation\",\n        \"Learning from imbalanced data\",\n        \"Predicting disease risks from highly imbalanced data using random forest\",\n        \"Radixspline: A single-pass learned index\",\n        \"Sapling: accelerating suffix array queries with learned data models\",\n        \"Towards instance-optimized data systems\",\n        \"The case for learned index structures\",\n        \"Stable learned bloom filters for data streams\",\n        \"How complex is your classification problem? a survey on measuring classification complexity\",\n        \"An automatic extraction method of the domains of competence for learning classifiers using data complexity measures\",\n        \"A critical analysis of recursive model indexes\",\n        \"Benchmarking learned indexes\",\n        \"CDFShop: Exploring and optimizing learned index structures\",\n        \"Deep neural networks compression: a comparative survey and choice recommendations\",\n        \"A model for learned bloom filters and optimizing by sandwiching\",\n        \"Algorithms with predictions\",\n        \"Combining statistical learning with a knowledge-based approach: a case study in intensive care monitoring\",\n        \"pickle – python object serialization\",\n        \"Representation of k-mer sets using spectrum-preserving string sets\",\n        \"A critical analysis of classifier selection in learned bloom filters – supporting software\",\n        \"On the problems of sample size in pattern recognition\",\n        \"Fast search of thousands of short-read sequencing experiments\",\n        \"Partitioned learned bloom filters\",\n        \"Experimental perspectives on learning from imbalanced data\",\n        \"New hash functions and their use in authentication and set equality\",\n        \"Learned bloom-filter for the efficient name lookup in information-centric networking\",\n        \"Simulation neuronaler Netze\"\n    ],\n    \"reasoning\": \"Selected these 50 references because they represent foundational work and recent advances in A Critical Analysis of Classifier Selection in Learned Bloom Filters, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}