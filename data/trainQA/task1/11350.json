{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 49 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: CGP++ : A Modern C++ Implementation of Cartesian Genetic Programming\n\nPaper Abstract: Abstract. The reference implementation of Cartesian Genetic Programming (CGP) was written in the C programming language. C inherently follows a procedural programming paradigm, which entails challenges in providing a reusable and scalable implementation model for complex structures and methods. Moreover, due to the limiting factors of C, the reference implementation of CGP does not provide a generic framework and is therefore restricted to a set of predefined evaluation types. Besides the reference implementation, we also observe that other existing implementations are limited with respect to the features provided. In this work, we therefore propose the first version of a modern C++ implementation of CGP that pursues object-oriented design and generic programming paradigm to provide an efficient implementation model that can facilitate the discovery of new problem domains and the implementation of complex advanced methods that have been proposed for CGP over time. With the proposal of our new implementation, we aim to generally promote interpretability, accessibility and reproducibility in the field of CGP.\n\n{retrieved_text}\n\nGenerate exactly 49 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 49\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"A new crossover technique for Cartesian genetic programming\",\n        \"Evolutionary design of explainable algorithms for biomedical image segmentation\",\n        \"Representation, Mutation, and Recombination\",\n        \"On logic synthesis of conventionally hard to synthesize circuits using genetic programming\",\n        \"Logic synthesis and verification algorithms\",\n        \"Logic synthesis and verification\",\n        \"A Comparative Study on Crossover in Cartesian Genetic Programming\",\n        \"ISO/IEC 14882:2011 Information technology — Programming languages — C++\",\n        \"Evolutionary Approach to Design Multiple-valued Combinational Circuits\",\n        \"Phenotypic duplication and inversion in cartesian genetic programming applied to boolean function learning\",\n        \"Towards Discrete Phenotypic Recombination in Cartesian Genetic Programming\",\n        \"Towards Phenotypic Duplication and Inversion in Cartesian Genetic Programming\",\n        \"Crossover in Cartesian Genetic Programming: Evaluation of Two Phenotypic Methods\",\n        \"A New Subgraph Crossover for Cartesian Genetic Programming\",\n        \"General Boolean Function Benchmark Suite\",\n        \"Parametrizing Cartesian Genetic Programming: An Empirical Study\",\n        \"On the Parameterization of Cartesian Genetic Programming\",\n        \"Fast learning neural networks using Cartesian genetic programming\",\n        \"Genetic Programming: A paradigm for genetically breeding populations of computer programs to solve problems\",\n        \"Hierarchical Genetic Algorithms Operating on Populations of Computer Programs\",\n        \"Concept Formation and Decision Tree Induction Using the Genetic Programming Paradigm\",\n        \"A Hierarchical Approach to Learning the Boolean Multiplexer Function\",\n        \"Genetic Programming: On the Programming of Computers by Means of Natural Selection\",\n        \"Genetic Programming II: Automatic Discovery of Reusable Programs\",\n        \"ECJ then and now\",\n        \"The irace package: Iterated racing for automatic algorithm configuration\",\n        \"Genetic programming needs better benchmarks\",\n        \"An empirical study of the efficiency of learning boolean functions using a Cartesian Genetic Programming approach\",\n        \"Cartesian genetic programming: its status and future\",\n        \"Redundancy and Computational Efficiency in Cartesian Genetic Programming\",\n        \"Cartesian Genetic Programming\",\n        \"Designing Electronic Circuits Using Evolutionary Algorithms. Arithmetic Circuits: A Case Study\",\n        \"CGP4Matlab - A Cartesian Genetic Programming MATLAB Toolbox for Audio and Image Processing\",\n        \"Building new spatial interaction models using genetic programming\",\n        \"Stack-Based Genetic Programming\",\n        \"Parallel Distributed Genetic Programming\",\n        \"Grammatical Evolution: Evolving Programs for an Arbitrary Language\",\n        \"hal-cgp: Cartesian genetic programming in pure Python\",\n        \"ECJ at 20: toward a general metaheuristics toolkit\",\n        \"Evolution of Electronic Circuits\",\n        \"A study on graph representations for genetic programming\",\n        \"Julian Francis Miller, 1955–2022\",\n        \"Lock-free parallel dynamic programming\",\n        \"Evolution of Deep Convolutional Neural Networks Using Cartesian Genetic Programming\",\n        \"Cartesian genetic programming encoded artificial neural networks: a comparison using three benchmarks\",\n        \"Recurrent Cartesian Genetic Programming\",\n        \"Introducing a cross platform open source Cartesian Genetic Programming library\",\n        \"Efficient Phenotype Evaluation in Cartesian Genetic Programming\",\n        \"Symbolic Regression is NP-hard\"\n    ],\n    \"reasoning\": \"Selected these 49 references because they represent foundational work and recent advances in CGP++ : A Modern C++ Implementation of Cartesian Genetic Programming, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}