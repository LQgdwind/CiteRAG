{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 60 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Scalable, Validated Code Translation of Entire Projects using Large Language Models\n\nPaper Abstract: Abstract. Large language models (LLMs) show promise in code translation due to their ability to generate idiomatic code. However, a significant limitation when using LLMs for code translation is scalability: existing works have shown a drop in translation success rates for code exceeding around 100 lines. We overcome this limitation by developing a modular approach to translation, where we partition the code into small code fragments which can be translated independently and semantically validated (that is, checking I/O equivalence). When this approach is applied naively, we discover that LLMs are unreliable when translating features of the source language that do not have a direct mapping to the target language, and that the LLM often gets stuck in repair loops when attempting to fix errors. To address these issues, we introduce two key concepts: (1) feature mapping, which integrates predefined translation rules with LLM-based translation to guide the LLM in navigating subtle language differences and producing semantically accurate code; and (2) type-compatibility, which facilitates localized checks at the function signature level to detect errors early, thereby narrowing the scope of potential repairs. We apply our approach to translating real-world Go codebases to Rust, demonstrating that we can consistently generate reliable Rust translations for projects up to 6,600 lines of code and 369 functions, with an average of 73% of functions successfully validated for I/O equivalence, considerably higher than any existing work.\n\n{retrieved_text}\n\nGenerate exactly 60 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 60\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"“Modernization of legacy systems: A generalised roadmap\",\n        \"Modernization of legacy systems: A generalised roadmap\",\n        \"How do professionals perceive legacy systems and software modernization?\",\n        \"Tools to build on AWS.\",\n        \"Cloud SDK: Libraries and command line interface.\",\n        \"Download Azure SDKs and tools.\",\n        \"Eliminating memory safety vulnerabilities once and for all (DARPA).\",\n        \"C2Rust transpiler.\",\n        \"Ownership guided C to Rust translation\",\n        \"Explain-then-translate: an analysis on improving program translation with self-generated explanations\",\n        \"Unsupervised translation of programming languages\",\n        \"Leveraging automated unit tests for unsupervised code translation\",\n        \"Code translation with compiler representations\",\n        \"Rectifier: Code translation with corrector via LLMs\",\n        \"Lost in translation: A study of bugs introduced by large language models while translating code\",\n        \"Towards translating real-world code with LLMs: A study of translating to Rust\",\n        \"VERT: Verified equivalent Rust transpilation with large language models as few-shot learners\",\n        \"Repository-level compositional code translation and validation\",\n        \"Context-aware code segmentation for C-to-Rust translation using large language models\",\n        \"Operational semantics for multi-language programs\",\n        \"Moov ACH.\",\n        \"Featherweight Go\",\n        \"Anyhow.\",\n        \"RustAssistant: Using LLMs to fix compilation errors in Rust code\",\n        \"Claude.\",\n        \"GPT-4 technical report\",\n        \"Gemini.\",\n        \"String comparison and edit distance algorithms library.\",\n        \"Stats – Golang statistics package.\",\n        \"Textrank implementation in golang with extendable features (summarization, phrase extraction) and multithreading (goroutine)..\",\n        \"Streaming approximate histograms in Go.\",\n        \"Takes a full name and splits it into individual name parts.\",\n        \"Provide check digit algorithms and calculators written in Go.\",\n        \"Translating C to safer Rust\",\n        \"C to Go translator.\",\n        \"Sharpen – automated Java-¿C# coversion.\",\n        \"On the evaluation of neural code translation: Taxonomy and benchmark\",\n        \"Attention, compilation, and solver-based symbolic analysis are all you need\",\n        \"CodeFuse-13B: A pretrained multi-lingual code large language model\",\n        \"StructCoder: Structure-aware transformer for code generation\",\n        \"CodeTransOcean: A comprehensive multilingual benchmark for code translation\",\n        \"CodeNet: A large-scale AI for code dataset for learning a diversity of coding tasks\",\n        \"CodeXGLUE: A machine learning benchmark dataset for code understanding and generation\",\n        \"AVATAR: A parallel corpus for Java-Python program translation\",\n        \"Is your code generated by ChatGPT really correct? Rigorous evaluation of large language models for code generation\",\n        \"Evaluating large language models trained on code\",\n        \"Multilingual code co-evolution using large language models\",\n        \"Automated program repair in the era of large pre-trained language models\",\n        \"Contrastrepair: Enhancing conversation-based automated program repair via contrastive test case pairs\",\n        \"Leveraging compiler intermediate representation for multi- and cross-language verification\",\n        \"Semantic soundness for language interoperability\",\n        \"Translation validation\",\n        \"Translation validation for an optimizing compiler\",\n        \"HyDiff: Hybrid differential software analysis\",\n        \"Regression tests to expose change interaction errors\",\n        \"Shadow of a doubt: testing for divergences between software versions\",\n        \"Directed incremental symbolic execution\",\n        \"DLFuzz: Differential fuzzing testing of deep learning systems\",\n        \"Automated behavioral regression testing\",\n        \"Diffuzz: differential fuzzing for side-channel analysis\"\n    ],\n    \"reasoning\": \"Selected these 60 references because they represent foundational work and recent advances in Scalable, Validated Code Translation of Entire Projects using Large Language Models, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}