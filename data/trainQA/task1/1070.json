{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 49 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Learning Sparse Prototypes for Text Generation\n\nPaper Abstract: Abstract Prototype-driven text generation uses non-parametric models that first choose from a library of sentence “prototypes” and then modify the prototype to generate the output text. While effective, these methods are inefficient at test time as a result of needing to store and index the entire training corpus. Further, existing methods often require heuristics to identify which prototypes to reference at training time. In this paper, we propose a novel generative model that automatically learns a sparse prototype support set that, nonetheless, achieves strong language modeling performance. This is achieved by (1) imposing a sparsity-inducing prior on the prototype selection distribution, and (2) utilizing amortized variational inference to learn a prototype retrieval function. In experiments, our model outperforms previous prototype-driven language models while achieving up to a 1000x memory reduction, as well as a 1000x speed-up at test time. More interestingly, we show that the learned prototypes are able to capture semantics and syntax at different granularity as we vary the sparsity of prototype selection, and that certain sentence attributes can be controlled by specifying the prototype for generation.111Code is available at https://github.com/jxhe/sparse-text-prototype.\n\n{retrieved_text}\n\nGenerate exactly 49 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 49\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Character-level language modeling with deeper self-attention\",\n        \"Neural machine translation by jointly learning to align and translate\",\n        \"Non-parametric adaptation for neural machine translation\",\n        \"A neural probabilistic language model\",\n        \"Pattern recognition and machine learning\",\n        \"Generating sentences from a continuous space\",\n        \"Importance weighted autoencoders\",\n        \"Transformer-XL: Attentive language models beyond a fixed-length context\",\n        \"BERT: Pre-training of deep bidirectional transformers for language understanding\",\n        \"Search engine guided neural machine translation\",\n        \"Generating sentences by editing prototypes\",\n        \"A retrieve-and-edit framework for predicting structured outputs\",\n        \"Retrieval-based neural code generation\",\n        \"Lagging inference networks and posterior collapse in variational autoencoders\",\n        \"Long short-term memory\",\n        \"Framing image description as a ranking task: Data, models and evaluation metrics\",\n        \"Stochastic variational inference\",\n        \"Nearest neighbor machine translation\",\n        \"Generalization through memorization: Nearest neighbor language models\",\n        \"Adam: A method for stochastic optimization\",\n        \"Auto-encoding variational bayes\",\n        \"Improved variational inference with inverse autoregressive flow\",\n        \"What do recurrent neural network grammars learn about syntax?\",\n        \"A surprisingly effective fix for deep latent variable modeling of text\",\n        \"Orange: a method for evaluating automatic evaluation metrics for machine translation\",\n        \"Microsoft coco: Common objects in context\",\n        \"Assessing the ability of LSTMs to learn syntax-sensitive dependencies\",\n        \"Roberta: A robustly optimized bert pretraining approach\",\n        \"Regularizing and optimizing LSTM language models\",\n        \"Recurrent neural network based language model\",\n        \"fairseq: A fast, extensible toolkit for sequence modeling\",\n        \"Glove: Global vectors for word representation\",\n        \"Language models as knowledge bases?\",\n        \"Stanza: A Python natural language processing toolkit for many human languages\",\n        \"Sentence-BERT: Sentence embeddings using siamese bert-networks\",\n        \"A neural attention model for abstractive sentence summarization\",\n        \"A neural network approach to context-sensitive generation of conversational responses\",\n        \"Lstm neural networks for language modeling\",\n        \"Attention is all you need\",\n        \"Universal adversarial triggers for nlp\",\n        \"Retrieve and refine: Improved sequence generation models for dialogue\",\n        \"Simple statistical gradient-following algorithms for connectionist reinforcement learning\",\n        \"Huggingface’s transformers: State-of-the-art natural language processing\",\n        \"Response generation by context-aware prototype editing\",\n        \"Spherical latent spaces for stable variational autoencoders\",\n        \"XLNet: Generalized autoregressive pretraining for language understanding\",\n        \"Yelp dataset challenge, round 8\",\n        \"Learning to represent edits\",\n        \"Defending against neural fake news\"\n    ],\n    \"reasoning\": \"Selected these 49 references because they represent foundational work and recent advances in Learning Sparse Prototypes for Text Generation, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}