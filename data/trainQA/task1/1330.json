{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 56 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: TransForm: Formally Specifying Transistency Models and Synthesizing Enhanced Litmus Tests\n\nPaper Abstract: Abstract Memory consistency models (MCMs) specify the legal ordering and visibility of shared memory accesses in a parallel program. Traditionally, instruction set architecture (ISA) MCMs assume that relevant program-visible memory ordering behaviors only result from shared memory interactions that take place between user-level program instructions. This assumption fails to account for virtual memory (VM) implementations that may result in additional shared memory interactions between user-level program instructions and both 1) system-level operations (e.g., address remappings and translation lookaside buffer invalidations initiated by system calls) and 2) hardware-level operations (e.g., hardware page table walks and dirty bit updates) during a user-level program’s execution. These additional shared memory interactions can impact the observable memory ordering behaviors of user-level programs. Thus, memory transistency models (MTMs) have been coined as a superset of MCMs to additionally articulate VM-aware consistency rules. However, no prior work has enabled formal MTM specifications, nor methods to support their automated analysis. To fill the above gap, this paper presents the TransForm framework. First, TransForm features an axiomatic vocabulary for formally specifying MTMs. Second, TransForm includes a synthesis engine to support the automated generation of litmus tests enhanced with MTM features (i.e., enhanced litmus tests, or ELTs) when supplied with a TransForm MTM specification. As a case study, we formally define an estimated MTM for Intel x86 processors, called 𝚡𝟾𝟼𝚝​_​𝚎𝚕𝚝𝚡𝟾𝟼𝚝_𝚎𝚕𝚝{\\tt x86t\\_elt}, that is based on observations made by an ELT-based evaluation of an Intel x86 MTM implementation from prior work and available public documentation [29, 23]. Given 𝚡𝟾𝟼𝚝​_​𝚎𝚕𝚝𝚡𝟾𝟼𝚝_𝚎𝚕𝚝{\\tt x86t\\_elt} and a synthesis bound (on program size) as input, TransForm’s synthesis engine successfully produces a complete set of ELTs (for synthesis bounds that complete within one week) including relevant hand-curated ELTs from prior work, plus over 100 more.\n\n{retrieved_text}\n\nGenerate exactly 56 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 56\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Frightening small children and disconcerting grown-ups: Concurrency in the Linux Kernel\",\n        \"Litmus: Running tests against hardware\",\n        \"Herding cats: Modelling, simulation, testing, and data mining for weak memory\",\n        \"Revision guide for AMD Athlon 64 and AMD Opteron processors\",\n        \"Revision guides for AMD family processors\",\n        \"Architecture reference manual, ARMv7-A and ARMv7-R edition\",\n        \"Cortex-A9 MPCore, programmer advice notice, read-after-read hazards, ARM reference 761319\",\n        \"ARM architecture reference manual, ARMv8, for ARMv8-A architecture profile\",\n        \"Overhauling SC atomics in C11 and OpenCL\",\n        \"Clarifying and compiling C/C++ concurrency: From C++11 to POWER\",\n        \"Mathematizing C++ concurrency\",\n        \"Architectural and operating system support for virtual memory\",\n        \"Foundations of the C++ concurrency memory model\",\n        \"Specifying and checking file system crash-consistency models\",\n        \"Synthesizing memory models from framework sketches and litmus tests\",\n        \"Kami: A platform for high-level parametric hardware specification and its modular verification\",\n        \"An extensible SAT-solver\",\n        \"Cache storage channels: Alias-driven attacks and verified countermeasures\",\n        \"TSOtool: A program for verifying memory systems using the memory consistency model\",\n        \"Power ISA version 2.07\",\n        \"Intel® Itanium architecture software developer’s manual, revision 2.3\",\n        \"Intel® Xeon® Processor 5400 Series Specification Update\",\n        \"Intel® 64 and IA-32 Architectures Software Developer Manuals\",\n        \"Linearizability of persistent memory objects under a full-system-crash failure model\",\n        \"Alloy Analyzer website\",\n        \"Repairing sequential consistency in C/C++11\",\n        \"How to make a multiprocessor computer that correctly executes multiprocess programs\",\n        \"PipeCheck: Specifying and verifying microarchitectural enforcement of memory consistency models\",\n        \"COATCheck: Verifying memory ordering at the Hardware-OS interface\",\n        \"Automated synthesis of comprehensive memory model litmus test suites\",\n        \"Generating litmus tests for contrasting memory consistency models\",\n        \"An axiomatic memory model for POWER multiprocessors\",\n        \"PipeProof: Automated memory consistency proofs for microarchitectural specifications\",\n        \"RTLCheck: Verifying the memory consistency of RTL designs\",\n        \"CCICheck: Using μ𝜇\\\\muhb graphs to verify the coherence-consistency interface\",\n        \"The Java memory model\",\n        \"A tutorial introduction to the ARM and POWER relaxed memory models (2012)\",\n        \"A Primer on Memory Consistency and Cache Coherence, Second Edition\",\n        \"An operational semantics for C/C++11 concurrency\",\n        \"Parallel thread execution ISA version 6.0.\",\n        \"A better x86 memory model: x86-TSO\",\n        \"Memory persistency\",\n        \"Cooking the books: Formalizing JMM implementation recipes\",\n        \"Simplifying ARM concurrency: Multicopy-atomic axiomatic and operational models for ARMv8\",\n        \"Persistence semantics for weak memory: Integrating epoch persistency with the TSO memory model\",\n        \"Weak persistency semantics from the ground up: Formalising the persistency semantics of ARMv8 and transactional models\",\n        \"Address translation aware memory consistency\",\n        \"Specifying and dynamically verifying address translation-aware memory consistency\",\n        \"Synchronising C/C++ and POWER\",\n        \"C/C++11 mappings to processors\",\n        \"AMD’s B3 stepping phenom previewed, TLB hardware fix tested\",\n        \"Kodkod: A relational model finder\",\n        \"TriCheck: Memory model verification at the trisection of software, hardware, and ISA\",\n        \"On validity of program transformations in the Java memory model\",\n        \"The RISC-V instruction set manual, volume I: Unprivileged ISA document, version 20190608-base-ratified\",\n        \"Remote-scope promotion: Clarified, rectified, and verified\"\n    ],\n    \"reasoning\": \"Selected these 56 references because they represent foundational work and recent advances in TransForm: Formally Specifying Transistency Models and Synthesizing Enhanced Litmus Tests, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}