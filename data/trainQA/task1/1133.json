{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 46 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Treewidth-Aware Complexity in ASP: Not all Positive Cycles are Equally Hard\n\nPaper Abstract: Abstract It is well-know that deciding consistency for normal answer set programs (ASP) is NP-complete, thus, as hard as the satisfaction problem for classical propositional logic (SAT). The best algorithms to solve these problems take exponential time in the worst case. The exponential time hypothesis (ETH) implies that this result is tight for SAT, that is, SAT cannot be solved in subexponential time. This immediately establishes that the result is also tight for the consistency problem for ASP. However, accounting for the treewidth of the problem, the consistency problem for ASP is slightly harder than SAT: while SAT can be solved by an algorithm that runs in exponential time in the treewidth kùëòk, it was recently shown that ASP requires exponential time in k‚ãÖlog‚Å°(k)‚ãÖùëòùëòk\\cdot\\log(k). This extra cost is due checking that there are no self-supported true atoms due to positive cycles in the program. In this paper, we refine the above result and show that the consistency problem for ASP can be solved in exponential time in k‚ãÖlog‚Å°(Œª)‚ãÖùëòùúÜk\\cdot\\log(\\lambda) where ŒªùúÜ\\lambda is the minimum between the treewidth and the size of the largest strongly-connected component in the positive dependency graph of the program. We provide a dynamic programming algorithm that solves the problem and a treewidth-aware reduction from ASP to SAT that adhere to the above limit.\n\n{retrieved_text}\n\nGenerate exactly 46 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 46\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"The ASP system DLV2\",\n        \"Answer set based design of knowledge systems\",\n        \"Propositional semantics for disjunctive logic programs\",\n        \"Single-shot epistemic logic program solving\",\n        \"Negation by default and unstratifiable logic programs\",\n        \"Handbook of Satisfiability, volume 185 of Frontiers in Artificial Intelligence and Applications\",\n        \"The impact of treewidth on grounding and solving of answer set programs\",\n        \"Combinatorial optimization on graphs of bounded treewidth\",\n        \"A ckk{}^{\\\\mbox{k}} n 5-Approximation Algorithm for Treewidth\",\n        \"Answer set programming at a glance\",\n        \"Negation as failure\",\n        \"Parameterized Algorithms\",\n        \"Graph Theory, 4th Edition, volume 173 of Graduate Texts in Mathematics\",\n        \"On the computational cost of disjunctive logic programming: Propositional case\",\n        \"Consistency of clark‚Äôs completion and existence of stable models\",\n        \"Treewidth and counting projected answer sets\",\n        \"Backdoors to tractable answer-set programming\",\n        \"Backdoor trees for answer set programming\",\n        \"Answer set solving with bounded treewidth revisited\",\n        \"A multiparametric view on answer set programming\",\n        \"Answer Set Solving in Practice\",\n        \"Conflict-driven answer set solving: From theory to practice\",\n        \"Classical negation in logic programs and disjunctive databases\",\n        \"Fixed-parameter complexity in AI and nonmonotonic reasoning\",\n        \"Exhaustively characterizing feasible logic models of a signaling network using answer set programming\",\n        \"Treewidth-Aware Reductions of normal ASP to SAT ‚Äì Is normal ASP harder than SAT after all?\",\n        \"On the complexity of k-sat\",\n        \"Which problems have strongly exponential complexity?\",\n        \"Answer-set programming with bounded treewidth\",\n        \"Some (in)translatability results for normal logic programs and propositional theories\",\n        \"The answer set programming paradigm\",\n        \"Propositional logic: deduction and algorithms\",\n        \"Treewidth. Computations and Approximations, volume 842 of LNCS\",\n        \"Fixed-parameter algorithms for finding minimal models\",\n        \"Why are there so many loop formulas?\",\n        \"On tight logic programs and yet another translation from normal logic programs to propositional logic\",\n        \"On odd and even cycles in normal logic programs\",\n        \"Fixed-parameter complexity of semantics for logic programs\",\n        \"Autoepistemic logic\",\n        \"Stable model semantics of weight constraint rules\",\n        \"An A-Prolog decision support system for the Space Shuttle\",\n        \"Counting and enumeration problems with bounded treewidth\",\n        \"Graph minors II: Algorithmic aspects of tree-width\",\n        \"Algorithms for propositional model counting\",\n        \"Special issue on answer set programming\",\n        \"Extending and implementing the stable model semantics\"\n    ],\n    \"reasoning\": \"Selected these 46 references because they represent foundational work and recent advances in Treewidth-Aware Complexity in ASP: Not all Positive Cycles are Equally Hard, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}