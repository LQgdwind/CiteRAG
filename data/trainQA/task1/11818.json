{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 48 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: WebTigerPython\n\nPaper Abstract: Abstract. With the large diversity of platforms and devices used by students, web applications increasingly suggest themselves as the solution of choice. Developing adequate educational programming environments in the browser, however, remains a challenge and often involves trade-offs between desired functionalities and navigating the limitations of web applications, in particular the blocking single-threaded execution model. We introduce a fully browser-based Python programming environment that explores the possibilities and demonstrates that a web application can indeed support a rich and mature set of features, ranging from Turtle graphics over educational robotics to data processing.\n\n{retrieved_text}\n\nGenerate exactly 48 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 48\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Anti-Grain Geometry (AGG)\",\n        \"Basthon\",\n        \"Brython\",\n        \"JupyterLite\",\n        \"Online Python beta\",\n        \"Trinket.io\",\n        \"Thonny, a Python IDE for learning programming\",\n        \"Informatik: Programmieren und Robotik\",\n        \"Microsoft MakeCode: embedded programming for education, in blocks and TypeScript\",\n        \"Putting in all the stops: Execution control for javascript\",\n        \"SUS – A Quick and Dirty Usability Scale, pages 189–194\",\n        \"Here, there and everywhere – on the recurring use of Turtle graphics in CS 1\",\n        \"Pyodide roadmap\",\n        \"Learning Java through Alice 3\",\n        \"Pythy: improving the introductory python programming experience\",\n        \"Microbit Python Editor\",\n        \"Calliope Mini Python Editor\",\n        \"Informatik: Algorithmen und Künstliche Intelligenz\",\n        \"MicroPython\",\n        \"Skulpt\",\n        \"Online Python Tutor: embeddable web-based program visualization for cs education\",\n        \"Bringing the web up to speed with WebAssembly\",\n        \"Futurecoder\",\n        \"Einfach Informatik 7–9: Programmieren\",\n        \"PyodideU: Unlocking Python entirely in a browser for CS1\",\n        \"Benefits and pitfalls of Jupyter notebooks in the classroom\",\n        \"PyPy.js\",\n        \"Tell me what’s wrong: A Python IDE with error messages\",\n        \"The Greenfoot programming environment\",\n        \"Programming education made in Switzerland – the story of WebTigerPython\",\n        \"Problem solving and creativity: Complementing programming education with robotics\",\n        \"SharedArrayBuffer\",\n        \"Snap! – build your own blocks\",\n        \"PixiJS\",\n        \"Pygame\",\n        \"Pyodide\",\n        \"Lowering the barriers to programming: A taxonomy of programming environments and languages for novice programmers\",\n        \"Scratch: Programming for all\",\n        \"https://py3.codeskulptor.org\",\n        \"Measuring usability with the system usability scale\",\n        \"PyCharm – The Python IDE for data science and web development\",\n        \"Cmu cs academy: A browser-based, text-based introduction to programming through graphics and animations in python\",\n        \"HTML5 <canvas> based renderer for Matplotlib in Pyodide\",\n        \"Code with Mu: A simple Python editor for beginner programmers\",\n        \"WebTigerJython – a browser-based programming IDE for education\",\n        \"Papyros\",\n        \"Strype: Bridging from blocks to Python, with micro:bit support\",\n        \"Pyodide: Benchmark Py3.11 and Py3.10\"\n    ],\n    \"reasoning\": \"Selected these 48 references because they represent foundational work and recent advances in WebTigerPython, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}