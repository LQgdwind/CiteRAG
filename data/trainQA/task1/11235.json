{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 56 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Hierarchical Resource Partitioning on Modern GPUs: A Reinforcement Learning Approach\n\nPaper Abstract: Abstract GPU-based heterogeneous architectures are now commonly used in HPC clusters. Due to their architectural simplicity specialized for data-level parallelism, GPUs can offer much higher computational throughput and memory bandwidth than CPUs in the same generation do. However, as the available resources in GPUs have increased exponentially over the past decades, it has become increasingly difficult for a single program to fully utilize them. As a consequence, the industry has started supporting several resource partitioning features in order to improve the resource utilization by co-scheduling multiple programs on the same GPU die at the same time. Driven by the technological trend, this paper focuses on hierarchical resource partitioning on modern GPUs, and as an example, we utilize a combination of two different features available on recent NVIDIA GPUs in a hierarchical manner: MPS (Multi-Process Service), a finer-grained logical partitioning; and MIG (Multi-Instance GPU), a coarse-grained physical partitioning. We propose a method for comprehensively co-optimizing the setup of hierarchical partitioning and the selection of co-scheduling groups from a given set of jobs, based on reinforcement learning using their profiles. Our thorough experimental results demonstrate that our approach can successfully set up job concurrency, partitioning, and co-scheduling group selections simultaneously. This results in a maximum throughput improvement by a factor of 1.87 compared to the time-sharing scheduling.\n\n{retrieved_text}\n\nGenerate exactly 56 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 56\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Top 500\",\n        \"Design of Ion-Implanted MOSFET’s with Very Small Physical Dimensions\",\n        \"Heterogeneity in response to the power wall\",\n        \"Computer architecture and amdahl’s law\",\n        \"An instruction roofline model for gpus\",\n        \"Optimizing hardware resource partitioning and job allocations on modern gpus under power caps\",\n        \"Multi-process service documentation\",\n        \"Nvidia multi-instance gpu\",\n        \"Analysis and approximation of optimal co-scheduling on chip multiprocessors\",\n        \"A study on optimally co-scheduling jobs of different lengths on chip multiprocessors\",\n        \"Addressing shared resource contention in multicore processors via scheduling\",\n        \"Understanding cache hierarchy contention in cmps to improve job scheduling\",\n        \"Pam: A novel performance/power aware meta-scheduler for multi-core systems\",\n        \"An approach to resource-aware co-scheduling for cmps\",\n        \"Scalability-based manycore partitioning\",\n        \"Case study on co-scheduling for hpc applications\",\n        \"Dynamic co-scheduling driven by main memory bandwidth utilization\",\n        \"Co-scheduling hpc workloads on cache-partitioned cmp platforms\",\n        \"Dicer: Diligent cache partitioning for efficient workload consolidation\",\n        \"Hypart: A hybrid technique for practical memory bandwidth partitioning on commodity servers\",\n        \"Emba: Efficient memory bandwidth allocation to improve performance on intel commodity processor\",\n        \"Copart: Coordinated partitioning of last-level cache and memory bandwidth for fairness-aware workload consolidation on commodity servers\",\n        \"Self-optimizing memory controllers: A reinforcement learning approach\",\n        \"Co-run scheduling with power cap on integrated cpu-gpu systems\",\n        \"Improving gpgpu concurrency with elastic kernels\",\n        \"Enabling preemptive multiprogramming on gpus\",\n        \"Slate: Enabling workload-aware efficient multiprocessing for modern gpgpus\",\n        \"Smcompactor: A workload-aware fine-grained resource management framework for gpgpus\",\n        \"Intra-node memory safe gpu co-scheduling\",\n        \"Accelerate gpu concurrent kernel execution by mitigating memory pipeline stalls\",\n        \"Mask: Redesigning the gpu memory hierarchy to support multi-application concurrency\",\n        \"Navigator: Dynamic multi-kernel scheduling to improve gpu performance\",\n        \"Miso: Exploiting multi-instance gpu capability on multi-tenant gpu clusters\",\n        \"Orchestrated co-scheduling, resource partitioning, and power capping on cpu-gpu heterogeneous systems via machine learning\",\n        \"Reinforcement learning-based slc cache technique for enhancing ssd write performance\",\n        \"Rlscheduler: An automated hpc batch job scheduler using reinforcement learning\",\n        \"Drlpart: A deep reinforcement learning framework for optimally efficient and robust resource partitioning on commodity servers\",\n        \"Online power management for multi-cores: A reinforcement learning based approach\",\n        \"Resemble: Reinforced ensemble framework for data prefetching\",\n        \"Sibyl: Adaptive and extensible data placement in hybrid storage systems using online reinforcement learning\",\n        \"Nvidia a100 tensor core gpu architecture\",\n        \"Fast multi-parameter performance modeling\",\n        \"Reinforcement learning: An introduction\",\n        \"Learning from delayed rewards\",\n        \"Deep reinforcement learning with double q-learning\",\n        \"Dueling network architectures for deep reinforcement learning\",\n        \"Gymnasium documentation\",\n        \"Pytorch: An imperative style, high-performance deep learning library\",\n        \"Scikit-learn: Machine learning in Python\",\n        \"Nsight compute\",\n        \"Rodinia: A benchmark suite for heterogeneous computing\",\n        \"Stream benchmark in cuda c++\",\n        \"random-access-bench\",\n        \"Coral-2 benchmarks\",\n        \"Parallelism-aware batch scheduling: Enhancing both performance and fairness of shared dram systems\",\n        \"Cuda c/c++ streams and concurrency\"\n    ],\n    \"reasoning\": \"Selected these 56 references because they represent foundational work and recent advances in Hierarchical Resource Partitioning on Modern GPUs: A Reinforcement Learning Approach, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}