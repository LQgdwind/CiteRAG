{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 49 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Deep Just-In-Time Inconsistency Detection Between Comments and Source Code\n\nPaper Abstract: Abstract Natural language comments convey key aspects of source code such as implementation, usage, and pre- and post-conditions. Failure to update comments accordingly when the corresponding code is modified introduces inconsistencies, which is known to lead to confusion and software bugs. In this paper, we aim to detect whether a comment becomes inconsistent as a result of changes to the corresponding body of code, in order to catch potential inconsistencies just-in-time, i.e., before they are committed to a code base. To achieve this, we develop a deep-learning approach that learns to correlate a comment with code changes. By evaluating on a large corpus of comment/code pairs spanning various comment types, we show that our model outperforms multiple baselines by significant margins. For extrinsic evaluation, we show the usefulness of our approach by combining it with a comment update model to build a more comprehensive automatic comment maintenance system which can both detect and resolve inconsistent comments based on code changes.\n\n{retrieved_text}\n\nGenerate exactly 49 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 49\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"The Adverse Effects of Code Duplication in Machine Learning Models of Code\",\n        \"code2seq: Generating Sequences from Structured Representations of Code\",\n        \"METEOR: An Automatic Metric for MT Evaluation with Improved Correlation with Human Judgments\",\n        \"An Empirical Investigation of Statistical Significance in NLP\",\n        \"Learning a Metric for Code Readability\",\n        \"On the Benefit of Incorporating External Features in a Neural Architecture for Answer Sentence Selection\",\n        \"Learning Phrase Representations using RNN Encoder–Decoder for Statistical Machine Translation\",\n        \"Word Embeddings for Comment Coherence\",\n        \"Coherence of Comments and Method Implementations: A Dataset and an Empirical Investigation\",\n        \"Open Vocabulary Learning on Source Code with a Graph-Structured Cache\",\n        \"A Study of the Documentation Essential to Software Maintenance\",\n        \"Fine-Grained and Accurate Source Code Differencing\",\n        \"CodeBERT: A Pre-Trained Model for Programming and Natural Languages\",\n        \"Structured Neural Summarization\",\n        \"Do Code and Comments Co-Evolve? On the Relation Between Source Code and Comment changes\",\n        \"Analyzing the Co-Evolution of Comments and Source Code\",\n        \"On the Relationship between Comment Update Practices and Software Bugs\",\n        \"GitHub Projects. Quality Analysis of Open-Source Software\",\n        \"Examining the Evolution of Code Comments in PostgreSQL\",\n        \"Automatic Quality Assessment of Source Code Comments: The JavadocMiner\",\n        \"Gated Graph Sequence Neural Networks\",\n        \"Automatic Detection of Outdated Comments During Code Changes\",\n        \"Automating Just-In-Time Comment Updating\",\n        \"Effective Approaches to Attention-based Neural Machine Translation\",\n        \"Understanding the Rationale for Updating a Function’s Comment\",\n        \"Natural language models for predicting programming comments\",\n        \"Ground Truth for Grammatical Error Correction Metrics\",\n        \"A Framework for Writing Trigger-Action Todo Comments in Executable Format\",\n        \"Javadoc\",\n        \"Associating Natural Language Comment and Source Code Entities\",\n        \"Learning to Update Natural Language Comments Based on Code Changes\",\n        \"BLEU: a Method for Automatic Evaluation of Machine Translation\",\n        \"Detecting Code Comment Inconsistency Using Siamese Recurrent Network\",\n        \"Detecting Fragile Comments\",\n        \"Neural Network-Based Detection of Self-Admitted Technical Debt: From Performance to Explainability\",\n        \"Automatic Detection of Outdated Comments in Open Source Java Projects\",\n        \"Towards Detecting Inconsistent Comments in Java Source Code Automatically\",\n        \"Reducing outdated and inconsistent code comments during software development: The comment validator program\",\n        \"/iComment: Bugs or Bad Comments?/\",\n        \"aComment: Mining Annotations from Comments and Code to Detect Interrupt Related Concurrency Bugs\",\n        \"@tComment: Testing Javadoc Comments to Detect Comment-Code Inconsistencies\",\n        \"Javalang\",\n        \"Attention is All you Need\",\n        \"Pointer Networks\",\n        \"A Large-Scale Empirical Study on Code-Comment Inconsistencies\",\n        \"Optimizing Statistical Machine Translation for Text Simplification\",\n        \"Adding External Features to Convolutional Neural Network for Aspect-based Sentiment Analysis\",\n        \"Learning to Represent Edits\",\n        \"Analyzing APIs Documentation and Code to Detect Directive Defects\"\n    ],\n    \"reasoning\": \"Selected these 49 references because they represent foundational work and recent advances in Deep Just-In-Time Inconsistency Detection Between Comments and Source Code, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}