{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 50 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Callipepla: Stream Centric Instruction Set and Mixed Precision for Accelerating Conjugate Gradient Solver\n\nPaper Abstract: Abstract. The continued growth in the processing power of FPGAs coupled with high bandwidth memories (HBM), makes systems like the Xilinx U280 credible platforms for linear solvers which often dominate the run time of scientific and engineering applications. In this paper, we present Callipepla, an accelerator for a preconditioned conjugate gradient linear solver (CG). FPGA acceleration of CG faces three challenges: (1) how to support an arbitrary problem and terminate acceleration processing on the fly, (2) how to coordinate long-vector data flow among processing modules, and (3) how to save off-chip memory bandwidth and maintain double (FP64) precision accuracy. To tackle the three challenges, we present (1) a stream-centric instruction set for efficient streaming processing and control, (2) vector streaming reuse (VSR) and decentralized vector flow scheduling to coordinate vector data flow among modules and further reduce off-chip memory accesses with a double memory channel design, and (3) a mixed precision scheme to save bandwidth yet still achieve effective double precision quality solutions. To the best of our knowledge, this is the first work to introduce the concept of VSR for data reusing between on-chip modules to reduce unnecessary off-chip accesses for FPGA accelerators. We prototype the accelerator on a Xilinx U280 HBM FPGA. Our evaluation shows that compared to the Xilinx HPC product, the XcgSolver, Callipepla achieves a speedup of 3.94×3.94\\times, 3.36×3.36\\times higher throughput, and 2.94×2.94\\times better energy efficiency. Compared to an NVIDIA A100 GPU which has 4×4\\times the memory bandwidth of Callipepla, we still achieve 77% of its throughput with 3.34×3.34\\times higher energy efficiency. The code is available at https://github.com/UCLA-VAST/Callipepla.\n\n{retrieved_text}\n\nGenerate exactly 50 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 50\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Approximation of Large-Scale Dynamical Systems\",\n        \"Combining Dynamic & Static Scheduling in High-level Synthesis\",\n        \"DASS: Combining Dynamic & Static Scheduling in High-Level Synthesis\",\n        \"Exploiting Computation Reuse for Stencil Accelerators\",\n        \"SODA: Stencil with Optimized Dataflow Architecture\",\n        \"Extending High-Level Synthesis for Task-Parallel Programs\",\n        \"HBM Connect: High-Performance HLS Interconnect for FPGA HBM\",\n        \"Best-Effort FPGA Programming: A Few Steps Can Go a Long Way\",\n        \"Combining Computation and Communication Optimizations in System Synthesis for Streaming Applications\",\n        \"PolySA: Polyhedral-Based Systolic Array Auto-Compilation\",\n        \"The University of Florida Sparse Matrix Collection\",\n        \"HPCG Benchmark: A New Metric for Ranking High Performance Computing Systems\",\n        \"Computational Methods for Fluid Dynamics\",\n        \"A High Memory Bandwidth FPGA Accelerator for Sparse Matrix-Vector Multiplication\",\n        \"Evaluating Derivatives: Principles and Techniques of Algorithmic Differentiation\",\n        \"TAPA: A Scalable Task-Parallel Dataflow Programming Framework for Modern FPGAs with Co-Optimization of HLS and Physical Design\",\n        \"AutoBridge: Coupling Coarse-Grained Floorplanning and Pipelining for High-Frequency HLS Design on Multi-Die FPGAs\",\n        \"Analysis and Optimization of the Implicit Broadcasts in FPGA HLS to Improve Maximum Frequency\",\n        \"Hardware Acceleration of Long Read Pairwise Overlapping in Genome Sequencing: A Race Between FPGA and GPU\",\n        \"Parallel Preconditioned Conjugate Gradient Algorithm on GPU\",\n        \"Methods of Conjugate Gradients for Solving Linear Systems\",\n        \"Mixed Precision Algorithms in Numerical Linear Algebra\",\n        \"GraphLily: Accelerating Graph Linear Algebra on HBM-Equipped FPGAs\",\n        \"The Incomplete Cholesky—Conjugate Gradient Method for the Iterative Solution of Systems of Linear Equations\",\n        \"OverGen: Improving FPGA Usability through Domain-specific Overlay Generation\",\n        \"A High Throughput FPGA-Based Floating Point Conjugate Gradient Implementation\",\n        \"FPGA Implementation of the Conjugate Gradient Method\",\n        \"Parallel Multilevel Preconditioned Conjugate-gradient Approach to Variable-Charge Molecular Dynamics\",\n        \"Hybrid Optimization/Heuristic Instruction Scheduling for Programmable Accelerator Codesign\",\n        \"Stream-Dataflow Acceleration\",\n        \"NVIDIA A100 TENSOR CORE GPU\",\n        \"Efficient FPGA Implementation of Conjugate Gradient Methods for Laplacian System using HLS\",\n        \"More Flops or More Precision? Accuracy Parameterizable Linear Equation Solvers for Model Predictive Control\",\n        \"Iterative Methods for Sparse Linear Systems\",\n        \"End-to-End Optimization of Deep Learning Applications\",\n        \"Low-Cost Floating-Point Processing in ReRAM for Scientific Computing\",\n        \"Serpens: A High Bandwidth Memory Based Accelerator for General-Purpose Sparse Matrix-Vector Multiplication\",\n        \"Sextans: A Streaming Accelerator for General-Purpose Sparse-Matrix Dense-Matrix Multiplication\",\n        \"GraphR: Accelerating Graph Processing Using ReRAM\",\n        \"LS-DYNA\",\n        \"AutoSA: A Polyhedral Compiler for High-Performance Systolic Arrays on FPGA\",\n        \"DSAGEN: Synthesizing Programmable Spatial Accelerators\",\n        \"Unifying Spatial Accelerator Compilation with Idiomatic and Modular Transformations\",\n        \"A Hybrid Systolic-Dataflow Architecture for Inductive Matrix Algorithms\",\n        \"Alveo U280 Data Center Accelerator Card Data Sheet\",\n        \"Vitis HPC Library\",\n        \"Vitis Libraries\",\n        \"GraphACT: Accelerating GCN training on CPU-FPGA heterogeneous platforms\",\n        \"Optimizing FPGA-based Accelerator Design for Deep Convolutional Neural Networks\",\n        \"Accelerating Binarized Convolutional Neural Networks with Software-Programmable FPGAs\"\n    ],\n    \"reasoning\": \"Selected these 50 references because they represent foundational work and recent advances in Callipepla: Stream Centric Instruction Set and Mixed Precision for Accelerating Conjugate Gradient Solver, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}