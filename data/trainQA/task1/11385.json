{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 56 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Sóley: Identification and Automated Detection of Logic Vulnerabilities in Ethereum Smart Contracts Using Large Language Models\n\nPaper Abstract: Abstract Context: Modern blockchain, such as Ethereum, supports the deployment and execution of so-called smart contracts, autonomous digital programs with significant value of cryptocurrency. Executing smart contracts requires gas costs paid by users, which define the limits of the contract’s execution. Logic vulnerabilities in smart contracts can lead to excessive gas consumption, financial losses, and are often the root cause of high-impact cyberattacks. Objective: Our objective is threefold: (i) empirically investigate logic vulnerabilities in real-world smart contracts extracted from code changes on GitHub, (ii) introduce Sóley, an automated method for detecting logic vulnerabilities in smart contracts, leveraging Large Language Models (LLMs), and (iii) examine mitigation strategies employed by smart contract developers to address these vulnerabilities in real-world scenarios. Method: We obtained smart contracts and related code changes from GitHub. To address the first and third objectives, we qualitatively investigated available logic vulnerabilities using an open coding method. We identified these vulnerabilities and their mitigation strategies. For the second objective, we extracted various logic vulnerabilities, applied preprocessing techniques, and implemented and trained the proposed Sóley model. We evaluated Sóley along with the performance of various LLMs and compared the results with the state-of-the-art baseline on the task of logic vulnerability detection. Results: From our analysis of code changes on GitHub, we identified nine novel logic vulnerabilities, extending existing taxonomies with these vulnerabilities. Furthermore, we introduced several mitigation strategies extracted from observed developer modifications in real-world scenarios. Our Sóley method outperforms existing methods in automatically identifying logic vulnerabilities. Interestingly, the efficacy of LLMs in this task was evident without requiring extensive feature engineering. Conclusion: Early identification of logic vulnerabilities from code changes can provide valuable insights into their detection and mitigation. Recent advancements, such as LLMs, show promise in detecting logic vulnerabilities and contributing to smart contract security and sustainability.\n\n{retrieved_text}\n\nGenerate exactly 56 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 56\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"A next-generation smart contract and decentralized application platform\",\n        \"Bitcoin: A peer-to-peer electronic cash system\",\n        \"Ethereum: A secure decentralised generalised transaction ledger\",\n        \"Mastering ethereum: building smart contracts and dapps\",\n        \"Smart contract and defi security tools: Do they meet the needs of practitioners?\",\n        \"Governmental contract\",\n        \"Smart contract templates: foundations, design landscape and research directions\",\n        \"Large language model-powered smart contract vulnerability detection: New perspectives\",\n        \"Automatic smart contract comment generation via large language models and in-context learning\",\n        \"Book review: Corbin, j., & strauss, a.(2008). basics of qualitative research: Techniques and procedures for developing grounded theory . thousand oaks, ca: Sage\",\n        \"Blockchain challenges and opportunities: A survey\",\n        \"Ethereum accounts\",\n        \"Smart contracts: building blocks for digital markets\",\n        \"A survey of attacks on ethereum smart contracts (sok)\",\n        \"Smart contracts vulnerabilities: a call for blockchain software engineering?\",\n        \"Solidity compiler documentation\",\n        \"Principles and goals\",\n        \"Defining the ethereum virtual machine for interactive theorem provers\",\n        \"Archived ethereum white paper\",\n        \"Ethereum, smart contracts, dapps\",\n        \"A study of inline assembly in solidity smart contracts\",\n        \"Slither: a static analysis framework for smart contracts\",\n        \"Smartcheck: Static analysis of ethereum smart contracts\",\n        \"Osiris: Hunting for integer bugs in ethereum smart contracts\",\n        \"Secure and privacy-preserving crowdsensing using smart contracts: Issues and solutions\",\n        \"Deconstructing thedao attack: A brief code tour\",\n        \"Gaschecker: Scalable analysis for discovering gas-inefficient smart contracts\",\n        \"Bert: Pre-training of deep bidirectional transformers for language understanding\",\n        \"Improving language understanding by generative pre-training\",\n        \"Codebert: A pre-trained model for programming and natural languages\",\n        \"CodeBERTa-small-v1\",\n        \"Distilbert, a distilled version of bert: smaller, faster, cheaper and lighter\",\n        \"Gpt-4: Technical report\",\n        \"Exploring the limits of transfer learning with a unified text-to-text transformer\",\n        \"Automesc: Automatic framework for mining and classifying ethereum smart contract vulnerabilities and their fixes\",\n        \"Vudenc: vulnerability detection with deep learning on a natural codebase for python\",\n        \"Automated identification of security issues from commit messages and bug reports\",\n        \"Ethereum GitHub Repository\",\n        \"Smartbugs\",\n        \"Gptscan: Detecting logic vulnerabilities in smart contracts by combining gpt with program analysis\",\n        \"A fly in the ointment: an empirical study on the characteristics of ethereum smart contract code weaknesses\",\n        \"A framework and dataset for bugs in ethereum smart contracts\",\n        \"Demystifying exploitable bugs in smart contracts\",\n        \"Challenges with applying vulnerability prediction models\",\n        \"Program slicing\",\n        \"Assbert: Active and semi-supervised bert for smart contract vulnerability detection\",\n        \"A primer in bertology: What we know about how bert works\",\n        \"Erc-20, erc-721, and other smart contract standards explained\",\n        \"Mining fix patterns for findbugs violations\",\n        \"Solhint\",\n        \"Smashing ethereum smart contracts for fun and real profit\",\n        \"Finding the greedy, prodigal, and suicidal contracts at scale\",\n        \"Do you still need a manual smart contract audit?\",\n        \"Smartcondetect: Highly accurate smart contract code vulnerability detection mechanism using bert\",\n        \"Empirical review of automated analysis tools on 47,587 ethereum smart contracts\",\n        \"Validity threats in empirical software engineering research-an initial survey.\"\n    ],\n    \"reasoning\": \"Selected these 56 references because they represent foundational work and recent advances in Sóley: Identification and Automated Detection of Logic Vulnerabilities in Ethereum Smart Contracts Using Large Language Models, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}