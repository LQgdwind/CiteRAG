{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 47 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Machine Learning for Microprocessor Performance Bug Localization\n\nPaper Abstract: Abstract The validation process for microprocessors is a very complex task that consumes substantial engineering time during the design process. Bugs that degrade overall system performance, without affecting its functional correctness, are particularly difficult to debug given the lack of a golden reference for bug-free performance. This work introduces two automated performance bug localization methodologies based on machine learning that aim to aid the debugging process. Our results show that, for the evaluated microprocessor core performance bugs whose average IPC impact is greater than 1%, our best performing technique is able to localize the exact microarchitectural unit of the bug ∼similar-to\\sim77% of the time, while achieving a top-3 unit accuracy (out of 11 possible locations) of over 90% for bugs with the same average IPC impact. The proposed system in our simulation setup requires only a few seconds to perform a bug location inference, which leads to a reduced debugging time.\n\n{retrieved_text}\n\nGenerate exactly 47 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 47\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"ChampSim: A trace based microarchitecture simulator\",\n        \"SPEC CPU2006\",\n        \"SPEC CPU2017\",\n        \"A generic micro-architectural test plan approach for microprocessor verification\",\n        \"AMD Ryzen™ 9 5950X\",\n        \"Processor Programming Reference (PPR) for AMD Family 17h Model 01h, Revision B1 Processors\",\n        \"Scor: Source code retrieval with semantics and order\",\n        \"A zero-positive learning approach for diagnosing software performance regressions\",\n        \"Reducing multiclass to binary: A unifying approach for margin classifiers\",\n        \"Cross-architecture performance prediction (xapp) using cpu code to predict gpu performance\",\n        \"A static analysis-based cross-architecture performance prediction using machine learning\",\n        \"Cortex-A710\",\n        \"The Gem5 simulator\",\n        \"Pattern Recognition and Machine Learning\",\n        \"Architectural timing verification and test for super scalar processors\",\n        \"Random forests\",\n        \"Automatic microprocessor performance bug detection\",\n        \"XGBoost: A scalable tree boosting system\",\n        \"Keras\",\n        \"Greedy function approximation: a gradient boosting machine\",\n        \"Seer: Leveraging big data to navigate the complexity of performance debugging in cloud microservices\",\n        \"Classification by pairwise coupling\",\n        \"Long short-term memory\",\n        \"Multilayer feedforward networks are universal approximators\",\n        \"Performance anomaly detection and bottleneck identification\",\n        \"11th generation Intel® Core™ i7 processors\",\n        \"Intel processors performance monitoring unit supported events\",\n        \"Intel386™ DX processor: Specification update\",\n        \"Intel Xeon processor scalable family: Specification update\",\n        \"Path confidence based lookahead prefetching\",\n        \"Convolutional networks for images, speech, and time series\",\n        \"Counterminer: Mining big performance data from hardware counters\",\n        \"BugMD: Automatic mismatch diagnosis for bug triaging\",\n        \"HPL and DGEMM performance variability on the Xeon platinum 8160 processor\",\n        \"Chip errata for the MPC7448\",\n        \"Blog: Post-silicon bug localization in processors using bug localization graphs\",\n        \"Retrieval from software libraries for bug localization: A comparative study of generic and composite text models\",\n        \"Improving bug localization using structured information retrieval\",\n        \"Communication in the presence of noise\",\n        \"Automatically characterizing large scale program behavior\",\n        \"Performance analysis and validation of the Intel Pentium 4 processor on 90nm technology.\",\n        \"Architectural performance verification: PowerPC processors\",\n        \"AM3517, AM3505 Sitara processors silicon revisions 1.1, 1.0: Silicon errata\",\n        \"Software and insfrastructure\",\n        \"A buffer-oriented methodology for microarchitecture validation\",\n        \"SciPy 1.0: Fundamental Algorithms for Scientific Computing in Python\",\n        \"Where should the bugs be fixed? more accurate information retrieval-based bug localization based on bug reports\"\n    ],\n    \"reasoning\": \"Selected these 47 references because they represent foundational work and recent advances in Machine Learning for Microprocessor Performance Bug Localization, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}