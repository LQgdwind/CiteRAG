{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 45 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Laurel: Generating Dafny Assertions Using Large Language Models\n\nPaper Abstract: Abstract. Dafny is a popular verification language, which automates proofs by outsourcing them to an SMT solver. This automation is not perfect, however, and the solver often requires guidance in the form of helper assertions, creating a burden for the proof engineer. In this paper, we propose Laurel, a tool that uses large language models (LLMs) to automatically generate helper assertions for Dafny programs. To improve the success rate of LLMs in this task, we design two domain-specific prompting techniques. First, we help the LLM determine the location of the missing assertion by analyzing the verifier’s error message and inserting an assertion placeholder at that location. Second, we provide the LLM with example assertions from the same codebase, which we select based on a new lemma similarity metric. We evaluate our techniques on a dataset of helper assertions we extracted from three real-world Dafny codebases. Our evaluation shows that Laurel is able to generate over 50% of the required helper assertions given only a few attempts, making LLMs a usable and affordable tool to further automate practical program verification.\n\n{retrieved_text}\n\nGenerate exactly 45 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 45\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"AWS Encryption SDK for Dafny\",\n        \"Cedar\",\n        \"Dafny-libraries\",\n        \"Dafny-VMC\",\n        \"dafny workshop\",\n        \"GPT-4\",\n        \"Deductive Software Verification - The KeY Book - From Theory to Practice\",\n        \"Leveraging Rust Types for Modular Specification and Verification\",\n        \"Program Synthesis with Large Language Models\",\n        \"A survey on tree edit distance and related problems\",\n        \"Language models are few-shot learners\",\n        \"Formal and Executable Semantics of the Ethereum Virtual Machine in Dafny\",\n        \"Ranking LLM-Generated Loop Invariants for Program Verification\",\n        \"Evaluating Large Language Models Trained on Code\",\n        \"Abstract Interpretation: A Unified Lattice Model for the Static Analysis of Programs\",\n        \"Z3: An Efficient SMT Solver\",\n        \"Creusot: A Foundry for the Deductive Verification of Rust Programs\",\n        \"Why3 — Where Programs Meet Provers\",\n        \"Baldur: Whole-Proof Generation and Repair with Large Language Models\",\n        \"Annotation inference for modular checkers\",\n        \"Assigning meanings to programs\",\n        \"Error detecting and error correcting codes\",\n        \"Software Model Checking for People Who Love Automata\",\n        \"Finding Inductive Loop Invariants using Large Language Models\",\n        \"From Words to Code: Harnessing Data for Program Synthesis from Natural Language\",\n        \"Toward Neural-Network-Guided Program Synthesis and Verification\",\n        \"Verus: Verifying Rust Programs using Linear Ghost Types\",\n        \"Flux: Liquid Types for Rust\",\n        \"Dafny: An Automatic Program Verifier for Functional Correctness\",\n        \"Binary Codes Capable of Correcting Deletions, Insertions and Reversals\",\n        \"What Makes Good In-Context Examples for GPT-3?\",\n        \"Fantastically Ordered Prompts and Where to Find Them: Overcoming Few-Shot Prompt Order Sensitivity\",\n        \"Towards AI-Assisted Synthesis of Verified Dafny Methods\",\n        \"Can Large Language Models Reason about Program Invariants?\",\n        \"An Information-theoretic Approach to Prompt Engineering Without Ground Truth Labels\",\n        \"Selective Annotation Makes Language Models Better Few-Shot Learners\",\n        \"Clover: Closed-Loop Verifiable Code Generation\",\n        \"Dependent Types and Multi-Monadic Effects in F*\",\n        \"LiquidHaskell: experience with refinement types in the real world\",\n        \"The String-to-String Correction Problem\",\n        \"Automated Program Repair in the Era of Large Pre-trained Language Models\",\n        \"LeanDojo: Theorem Proving with Retrieval-Augmented Language Models\",\n        \"Towards A Correct-by-Construction FHE Model\",\n        \"Simple Fast Algorithms for the Editing Distance between Trees and Related Problems\",\n        \"Mariposa: Measuring SMT Instability in Automated Program Verification (Technical Report)\"\n    ],\n    \"reasoning\": \"Selected these 45 references because they represent foundational work and recent advances in Laurel: Generating Dafny Assertions Using Large Language Models, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}