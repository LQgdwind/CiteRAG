{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 45 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Code Representation Pre-training with Complements from Program Executions\n\nPaper Abstract: Abstract Large language models (LLMs) for natural language processing have been grafted onto programming language modeling for advancing code intelligence. Although it can be represented in the text format, code is syntactically more rigorous in order to be properly compiled or interpreted to perform a desired set of behaviors given any inputs. In this case, existing works benefit from syntactic representations to learn from code less ambiguously in the forms of abstract syntax tree, control-flow graph, etc. However, programs with the same purpose can be implemented in various ways showing different syntactic representations while the ones with similar implementations can have distinct behaviors. Though trivially demonstrated during executions, such semantics about functionality are challenging to be learned directly from code, especially in an unsupervised manner. Hence, in this paper, we propose FuzzPretrain to explore the dynamic information of programs revealed by their test cases and embed it into the feature representations of code as complements. The test cases are obtained with the assistance of a customized fuzzer and are only required during pre-training. FuzzPretrain yielded more than 6%/19%percent6percent196\\%/19\\% mAP improvements on code search over its counterparts trained with only source code or AST, respectively. Our extensive experimental results show the benefits of learning discriminative code representations with program executions.\n\n{retrieved_text}\n\nGenerate exactly 45 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 45\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Learning to represent programs with graphs\",\n        \"Evaluating large language models trained on code\",\n        \"Large language models are zero-shot fuzzers: Fuzzing deep-learning libraries via large language models\",\n        \"BERT: Pre-training of deep bidirectional transformers for language understanding\",\n        \"Towards learning (dis)-similarity of source code from program contrasts\",\n        \"CodeBERT: A pre-trained model for programming and natural languages\",\n        \"Afl++ combining incremental steps of fuzzing research\",\n        \"SimCSE: Simple contrastive learning of sentence embeddings\",\n        \"Graphcodebert: Pre-training code representations with data flow\",\n        \"Unixcoder: Unified cross-modal pre-training for code representation\",\n        \"Momentum contrast for unsupervised visual representation learning\",\n        \"Global relational models of source code\",\n        \"Cosqa: 20,000+ web queries for code search and question answering\",\n        \"Codesearchnet challenge: Evaluating the state of semantic code search\",\n        \"Large language models are few-shot testers: Exploring llm-based general bug reproduction\",\n        \"Just enough semantics: An information theoretic approach for ir-based software bug localization\",\n        \"Adam: A method for stochastic optimization\",\n        \"Cross-lingual language model pretraining\",\n        \"Blip: Bootstrapping language-image pre-training for unified vision-language understanding and generation\",\n        \"Coderetriever: Unimodal and bimodal contrastive learning\",\n        \"Soft-labeled contrastive pre-training for function-level code representation\",\n        \"Code execution with pre-trained language models\",\n        \"Contrabert: Enhancing code pre-trained models via contrastive learning\",\n        \"Roberta: A robustly optimized bert pretraining approach\",\n        \"Codexglue: A machine learning benchmark dataset for code understanding and generation\",\n        \"Exponentially weighted moving average control schemes: properties and enhancements\",\n        \"Convolutional neural networks over tree structures for programming language processing\",\n        \"Codenet: A large-scale ai for code dataset for learning a diversity of coding tasks\",\n        \"Language models are unsupervised multitask learners\",\n        \"Learning transferable visual models from natural language supervision\",\n        \"Exploring the limits of transfer learning with a unified text-to-text transformer\",\n        \"Software clone detection: A systematic review\",\n        \"Adaptive test generation using a large language model\",\n        \"Towards a big data curated benchmark of inter-project code clones\",\n        \"Contrastive representation distillation\",\n        \"Structcoder: Structure-aware transformer for code generation\",\n        \"Visualizing data using t-sne\",\n        \"Attention is all you need\",\n        \"Codet5: Identifier-aware unified pre-trained encoder-decoder models for code understanding and generation\",\n        \"Codet5+: Open code large language models for code understanding and generation\",\n        \"Industrial perspective on static analysis\",\n        \"Googleâ€™s neural machine translation system: Bridging the gap between human and machine translation\",\n        \"The fuzzing book\",\n        \"Understanding programs by exploiting (fuzzing) test cases\",\n        \"Devign: Effective vulnerability identification by learning comprehensive program semantics via graph neural networks\"\n    ],\n    \"reasoning\": \"Selected these 45 references because they represent foundational work and recent advances in Code Representation Pre-training with Complements from Program Executions, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}