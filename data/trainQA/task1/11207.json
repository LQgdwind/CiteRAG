{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 49 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: vAttention: Dynamic Memory Management for Serving LLMs without PagedAttention\n\nPaper Abstract: Abstract. Efficient use of GPU memory is essential for high throughput LLM inference. Prior systems reserved memory for the KV-cache ahead-of-time, resulting in wasted capacity due to internal fragmentation. Inspired by OS-based virtual memory systems, vLLM proposed PagedAttention to enable dynamic memory allocation for KV-cache. This approach eliminates fragmentation, enabling high-throughput LLM serving with larger batch sizes. However, to be able to allocate physical memory dynamically, PagedAttention changes the layout of KV-cache from contiguous virtual memory to non-contiguous virtual memory. This change requires attention kernels to be rewritten to support paging, and serving framework to implement a memory manager. Thus, the PagedAttention model leads to software complexity, portability issues, redundancy and inefficiency. In this paper, we propose vAttention for dynamic KV-cache memory management. In contrast to PagedAttention, vAttention retains KV-cache in contiguous virtual memory and leverages low-level system support for demand paging, that already exists, to enable on-demand physical memory allocation. Thus, vAttention unburdens the attention kernel developer from having to explicitly support paging and avoids re-implementation of memory management in the serving framework. We show that vAttention enables seamless dynamic memory management for unchanged implementations of various attention kernels. vAttention also generates tokens up to 1.97×1.97\\times faster than vLLM, while processing input prompts up to 3.92×3.92\\times and 1.45×1.45\\times faster than the PagedAttention variants of FlashAttention and FlashInfer.\n\n{retrieved_text}\n\nGenerate exactly 49 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 49\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Amazon CodeWhisperer\",\n        \"Anthropic Claude\",\n        \"Bing AI\",\n        \"Faster Transformer Kernels\",\n        \"Github Copilot\",\n        \"Google Bard\",\n        \"Replit Ghostwriter\",\n        \"Text Generation Inference\",\n        \"FlashAttention\",\n        \"Flash-Decoding for long-context inference\",\n        \"FlashInfer: Kernel Library for LLM Serving\",\n        \"LightLLM: A Light and Fast Inference Service for LLM\",\n        \"Performance decay when using paged attention\",\n        \"TensorRT-LLM: A TensorRT Toolbox for Optimized Large Language Model Inference\",\n        \"Use optimized kernels for MQA/GQA\",\n        \"Add support for small page sizes\",\n        \"CUDA Toolkit Documentation: Virtual Memory Management\",\n        \"Faster Transformer\",\n        \"Fix eager mode performance\",\n        \"Implement Page KV Cache\",\n        \"Refactor Attention Take 2\",\n        \"Separate attention backends\",\n        \"Support KV Partition for BatchPrefill kernel for Paged and Ragged KV-Cache\",\n        \"Use FlashInfer for Decoding\",\n        \"Taming Throughput-Latency Tradeoff in LLM Inference with Sarathi-Serve\",\n        \"SARATHI: Efficient LLM Inference by Piggybacking Decodes with Chunked Prefills\",\n        \"GQA: Training Generalized Multi-Query Transformer Models from Multi-Head Checkpoints\",\n        \"Designing Virtual Memory System of MCM GPUs\",\n        \"Longformer: The Long-Document Transformer\",\n        \"A Case Study in CUDA Kernel Fusion: Implementing FlashAttention-2 on NVIDIA Hopper Architecture using the CUTLASS Library\",\n        \"Generating Long Sequences with Sparse Transformers\",\n        \"PaLM: Scaling Language Modeling with Pathways\",\n        \"FlashAttention-2: Faster Attention with Better Parallelism and Work Partitioning\",\n        \"FlashAttention: Fast and Memory-Efficient Exact Attention with IO-Awareness\",\n        \"GMLake: Efficient and Transparent GPU Memory Defragmentation for Large-scale DNN Training with Virtual Memory Stitching\",\n        \"DeepSpeed-FastGen: High-throughput Text Generation for LLMs via MII and DeepSpeed-Inference\",\n        \"FlashDecoding++: Faster Large Language Model Inference on GPUs\",\n        \"Inference without Interference: Disaggregate LLM Inference for Mixed Downstream Workloads\",\n        \"Efficient Memory Management for Large Language Model Serving with PagedAttention\",\n        \"GPT-4 Technical Report\",\n        \"Splitwise: Efficient generative LLM inference using phase splitting\",\n        \"Fast Transformer Decoding: One Write-Head is All You Need\",\n        \"FlexGen: High-Throughput Generative Inference of Large Language Models with a Single GPU\",\n        \"Attention is All you Need\",\n        \"Fast Distributed Inference Serving for Large Language Models\",\n        \"Accelerating Self-Attentions for LLM Serving with FlashInfer\",\n        \"Orca: A Distributed Serving System for Transformer-Based Generative Models\",\n        \"H2O: Heavy-Hitter Oracle for Efficient Generative Inference of Large Language Models\",\n        \"DistServe: Disaggregating Prefill and Decoding for Goodput-optimized Large Language Model Serving\"\n    ],\n    \"reasoning\": \"Selected these 49 references because they represent foundational work and recent advances in vAttention: Dynamic Memory Management for Serving LLMs without PagedAttention, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}