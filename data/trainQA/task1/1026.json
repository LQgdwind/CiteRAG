{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 47 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Exploring Software Naturalness through Neural Language Models\n\nPaper Abstract: Abstract The Software Naturalness hypothesis argues that programming languages can be understood through the same techniques used in natural language processing. We explore this hypothesis through the use of a pre-trained transformer-based language model to perform code analysis tasks. Present approaches to code analysis depend heavily on features derived from the Abstract Syntax Tree (AST) while our transformer-based language models work on raw source code. This work is the first to investigate whether such language models can discover AST features automatically. To achieve this, we introduce a sequence labeling task that directly probes the language model’s understanding of AST. Our results show that transformer based language models achieve high accuracy in the AST tagging task. Furthermore, we evaluate our model on a software vulnerability identification task. Importantly, we show that our approach obtains vulnerability identification results comparable to graph based approaches that rely heavily on compilers for feature extraction.\n\n{retrieved_text}\n\nGenerate exactly 47 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 47\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"The adverse effects of code duplication in machine learning models of code\",\n        \"Analyzing false positive source code vulnerabilities using static analysis tools\",\n        \"Capturing source code semantics via tree-based convolution over api-enhanced ast\",\n        \"Sequencer: Sequence-to-sequence learning for end-to-end program repair\",\n        \"BERT: Pre-training of deep bidirectional transformers for language understanding\",\n        \"Infer\",\n        \"Codebert: A pre-trained model for programming and natural languages\",\n        \"Smt-based refutation of spurious bug reports in the clang static analyzer\",\n        \"Bert\",\n        \"Deep learning type inference\",\n        \"Are deep neural networks the best choice for modeling source code?\",\n        \"On the naturalness of software\",\n        \"Deep transfer learning for source code modeling\",\n        \"Rough Audit Tool for Security\",\n        \"Why don’t software developers use static analysis tools to find bugs?\",\n        \"Spanbert: Improving pre-training by representing and predicting spans\",\n        \"Pre-trained contextual embedding of source code\",\n        \"Big code != big vocabulary: Open-vocabulary models for source code\",\n        \"The C Programming Language, 2nd ed.\",\n        \"SentencePiece: A simple and language independent subword tokenizer and detokenizer for neural text processing\",\n        \"Gated graph sequence neural networks\",\n        \"Deep learning with customized abstract syntax tree for bug localization\",\n        \"Draper VDISC Dataset - Vulnerability Detection in Source Code\",\n        \"Nl2type: Inferring javascript function types from natural language information\",\n        \"Foundations of Statistical Natural Language Processing\",\n        \"github.com/microsoft/gated-graph-neural-network-samples\",\n        \"Distributed representations of words and phrases and their compositionality\",\n        \"Juliet test suite v1.3.\",\n        \"Hierarchical transformers for long document classification\",\n        \"Typewriter: Neural type prediction with search-based validation\",\n        \"On the \\\"naturalness\\\" of buggy code\",\n        \"Predicting program properties from “big code”\",\n        \"Code completion with statistical language models\",\n        \"Syntax and sensibility: Using language models to detect and correct syntax errors\",\n        \"neural machine translation of rare words with subword units\",\n        \"Neural program repair by jointly learning to localize and repair\",\n        \"Attention is all you need\",\n        \"Superglue: A stickier benchmark for general-purpose language understanding systems\",\n        \"Lambdanet: Probabilistic type inference using graph neural networks\",\n        \"Flawfinder\",\n        \"Huggingface’s transformers: State-of-the-art natural language processing\",\n        \"Modeling and discovering vulnerabilities with code property graphs\",\n        \"A novel neural source code representation based on abstract syntax tree\",\n        \"Devign: Effective vulnerability identification by learning comprehensive program semantics via graph neural networks\",\n        \"https://github.com/FFmpeg/FFmpeg\",\n        \"https://github.com/quemu/qemu\",\n        \"https://clang-analyzer.llvm.org\"\n    ],\n    \"reasoning\": \"Selected these 47 references because they represent foundational work and recent advances in Exploring Software Naturalness through Neural Language Models, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}