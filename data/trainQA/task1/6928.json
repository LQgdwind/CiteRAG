{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 50 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Repairing Bugs in Python Assignments Using Large Language Models\n\nPaper Abstract: Abstract Students often make mistakes on their introductory programming assignments as part of their learning process. Unfortunately, providing custom repairs for these mistakes can require a substantial amount of time and effort from class instructors. Automated program repair (APR) techniques can be used to synthesize such fixes. Prior work has explored the use of symbolic and neural techniques for APR in the education domain. Both types of approaches require either substantial engineering efforts or large amounts of data and training. We propose to use a large language model trained on code, such as Codex, to build an APR system – MMAPR – for introductory Python programming assignments. Our system can fix both syntactic and semantic mistakes by combining multi-modal prompts, iterative querying, test-case-based selection of few-shots, and program chunking. We evaluate MMAPR on 286 real student programs and compare to a baseline built by combining a state-of-the-art Python syntax repair engine, BIFI, and state-of-the-art Python semantic repair engine for student assignments, Refactory. We find that MMAPR can fix more programs and produce smaller patches on average.\n\n{retrieved_text}\n\nGenerate exactly 50 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 50\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"The hard part of computer science? getting into class\",\n        \"Genprog: A generic method for automatic software repair\",\n        \"Automatic inference of code transforms for patch generation\",\n        \"Automatic patch generation by learning correct code\",\n        \"Angelix: Scalable multiline program patch synthesis via symbolic analysis\",\n        \"Verifix: Verified repair of programming assignments\",\n        \"Automated program repair\",\n        \"Sk_p: A neural program corrector for moocs\",\n        \"Automated clustering and program repair for introductory programming assignments\",\n        \"Learning syntactic program transformations from examples\",\n        \"Re-factoring based program repair applied to programming assignments\",\n        \"Search, align, and repair: Data-driven feedback generation for introductory programming exercises\",\n        \"Compilation error repair: for the student programs, from the student programs\",\n        \"Microsoft Copilot.\",\n        \"Coping with copilot\",\n        \"Less training, more repairing please: Revisiting automated program repair via zero-shot learning\",\n        \"Repair is nearly generation: Multilingual program repair with llms\",\n        \"Pre-train, prompt, and predict: A systematic survey of prompting methods in natural language processing\",\n        \"Repairing programs with semantic code search (t)\",\n        \"Break-it-fix-it: Unsupervised learning for program repair\",\n        \"Evaluating large language models trained on code\",\n        \"Language models are few-shot learners\",\n        \"A conversational paradigm for program synthesis\",\n        \"The bigscience corpus a 1.6 tb composite multilingual dataset.\",\n        \"New GPT-3 Capabilities: Edit & Insert\",\n        \"Synchromesh: Reliable code generation from pre-trained language models\",\n        \"Error detecting and error correcting codes\",\n        \"Macer: A modular framework for accelerated compilation error repair\",\n        \"Automated feedback generation for introductory programming assignments\",\n        \"Generating concise patches for newly released programming assignments\",\n        \"Semantic program repair using a reference implementation\",\n        \"Concolic program repair\",\n        \"Varfix: balancing edit expressiveness and search effectiveness in automated program repair\",\n        \"The strength of random search on automated program repair\",\n        \"Automatic patch generation learned from human-written patches\",\n        \"Dynamic neural program embeddings for program repair\",\n        \"37 million compilations: Investigating novice programming mistakes in large-scale student data\",\n        \"Happyface: Identifying and predicting frustrating obstacles for learning programming at scale\",\n        \"Competition-level code generation with alphacode\",\n        \"The robots are coming: Exploring the implications of openai codex on introductory programming\",\n        \"Context-Aware and Data-Driven Feedback Generation for Programming Assignments\",\n        \"Automated feedback generation for competition-level code\",\n        \"A feasibility study of using automated program repair for introductory programming assignments\",\n        \"Leveraging syntax-related code for automated program repair\",\n        \"Hoppity: Learning graph transformations to detect and fix bugs in programs\",\n        \"FAPR: fast and accurate program repair for introductory programming courses\",\n        \"Semantic programming by example with pre-trained models\",\n        \"Multi-modal program inference: a marriage of pre-trained language models and component-based synthesis\",\n        \"TOGA: A neural method for test oracle generation\",\n        \"Using pre-trained language models to resolve textual and semantic merge conflicts (experience paper)\"\n    ],\n    \"reasoning\": \"Selected these 50 references because they represent foundational work and recent advances in Repairing Bugs in Python Assignments Using Large Language Models, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}