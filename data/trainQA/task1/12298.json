{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 49 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Enabling New HDLs with Agents\n\nPaper Abstract: Abstract Large Language Models (LLMs) based agents are transforming the programming language landscape by facilitating learning for beginners, enabling code generation, and optimizing documentation workflows. Hardware Description Languages (HDLs), with their smaller user community, stand to benefit significantly from the application of LLMs as tools for learning new HDLs. This paper investigates the challenges and solutions of enabling LLMs for HDLs, particularly for HDLs that LLMs have not been previously trained on. This work introduces HDLAgent, an AI agent optimized for LLMs with limited knowledge of various HDLs. It significantly enhances off-the-shelf LLMs. For example, PyRTL’s success rate improves from zero to 35% with Mixtral 8x7B, and Chisel’s success rate increases from zero to 59% with GPT-3.5-turbo-0125. HDLAgent offers an LLM-neutral framework to accelerate the adoption and growth of HDL user bases in the era of agentic LLMs.\n\n{retrieved_text}\n\nGenerate exactly 49 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 49\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Artificial Analysis\",\n        \"slang - SystemVerilog Language Services\",\n        \"HDLBits - Verilog Practice\",\n        \"CWhy\",\n        \"Few-shot training llms for project-specific code-summarization\",\n        \"Chisel: constructing hardware in a scala embedded language\",\n        \"Teaching large language models to self-debug\",\n        \"A pythonic approach for rapid hardware prototyping and instrumentation\",\n        \"Self-collaboration code generation via chatgpt\",\n        \"Efabless 1st competition winners\",\n        \"Efabless 2nd competition winners\",\n        \"Improving automatically generated code from codex via automated program repair\",\n        \"XLS Website\",\n        \"Financebench: A new benchmark for financial question answering\",\n        \"Self-planning code generation with large language models\",\n        \"Towards llm-powered verilog rtl assistant: Self-verification and self-correction\",\n        \"Retrieval-augmented generation for knowledge-intensive nlp tasks\",\n        \"The unlocking spell on base llms: Rethinking alignment via in-context learning\",\n        \"Few-shot parameter-efficient fine-tuning is better and cheaper than in-context learning\",\n        \"Verilogeval: Evaluating large language models for verilog code generation\",\n        \"Rtlcoder: Outperforming gpt-3.5 in design rtl generation with our open-source dataset and lightweight solution\",\n        \"Rtllm: An open-source benchmark for design rtl generation with large language model\",\n        \"Self-refine: Iterative refinement with self-feedback\",\n        \"Coffee: Boost your code llms by fixing bugs with feedback\",\n        \"Lever: Learning to verify language-to-code generation with execution\",\n        \"Is self-repair a silver bullet for code generation?\",\n        \"A survey on transfer learning\",\n        \"A study of transfer of skill between programming languages\",\n        \"Bugs in large language models generated code: An empirical study\",\n        \"Benchmarking large language models for automated verilog rtl code generation\",\n        \"Verigen: A large language model for verilog code generation\",\n        \"Autochip: Automating hdl generation using llm feedback\",\n        \"Rtlfixer: Automatically fixing rtl syntax errors with large language models\",\n        \"Intervenor: Prompt the coding ability of large language models with the interactive chain of repairing\",\n        \"Chatcoder: Chat-based refine requirement improves llms’ code generation\",\n        \"Chain-of-thought prompting elicits reasoning in large language models\",\n        \"Yosys Open SYnthesis Suite\",\n        \"Conversational automated program repair\",\n        \"Large language models as optimizers\",\n        \"A new design approach of hardware implementation through natural language entry\",\n        \"React: Synergizing reasoning and acting in language models\",\n        \"Hdldebugger: Streamlining hdl debugging with large language models\",\n        \"Lumos: Learning agents with unified data, modular design, and open-source llms\",\n        \"HDLEval Benchmarking LLMs for Multiple HDLs\",\n        \"Self-edit: Fault-aware code editor for code generation\",\n        \"Expel: Llm agents are experiential learners\",\n        \"Verilogcoder: Autonomous verilog coding agents with graph-based planning and abstract syntax tree (ast)-based waveform tracing tool\",\n        \"Can chatgpt replace stackoverflow? a study on robustness and reliability of large language model code generation\",\n        \"Agents: An open-source framework for autonomous language agents\"\n    ],\n    \"reasoning\": \"Selected these 49 references because they represent foundational work and recent advances in Enabling New HDLs with Agents, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}