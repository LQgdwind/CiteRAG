{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 45 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Coarse-Tuning Models of Code with Reinforcement Learning Feedback\n\nPaper Abstract: Abstract Large Language Models (LLMs) pre-trained on code have recently emerged as the dominant approach to program synthesis. However, these models are trained using next-token prediction, which ignores the syntax and semantics of code. We propose Rlcf, that further trains a pre-trained LLM via reinforcement learning, using feedback from a grounding function that scores the quality of the code. The grounding function uses (i) compiler-derived feedback on whether the code it generates passes a set of correctness checks; and (ii) feedback from a different LLM that compares the generated code to a reference code. Rlcf is model- and language-agnostic. We empirically evaluate it on the MBJP and MathQA tasks for Java. Our experiments show that Rlcf raises the odds that an LLM-generated program compiles, is executable, and produces the right output on tests, often allowing LLMs to match the performance of 2x-8x larger LLMs.\n\n{retrieved_text}\n\nGenerate exactly 45 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 45\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Unified pre-training for program understanding and generation\",\n        \"Multi-lingual evaluation of code generation models\",\n        \"Program synthesis with large language models\",\n        \"Efficient training of language models to fill in the middle\",\n        \"Gpt-neo: Large scale autoregressive language modeling with mesh-tensorflow\",\n        \"Language models are few-shot learners\",\n        \"Evaluating large language models trained on code\",\n        \"Execution-guided neural program synthesis\",\n        \"Latent execution for neural program synthesis\",\n        \"Program synthesis using deduction-guided reinforcement learning\",\n        \"Electra: Pre-training text encoders as discriminators rather than generators\",\n        \"Bert: Pre-training of deep bidirectional transformers for language understanding\",\n        \"Write, execute, assess: Program synthesis with a repl\",\n        \"Codebert: A pre-trained model for programming and natural languages\",\n        \"Incoder: A generative model for code infilling and synthesis\",\n        \"The pile: An 800gb dataset of diverse text for language modeling\",\n        \"Github activity data: https://console.cloud.google.com/marketplace/details/github/github-repos.\",\n        \"Automating string processing in spreadsheets using input-output examples\",\n        \"Graphcodebert: Pre-training code representations with data flow\",\n        \"Generative adversarial imitation learning\",\n        \"Codesearchnet challenge: Evaluating the state of semantic code search\",\n        \"Fault-aware neural code rankers\",\n        \"Contrastive code representation learning\",\n        \"Learning neural sequence-to-sequence models from weak feedback with bipolar ramp loss\",\n        \"Learning and evaluating contextual embedding of source code\",\n        \"Coderl: Mastering code generation through pretrained models and deep reinforcement learning\",\n        \"Competition-level code generation with alphacode\",\n        \"Neural program generation modulo static analysis\",\n        \"A conversational paradigm for program synthesis\",\n        \"Training language models to follow instructions with human feedback\",\n        \"Karel the robot: a gentle introduction to the art of programming\",\n        \"Codenet: A large-scale ai for code dataset for learning a diversity of coding tasks\",\n        \"Evaluation of generalizability of neural program analyzers under semantic-preserving transformations\",\n        \"Language models are unsupervised multitask learners\",\n        \"Dobf: A deobfuscation pre-training objective for programming languages\",\n        \"High-dimensional continuous control using generalized advantage estimation\",\n        \"Proximal policy optimization algorithms\",\n        \"Learning to summarize with human feedback\",\n        \"Attention is all you need\",\n        \"Coset: A benchmark for evaluating neural program embeddings\",\n        \"Codet5: Identifier-aware unified pre-trained encoder-decoder models for code understanding and generation\",\n        \"Distance metric learning for large margin nearest neighbor classification\",\n        \"Adversarial examples for models of code\",\n        \"Coditt5: Pretraining for source code and natural language editing\",\n        \"Fine-tuning language models from human preferences\"\n    ],\n    \"reasoning\": \"Selected these 45 references because they represent foundational work and recent advances in Coarse-Tuning Models of Code with Reinforcement Learning Feedback, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}