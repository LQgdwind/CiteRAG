{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 59 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: SAT and Lattice Reduction for Integer Factorization\n\nPaper Abstract: Abstract. The difficulty of factoring large integers into primes is the basis for cryptosystems such as RSA. Due to the widespread popularity of RSA, there have been many proposed attacks on the factorization problem such as side-channel attacks where some bits of the prime factors are available. When enough bits of the prime factors are known, two methods that are effective at solving the factorization problem are satisfiability (SAT) solvers and Coppersmith’s method. The SAT approach reduces the factorization problem to a Boolean satisfiability problem, while Coppersmith’s approach uses lattice basis reduction. Both methods have their advantages, but they also have their limitations: Coppersmith’s method does not apply when the known bit positions are randomized, while SAT-based methods can take advantage of known bits in arbitrary locations, but have no knowledge of the algebraic structure exploited by Coppersmith’s method. In this paper we describe a new hybrid SAT and computer algebra approach to efficiently solve random leaked-bit factorization problems. Specifically, Coppersmith’s method is invoked by a SAT solver to determine whether a partial bit assignment can be extended to a complete assignment. Our hybrid implementation solves random leaked-bit factorization problems significantly faster than either a pure SAT or pure computer algebra approach.\n\n{retrieved_text}\n\nGenerate exactly 59 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 59\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Building Bridges between Symbolic Computation and Satisfiability Checking\",\n        \"Satisfiability checking and symbolic computation\",\n        \"A Hybrid SAT and Lattice Reduction Approach for Integer Factorization\",\n        \"SHA-256 Collision Attack with Programmatic SAT\",\n        \"Attacking RSA moduli with SAT solvers\",\n        \"Handbook of Satisfiability\",\n        \"Twenty years of attacks on the RSA cryptosystem\",\n        \"An Attack on RSA Given a Small Fraction of the Private Key Bits\",\n        \"A SAT+CAS Approach to Finding Good Matrices: New Examples and Counterexamples\",\n        \"MathCheck2: A SAT+CAS Verifier for Combinatorial Conjectures\",\n        \"When satisfiability solving meets symbolic computation\",\n        \"The Unique Factorization Theorem: From Euclid to Gauss\",\n        \"Finding hard instances of the satisfiability problem: A survey\",\n        \"Small Solutions to Polynomial Equations, and Low Exponent RSA Vulnerabilities\",\n        \"Symbolic computation and satisfiability checking\",\n        \"Survey: Recovering cryptographic keys from partial information, by example\",\n        \"SC-Square: Overview to 2021\",\n        \"A comparison of reductions from FACT to CNF-SAT\",\n        \"IPASIR-UP: User Propagators for CDCL\",\n        \"Factoring integers with parallel SAT solvers\",\n        \"Mathematics of Public Key Cryptography (1st ed.)\",\n        \"Lynx: A Programmatic SAT Solver for the RNA-Folding Problem\",\n        \"GNU MP: The GNU Multiple Precision Arithmetic Library (5.0.5 ed.)\",\n        \"Lest We Remember: Cold-Boot Attacks on Encryption Keys\",\n        \"Seven Challenges in Parallel SAT Solving\",\n        \"FLINT: Fast Library for Number Theory\",\n        \"Reconstructing RSA Private Keys from Random Key Bits\",\n        \"Solving Linear Equations Modulo Divisors: On Factoring Given Any Bits\",\n        \"Schur Number Five\",\n        \"New ways to multiply 3×3333 imes 3-matrices\",\n        \"Solving and Verifying the Boolean Pythagorean Triples Problem via Cube-and-Conquer\",\n        \"Finding Small Roots of Univariate Modular Equations Revisited\",\n        \"Improving AMulet2 for verifying multiplier circuits using SAT solving and computer algebra\",\n        \"SAT-Based Generation of Planar Graphs\",\n        \"The development of the number field sieve\",\n        \"Factoring polynomials with rational coefficients\",\n        \"An SC-Square Approach to the Minimum Kochen–Specker Problem\",\n        \"Learning Rate Based Branching Heuristic for SAT Solvers\",\n        \"Combining Symbolic Computer Algebra and Boolean Satisfiability for Automatic Debugging and Fixing of Complex Multipliers\",\n        \"GRASP—A new search algorithm for satisfiability\",\n        \"Computing the RSA Secret Key Is Deterministic Polynomial Time Equivalent to Factoring\",\n        \"Lattice-Based Integer Factorisation: An Introduction to Coppersmith’s Method\",\n        \"Factoring semi-primes with (quantum) SAT-solvers\",\n        \"RSA private key reconstruction from random bits using SAT solvers\",\n        \"Every Prime Has a Succinct Certificate\",\n        \"CNF Generator for Factoring Problems\",\n        \"A method for obtaining digital signatures and public-key cryptosystems\",\n        \"Error Correction of Partially Exposed RSA Private Keys from MSB Side\",\n        \"Finding Periodic Apartments via Boolean Satisfiability and Orderly Generation\",\n        \"Satisfy This: An Attempt at Solving Prime Factorization using Satisfiability Solvers\",\n        \"Polynomial-Time Algorithms for Prime Factorization and Discrete Logarithms on a Quantum Computer\",\n        \"fplll, a lattice reduction library, Version: 5.4.4.\",\n        \"SageMath, the Sage Mathematics Software System\",\n        \"On the Complexity of Derivation in Propositional Calculus\",\n        \"Factoring as a Service\",\n        \"Modern Computer Algebra\",\n        \"ToughSAT Generation\",\n        \"Combining SAT Solvers with Computer Algebra Systems to Verify Combinatorial Conjectures\",\n        \"MathCheck: A Math Assistant via a Combination of Computer Algebra Systems and SAT Solvers\"\n    ],\n    \"reasoning\": \"Selected these 59 references because they represent foundational work and recent advances in SAT and Lattice Reduction for Integer Factorization, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}