{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 51 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: ShapeAssembly: Learning to Generate Programs for 3D Shape Structure Synthesis\n\nPaper Abstract: Abstract. Manually authoring 3D shapes is difficult and time consuming; generative models of 3D shapes offer compelling alternatives. Procedural representations are one such possibility: they offer high-quality and editable results but are difficult to author and often produce outputs with limited diversity. On the other extreme are deep generative models: given enough data, they can learn to generate any class of shape but their outputs have artifacts and the representation is not editable. In this paper, we take a step towards achieving the best of both worlds for novel 3D shape synthesis. First, we propose ShapeAssembly, a domain-specific “assembly-language” for 3D shape structures. ShapeAssembly programs construct shape structures by declaring cuboid part proxies and attaching them to one another, in a hierarchical and symmetrical fashion. ShapeAssembly functions are parameterized with continuous free variables, so that one program structure is able to capture a family of related shapes. We show how to extract ShapeAssembly programs from existing shape structures in the PartNet dataset. Then, we train a deep generative model, a hierarchical sequence VAE, that learns to write novel ShapeAssembly programs. Our approach leverages the strengths of each representation: the program captures the subset of shape variability that is interpretable and editable, and the deep generative model captures variability and correlations across shape collections that is hard to express procedurally. We evaluate our approach by comparing the shapes output by our generated programs to those from other recent shape structure synthesis models. We find that our generated shapes are more plausible and physically-valid than those of other methods. Additionally, we assess the latent spaces of these models, and find that ours is better structured and produces smoother interpolations. As an application, we use our generative model and differentiable program interpreter to infer and fit shape programs to unstructured geometry, such as point clouds.\n\n{retrieved_text}\n\nGenerate exactly 51 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 51\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Learning to Generalize Kinematic Models to Novel Objects\",\n        \"BSP-Net: Generating Compact Meshes via Binary Space Partitioning\",\n        \"Learning Implicit Fields for Generative Shape Modeling\",\n        \"Proceduralization for Editing 3D Architectural Models\",\n        \"InverseCSG: Automatic Conversion of 3D Models to CSG Trees\",\n        \"Write, Execute, Assess: Program Synthesis with a REPL\",\n        \"Learning to Infer Graphics Programs from Hand-Drawn Images\",\n        \"A point set generation network for 3D object reconstruction from a single image\",\n        \"SDM-NET: Deep Generative Network for Structured Deformable Mesh\",\n        \"AtlasNet: A Papier-Mâché Approach to Learning 3D Surface Generation\",\n        \"GANs Trained by a Two Time-Scale Update Rule Converge to a Local Nash Equilibrium\",\n        \"Inducing Probabilistic Programs by Bayesian Program Merging\",\n        \"Inferring and Executing Programs for Visual Reasoning\",\n        \"Meta-Sim: Learning to Generate Synthetic Datasets\",\n        \"Adam: A Method for Stochastic Optimization\",\n        \"Auto-Encoding Variational Bayes\",\n        \"Tanks and Temples: Benchmarking Large-Scale Scene Reconstruction\",\n        \"AI2-THOR: An Interactive 3D Environment for Visual AI\",\n        \"Grammar Variational Autoencoder\",\n        \"Converting 3D Furniture Models to Fabricatable Parts and Connectors\",\n        \"GRASS: Generative recursive autoencoders for shape structures\",\n        \"Learning to Describe Scenes with Programs\",\n        \"Neurally-Guided Structure Inference\",\n        \"Rectifier Nonlinearities Improve Neural Network Acoustic Models\",\n        \"Bayesian Grammar Learning for Inverse Procedural Modeling\",\n        \"Deep Level Sets: Implicit Surface Representations for 3D Shape Inference\",\n        \"StructureNet: Hierarchical Graph Networks for 3D Shape Generation\",\n        \"PartNet: A Large-Scale Benchmark for Fine-Grained and Hierarchical Part-Level 3D Object Understanding\",\n        \"Procedural Modeling of Buildings\",\n        \"Procedural Modeling of a Building from a Single Image\",\n        \"Interactive Sketching of Urban Procedural Models\",\n        \"Procedural Modeling of Cities\",\n        \"DeepSDF: Learning Continuous Signed Distance Functions for Shape Representation\",\n        \"Automatic differentiation in PyTorch\",\n        \"The Algorithmic Beauty of Plants\",\n        \"Pointnet++: Deep hierarchical feature learning on point sets in a metric space\",\n        \"Playing for data: Ground truth from computer games\",\n        \"Example-based Authoring of Procedural Modeling Programs with Structural and Continuous Variability\",\n        \"Habitat: A Platform for Embodied AI Research\",\n        \"CSGNet: Neural Shape Parser for Constructive Solid Geometry\",\n        \"Inverse Procedural Modeling by Automatic Generation of L-systems\",\n        \"ComplementMe: Weakly-Supervised Component Suggestions for 3D Modeling\",\n        \"Learning design patterns with Bayesian grammar induction\",\n        \"Learning to Infer and Execute 3D Shape Programs\",\n        \"Learning a Probabilistic Latent Space of Object Shapes via 3D Generative-Adversarial Modeling\",\n        \"Gibson env: real-world perception for embodied agents\",\n        \"3D ShapeNets: A Deep Representation for Volumetric Shapes\",\n        \"Physically-Based Rendering for Indoor Scene Understanding Using Convolutional Neural Networks\",\n        \"Program Synthesis for Images using Tree-Structured LSTM\",\n        \"SCORES: Shape Composition with Recursive Substructure Priors\",\n        \"3D-PRNN: Generating Shape Primitives with Recurrent Neural Networks\"\n    ],\n    \"reasoning\": \"Selected these 51 references because they represent foundational work and recent advances in ShapeAssembly: Learning to Generate Programs for 3D Shape Structure Synthesis, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}