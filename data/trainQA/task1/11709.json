{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 51 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Well-Behaved (Co)algebraic Semantics of Regular Expressions in Dafny\n\nPaper Abstract: Abstract Regular expressions are commonly understood in terms of their denotational semantics, that is, through formal languages – the regular languages. This view is inductive in nature: two primitives are equivalent if they are constructed in the same way. Alternatively, regular expressions can be understood in terms of their operational semantics, that is, through deterministic finite automata. This view is coinductive in nature: two primitives are equivalent if they are deconstructed in the same way. It is implied by Kleene’s famous theorem that both views are equivalent: regular languages are precisely the formal languages accepted by deterministic finite automata. In this paper, we use Dafny, a verification-aware programming language, to formally verify, for the first time, what has been previously established only through proofs-by-hand: the two semantics of regular expressions are well-behaved, in the sense that they are in fact one and the same, up to pointwise bisimilarity. At each step of our formalisation, we propose an interpretation in the language of Coalgebra. We found that Dafny is particularly well suited for the task due to its inductive and coinductive features and hope our approach serves as a blueprint for future generalisations to other theories.\n\n{retrieved_text}\n\nGenerate exactly 51 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 51\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Aws encryption sdk for dafny\",\n        \"Dafny blog\",\n        \"The dafny programming and verification language\",\n        \"Microsoft research\",\n        \"Netkat: semantic foundations for networks\",\n        \"Kleene algebra with tests and program schematology\",\n        \"POSIX lexing with derivatives of regular expressions (proof pearl)\",\n        \"Boogie: A modular reusable verifier for object-oriented programs\",\n        \"Specification and verification: the spec# experience\",\n        \"Equational verification of cache blocking in lu decomposition using kleene algebra with tests\",\n        \"Friends with benefits: Implementing corecursion in foundational proof assistants\",\n        \"Foundational extensible corecursion: a proof assistant perspective\",\n        \"Derivatives of regular expressions\",\n        \"Formal and executable semantics of the ethereum virtual machine in dafny\",\n        \"Vcc: A practical system for verifying concurrent c\",\n        \"Z3: An efficient smt solver\",\n        \"A coalgebraic decision procedure for netkat\",\n        \"Mastering Regular Expressions\",\n        \"Elements of the general theory of coalgebras\",\n        \"An axiomatic basis for computer programming\",\n        \"The complexity of regular(-like) expressions\",\n        \"A linear algorithm for testing equivalence of finite automata\",\n        \"A bialgebraic review of deterministic automata, regular expressions and languages\",\n        \"Trace semantics via determinization\",\n        \"Representation of events in nerve nets and finite automata\",\n        \"A completeness theorem for kleene algebras and the algebra of regular events\",\n        \"Kleene algebra with tests\",\n        \"Automata on guarded strings and applications\",\n        \"Certification of compiler optimizations using kleene algebra with tests\",\n        \"Proof pearl: Regular expression equivalence and relation algebra\",\n        \"Dafny power user\",\n        \"Dafny: An automatic program verifier for functional correctness\",\n        \"Type-parameter completion\",\n        \"Iterating over a collection\",\n        \"Type-parameter modes: variance and cardinality preservation\",\n        \"Program Proofs\",\n        \"Working with coinduction, extreme predicates, and ordinals\",\n        \"Deciding kleene algebra terms equivalence in coq\",\n        \"More programming than programming: Teaching formal methods in a software engineering programme\",\n        \"Regular-expression derivatives re-examined\",\n        \"Isabelle: The next seven hundred theorem provers\",\n        \"A formalisation of finite automata using hereditarily finite sets\",\n        \"Coinductive proof techniques for language equivalence\",\n        \"Universal coalgebra: a theory of systems\",\n        \"Kleene coalgebra\",\n        \"Guarded kleene algebra with tests: verification of uninterpreted programs in nearly linear time\",\n        \"Formal languages, formally and coinductively\",\n        \"Aws dafny training\",\n        \"Towards a mathematical operational semantics\",\n        \"Towards a correct-by-construction fhe model\",\n        \"Well-behaved (co)algebraic semantics of regular expressions in dafny\"\n    ],\n    \"reasoning\": \"Selected these 51 references because they represent foundational work and recent advances in Well-Behaved (Co)algebraic Semantics of Regular Expressions in Dafny, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}