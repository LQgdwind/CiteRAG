{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 53 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Protocols to Code: Formal Verification of a Next-Generation Internet Router\n\nPaper Abstract: Abstract. We present the first formally-verified Internet router, which is part of the SCION Internet architecture. SCION routers run a cryptographic protocol for secure packet forwarding in an adversarial environment. We verify both the protocol’s network-wide security properties and low-level properties of its implementation. More precisely, we develop a series of protocol models by refinement in Isabelle/HOL and we use an automated program verifier to prove that the router’s Go code satisfies memory safety, crash freedom, freedom from data races, and adheres to the protocol model. Both verification efforts are soundly linked together. Our work demonstrates the feasibility of coherently verifying a critical network component from high-level protocol models down to performance-optimized production code, developed by an independent team. In the process, we uncovered critical bugs in both the protocol and its implementation, which were confirmed by the code developers, and we strengthened the protocol’s security properties. This paper explains our approach, summarizes the main results, and distills lessons for the design and implementation of verifiable systems, for the handling of continuous changes, and for the verification techniques and tools employed.\n\n{retrieved_text}\n\nGenerate exactly 53 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 53\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"The existence of refinement mappings\",\n        \"Deciding knowledge in security protocols under equational theories\",\n        \"Deciding security for protocols with recursive tests\",\n        \"Modeling and verifying ad hoc routing protocols\",\n        \"A generic methodology for the modular verification of security protocol implementations\",\n        \"A general approach to network configuration verification\",\n        \"DY*: A modular symbolic verification framework for executable cryptographic protocol code\",\n        \"Implementing TLS with verified cryptographic security\",\n        \"An efficient cryptographic protocol verifier based on Prolog rules\",\n        \"Automatic verification of security protocols in the symbolic model: The verifier ProVerif\",\n        \"Checking interference with fractional permissions\",\n        \"A program logic for verifying secure routing protocols\",\n        \"The Complete Guide to SCION\",\n        \"On the protocol composition logic PCL\",\n        \"Implementing and proving the TLS 1.3 record layer\",\n        \"A security model and fully verified implementation for the IETF QUIC record layer\",\n        \"On the security of public key protocols\",\n        \"Folding variant narrowing and optimal variant termination\",\n        \"CertiKOS: An extensible architecture for building certified concurrent OS kernels\",\n        \"Ironfleet: proving practical distributed systems correct\",\n        \"The Rust programming language\",\n        \"seL4: formal verification of an OS kernel\",\n        \"IsaNet: Formalization of a verification framework for secure data plane protocols\",\n        \"Formal verification of secure forwarding protocols\",\n        \"IsaNet: A framework for verifying secure data plane protocols\",\n        \"NetKAT – A formal system for the verification of networks\",\n        \"CakeML: a verified implementation of ML\",\n        \"EPIC: Every packet is checked in the data plane of a path-aware internet\",\n        \"Dafny: An automatic program verifier for functional correctness\",\n        \"Formal verification of a realistic compiler\",\n        \"Chapar: certified causally consistent distributed key-value stores\",\n        \"A secure and formally verified linux KVM hypervisor\",\n        \"p4v: practical verification for programmable data planes\",\n        \"Forward and backward simulations: I. untimed systems\",\n        \"The TAMARIN prover for the symbolic analysis of security protocols\",\n        \"Isabelle/HOL - A Proof Assistant for Higher-Order Logic, volume 2283\",\n        \"Local reasoning about programs that alter data structures\",\n        \"Sound, modular and compositional verification of the input/output behavior of programs\",\n        \"SCION: A Secure Internet Architecture\",\n        \"EverCrypt: A fast, verified, cross-platform cryptographic provider\",\n        \"Verified low-level programming embedded in F\",\n        \"Velisarios: Byzantine fault-tolerant protocols powered by coq\",\n        \"Separation logic: A logic for shared mutable data structures\",\n        \"Automated analysis of Diffie-Hellman protocols and advanced security properties\",\n        \"Secure Swiss Finance Network\",\n        \"Implicit dynamic frames: Combining dynamic frames and separation logic\",\n        \"Igloo: soundly linking compositional refinement and separation logic for distributed system verification\",\n        \"Scalable verification of border gateway protocol configurations with an SMT solver\",\n        \"Verdi: a framework for implementing and formally verifying distributed systems\",\n        \"Gobra: Modular specification and verification of go programs\",\n        \"Planning for change in a formal verification of the Raft consensus protocol\",\n        \"Mechanized network origin and path authenticity proofs\",\n        \"HACL*: A verified modern cryptographic library\"\n    ],\n    \"reasoning\": \"Selected these 53 references because they represent foundational work and recent advances in Protocols to Code: Formal Verification of a Next-Generation Internet Router, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}