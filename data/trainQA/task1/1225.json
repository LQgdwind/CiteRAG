{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 49 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: A Framework for Consistency Algorithms\n\nPaper Abstract: Abstract We present a framework that provides deterministic consistency algorithms for given memory models. Such an algorithm checks whether the executions of a shared-memory concurrent program are consistent under the axioms defined by a model. For memory models like \\SC\\SC\\SC and \\ComplexityFont​T​S​O\\ComplexityFont𝑇𝑆𝑂\\ComplexityFont{TSO}, checking consistency is \\NP\\NP\\NP-complete. Our framework shows, that despite the hardness, fast deterministic consistency algorithms can be obtained by employing tools from fine-grained complexity. The framework is based on a universal consistency problem which can be instantiated by different memory models. We construct an algorithm for the problem running in time 𝒪∗​(2k)superscript𝒪superscript2𝑘\\mathcal{O}^{*}(2^{k}), where k𝑘k is the number of write accesses in the execution that is checked for consistency. Each instance of the framework then admits an 𝒪∗​(2k)superscript𝒪superscript2𝑘\\mathcal{O}^{*}(2^{k})-time consistency algorithm. By applying the framework, we obtain corresponding consistency algorithms for \\SC\\SC\\SC, \\ComplexityFont​T​S​O\\ComplexityFont𝑇𝑆𝑂\\ComplexityFont{TSO}, \\ComplexityFont​P​S​O\\ComplexityFont𝑃𝑆𝑂\\ComplexityFont{PSO}, and \\ComplexityFont​R​M​O\\ComplexityFont𝑅𝑀𝑂\\ComplexityFont{RMO}. Moreover, we show that the obtained algorithms for \\SC\\SC\\SC, \\ComplexityFont​T​S​O\\ComplexityFont𝑇𝑆𝑂\\ComplexityFont{TSO}, and \\ComplexityFont​P​S​O\\ComplexityFont𝑃𝑆𝑂\\ComplexityFont{PSO} are optimal in the fine-grained sense: there is no consistency algorithm for these running in time 2o​(k)superscript2𝑜𝑘2^{o(k)} unless the exponential time hypothesis fails.\n\n{retrieved_text}\n\nGenerate exactly 49 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 49\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"The SPARC Architecture Manual - Version 8 and Version 9\",\n        \"Coherence, non-coherence and local consistency in distributed shared memory for parallel computing\",\n        \"An integrated specification and verification technique for highly concurrent data structures\",\n        \"The power of processor consistency\",\n        \"A formal hierarchy of weak memory models\",\n        \"Herding cats: Modelling, simulation, testing, and data mining for weak memory\",\n        \"Model-checking of correctness conditions for concurrent objects\",\n        \"On the verification problem for weak memory models\",\n        \"What’s decidable about weak memory models?\",\n        \"On the complexity of checking transactional consistency\",\n        \"On verifying causal consistency\",\n        \"Verifying eventual consistency of optimistic replication systems\",\n        \"Deciding robustness against total store ordering\",\n        \"A theory of partitioned global address spaces\",\n        \"The complexity of verifying memory coherence and consistency\",\n        \"Tight lower bounds for certain parameterized np-hard problems\",\n        \"On the complexity of bounded context switching\",\n        \"Fine-grained complexity of safety verification\",\n        \"Complexity of liveness in parameterized systems\",\n        \"On problems as hard as CNF-SAT\",\n        \"Parameterized algorithms\",\n        \"Robustness against power is pspace-complete\",\n        \"Fundamentals of Parameterized Complexity\",\n        \"Monitoring weak consistency\",\n        \"Sound, complete, and tractable linearizability monitoring for concurrent collections\",\n        \"Monitoring refinement via symbolic reasoning\",\n        \"On atomicity in presence of non-atomic writes\",\n        \"The complexity of predicting atomicity violations\",\n        \"Exact Exponential Algorithms\",\n        \"Memory-model-aware testing: A unified complexity analysis\",\n        \"Testing shared memories\",\n        \"Cache consistency and sequential consistency\",\n        \"Linearizability: A correctness condition for concurrent objects\",\n        \"On the complexity of k-SAT\",\n        \"Topological sorting of large networks\",\n        \"Time, clocks, and the ordering of events in a distributed system\",\n        \"How to make a multiprocessor computer that correctly executes multiprocess programs\",\n        \"Slightly superexponential parameterized problems\",\n        \"An axiomatic memory model for POWER multiprocessors\",\n        \"The java memory model\",\n        \"The complexity of dynamic data race prediction\",\n        \"The serializability of concurrent database updates\",\n        \"PRAM: A scalable shared memory\",\n        \"Understanding POWER multiprocessors\",\n        \"A unified theory of shared memory consistency\",\n        \"Managing update conflicts in bayou, a weakly connected replicated storage system\",\n        \"Verifying PRAM consistency over read/write traces of data replicas\",\n        \"Expressing interesting properties of programs in propositional temporal logic\",\n        \"Gradual consistency checking\"\n    ],\n    \"reasoning\": \"Selected these 49 references because they represent foundational work and recent advances in A Framework for Consistency Algorithms, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}