{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 48 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: LoopSCC: Towards Summarizing Multi-branch Loops within Determinate Cycles\n\nPaper Abstract: Abstract. Analyzing programs with loops is a challenging task, suffering from potential issues such as indeterminate number of iterations and exponential growth of control flow complexity. Loop summarization, as a static analysis method for concrete semantic interpretation, receives increasing focuses in the field of loop program analysis. By analyzing and representing the regularity in loop control flow, it produces symbolic expressions semantically equivalent to the loop program, enhancing the accuracy and efficiency of loop analysis. However, current loop summarization methods are only suitable for single-branch loops or multi-branch loops with simple cycles, without supporting complex loops with irregular branch-to-branch transitions. In this paper, we proposed LoopSCC, a novel loop summarization technique, to achieve concrete semantic interpretation on complex loop control flow. LoopSCC first utilizes an inside-out transformation to convert the nested loop into non-nested one. Then, it analyzes the control flow at the granularity of single-loop-path and applies the strongly connected components (SCC for short) for contraction and simplification, resulting in the contracted single-loop-path graph (CSG for short). Based on the control flow information provided by the CSG, we can convert the loop summary into a combination of SCC summaries. When an SCC contains irregular branch-to-branch transitions, we propose to explore a convergent range to identify the determinate cycles of different execution paths, referred as oscillatory interval. According to the analysis of oscillatory interval, the loop summarization composed of both iteration conditions and execution operations can eventually be derived recursively. Extensive experiments compared to six state-of-the-art loop interpretation methods are conducted to evaluate the effectiveness of LoopSCC. From the results, LoopSCC outperforms comparative methods in both interpretation accuracy and application effectiveness. Especially, LoopSCC achieves a 100% interpretation accuracy on public common-used benchmark. In addition, a systematical study for loop properties on three large-scale programs illustrates that LoopSCC presents outstanding scalability for real-world loop programs. The LoopSCC and experimental data are available at https://anonymous.4open.science/r/LoopSCC-386F.\n\n{retrieved_text}\n\nGenerate exactly 48 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 48\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Control flow analysis\",\n        \"A control-flow normalization algorithm and its complexity\",\n        \"The translation of “go to” programs to “while” programs\",\n        \"A survey of symbolic execution techniques\",\n        \"Automatic predicate abstraction of C programs\",\n        \"The SLAM project: Debugging system software via static analysis\",\n        \"CPAchecker: A tool for configurable software verification\",\n        \"Symbolic model checking without BDDs\",\n        \"Summarization of branching loops\",\n        \"Graph theory\",\n        \"SAT-based model checking without unrolling\",\n        \"Flow diagrams, turing machines and languages with only two formation rules\",\n        \"Klee: unassisted and automatic generation of high-coverage tests for complex systems programs.\",\n        \"Compositional certified resource bounds\",\n        \"Counterexample-guided abstraction refinement\",\n        \"A Tool for Checking ANSI-C Programs\",\n        \"Model checking\",\n        \"VeriAbsL: Scalable verification by abstraction and strategy prediction (competition contribution)\",\n        \"Computability and unsolvability\",\n        \"Polynomial invariants by linear algebra\",\n        \"Newtonian program analysis\",\n        \"Compositional recurrence analysis\",\n        \"Predicate abstraction for software verification\",\n        \"ICE: A robust framework for learning invariants\",\n        \"Automatic partial loop summarization in dynamic test generation\",\n        \"Bounding loop iterations for timing analysis\",\n        \"Lazy abstraction\",\n        \"Computing summaries of string loops in C for better testing and refactoring\",\n        \"Compositional recurrence analysis revisited\",\n        \"The Böhm–Jacopini Theorem Is False, Propositionally\",\n        \"Loop summarization using abstract transformers\",\n        \"Interpolation and SAT-based model checking\",\n        \"Lazy abstraction with interpolants\",\n        \"Automatic modular abstractions for linear constraints\",\n        \"Precise interprocedural analysis through linear algebra\",\n        \"Bounded expectations: resource analysis for probabilistic programs\",\n        \"Can Large Language Models Reason about Program Invariants?\",\n        \"Classes of recursively enumerable sets and their decision problems\",\n        \"Loop-extended symbolic execution on binary programs\",\n        \"Code2inv: A deep learning framework for program verification\",\n        \"Combinatorial sketching for finite programs\",\n        \"Abstracting path conditions\",\n        \"Depth-first search and linear graph algorithms\",\n        \"Finding dominators in directed graphs\",\n        \"Pigeon hole principle\",\n        \"Proteus: Computing disjunctive loop summary via path dependency analysis\",\n        \"Automatic loop summarization via path dependency analysis\",\n        \"S-looper: Automatic summarization for multipath string loops\"\n    ],\n    \"reasoning\": \"Selected these 48 references because they represent foundational work and recent advances in LoopSCC: Towards Summarizing Multi-branch Loops within Determinate Cycles, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}