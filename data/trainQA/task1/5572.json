{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 46 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Automating Code Review Activities by Large-Scale Pre-training\n\nPaper Abstract: Abstract. Code review is an essential part to software development lifecycle since it aims at guaranteeing the quality of codes. Modern code review activities necessitate developers viewing, understanding and even running the programs to assess logic, functionality, latency, style and other factors. It turns out that developers have to spend far too much time reviewing the code of their peers. Accordingly, it is in significant demand to automate the code review process. In this research, we focus on utilizing pre-training techniques for the tasks in the code review scenario. We collect a large-scale dataset of real-world code changes and code reviews from open-source projects in nine of the most popular programming languages. To better understand code diffs and reviews, we propose CodeReviewer, a pre-trained model that utilizes four pre-training tasks tailored specifically for the code review scenario. To evaluate our model, we focus on three key tasks related to code review activities, including code change quality estimation, review comment generation and code refinement. Furthermore, we establish a high-quality benchmark dataset based on our collected data for these three tasks and conduct comprehensive experiments on it. The experimental results demonstrate that our model outperforms the previous state-of-the-art pre-training approaches in all tasks. Further analysis show that our proposed pre-training tasks and the multilingual pre-training dataset benefit the model on the understanding of code changes and reviews.\n\n{retrieved_text}\n\nGenerate exactly 46 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 46\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Software inspections and the industrial production of software\",\n        \"Unified Pre-training for Program Understanding and Generation\",\n        \"Expectations, outcomes, and challenges of modern code review\",\n        \"Modern code reviews in open-source projects: which problems do they fix?\",\n        \"Impact of Peer Code Review on Peer Impression Formation: A Survey\",\n        \"Language models are few-shot learners\",\n        \"Evaluating large language models trained on code\",\n        \"Breaking Down Multilingual Machine Translation\",\n        \"WhoReview: A multi-objective search-based approach for code reviewers recommendation in modern code review\",\n        \"Deep learning & software engineering: State of research and future directions\",\n        \"Bert: Pre-training of deep bidirectional transformers for language understanding\",\n        \"Design and Code Inspections to Reduce Errors in Program Development (Reprint)\",\n        \"A History of Software Inspections\",\n        \"CodeBERT: A Pre-Trained Model for Programming and Natural Languages\",\n        \"GitHub Copilot Â· Your AI pair programmer\",\n        \"UniXcoder: Unified Cross-Modal Pre-training for Code Representation\",\n        \"GraphCodeBERT: Pre-training Code Representations with Data Flow\",\n        \"Intelligent code reviews using deep learning\",\n        \"Towards Automating Code Review at Scale\",\n        \"Exploit Those Code Reviews! Bigger Data for Deeper Learning\",\n        \"On the Naturalness of Software\",\n        \"CodeSearchNet Challenge: Evaluating the State of Semantic Code Search\",\n        \"Learning and evaluating contextual embedding of source code\",\n        \"Bart: Denoising sequence-to-sequence pre-training for natural language generation, translation, and comprehension\",\n        \"Deepreview: automatic code review using deep multi-instance learning\",\n        \"Roberta: A robustly optimized bert pretraining approach\",\n        \"CodeXGLUE: A Machine Learning Benchmark Dataset for Code Understanding and Generation\",\n        \"Gerrit software code review data from android\",\n        \"CROP: Linking Code Reviews to Source Code Changes\",\n        \"Bleu: a method for automatic evaluation of machine translation\",\n        \"Exploring the Limits of Transfer Learning with a Unified Text-to-Text Transformer\",\n        \"Convergent contemporary software peer review practices\",\n        \"Modern code review: a case study at google\",\n        \"Automatic code review by learning the revision of source code\",\n        \"CORE: Automating Review Recommendation for Code Changes\",\n        \"IntelliCode Compose: Code Generation Using Transformer\",\n        \"Who should review my code? A file location-based code-reviewer recommendation approach for Modern Code Review\",\n        \"An Empirical Study on Learning Bug-Fixing Patches in the Wild via Neural Machine Translation\",\n        \"Using Pre-Trained Models to Boost Code Review Automation\",\n        \"Towards Automating Code Review Activities\",\n        \"Attention is All you Need\",\n        \"CodeT5: Identifier-aware Unified Pre-trained Encoder-Decoder Models for Code Understanding and Generation\",\n        \"A Systematic Literature Review on the Use of Deep Learning in Software Engineering Research\",\n        \"Mining the modern code review repositories: a dataset of people, process and product\",\n        \"Automatically recommending peer reviewers in modern code review\",\n        \"Multilingual Code Snippets Training for Program Translation\"\n    ],\n    \"reasoning\": \"Selected these 46 references because they represent foundational work and recent advances in Automating Code Review Activities by Large-Scale Pre-training, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}