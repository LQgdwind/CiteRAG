{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 53 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: A Cloud Native Platform for Stateful Streaming\n\nPaper Abstract: Abstract We present the architecture of a cloud native version of IBM Streams, with Kubernetes as our target platform. Streams is a general purpose streaming system with its own platform for managing applications and the compute clusters that execute those applications. Cloud native Streams replaces that platform with Kubernetes. By using Kubernetes as its platform, Streams is able to offload job management, life cycle tracking, address translation, fault tolerance and scheduling. This offloading is possible because we define custom resources that natively integrate into Kubernetes, allowing Streams to use Kubernetes’ eventing system as its own. We use four design patterns to implement our system: controllers, conductors, coordinators and causal chains. Composing controllers, conductors and coordinators allows us to build deterministic state machines out of an asynchronous distributed system. The resulting implementation eliminates 75% of the original platform code. Our experimental results show that the performance of Kubernetes is an adequate replacement in most cases, but it has problems with oversubscription, networking latency, garbage collection and pod recovery.\n\n{retrieved_text}\n\nGenerate exactly 53 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 53\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"STREAM: The Stanford stream data manager\",\n        \"The design of the Borealis stream processing engine\",\n        \"Spade: The system s declarative stream processing engine\",\n        \"MillWheel: Fault-Tolerant Stream Processing at Internet Scale\",\n        \"Naiad: A Timely Dataflow System\",\n        \"Storm@Twitter\",\n        \"Twitter Heron: Stream Processing at Scale\",\n        \"Apache Flink: Stream and Batch Processing in a Single Engine\",\n        \"The Dataflow Model: A Practical Approach to Balancing Correctness, Latency, and Cost in Massive-Scale, Unbounded, Out-of-Order Data Processing\",\n        \"State Management in Apache Flink®: Consistent Stateful Distributed Stream Processing\",\n        \"Kubernetes\",\n        \"Borg, omega, and kubernetes\",\n        \"Apache Mesos\",\n        \"The Twelve-Factor App\",\n        \"Strategy and procedures for migration to the cloud computing\",\n        \"Deploying microservice based applications with kubernetes: Experiments and lessons learned\",\n        \"Breaking down the barriers for moving an enterprise to cloud\",\n        \"Architectural principles for cloud software\",\n        \"Cracking the monolith: Challenges in data transitioning to cloud native architectures\",\n        \"A cloud-native approach to 5g network slicing\",\n        \"Understanding cloud-native applications after 10 years of cloud computing - a systematic mapping study\",\n        \"Clouns - a cloud-native application reference model for enterprise architects\",\n        \"Microservices architecture enables devops: Migration to a cloud-native architecture\",\n        \"Turbine: Facebook’s service management platform for stream processing\",\n        \"Amazon aurora: Design considerations for high throughput cloud-native relational databases\",\n        \"Cloud-native database systems at alibaba: Opportunities and challenges\",\n        \"What is Lift-and-Shift\",\n        \"Flink operator for Kubernetes\",\n        \"BanzaiCloud Kafka operator for Kubernetes\",\n        \"Strimzi Kafka operator for Kubernetes\",\n        \"SPC: A distributed, scalable platform for data mining\",\n        \"Apache ZooKeeper\",\n        \"SPL: An extensible language for distributed stream processing\",\n        \"Large-scale cluster management at Google with Borg\",\n        \"Kubernetes objects\",\n        \"The etcd distributed and reliable key-value store\",\n        \"Kubernetes controllers\",\n        \"Kubernetes custom resources\",\n        \"microbean kubernetes controller\",\n        \"Kubernetes Go client\",\n        \"Prometheus\",\n        \"DNS problem scaling with Kubernetes\",\n        \"5-15s DNS lookups on Kubernetes?\",\n        \"Java Management Extension\",\n        \"IBM Streams Operator placement config clause\",\n        \"IBM Streams Parallel annotation\",\n        \"IBM Streams Import operator\",\n        \"IBM Streams Export operator\",\n        \"Consistent regions: Guaranteed tuple processing in ibm streams\",\n        \"IBM Streams JobControlPlane operator\",\n        \"Checkpoint configuration for IBM Streams\",\n        \"Freeflow: High performance container networking\",\n        \"scc: Succinct Code Counter\"\n    ],\n    \"reasoning\": \"Selected these 53 references because they represent foundational work and recent advances in A Cloud Native Platform for Stateful Streaming, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}