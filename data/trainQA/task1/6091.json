{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 50 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: HierarchyNet: Learning to Summarize Source Code with Heterogeneous Representations\n\nPaper Abstract: Abstract We propose a novel method for code summarization utilizing Heterogeneous Code Representations (HCRs) and our specially designed HierarchyNet. HCRs effectively capture essential code features at lexical, syntactic, and semantic levels by abstracting coarse-grained code elements and incorporating fine-grained program elements in a hierarchical structure. Our HierarchyNet method processes each layer of the HCR separately through a unique combination of the Heterogeneous Graph Transformer, a Tree-based CNN, and a Transformer Encoder. This approach preserves dependencies between code elements and captures relations through a novel Hierarchical-Aware Cross Attention layer. Our method surpasses current state-of-the-art techniques, such as PA-Former, CAST, and NeuralCodeSum.\n\n{retrieved_text}\n\nGenerate exactly 50 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 50\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"A transformer-based approach for source code summarization\",\n        \"Unified Pre-training for Program Understanding and Generation\",\n        \"Multilingual training for software engineering\",\n        \"Learning to represent programs with graphs\",\n        \"code2seq: Generating Sequences from Structured Representations of Code\",\n        \"On the bottleneck of graph neural networks and its practical implications\",\n        \"Code2vec: Learning distributed representations of code\",\n        \"METEOR: An automatic metric for MT evaluation with improved correlation with human judgments\",\n        \"Adversarial robustness for code\",\n        \"Autofocus: interpreting attention-based neural networks by code perturbation\",\n        \"Self-supervised contrastive learning for code retrieval and summarization via semantic-preserving transformations\",\n        \"Treecaps: Tree-based capsule networks for source code processing\",\n        \"Pyramid attention for source code summarization\",\n        \"Natgen: generative pre-training by “naturalizing” source code\",\n        \"On the properties of neural machine translation: Encoder–decoder approaches\",\n        \"Codetrans: Towards cracking the language of silicon’s code through self-supervised deep learning and high performance computing\",\n        \"Codebert: A pre-trained model for programming and natural languages\",\n        \"Structured neural summarization\",\n        \"Detecting deep neural network defects with data flow analysis\",\n        \"Graphcodebert: Pre-training code representations with data flow\",\n        \"Global relational models of source code\",\n        \"Code summarization with structure-induced transformer\",\n        \"Deep code comment generation\",\n        \"Deep code comment generation with hybrid lexical and syntactical information\",\n        \"Heterogeneous Graph Transformer\",\n        \"Summarizing source code using a neural attention model\",\n        \"Learning and evaluating contextual embedding of source code\",\n        \"Improved code summarization via a graph neural network\",\n        \"A neural model for generating natural language summaries of program subroutines\",\n        \"Input combination strategies for multi-source transformer decoder\",\n        \"ROUGE: A package for automatic evaluation of summaries\",\n        \"Roberta: A robustly optimized bert pretraining approach\",\n        \"Decoupled weight decay regularization\",\n        \"Convolutional neural networks over tree structures for programming language processing\",\n        \"Spt-code: sequence-to-sequence pre-training for learning source code representations\",\n        \"Bleu: A method for automatic evaluation of machine translation\",\n        \"How could neural networks understand programs?\",\n        \"Integrating tree path in transformer for code representation\",\n        \"On the generalizability of neural program models with respect to semantic-preserving program transformations\",\n        \"Exploring the limits of transfer learning with a unified text-to-text transformer\",\n        \"Unsupervised translation of programming languages\",\n        \"Cast: Enhancing code summarization with hierarchical splitting and reconstruction of abstract syntax trees\",\n        \"Improved semantic representations from tree-structured long short-term memory networks\",\n        \"Attention is all you need\",\n        \"Cider: Consensus-based image description evaluation\",\n        \"Improving automatic source code summarization via deep reinforcement learning\",\n        \"Codet5: Identifier-aware unified pre-trained encoder-decoder models for code understanding and generation\",\n        \"Code generation as a dual task of code summarization\",\n        \"Practical program repair in the era of large pre-trained language models\",\n        \"Generating adversarial examples for holding robustness of source code processing models\"\n    ],\n    \"reasoning\": \"Selected these 50 references because they represent foundational work and recent advances in HierarchyNet: Learning to Summarize Source Code with Heterogeneous Representations, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}