{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 53 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Competitive Data-Structure DynamizationA preliminary version of this paper appeared in SODA 2021 [42].\n\nPaper Abstract: Abstract Data-structure dynamizationis a general approach for making static data structures dynamic. It is used extensively in geometric settings and in the guise of so-called merge (or compaction) policies in big-data databases such as LevelDB and Google Bigtable (our focus). Previous theoretical work is based on worst-case analyses for uniform inputs ‚Äî insertions of one item at a time and constant read rate. In practice, merge policies must not only handle batch insertions and varying read/write ratios, they can take advantage of such non-uniformity to reduce cost on a per-input basis. To model this, we initiate the study of data-structure dynamization through the lens of competitive analysis, via two new online set-cover problems. For each, the input is a sequence of disjoint sets of weighted items. The sets are revealed one at a time. The algorithm must respond to each with a set cover that covers all items revealed so far. It obtains the cover incrementally from the previous cover by adding one or more sets and optionally removing existing sets. For each new set the algorithm incurs build cost equal to the weight of the items in the set. In the first problem the objective is to minimize total build cost plus total query cost, where the algorithm incurs a query cost at each time tùë°t equal to the current cover size. In the second problem, the objective is to minimize the build cost while keeping the query cost from exceeding kùëòk (a given parameter) at any time. We give deterministic online algorithms for both variants, with competitive ratios of Œò‚Äã(log‚àó‚Å°n)Œòsuperscriptùëõ\\Theta(\\log^{*}n) and kùëòk, respectively. The latter ratio is optimal for the second variant.\n\n{retrieved_text}\n\nGenerate exactly 53 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 53\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"A framework for index bulk loading and dynamization\",\n        \"Approximating extent measures of points\",\n        \"Hierarchical memory with block transfer\",\n        \"AsterixDB: A scalable, open source BDMS\",\n        \"External Memory Data Structures\",\n        \"I/O-efficient dynamic planar point location\",\n        \"Deterministic sampling and range counting in geometric data streams\",\n        \"Application-controlled paging for a shared cache\",\n        \"Closing the Gap Between Cache-oblivious and Cache-adaptive Analysis\",\n        \"Cache-adaptive Algorithms\",\n        \"Cache-oblivious streaming b-trees\",\n        \"Decomposable searching problems\",\n        \"Decomposable searching problems I. Static-to-dynamic transformation\",\n        \"Accordion: Better memory organization for LSM key-value stores\",\n        \"Lower bounds for external memory dictionaries\",\n        \"Cache-aware and cache-oblivious adaptive sorting\",\n        \"Towards In-place Geometric Algorithms and Data Structures\",\n        \"Competitive analysis via regularization\",\n        \"The design of competitive online algorithms via a primal‚Äîdual approach\",\n        \"BigTable: A distributed storage system for structured data\",\n        \"Dynamic algorithms in computational geometry\",\n        \"Static optimality theorem for external memory string access\",\n        \"A minimal variance estimator for the cardinality of big data set intersection\",\n        \"Spanner: Google‚Äôs globally distributed database\",\n        \"Monkey: Optimal navigable key-value store\",\n        \"Dynamo: Amazon‚Äôs highly available key-value store\",\n        \"Getting Started with LevelDB\",\n        \"Optimizing space amplification in RocksDB\",\n        \"Turning big data into tiny data: Constant-size coresets for k-means, PCA and projective clustering\",\n        \"HBase: The Definitive Guide: Random Access to Your Planet-Size Data\",\n        \"Modern B-tree techniques\",\n        \"On coresets for k-means and k-median clustering\",\n        \"Coresets for k-means and k-median clustering and their applications\",\n        \"Dynamic TCP acknowledgment and other stories about e/(e - 1)\",\n        \"Achieving 100,000,000 database inserts per second using Accumulo and D4M\",\n        \"Optimal self-adjusting trees for dynamic string data in secondary storage\",\n        \"Cassandra: A decentralized structured storage system\",\n        \"Computational Geometry‚ÄîA Survey\",\n        \"A new path from splay to dynamic optimality\",\n        \"Towards accurate and fast evaluation of multi-stage log-structured designs\",\n        \"LSM-based storage techniques: A survey\",\n        \"Competitive data-structure dynamization\",\n        \"Lower bounds on the efficiency of transforming static data structures into dynamic structures\",\n        \"The log-structured merge-tree (LSM-tree)\",\n        \"The Design of Dynamic Data Structures\",\n        \"Is min-wise hashing optimal for summarizing set intersection?\",\n        \"The design and implementation of a log-structured file system\",\n        \"Differential files: Their application to the maintenance of large databases\",\n        \"Self-adjusting binary trees\",\n        \"Personal communication\",\n        \"The art of dynamizing\",\n        \"Algorithms and Data Structures for External Memory\",\n        \"Dynamic indexability and the optimality of B-trees\"\n    ],\n    \"reasoning\": \"Selected these 53 references because they represent foundational work and recent advances in Competitive Data-Structure DynamizationA preliminary version of this paper appeared in SODA 2021 [42]., providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}