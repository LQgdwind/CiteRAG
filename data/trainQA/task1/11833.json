{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 42 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: LecPrompt: A Prompt-based Approach for Logical Error Correction with CodeBERT\n\nPaper Abstract: Abstract Logical errors in programming don’t raise compiler alerts, making them hard to detect. These silent errors can disrupt a program’s function or cause run-time issues. Their correction requires deep insight into the program’s logic, highlighting the importance of automated detection and repair. In this paper, we introduce LecPrompt to localize and repair logical errors, an prompt-based approach that harnesses the capabilities of CodeBERT, a transformer-based large language model trained on code. First, LecPrompt leverages a large language model to calculate perplexity and log probability metrics, pinpointing logical errors at both token and line levels. Through statistical analysis, it identifies tokens and lines that deviate significantly from the expected patterns recognized by large language models, marking them as potential error sources. Second, by framing the logical error correction challenge as a Masked Language Modeling (MLM) task, LecPrompt employs CodeBERT to autoregressively repair the identified error tokens. Finally, the soft-prompt method provides a novel solution in low-cost scenarios, ensuring that the model can be fine-tuned to the specific nuances of the logical error correction task without incurring high computational costs. To evaluate LecPrompt’s performance, we created a method to introduce logical errors into correct code and applying this on QuixBugs to produce the QuixBugs-LE dataset. Our evaluations on the QuixBugs-LE dataset for both Python and Java highlight the impressive capabilities of our method, LecPrompt. For Python, LecPrompt achieves a noteworthy 74.58% top-1 token-level repair accuracy and 27.4% program-level repair accuracy. In Java, LecPrompt delivers a 69.23% top-1 token-level repair accuracy and 24.7% full program-level repair accuracy. Especially when compared against other state-of-the-art models such as CoCoNuT, CodeBERTa, and RoBERTa, our method consistently showcases superior performance across multiple key metrics. These results illuminate the potential of LecPrompt in the domain of automated logical error correction in programming.\n\n{retrieved_text}\n\nGenerate exactly 42 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 42\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Common logical errors made by novice programmers\",\n        \"A new look at novice programmer errors\",\n        \"Using static analysis to find bugs\",\n        \"The concept of dynamic analysis\",\n        \"Program slicing\",\n        \"Neural machine translation: A review\",\n        \"Supervised learning\",\n        \"Reinforcement learning: A survey\",\n        \"Evaluating large language models trained on code\",\n        \"GPT-3: What’s it good for?\",\n        \"BERT rediscovers the classical NLP pipeline\",\n        \"Codebert: A pre-trained model for programming and natural languages\",\n        \"Codet5: Identifier-aware unified pre-trained encoder-decoder models for code understanding and generation\",\n        \"A systematic evaluation of large language models of code\",\n        \"The robots are coming: Exploring the implications of openai codex on introductory programming\",\n        \"Competition-level code generation with alphacode\",\n        \"Codegen: An open large language model for code with multi-turn program synthesis\",\n        \"Palm: Scaling language modeling with pathways\",\n        \"Codexglue: A machine learning benchmark dataset for code understanding and generation\",\n        \"Applying codebert for automated program repair of java simple bugs\",\n        \"Electra: Pre-training text encoders as discriminators rather than generators\",\n        \"Exploiting cloze questions for few shot text classification and natural language inference\",\n        \"Autoprompt: Eliciting knowledge from language models with automatically generated prompts\",\n        \"Prefix-tuning: Optimizing continuous prompts for generation\",\n        \"GPT understands, too\",\n        \"The power of scale for parameter-efficient prompt tuning\",\n        \"Self-supervised bug detection and repair\",\n        \"Transformer in transformer\",\n        \"Nature-inspired algorithms for feed-forward neural network classifiers: A survey of one decade of research\",\n        \"QuixBugs: A multi-lingual program repair benchmark set based on the Quixey Challenge\",\n        \"Large batch optimization for deep learning: Training bert in 76 minutes\",\n        \"Roberta: A robustly optimized bert pretraining approach\",\n        \"Larger-scale transformers for multilingual masked language modeling\",\n        \"What do pre-trained code models know about code?\",\n        \"Avatar: Fixing semantic bugs with fix patterns of static analysis violations\",\n        \"Automatic diagnosis and correction of logical errors for functional programming assignments\",\n        \"Neural attribution for semantic bug-localization in student programs\",\n        \"Automatic and scalable detection of logical errors in functional programming assignments\",\n        \"Coconut: combining context-aware neural translation models using ensemble for program repair\",\n        \"A model with iterative trials for correcting logical errors in source code\",\n        \"GPT-Neo: Large scale autoregressive language modeling with meshtensorflow (v1.1.1)\",\n        \"Gpt-neox-20b: An open-source autoregressive language model\"\n    ],\n    \"reasoning\": \"Selected these 42 references because they represent foundational work and recent advances in LecPrompt: A Prompt-based Approach for Logical Error Correction with CodeBERT, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}