{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 50 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Singularly Optimal Randomized Leader Election\n\nPaper Abstract: Abstract This paper concerns designing distributed algorithms that are singularly optimal, i.e., algorithms that are simultaneously time and message optimal, for the fundamental leader election problem in networks. Our main result is a randomized distributed leader election algorithm for asynchronous complete networks that is essentially (up to a polylogarithmic factor) singularly optimal. Our algorithm uses O​(n)𝑂𝑛O(n) messages with high probability111Throughout, “with high probability” means with probability at least 1−1/nc11superscript𝑛𝑐1-1/n^{c}, for a constant c>0𝑐0c>0. and runs in O​(log2⁡n)𝑂superscript2𝑛O(\\log^{2}n) time (with high probability) to elect a unique leader. The O​(n)𝑂𝑛O(n) message complexity should be contrasted with the Ω​(n​log⁡n)Ω𝑛𝑛\\Omega(n\\log n) lower bounds for the deterministic message complexity of leader election algorithms (regardless of time), proven by Korach, Moran, and Zaks (TCS, 1989) for asynchronous algorithms and by Afek and Gafni (SIAM J. Comput., 1991) for synchronous networks. Hence, our result also separates the message complexities of randomized and deterministic leader election. More importantly, our (randomized) time complexity of O​(log2⁡n)𝑂superscript2𝑛O(\\log^{2}n) for obtaining the optimal O​(n)𝑂𝑛O(n) message complexity is significantly smaller than the long-standing Θ~​(n)~Θ𝑛\\tilde{\\Theta}(n) time complexity obtained by Afek and Gafni and by Singh (SIAM J. Comput., 1997) for message optimal (deterministic) election in asynchronous networks. Afek and Gafni also conjectured that Θ~​(n)~Θ𝑛\\tilde{\\Theta}(n) time would be optimal for message-optimal asynchronous algorithms. Our result shows that randomized algorithms are significantly faster. Turning to synchronous complete networks, Afek and Gafni showed an essentially singularly optimal deterministic algorithm with O​(log⁡n)𝑂𝑛O(\\log n) time and O​(n​log⁡n)𝑂𝑛𝑛O(n\\log n) messages. Ramanathan et al. (Distrib. Comput. 2007) used randomization to improve the message complexity, and showed a randomized algorithm with O​(n)𝑂𝑛O(n) messages but still with O​(log⁡n)𝑂𝑛O(\\log n) time (with failure probability O​(1/logΩ​(1)⁡n)𝑂1superscriptΩ1𝑛O(1/\\log^{\\Omega(1)}n)). Our second result shows that synchronous complete networks admit a tightly singularly optimal randomized algorithm, with O​(1)𝑂1O(1) time and O​(n)𝑂𝑛O(n) messages (both bounds are optimal). Moreover, our algorithm’s time bound holds with certainty, and its message bound holds with high probability, i.e., 1−1/nc11superscript𝑛𝑐1-1/n^{c} for constant c𝑐c. Our results demonstrate that leader election can be solved in a simultaneously message and time-efficient manner in asynchronous complete networks using randomization. It is open whether this is possible in asynchronous general networks.\n\n{retrieved_text}\n\nGenerate exactly 50 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 50\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Time and message bounds for election in synchronous and asynchronous complete networks\",\n        \"Elections in anonymous networks\",\n        \"Local and global properties in networks of processors (extended abstract)\",\n        \"Towards robust and efficient distributed computation in dynamic peer-to-peer networks\",\n        \"Communication-optimal maintenance of replicated information\",\n        \"A trade-off between information and communication in broadcast protocols\",\n        \"The chubby lock service for loosely-coupled distributed systems\",\n        \"Scribe: A large-scale and decentralized application-level multicast infrastructure\",\n        \"Paxos made live: an engineering perspective\",\n        \"Bigtable: A distributed storage system for structured data\",\n        \"A simple deterministic distributed mst algorithm, with near-optimal time and message complexities\",\n        \"A distributed algorithm for minimum-weight spanning trees\",\n        \"Timing-sync protocol for sensor networks\",\n        \"The google file system\",\n        \"Time-message trade-offs in distributed algorithms\",\n        \"A probabilistically correct leader election protocol for large groups\",\n        \"Round-and message-optimal distributed graph algorithms\",\n        \"Selecting a leader in a clique in O​(n​log⁡n)𝑂𝑛𝑛O(n\\\\log n) messages\",\n        \"Autopilot: automatic data center management\",\n        \"Efficient distributed approximation algorithms via probabilistic tree embeddings\",\n        \"Scalable leader election\",\n        \"Towards secure and scalable computation in peer-to-peer networks\",\n        \"A modular technique for the design of efficient distributed leader finding algorithms\",\n        \"Tight lower and upper bounds for some distributed algorithms for a complete network of processors\",\n        \"The optimality of distributive constructions of minimum weight and degree restricted spanning trees in a complete network of processors\",\n        \"Optimal lower bounds for some distributed algorithms for a complete network of processors\",\n        \"On the complexity of universal leader election\",\n        \"Sublinear bounds for randomized leader election\",\n        \"Low communication self-stabilization through randomization\",\n        \"Distributed systems - towards a formal approach\",\n        \"Election in a complete network with a sense of direction\",\n        \"Distributed Algorithms\",\n        \"Probabilistic quorum systems\",\n        \"Probability and computing: randomization and probabilistic techniques in algorithms and data analysis\",\n        \"Distributed network algorithms\",\n        \"A time-and message-optimal distributed algorithm for minimum spanning trees\",\n        \"Time-optimal leader election in general networks\",\n        \"Distributed Computing: A Locality-Sensitive Approach\",\n        \"Interconnections: bridges, routers, switches, and internetworking protocols\",\n        \"Efficient algorithms for elections in meshes and complete graphs\",\n        \"Randomized leader election\",\n        \"A scalable content-addressable network\",\n        \"Pastry: Scalable, decentralized object location, and routing for large-scale peer-to-peer systems\",\n        \"Design and Analysis of Distributed Algorithms (Wiley Series on Parallel and Distributed Computing)\",\n        \"Efficient leader election using sense of direction\",\n        \"Leader election in complete networks\",\n        \"Distributed systems: principles and paradigms\",\n        \"Introduction to distributed algorithms\",\n        \"The cougar approach to in-network query processing in sensor networks\",\n        \"Tapestry: a resilient global-scale overlay for service deployment\"\n    ],\n    \"reasoning\": \"Selected these 50 references because they represent foundational work and recent advances in Singularly Optimal Randomized Leader Election, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}