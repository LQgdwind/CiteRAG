{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 228 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: SoK: Software Compartmentalization\n\nPaper Abstract: Abstract Decomposing large systems into smaller components with limited privileges has long been recognized as an effective means to minimize the impact of exploits. Despite historical roots, demonstrated benefits, and a plethora of research efforts in academia and industry, the compartmentalization of software is still not a mainstream practice. This paper investigates why, and how this status quo can be improved. Noting that existing approaches are fraught with inconsistencies in terminology and analytical methods, we propose a unified model for the systematic analysis, comparison, and directing of compartmentalization approaches. We use this model to review 211 research efforts and analyze 61 mainstream compartmentalized systems, confronting them to understand the limitations of both research and production works. Among others, our findings reveal that mainstream efforts largely rely on manual methods, custom abstractions, and legacy mechanisms, poles apart from recent research. We conclude with recommendations: compartmentalization should be solved holistically; progress is needed towards simplifying the definition of compartmentalization policies; towards better challenging our threat models in the light of confused deputies and hardware limitations; as well as towards bridging the gaps we pinpoint between research and mainstream needs. This paper not only maps the historical and current landscape of compartmentalization, but also sets forth a framework to foster their evolution and adoption.\n\n{retrieved_text}\n\nGenerate exactly 228 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 228\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Viewed 24/03/23\",\n        \"AMD® PRO Security: AMD Secure Processor\",\n        \"AMD® Secure Encrypted Virtualization (SEV)\",\n        \"Application Data Integrity (ADI)\",\n        \"ARM® TrustZone for Cortex-A\",\n        \"Chrome: Site Isolation bypass via NavigationPreloadRequest\",\n        \"CVE-2006-5794: Sandbox escape via auth bypass in OpenSSH\",\n        \"double-free vulnerability in OpenSSH (CVE-2023-25136)\",\n        \"Enhanced security through MTE\",\n        \"Google: Code Sandboxing: SAPI\",\n        \"Google V8 untrusted code mitigations\",\n        \"ISO/IEC 2382:2015 (entry #2121372): program\",\n        \"Lighttpd Angel Configuration\",\n        \"MS Windows NT kernel-mode user and GDI white paper\",\n        \"OpenSSH breaking due to overly restrictive syscall policy\",\n        \"Sandbox libexpat using RLBox (incl\",\n        \"sysfs: filesystem for exporting kernel objects\",\n        \"vsftpd: secure and fast FTP server for UNIX-like systems\",\n        \"Wireshark privilege separation\",\n        \"z/OS concepts: What is storage protection?\",\n        \"SoK: Lessons learned from Android security research for appified software platforms\",\n        \"CompartOS: CHERI Compartmentalization for Embedded Systems\",\n        \"The MILS architecture for high-assurance embedded systems\",\n        \"CHERIoT: Complete memory safety for embedded devices\",\n        \"Security kernel design and implementation: An introduction\",\n        \"Computer security technology planning study\",\n        \"Sharing Memory Robustly in Message-Passing Systems\",\n        \"Boxify: Full-fledged app sandboxing for stock Android\",\n        \"TRUST: A compilation framework for in-process isolation to protect safe Rust against untrusted code\",\n        \"Xen and the art of virtualization\",\n        \"System-level non-interference for constant-time cryptography\",\n        \"Cali: Compiler assisted library isolation\",\n        \"A fork() in the road\",\n        \"Performance evolution of mitigating transient execution attacks\",\n        \"Some thoughts on security after ten years of qmail 1.0\",\n        \"The jury is in: Monolithic OS design is flawed: Microkernel-based designs improve security\",\n        \"Wedge: Splitting applications into reduced-privilege compartments\",\n        \"A characterization of state spill in modern operating systems\",\n        \"Tolerating malicious device drivers in Linux\",\n        \"Privtrans: Automatically partitioning programs for privilege separation\",\n        \"SoK: Shining light on shadow stacks\",\n        \"A systematic evaluation of transient execution attacks and defenses\",\n        \"Automating seccomp filter generation for Linux applications\",\n        \"Datashield: Configurable data confidentiality and integrity\",\n        \"Hardware support for fast capability-based addressing\",\n        \"Fast byte-granularity software fault isolation\",\n        \"Constant-time foundations for the new Spectre era\",\n        \"SoK: Practical foundations for software Spectre defenses\",\n        \"SoK: Understanding the prevailing security vulnerabilities in TrustZone-assisted TEE systems\",\n        \"Sharing and protection in a single-address-space operating system\",\n        \"Iago attacks: Why the system call API is a bad untrusted RPC interface\",\n        \"An analysis of browser domain-isolation bugs and a light-weight transparent defense mechanism\",\n        \"Overshadow: A virtualization-based approach to retrofitting protection in commodity operating systems\",\n        \"Shreds: Fine-grained execution units with private memory\",\n        \"CIVSCOPE: Analyzing potential memory corruption bugs in compartment interfaces\",\n        \"Secure web applications via automatic partitioning\",\n        \"ACES: Automatic compartments for embedded systems\",\n        \"PKU pitfalls: Attacks on PKU-based memory isolation systems\",\n        \"Sanctum: Minimal hardware extensions for strong software isolation\",\n        \"Virtual memory, processes, and sharing in Multics\",\n        \"Nested kernel: An operating system architecture for intra-kernel privilege separation\",\n        \"sysfilter: Automated system call filtering for commodity software\",\n        \"A lattice model of secure information flow\",\n        \"Programming semantics for multiprogrammed computations\",\n        \"Hardbound: Architectural support for spatial safety of the C programming language\",\n        \"Architectural support for software-defined metadata processing\",\n        \"The structure of the “THE”-multiprogramming system\",\n        \"A quantitative evaluation of privilege separation in web browser designs\",\n        \"The correctness-security gap in compiler optimization\",\n        \"A study of application sandbox policies in Linux\",\n        \"The matter of heartbleed\",\n        \"Capacity: Cryptographically-enforced in-process capabilities for modern ARM architectures\",\n        \"From L3 to SeL4 what have we learnt in 20 years of L4 microkernels?\",\n        \"XFI: Software guards for system address spaces\",\n        \"CheriOS: designing an untrusted single-address-space capability operating system utilising capability hardware and a minimal hypervisor\",\n        \"IMIX: In-process memory isolation extension\",\n        \"Hecate: Lifting and shifting on-premises workloads to an untrusted cloud\",\n        \"Enclosure: Language-based restriction of untrusted libraries\",\n        \"H. Prafullchandra\",\n        \"EPK: Scalable and efficient memory protection keys\",\n        \"Harmonizing performance and isolation in microkernels with efficient intra-kernel isolation and communication\",\n        \"A hardware-software co-design for efficient intra-enclave isolation\",\n        \"Protecting private keys against memory disclosure attacks using hardware transactional memory\",\n        \"Clean application compartmentalization with SOAAP\",\n        \"Enforcing performance isolation across virtual machines in Xen\",\n        \"Bringing the web up to speed with WebAssembly\",\n        \"The security architecture of qmail\",\n        \"Evolution of the MTA architecture: the impact of security\",\n        \"The nucleus of a multiprogramming system\",\n        \"The confused deputy: (or why capabilities might have been invented)\",\n        \"Hodor: Intra-process isolation for high-throughput data plane libraries\",\n        \"The Mungi single-address-space operating system\",\n        \"Minix 3: A highly reliable, self-repairing operating system\",\n        \"InkTag: Secure applications on an untrusted operating system\",\n        \"Enforcing least privilege memory views for multithreaded applications\",\n        \"Identifying arbitrary memory access vulnerabilities in privilege-separated software\",\n        \"LensCap: Split-process framework for fine-grained visual privacy control for augmented reality apps\",\n        \"Hardware information flow tracking\",\n        \"The ART of app compartmentalization: Compiler-based library privilege separation on stock Android\",\n        \"KSplit: Automating device driver isolation\",\n        \"Fine-grained program partitioning for security\",\n        \"“they’re not that hard to mitigate”: What cryptographic library developers think about timing attacks\",\n        \"Ghostbusting: Mitigating Spectre with intraprocess memory isolation\",\n        \"TAG: Tagged architecture guide\",\n        \"BeeBox: Hardening BPF against transient execution attacks\",\n        \"Annotating, tracking, and protecting cryptographic secrets with CryptoMPK\",\n        \"WaVe: a verifiably secure WebAssembly sandboxing runtime\",\n        \"SFI safety for native-compiled Wasm\",\n        \"Wayfinder: Towards automatically deriving optimal OS configurations\",\n        \"Effectively fuzzing the IPC layer in Firefox\",\n        \"EC: Embedded systems compartmentalization via intra-kernel isolation\",\n        \"COIN Attacks: On insecurity of enclave untrusted interfaces in SGX\",\n        \"Privman: A library for partitioning applications\",\n        \"Hardware-based always-on heap memory safety\",\n        \"PKRU-Safe: Automatically locking down the heap between safe and unsafe languages\",\n        \"SeL4: Formal verification of an OS kernel\",\n        \"Spectre attacks: Exploiting speculative execution\",\n        \"Timing attacks on implementations of Diffie-Hellman, RSA, DSS, and other systems\",\n        \"Collide+Power: Leaking inaccessible data with software-based power side channels\",\n        \"Isolation without taxation: Near-zero-cost transitions for WebAssembly and SFI\",\n        \"No need to hide: Protecting safe regions on commodity hardware\",\n        \"SoK: Taxonomy of attacks on open-source software supply chains\",\n        \"Lord of the x86 rings: A portable user mode privilege separation architecture on x86\",\n        \"Harnessing the x86 intermediate rings for intra-process isolation\",\n        \"Assessing the impact of interface vulnerabilities in compartmentalized software\",\n        \"FlexOS: Towards flexible OS isolation\",\n        \"Towards (really) safe and fast confidential I/O\",\n        \"Dafny: An automatic program verifier for functional correctness\",\n        \"On micro-kernel construction\",\n        \"Glamdring: Automatic application partitioning for intel SGX\",\n        \"Meltdown: Reading kernel memory from user space\",\n        \"Light-Weight contexts: An OS abstraction for safety and performance\",\n        \"Efficient privilege de-escalation for ad libraries in mobile apps\",\n        \"PtrSplit: Supporting general pointers in automatic program partitioning\",\n        \"Program-Mandering: Quantitative privilege separation\",\n        \"Thwarting memory disclosure with efficient hypervisor-enforced intra-domain isolation\",\n        \"Software fault isolation with API integrity and multi-principal modules\",\n        \"Preventing kernel hacks with HAKC\",\n        \"Cross-language attacks\",\n        \"Docker: lightweight Linux containers for consistent development and deployment\",\n        \"Mitigating information leakage vulnerabilities with type-based data isolation\",\n        \"Robust Composition: Towards a Unified Approach to Access Control and Concurrency Control\",\n        \"Microstache: A lightweight execution context for in-process safe region isolation\",\n        \"RockSalt: Better, faster, stronger SFI for the x86\",\n        \"Framer: A tagged-pointer capability system with memory safety applications\",\n        \"Retrofitting fine grain isolation in the Firefox renderer\",\n        \"Swivel: Hardening WebAssembly against Spectre\",\n        \"Going beyond the limits of SFI: Flexible and secure hardware-assisted in-process isolation with HFI\",\n        \"Redleaf: Isolation and communication in a safe operating system\",\n        \"Lightweight kernel isolation with virtualization and VM functions\",\n        \"VirtuOS: An operating system with kernel virtualization\",\n        \"LibrettOS: A dynamically adaptable multiserver-library OS\",\n        \"Hardware Support for Compartmentalization\",\n        \"The spy in the sandbox: Practical cache attacks in JavaScript and their implications\",\n        \"libmpk: Software abstraction for Intel memory protection keys (Intel MPK)\",\n        \"Mutable protection domains: Towards a component-based system for dependable and predictable computing\",\n        \"Mutable protection domains: Adapting system fault isolation for reliability and efficiency\",\n        \"On the criteria to be used in decomposing systems into modules\",\n        \"AdDroid: Privilege separation for applications and advertisers in Android\",\n        \"μ𝜇\\\\muSWITCH: Fast kernel context isolation with implicit context switches\",\n        \"xMP: Selective memory protection for kernel and user space\",\n        \"Improving host security with system call policies\",\n        \"Preventing privilege escalation\",\n        \"PACMAN: attacking ARM pointer authentication with speculative execution\",\n        \"Site isolation: Process separation for web sites within the browser\",\n        \"Keeping safe Rust safe with Galeed\",\n        \"μ𝜇\\\\muSCOPE: A methodology for analyzing least-privilege compartmentalization in large software artifacts\",\n        \"SCALPEL: Exploring the limits of tag-enforced compartmentalization\",\n        \"Protecting the stack with metadata policies and tagged hardware\",\n        \"Design and verification of secure systems\",\n        \"Proof of separability a verification technique for a class of security kernels\",\n        \"Toward confidential cloud computing\",\n        \"Protection and the control of information sharing in multics\",\n        \"The protection of information in computer systems\",\n        \"The high-level benefits of low-level sandboxing\",\n        \"CubicleOS: A library OS with software componentisation for practical isolation\",\n        \"Practical byte-granular memory blacklisting using Califorms\",\n        \"Some issues in the design of an extensible operating system (panel statement)\",\n        \"Preliminary notes on the design of secure military computer systems, 1973\",\n        \"BPF and Spectre: Mitigating transient execution attacks\",\n        \"Jenny: Securing syscalls for PKU-based memory isolation systems\",\n        \"Donky: Domain keys – efficient in-process isolation for RISC-V and x86\",\n        \"Nyx-net: Network fuzzing with incremental snapshots\",\n        \"FlexDroid: Enforcing in-app privilege separation in Android\",\n        \"AdSplit: Separating smartphone advertising from applications\",\n        \"Deconstructing Xen\",\n        \"A study of security isolation techniques\",\n        \"FlexSC: Flexible system call scheduling with exception-less system calls\",\n        \"HDFI: Hardware-assisted data-flow isolation\",\n        \"SoK: Sanitizing for security\",\n        \"Salus: Kernel support for secure process compartments\",\n        \"Nativeguard: Protecting Android applications from third-party native libraries\",\n        \"Intra-unikernel isolation with Intel Memory Protection Keys\",\n        \"Recovering device drivers\",\n        \"SoK: Eternal war in memory\",\n        \"Graphene-SGX: A practical library OS for unmodified applications on SGX\",\n        \"ERIM: Secure, efficient in-process isolation with protection keys\",\n        \"A tale of two worlds: Assessing the vulnerability of enclave shielding runtimes\",\n        \"Distributed systems\",\n        \"BreakApp: Automated, flexible application compartmentalization\",\n        \"CODOMs: Protecting software with code-centric memory domains\",\n        \"You shall not (by)pass! Practical, secure, and fast PKU-based sandboxing\",\n        \"Efficient software-based fault isolation\",\n        \"Structured specification of a security kernel\",\n        \"The multi-principal OS construction of the Gazelle web browser\",\n        \"Between mutual trust and mutual distrust: Practical fine-grained privilege separation in multithreaded applications\",\n        \"Isolating functions at the hardware limit with Virtines\",\n        \"Capsicum: Practical capabilities for UNIX\",\n        \"CHERI: A hybrid capability-system architecture for scalable software compartmentalization\",\n        \"CT-wasm: type-driven secure cryptography for the web ecosystem\",\n        \"TIMBER-V: Tag-isolated memory bringing fine-grained enclaves to RISC-V\",\n        \"Scale and performance in the Denali isolation kernel\",\n        \"Sevurity: No security without integrity : Breaking integrity-free memory encryption with minimal assumptions\",\n        \"Mondrian memory protection\",\n        \"Guidelines for snowballing in systematic literature studies and a replication in software engineering\",\n        \"The CHERI capability model: Revisiting RISC in an age of risk\",\n        \"djbdns: more than just a mouthful of consonants\",\n        \"Automatically partition software into least privilege components using dynamic data dependency analysis\",\n        \"Silent bugs matter: A study of compiler-introduced security bugs\",\n        \"Validating the integrity of audit logs against execution repartitioning attacks\",\n        \"FLUSH+RELOAD: A high resolution, low noise, L3 cache Side-Channel attack\",\n        \"Native Client: A sandbox for portable, untrusted x86 native code\",\n        \"The duality of memory and communication in the implementation of a multiprocessor operating system\",\n        \"VDom: Fast and unlimited virtual domains on multiple architectures\",\n        \"APISan: Sanitizing API usages through semantic Cross-Checking\",\n        \"Secure program partitioning\",\n        \"Combining control-flow integrity and static analysis for efficient and validated data sandboxing\",\n        \"AFrame: Isolating advertisements from mobile applications in Android\"\n    ],\n    \"reasoning\": \"Selected these 228 references because they represent foundational work and recent advances in SoK: Software Compartmentalization, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}