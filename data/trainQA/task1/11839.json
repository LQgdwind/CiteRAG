{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 56 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Unlocking FedNL: Self-Contained Compute-Optimized Implementation\n\nPaper Abstract: Abstract. Federated Learning (FL) is an emerging paradigm that enables intelligent agents to collaboratively train Machine Learning (ML) models in a distributed manner, eliminating the need for sharing their local data. The recent work (Safaryan et al., 2022) introduces a family of Federated Newton Learn (FedNL) algorithms, marking a significant step towards applying second-order methods to FL and large-scale optimization. However, the reference FedNL prototype exhibits three serious practical drawbacks: (i) It requires 4.84.84.8 hours to launch a single experiment in a sever-grade workstation; (ii) The prototype only simulates multi-node setting; (iii) Prototype integration into resource-constrained applications is challenging. To bridge the gap between theory and practice, we present a self-contained implementation of FedNL, FedNL-LS, FedNL-PP for single-node and multi-node settings. Our work resolves the aforementioned issues and reduces the wall clock time by ×1000absent1000\\times 1000. With this FedNL outperforms alternatives for training logistic regression in a single-node – CVXPY (Diamond and Boyd, 2016), and in a multi-node – Apache Spark (Meng et al., 2016), Ray/Scikit-Learn (Moritz et al., 2018). Finally, we propose two practical-orientated compressors for FedNL - adaptive TopLEK and cache-aware RandSeqK, which fulfill the theory of FedNL.\n\n{retrieved_text}\n\nGenerate exactly 56 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 56\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Mosek optimizer API for python\",\n        \"Simplified wrapper and interface generator\",\n        \"Convex analysis and optimization\",\n        \"Flower: A Friendly Federated Learning Research Framework\",\n        \"Convex Optimization\",\n        \"FL_PyTorch: optimization research simulator for federated learning\",\n        \"LIBSVM: A library for support vector machines\",\n        \"Introduction to algorithms\",\n        \"CPU DB: recording microprocessor history\",\n        \"Cache-oblivious algorithms and data structures\",\n        \"CVXPY: A Python-Embedded Modeling Language for Convex Optimization\",\n        \"FLUTE: A Scalable, Extensible Framework for High-Performance Federated Learning Simulations\",\n        \"InControl podcast: Interview with Stephen Boyd\",\n        \"ECOS: An SOCP solver for embedded systems\",\n        \"Instruction tables: Lists of instruction latencies, throughputs and micro-operation breakdowns for Intel, AMD and VIA CPUs\",\n        \"Cache-Oblivious Algorithms\",\n        \"Matrix computations\",\n        \"MARINA: Faster Non-Convex Distributed Learning with Compression\",\n        \"Clarabel Online Documentation\",\n        \"pfl-research: simulation framework for accelerating research in Private Federated Learning\",\n        \"Systems performance: enterprise and the cloud\",\n        \"Gurobi Optimizer Reference Manual\",\n        \"Multi-grid methods and applications\",\n        \"Digital Design and RISC-V Computer Architecture Textbook\",\n        \"FedML: A Research Library and Benchmark for Federated Machine Learning\",\n        \"Computer Architecture - A Quantitative Approach, 5th Edition\",\n        \"I/O Complexity: The Red-Blue Pebble Game\",\n        \"Natural Compression for Distributed Deep Learning\",\n        \"IEEE Standard for Floating-Point Arithmetic\",\n        \"Iterative methods for optimization\",\n        \"The Linux programming interface: a Linux and UNIX system programming handbook\",\n        \"Federated Learning: Strategies for Improving Communication Efficiency\",\n        \"Computer networking: A top-down approach featuring the internet, 3/E\",\n        \"LLVM: A Compilation Framework for Lifelong Program Analysis & Transformation\",\n        \"There’s plenty of room at the Top: What will drive computer performance after Moore’s law?\",\n        \"Scalability! But at what COST?\",\n        \"MLlib: Machine Learning in Apache Spark\",\n        \"Ray: A Distributed Framework for Emerging AI Applications\",\n        \"Congestion control in IP/TCP internetworks\",\n        \"Valgrind: a framework for heavyweight dynamic binary instrumentation\",\n        \"Conic Optimization via Operator Splitting and Homogeneous Self-Dual Embedding\",\n        \"Scikit-learn: Machine Learning in Python\",\n        \"Energy efficiency across programming languages: how do energy, time, and memory relate?\",\n        \"Ranking programming languages by energy efficiency\",\n        \"OpenFL: An open-source framework for Federated Learning\",\n        \"Error Feedback Shines when Features are Rare\",\n        \"EF21: A New, Simpler, Theoretically Better, and Practically Faster Error Feedback\",\n        \"FedJAX: Federated learning simulation with JAX\",\n        \"Python reference manual\",\n        \"NVIDIA FLARE: Federated Learning from Simulation to Real-World\",\n        \"FedNL: Making Newton-Type Methods Applicable to Federated Learning\",\n        \"The C++ Programming Language (4th ed.)\",\n        \"Data structures and network algorithms\",\n        \"The NumPy Array: A Structure for Efficient Numerical Computation\",\n        \"A New Architecture for Optimization Modeling Frameworks\",\n        \"Faster Rates for Compressed Federated Learning with Client-Variance Reduction\"\n    ],\n    \"reasoning\": \"Selected these 56 references because they represent foundational work and recent advances in Unlocking FedNL: Self-Contained Compute-Optimized Implementation, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}