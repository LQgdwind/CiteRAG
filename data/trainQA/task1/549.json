{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 50 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Qd-tree: Learning Data Layouts for Big Data Analytics\n\nPaper Abstract: Abstract. Corporations today collect data at an unprecedented and accelerating scale, making the need to run queries on large datasets increasingly important. Technologies such as columnar block-based data organization and compression have become standard practice in most commercial database systems. However, the problem of best assigning records to data blocks on storage is still open. For example, today’s systems usually partition data by arrival time into row groups, or range/hash partition the data based on selected fields. For a given workload, however, such techniques are unable to optimize for the important metric of the number of blocks accessed by a query. This metric directly relates to the I/O cost, and therefore performance, of most analytical queries. Further, they are unable to exploit additional available storage to drive this metric down further. In this paper, we propose a new framework called a query-data routing tree, or qd-tree, to address this problem, and propose two algorithms for their construction based on greedy and deep reinforcement learning techniques. Experiments over benchmark and real workloads show that a qd-tree can provide physical speedups of more than an order of magnitude compared to current blocking schemes, and can reach within 2×2\\times of the lower bound for data skipping based on selectivity, while providing complete semantic descriptions of created blocks.\n\n{retrieved_text}\n\nGenerate exactly 50 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 50\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"AutoAdmin: Self-Tuning Database Systems Technology\",\n        \"Integrating Vertical and Horizontal Partitioning into Automated Physical Database Design\",\n        \"Bridging the archipelago between row-stores and column-stores for hybrid workloads\",\n        \"Optimal column layout for hybrid workloads\",\n        \"Multidimensional binary search trees used for associative searching\",\n        \"Efficient Query Processing for Multi-Dimensionally Clustered Tables in DB2\",\n        \"To tune or not to tune?: a lightweight physical design alerter\",\n        \"An online approach to physical design tuning\",\n        \"Design and evaluation of storage organizations for read-optimized main memory databases\",\n        \"Schism: a workload-driven approach to database replication and partitioning\",\n        \"The snowflake elastic data warehouse\",\n        \"ALEX: An Updatable Adaptive Learned Index\",\n        \"Selectivity estimation for range predicates using lightweight models\",\n        \"IMPALA: Scalable Distributed Deep-RL with Importance Weighted Actor-Learner Architectures\",\n        \"Physical Database Design for Relational Databases\",\n        \"Fast loads and fast queries\",\n        \"R-trees: A dynamic index structure for spatial searching\",\n        \"Selecting an optimal set of secondary indices\",\n        \"Towards learning a partitioning advisor with deep reinforcement learning\",\n        \"Design Continuums and the Path Toward Self-Designing Key-Value Stores that Know and Learn\",\n        \"Database Cracking\",\n        \"Merging what’s cracked, cracking what’s merged: adaptive indexing in main-memory column-stores\",\n        \"The case for learned index structures\",\n        \"Learning to optimize join queries with deep reinforcement learning\",\n        \"Enhancements to SQL server column stores\",\n        \"RLlib: Abstractions for Distributed Reinforcement Learning\",\n        \"Neural Packet Classification\",\n        \"Query-based workload forecasting for self-driving database management systems\",\n        \"Neo: A Learned Query Optimizer\",\n        \"Small materialized aggregates: A light weight index structure for data warehousing\",\n        \"Ray: A distributed framework for emerging AI applications\",\n        \"Learning Multi-dimensional Indexes\",\n        \"Slalom: Coasting through raw data via adaptive partitioning and indexing\",\n        \"OpenAI Five\",\n        \"Approximate Dynamic Programming: Solving the curses of dimensionality\",\n        \"Perspectives of approximate dynamic programming\",\n        \"SWORD: scalable workload-aware data placement for transactional workloads\",\n        \"Automating Physical Database Design in a Parallel Database\",\n        \"Colt: continuous on-line tuning\",\n        \"Proximal policy optimization algorithms\",\n        \"Clay: Fine-grained adaptive partitioning for general database schemas\",\n        \"Fine-grained partitioning for aggressive data skipping\",\n        \"Skipping-oriented Partitioning for Columnar Layouts\",\n        \"Automatic database management system tuning through large-scale machine learning\",\n        \"Partitioning techniques for fine-grained indexing\",\n        \"Qd-tree: Learning Data Layouts for Big Data Analytics\",\n        \"Deep Unsupervised Cardinality Estimation\",\n        \"Advanced Partitioning Techniques for Massively Distributed Computation\",\n        \"DB2 design advisor: integrated automatic physical database design\",\n        \"Christian Garcia-Arellano\"\n    ],\n    \"reasoning\": \"Selected these 50 references because they represent foundational work and recent advances in Qd-tree: Learning Data Layouts for Big Data Analytics, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}