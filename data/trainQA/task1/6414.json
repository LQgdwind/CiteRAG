{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 50 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: TensorIR: An Abstraction for Automatic Tensorized Program Optimization\n\nPaper Abstract: Abstract. Deploying deep learning models on various devices has become an important topic. The wave of hardware specialization brings a diverse set of acceleration primitives for multi-dimensional tensor computations. These new acceleration primitives, along with the emerging machine learning models, bring tremendous engineering challenges. In this paper, we present TensorIR, a compiler abstraction for optimizing programs with these tensor computation primitives. TensorIR generalizes the loop nest representation used in existing machine learning compilers to bring tensor computation as the first-class citizen. Finally, we build an end-to-end framework on top of our abstraction to automatically optimize deep learning models for given tensor computation primitives. Experimental results show that TensorIR compilation automatically uses the tensor computation primitives for given hardware backends and delivers performance that is competitive to state-of-art hand-optimized systems across platforms.\n\n{retrieved_text}\n\nGenerate exactly 50 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 50\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Tensorflow: A system for large-scale machine learning\",\n        \"Learning to optimize halide with tree search and random programs\",\n        \"ARM Compute Library\",\n        \"Exploring the Arm dot product instructions\",\n        \"Tiramisu: A Polyhedral Compiler for Expressing Fast and Portable Code\",\n        \"Automatic kernel generation for volta tensor cores\",\n        \"XGBoost: A Scalable Tree Boosting System\",\n        \"Mxnet: A flexible and efficient machine learning library for heterogeneous distributed systems\",\n        \"TVM: An automated end-to-end optimizing compiler for deep learning\",\n        \"Learning to optimize tensor programs\",\n        \"cudnn: Efficient primitives for deep learning\",\n        \"Automatic Generation of Efficient Sparse Tensor Format Conversion Routines\",\n        \"Bert: Pre-training of deep bidirectional transformers for language understanding\",\n        \"An image is worth 16x16 words: Transformers for image recognition at scale\",\n        \"Cortex: A Compiler for Recursive Deep Learning Models\",\n        \"The Hierarchically Tiled Arrays Programming Approach\",\n        \"Fireiron: A Data-Movement-Aware Scheduling Language for GPUs\",\n        \"Deep residual learning for image recognition\",\n        \"Mobilenets: Efficient convolutional neural networks for mobile vision applications\",\n        \"Intel速 Math Kernel Library for Deep Learning Networks\",\n        \"Introduction to Intel速 Deep Learning Boost on Second Generation Intel速 Xeon速 Scalable Processors\",\n        \"In-datacenter performance analysis of a tensor processing unit\",\n        \"CUTLASS\",\n        \"The Tensor Algebra Compiler\",\n        \"When polyhedral transformations meet SIMD code generation\",\n        \"Mlir: Scaling compiler infrastructure for domain specific computation\",\n        \"Continuous control with deep reinforcement learning\",\n        \"QNNPACK: Open source library for optimized mobile deep learning\",\n        \"Playing atari with deep reinforcement learning\",\n        \"VTA: an open hardware-software stack for deep learning\",\n        \"NVIDIA Tensor Cores\",\n        \"NVIDIA TensorRT: Programmable Inference Accelerator\",\n        \"Pytorch: An imperative style, high-performance deep learning library\",\n        \"Language models are unsupervised multitask learners\",\n        \"Halide: a language and compiler for optimizing parallelism, locality, and recomputation in image processing pipelines\",\n        \"Loop-aware SLP in GCC\",\n        \"Proximal policy optimization algorithms\",\n        \"A Sparse Iteration Space Transformation Framework for Sparse Tensor Algebra\",\n        \"Very deep convolutional networks for large-scale image recognition\",\n        \"IREE\",\n        \"Triton: An Intermediate Language and Compiler for Tiled Neural Network Computations\",\n        \"Polyhedral code generation in the real world\",\n        \"Tensor comprehensions: Framework-agnostic high-performance machine learning abstractions\",\n        \"Attention is all you need\",\n        \"UNIT: Unifying tensorized instruction compilation\",\n        \"Stripe: Tensor compilation via the nested polyhedral model\",\n        \"AKG: automatic kernel generation for neural processing units using polyhedral transformations\",\n        \"Ansor: generating high-performance tensor programs for deep learning\",\n        \"AMOS: enabling automatic mapping for tensor computations on spatial accelerators with hardware abstraction\",\n        \"FlexTensor: An Automatic Schedule Exploration and Optimization Framework for Tensor Computation on Heterogeneous System\"\n    ],\n    \"reasoning\": \"Selected these 50 references because they represent foundational work and recent advances in TensorIR: An Abstraction for Automatic Tensorized Program Optimization, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}