{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 54 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: SAT Solving for Variants of First-Order Subsumption\n\nPaper Abstract: Abstract Automated reasoners, such as SAT/SMT solvers and first-order provers, are becoming the backbones of rigorous systems engineering, being used for example in applications of system verification, program synthesis, and cybersecurity. Automation in these domains crucially depends on the efficiency of the underlying reasoners towards finding proofs and/or counterexamples of the task to be enforced. In order to gain efficiency, automated reasoners use dedicated proof rules to keep proof search tractable. To this end, (variants of) subsumption is one of the most important proof rules used by automated reasoners, ranging from SAT solvers to first-order theorem provers and beyond. It is common that millions of subsumption checks are performed during proof search, necessitating efficient implementations. However, in contrast to propositional subsumption as used by SAT solvers and implemented using sophisticated polynomial algorithms, first-order subsumption in first-order theorem provers involves NP-complete search queries, turning the efficient use of first-order subsumption into a huge practical burden. In this paper we argue that the integration of a dedicated SAT solver opens up new venues for efficient implementations of first-order subsumption and related rules. We show that, by using a flexible learning approach to choose between various SAT encodings of subsumption variants, we greatly improve the scalability of first-order theorem proving. Our experimental results demonstrate that, by using a tailored SAT solver within first-order reasoning, we gain a large speedup in solving state-of-the-art benchmarks. This version of the article has been accepted for publication, after peer review but is not the Version of Record and does not reflect post-acceptance improvements, or any corrections. The Version of Record is available online at: https://doi.org/10.1007/s10703-024-00454-1\n\n{retrieved_text}\n\nGenerate exactly 54 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 54\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Accessible Software Verification with Dafny\",\n        \"Deductive Verification with Ghost Monitors\",\n        \"Trace Logic for Inductive Loop Reasoning\",\n        \"SMT-Based Model Checking for Recursive Programs\",\n        \"Ivy: Safety Verification by Interactive Generalization\",\n        \"Incremental Verification by SMT-based Summary Repair\",\n        \"Fast Approximations of Quantifier Elimination\",\n        \"Automating Modular Verification of Secure Information Flow\",\n        \"Meta-F⋆: Proof Automation with SMT, Tactics, and Metaprograms\",\n        \"WebSpec: Towards Machine-Checked Analysis of Browser Security Mechanisms\",\n        \"CheckMate: Automated Game-Theoretic Security Reasoning\",\n        \"PicoSAT Essentials\",\n        \"Z3: An Efficient SMT Solver\",\n        \"CVC5: A Versatile and Industrial-Strength SMT Solver\",\n        \"SPASS version 3.5.\",\n        \"First-Order Theorem Proving and Vampire\",\n        \"Faster, Higher, Stronger: E 2.3\",\n        \"Superposition with Structural Induction\",\n        \"Bruno Buchberger’s PhD thesis 1965: An Algorithm for Finding the Basis Elements of the Residue Class Ring of a Zero Dimensional Polynomial Ideal\",\n        \"Paramodulation-Based Theorem Proving\",\n        \"A Machine-Oriented Logic Based on the Resolution Principle\",\n        \"Rewrite-Based Equational Theorem Proving with Selection and Simplification\",\n        \"Resolve and expand\",\n        \"Term Indexing\",\n        \"On the Evaluation of Indexing Techniques for Theorem Proving\",\n        \"Simple and Efficient Clause Subsumption with Feature Vector Indexing\",\n        \"NP-Completeness of the Set Unification and Matching Problems\",\n        \"First-Order Subsumption via SAT Solving\",\n        \"SAT-Based Subsumption Resolution\",\n        \"Subsumption Demodulation in First-Order Theorem Proving\",\n        \"An extensible SAT-solver\",\n        \"CadiBack: Extracting Backbones with CaDiCaL\",\n        \"Mining definitions in kissat with kittens\",\n        \"Conflict-Driven Clause Learning SAT Solvers\",\n        \"Chaff: Engineering an Efficient SAT Solver\",\n        \"SAT Encodings of the At-Most-k Constraint. Some Old, Some New, Some Fast, Some Slow\",\n        \"Otter— the CADE-13 competition incarnations\",\n        \"AVATAR: The Architecture for First-Order Theorem Provers\",\n        \"CaDiCaL, Kissat, Paracooba, Plingeling and Treengeling entering the SAT competition 2020\",\n        \"The TPTP Problem Library and Associated Infrastructure. From CNF to TH0, TPTP v6.4.0\",\n        \"Scikit-learn: Machine learning in Python\",\n        \"Deep Learning\",\n        \"Reliable Benchmarking: Requirements and Solutions\",\n        \"GNU Parallel 2018\",\n        \"Towards Efficient Subsumption\",\n        \"On the Efficiency of Subsumption Algorithms\",\n        \"Fast Subsumption Algorithms\",\n        \"A Cardinality Solver: More Expressive Constraints for Free\",\n        \"On the Implementation of Weight Constraint Rules in Conflict-Driven ASP Solvers\",\n        \"SAT v CSP\",\n        \"Efficient algorithms for clause-learning SAT solvers\",\n        \"Strong Extension-Free Proof Systems\",\n        \"Effective Preprocessing in SAT Through Variable and Clause Elimination\",\n        \"Preprocessing in SAT solving\"\n    ],\n    \"reasoning\": \"Selected these 54 references because they represent foundational work and recent advances in SAT Solving for Variants of First-Order Subsumption, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}