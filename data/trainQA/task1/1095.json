{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 55 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Scalable Comparative Visualization of Ensembles of Call Graphs\n\nPaper Abstract: Abstract Optimizing the performance of large-scale parallel codes is critical for efficient utilization of computing resources. Code developers often explore various execution parameters, such as hardware configurations, system software choices, and application parameters, and are interested in detecting and understanding bottlenecks in different executions. They often collect hierarchical performance profiles represented as call graphs, which combine performance metrics with their execution contexts. The crucial task of exploring multiple call graphs together is tedious and challenging because of the many structural differences in the execution contexts and significant variability in the collected performance metrics (e.g., execution runtime). In this paper, we present an enhanced version of CallFlow to support the exploration of ensembles of call graphs using new types of visualizations, analysis, graph operations, and features. We introduce ensemble-Sankey, a new visual design that combines the strengths of resource-flow (Sankey) and box-plot visualization techniques. Whereas the resource-flow visualization can easily and intuitively describe the graphical nature of the call graph, the box plots overlaid on the nodes of Sankey convey the performance variability within the ensemble. Our interactive visual interface provides linked views to help explore ensembles of call graphs, e.g., by facilitating the analysis of structural differences, and identifying similar or distinct call graphs. We demonstrate the effectiveness and usefulness of our design through case studies on large-scale parallel codes.\n\n{retrieved_text}\n\nGenerate exactly 55 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 55\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Trevis: A context tree visualization & analysis framework and its use for classifying performance failure reports\",\n        \"HPCToolkit: Tools for performance analysis of optimized parallel programs\",\n        \"Scalable temporal order analysis for large scale debugging\",\n        \"Case study: Visualizing sets of evolutionary trees\",\n        \"Exploiting hardware performance counters with flow and context sensitive profiling\",\n        \"Visual graph comparison\",\n        \"Visual analytics challenges in analyzing calling context trees\",\n        \"Hatchet: Pruning the overgrowth in parallel profiles\",\n        \"There goes the neighborhood: Performance degradation due to nearby jobs\",\n        \"Caliper: Performance introspection for HPC software stacks\",\n        \"Interactive visual comparison of multiple trees\",\n        \"Run-to-run variability on Xeon Phi based Cray XC systems\",\n        \"Detecting application load imbalance on high end massively parallel systems\",\n        \"CFGExplorer: Designing a visual control flow analytics system around basic program analysis operations\",\n        \"A massively parallel infrastructure for adaptive multiscale simulations: Modeling RAS initiation pathway for cancer\",\n        \"Graphviz and Dynagraph—Static and dynamic graph drawing tools\",\n        \"How do ancestral traits shape family trees over generations?\",\n        \"The Scalasca performance toolset architecture\",\n        \"On the readability of graphs using node-link and matrix-based representations: A controlled experiment and statistical analysis\",\n        \"Considerations for visualizing comparison\",\n        \"Visual comparison for information visualization\",\n        \"A survey of multiple tree visualisation\",\n        \"Gprof: A call graph execution profiler\",\n        \"The flame graph\",\n        \"HDF5 Reference Manual September 2004.Release 1.6.3, National Center for Supercomputing Application (NCSA), University of Illinois at Urbana-Champaign\",\n        \"A study of the trade-off between reducing precision and reducing resolution for data analysis and visualization\",\n        \"Visual comparison of hierarchically organized data\",\n        \"Zoomology: Comparing two large hierarchical trees\",\n        \"Preserving command line workflow for a package management system using ASCII DAG visualization\",\n        \"State of the art of performance visualization\",\n        \"Lulesh programming model and performance ports overview\",\n        \"Supplementary materials\",\n        \"The Vampir performance analysis tool-set\",\n        \"Multidimensional scaling by optimizing goodness of fit to a nonmetric hypothesis\",\n        \"Barcodetree: Scalable comparison of multiple hierarchies\",\n        \"Aggregated dendrograms for visual comparison between many phylogenetic trees\",\n        \"Comparative visualization for parameter studies of dataset series\",\n        \"Data structures for statistical computing in Python\",\n        \"MizBee: A multiscale synteny browser\",\n        \"KOJAK–A tool set for automatic performance analysis of parallel programs\",\n        \"TreeJuxtaposer: Scalable tree comparison using Focus+ Context with guaranteed visibility\",\n        \"VIPACT: A visualization interface for analyzing calling context trees\",\n        \"Visualizing hierarchical performance profiles of parallel codes using CallFlow\",\n        \"Simulating the cosmic renaissance\",\n        \"Performance optimality or reproducibility: that is the question\",\n        \"Quantifying the effectiveness of load balance algorithms\",\n        \"Interactive Sankey diagrams\",\n        \"A design space of visualization tasks\",\n        \"The TAU parallel performance system\",\n        \"Repurposing therapeutics for COVID-19: Supercomputer-based docking to the SARS-CoV-2 viral spike protein and viral spike protein-human ACE2 interface\",\n        \"Code flows: Visualizing structural evolution of source code\",\n        \"Visualizing uncertainty in flow diagrams: A case study in product costing\",\n        \"Visualizing a moving target: A design study on task parallel programs in the presence of evolving data and concerns\",\n        \"Measuring and understanding variation in benchmark performance\",\n        \"Facilitating discourse analysis with interactive visualization\"\n    ],\n    \"reasoning\": \"Selected these 55 references because they represent foundational work and recent advances in Scalable Comparative Visualization of Ensembles of Call Graphs, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}