{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 51 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Dynamic Embedding Size Search with Minimum Regret for Streaming Recommender System\n\nPaper Abstract: Abstract. With the continuous increase of users and items, conventional recommender systems trained on static datasets can hardly adapt to changing environments. The high-throughput data requires the model to be updated in a timely manner for capturing the user interest dynamics, which leads to the emergence of streaming recommender systems. Due to the prevalence of deep learning-based recommender systems, the embedding layer is widely adopted to represent the characteristics of users, items, and other features in low-dimensional vectors. However, it has been proved that setting an identical and static embedding size is sub-optimal in terms of recommendation performance and memory cost, especially for streaming recommendations. To tackle this problem, we first rethink the streaming model update process and model the dynamic embedding size search as a bandit problem. Then, we analyze and quantify the factors that influence the optimal embedding sizes from the statistics perspective. Based on this, we propose the Dynamic Embedding Size Search (DESS) method to minimize the embedding size selection regret on both user and item sides in a non-stationary manner. Theoretically, we obtain a sublinear regret upper bound superior to previous methods. Empirical results across two recommendation tasks on four public datasets also demonstrate that our approach can achieve better streaming recommendation performance with lower memory cost and higher time efficiency.\n\n{retrieved_text}\n\nGenerate exactly 51 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 51\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Understanding training efficiency of deep learning recommendation models at scale\",\n        \"A generalization of principal component analysis\",\n        \"Stochastic multi-armed-bandit problem with non-stationary rewards\",\n        \"Smash: one-shot model architecture search through hypernetworks\",\n        \"Streamrec: a real-time recommender system\",\n        \"Streaming recommender systems\",\n        \"Terec: A temporal recommender system over tweet stream\",\n        \"Sim2Rec: A Simulator-based Decision-making Approach to Optimize Real-World Long-term User Engagement in Sequential Recommender Systems\",\n        \"Differentiable neural input search for recommender systems\",\n        \"Deep neural networks for youtube recommendations\",\n        \"Google news personalization: scalable online collaborative filtering\",\n        \"Dynamic matrix factorization with priors on unknown values\",\n        \"Real-time top-n recommendation in social streams\",\n        \"Principal components analysis\",\n        \"Mixed dimension embeddings with application to memory-efficient recommendation systems\",\n        \"The movielens datasets: History and context\",\n        \"Dynamically Expandable Graph Convolution for Streaming Recommendation\",\n        \"Ups and downs: Modeling the visual evolution of fashion trends with one-class collaborative filtering\",\n        \"Neural collaborative filtering\",\n        \"Collaborative metric learning\",\n        \"Sequential model-based optimization for general algorithm configuration\",\n        \"Robust sub-gaussian principal component analysis and width-independent schatten packing\",\n        \"Neural input search for large scale recommendation models\",\n        \"Learning multi-granular quantized embeddings for large-vocab categorical features in recommender systems\",\n        \"Randomized exploration for non-stationary stochastic linear bandits\",\n        \"Matrix factorization techniques for recommender systems\",\n        \"Bandit algorithms\",\n        \"Darts: Differentiable architecture search\",\n        \"Automated embedding size search in deep recommender systems\",\n        \"Learnable embedding sizes for recommender systems\",\n        \"Neural architecture optimization\",\n        \"OptEmbed: Learning Optimal Embedding Table for Click-through Rate Prediction\",\n        \"Probabilistic metric learning with adaptive margin for top-k recommendation\",\n        \"Ridge regression in practice\",\n        \"Efficient neural architecture search via parameters sharing\",\n        \"Weighted linear bandits for non-stationary environments\",\n        \"Real-time automatic tag recommendation\",\n        \"Recommendations for streaming data\",\n        \"Hgcf: Hyperbolic graph convolution networks for collaborative filtering\",\n        \"Hyper-parameter Optimization for Latent Spaces\",\n        \"Streaming graph neural networks via continual learning\",\n        \"Streaming Graph Neural Networks with Generative Replay\",\n        \"Streaming ranking based recommender systems\",\n        \"Neural graph collaborative filtering\",\n        \"Simple statistical gradient-following algorithms for connectionist reinforcement learning\",\n        \"Learning contextual bandits in a non-stationary environment\",\n        \"SNAS: stochastic neural architecture search\",\n        \"Collaborative knowledge base embedding for recommender systems\",\n        \"A simple approach for non-stationary linear bandits\",\n        \"Autoemb: Automated embedding dimensionality search in streaming recommendations\",\n        \"Autodim: Field-aware embedding dimension searchin recommender systems\"\n    ],\n    \"reasoning\": \"Selected these 51 references because they represent foundational work and recent advances in Dynamic Embedding Size Search with Minimum Regret for Streaming Recommender System, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}