{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 49 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Advancing Lazy-Grounding ASP Solving Techniques – Restarts, Phase Saving, Heuristics, and More\n\nPaper Abstract: Abstract Answer-Set Programming (ASP) is a powerful and expressive knowledge representation paradigm with a significant number of applications in logic-based AI. The traditional ground-and-solve approach, however, requires ASP programs to be grounded upfront and thus suffers from the so-called grounding bottleneck (i.e., ASP programs easily exhaust all available memory and thus become unsolvable). As a remedy, lazy-grounding ASP solvers have been developed, but many state-of-the-art techniques for grounded ASP solving have not been available to them yet. In this work we present, for the first time, adaptions to the lazy-grounding setting for many important techniques, like restarts, phase saving, domain-independent heuristics, and learned-clause deletion. Furthermore, we investigate their effects and in general observe a large improvement in solving capabilities and also uncover negative effects in certain cases, indicating the need for portfolio solving as known from other solvers. Under consideration for acceptance in TPLP.\n\n{retrieved_text}\n\nGenerate exactly 49 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 49\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Train scheduling with hybrid ASP\",\n        \"The fourth answer set programming competition: Preliminary report\",\n        \"The ASP system DLV2\",\n        \"WASP: A native ASP solver based on constraint learning\",\n        \"What’s a head without a body?\",\n        \"Optimization methods for the partner units problem\",\n        \"Predicting learnt clauses quality in modern SAT solvers\",\n        \"Refining restarts strategies for SAT and UNSAT\",\n        \"Evaluating CDCL restart schemes\",\n        \"Exploiting justifications for lazy grounding of answer set programs\",\n        \"Enhancing lazy grounding with lazy normalization in answer-set programming\",\n        \"telingo = ASP + time\",\n        \"I-DLV: the new intelligent grounder of DLV\",\n        \"Design and results of the fifth answer set programming competition\",\n        \"The third open answer set programming competition\",\n        \"Negation as failure\",\n        \"Partial compilation of ASP programs\",\n        \"Omiga : An open minded grounding on-the-fly answer set solver\",\n        \"Lazy model expansion: Interleaving grounding with search\",\n        \"An extensible sat-solver\",\n        \"Exploiting partial assignments for efficient evaluation of answer set programs with external source access\",\n        \"Seeking practical CDCL insights from theoretical SAT benchmarks\",\n        \"Semantics and complexity of recursive aggregates in answer set programming\",\n        \"Industrial applications of answer set programming\",\n        \"(Re)configuration using answer set programming\",\n        \"Theory solving made easy with clingo 5\",\n        \"Advances in gringo series 3\",\n        \"Domain-specific heuristics in answer set programming\",\n        \"Conflict-driven answer set solving: From theory to practice\",\n        \"An incremental answer set programming based system for finite model computation\",\n        \"Berkmin: A fast and robust SAT-solver\",\n        \"Heavy-tailed phenomena in satisfiability and constraint satisfaction problems\",\n        \"ASPeRiX, a first-order forward chaining approach for answer set computing\",\n        \"The DLV system for knowledge representation and reasoning\",\n        \"Techniques for efficient lazy-grounding ASP solving\",\n        \"Optimal speedup of las vegas algorithms\",\n        \"Goal-directed execution of answer set programs\",\n        \"Computing stable models of normal logic programs without grounding\",\n        \"Chaff: Engineering an efficient SAT solver\",\n        \"GASP: answer set programming with lazy grounding\",\n        \"A lightweight component caching scheme for satisfiability solvers\",\n        \"Efficiency, and stability of hypergraph SAT algorithms\",\n        \"Automated benchmarking of KR-systems\",\n        \"Exploiting partial knowledge in declarative domain-specific heuristics for ASP\",\n        \"Degrees of laziness in grounding - effects of lazy-grounding strategies on ASP solving\",\n        \"Introducing heuristics for lazy-grounding ASP solving\",\n        \"On the complexity of the partner units decision problem\",\n        \"Learning non-ground rules for answer-set solving\",\n        \"Blending lazy-grounding and CDNL search for answer-set solving\"\n    ],\n    \"reasoning\": \"Selected these 49 references because they represent foundational work and recent advances in Advancing Lazy-Grounding ASP Solving Techniques – Restarts, Phase Saving, Heuristics, and More, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}