{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 44 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Call Graph Evolution Analytics over a Version Series of an Evolving Software System\n\nPaper Abstract: Abstract. Software evolution analytics can be supported by generating and comparing call graph evolution information over versions of a software system. Call Graph evolution analytics can assist a software engineer when maintaining or evolving a software system. This paper proposes Call Graph Evolution Analytics to extract information from a set of Evolving Call Graphs ECG = {C‚ÄãG1,C‚ÄãG2,‚Ä¶‚ÄãC‚ÄãGN}ùê∂subscriptùê∫1ùê∂subscriptùê∫2‚Ä¶ùê∂subscriptùê∫ùëÅ\\{CG_{1},CG_{2},...CG_{N}\\} representing a Version Series VS = {V1,V2,‚Ä¶‚ÄãVN}subscriptùëâ1subscriptùëâ2‚Ä¶subscriptùëâùëÅ\\{V_{1},V_{2},...V_{N}\\} of an evolving software system. This is done using Call Graph Evolution Rules (CGERs) and Call Graph Evolution Subgraphs (CGESs). Similar to association rule mining, the CGERs are used to capture co-occurrences of dependencies in the system. Like subgraph patterns in a call graph, the CGESs are used to capture evolution of dependency patterns in evolving call graphs. Call graph analytics on the evolution in these patterns can identify potentially affected dependencies (or procedure calls) that need attention. The experiments are done on the evolving call graphs of 10 large evolving systems to support dependency evolution management. This is demonstrated with detailed results for evolving call graphs of Maven-Core‚Äôs version series.\n\n{retrieved_text}\n\nGenerate exactly 44 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 44\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Software evolution and maintenance\",\n        \"The road ahead for mining software repositories\",\n        \"The current state and future of search based software engineering\",\n        \"Constructing the call graph of a program\",\n        \"A framework for call graph construction algorithms\",\n        \"Usage of Call Graph for Representing Software Component Interactions\",\n        \"Moralising the call graph as a means of program comprehension\",\n        \"A large-scale study of call graph-based impact prediction using mutation testing\",\n        \"Toward full elasticity in distributed static analysis: the case of callgraph analysis\",\n        \"Gray-box extraction of execution graphs for anomaly detection\",\n        \"Temporal networks\",\n        \"Evolutionary network analysis: A survey\",\n        \"A survey of dynamic network flows\",\n        \"MuxViz: a tool for multilayer analysis and visualization of networks\",\n        \"On exploiting the power of time in data mining\",\n        \"Community evolution mining in dynamic social networks\",\n        \"Resume mining of communities in social network\",\n        \"Programs, life cycles, and laws of software evolution\",\n        \"Evolution of cyclomatic complexity in object oriented software\",\n        \"Control flow analysis\",\n        \"Dependency analysis for component-based software systems\",\n        \"Software analysis: A roadmap\",\n        \"Program slicing\",\n        \"Source code analysis: A road map\",\n        \"Mining association rules between sets of items in large databases\",\n        \"Predicting source code changes by mining change history\",\n        \"Mining version histories to guide software changes\",\n        \"The inevitable stability of software change\",\n        \"Predicting vulnerable software components through n-gram analysis and statistical feature selection\",\n        \"Structure and evolution of package dependency networks\",\n        \"Mining software dependency networks for agent-based simulation of software evolution\",\n        \"An empirical comparison of dependency network evolution in seven software packaging ecosystems\",\n        \"minStab: Stable Network Evolution Rule Mining for System Changeability Analysis\",\n        \"System Network Analytics: Evolution and Stable Rules of a State Series\",\n        \"System Network Complexity: Network Evolution Subgraphs of System State Series\",\n        \"System Evolution Analytics: Evolution and Change Pattern Mining of Inter-Connected Entities\",\n        \"System Evolution Analytics: Deep Evolution and Change Learning of Inter-Connected Entities\",\n        \"SysEvoRecomd: Graph Evolution and Change Learning based System Evolution Recommender\",\n        \"SysEvoRecomd: Network Reconstruction by Graph Evolution and Change Learning\",\n        \"System Neural Network: Evolution and Change based Structure Learning\",\n        \"Subset WSDL to access Subset Service for Analysis\",\n        \"Automated Web Service Change Management AWSCM-A tool\",\n        \"Web Service Slicing: Intra and Inter-operational Analysis to Test Changes\",\n        \"Service Evolution Analytics: Change and Evolution Mining of a Distributed system\"\n    ],\n    \"reasoning\": \"Selected these 44 references because they represent foundational work and recent advances in Call Graph Evolution Analytics over a Version Series of an Evolving Software System, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}