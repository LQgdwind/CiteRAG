{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 55 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: kTrans: Knowledge-Aware Transformer for Binary Code Embedding\n\nPaper Abstract: Abstract Binary Code Embedding (BCE) has important applications in various reverse engineering tasks such as binary code similarity detection, type recovery, control-flow recovery and data-flow analysis. Recent studies have shown that the Transformer model can comprehend the semantics of binary code to support downstream tasks. However, existing models overlooked the prior knowledge of assembly language. In this paper, we propose a novel Transformer-based approach, namely kTrans, to generate knowledge-aware binary code embedding. By feeding explicit knowledge as additional inputs to the Transformer, and fusing implicit knowledge with a novel pre-training task, kTrans provides a new perspective to incorporating domain knowledge into a Transformer framework. We inspect the generated embeddings with outlier detection and visualization, and also apply kTrans to 3 downstream tasks: Binary Code Similarity Detection (BCSD), Function Type Recovery (FTR) and Indirect Call Recognition (ICR). Evaluation results show that kTrans can generate high-quality binary code embeddings, and outperforms state-of-the-art (SOTA) approaches on downstream tasks by 5.2%, 6.8%, and 12.6% respectively. kTrans is publicly available at: https://github.com/Learner0x5a/kTrans-release\n\n{retrieved_text}\n\nGenerate exactly 55 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 55\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Unified pre-training for program understanding and generation\",\n        \"Learning to represent programs with graphs\",\n        \"code2seq: Generating sequences from structured representations of code\",\n        \"code2vec: Learning distributed representations of code\",\n        \"Binbert: Binary code understanding with a fine-tunable and execution-aware transformer\",\n        \"Program synthesis with large language models\",\n        \"Language models are few-shot learners\",\n        \"Neural nets can learn function type signatures from binaries\",\n        \"Empirical evaluation of gated recurrent neural networks on sequence modeling\",\n        \"Bert: Pre-training of deep bidirectional transformers for language understanding\",\n        \"Asm2vec: Boosting static representation robustness for binary clone search against code obfuscation and compiler optimization\",\n        \"Graph-based comparison of executable objects (english version)\",\n        \"Scalable graph-based bug search for firmware images\",\n        \"CodeBERT: A pre-trained model for programming and natural languages\",\n        \"Binhunt: Automatically finding semantic differences in binary programs\",\n        \"Vulseeker: a semantic learning based vulnerability seeker for cross-platform binary\",\n        \"Deepvsa: Facilitating value-set analysis with deep learning for postmortem program analysis\",\n        \"Binprov: Binary code provenance identification without disassembly\",\n        \"IDA Pro: a cross-platform multi-processor disassembler and debugger\",\n        \"Long short-term memory\",\n        \"Training compute-optimal large language models\",\n        \"Large-scale malware indexing using function-call graphs\",\n        \"What makes multi-modal learning better than single (provably)\",\n        \"Summarizing source code using a neural attention model\",\n        \"Revisiting binary code similarity analysis using interpretable feature engineering and lessons learned\",\n        \"A mutual information maximization perspective of language representation learning\",\n        \"Distributed representations of sentences and documents\",\n        \"Learning binary code with deep learning to detect software weakness\",\n        \"Palmtree: Learning an assembly language model for instruction embedding\",\n        \"Œ±ùõº\\\\alphadiff: cross-version binary code similarity detection with dnn\",\n        \"Roberta: A robustly optimized bert pretraining approach\",\n        \"Vulhawk: Cross-architecture vulnerability detection with entropy-based binary code search\",\n        \"How machine learning is solving the binary function similarity problem\",\n        \"Investigating graph embedding neural networks with unsupervised features extraction for binary analysis\",\n        \"Safe: Self-attentive function embeddings for binary similarity\",\n        \"Mixed precision training\",\n        \"Efficient estimation of word representations in vector space\",\n        \"Capstone: Next-gen disassembly framework\",\n        \"Gpt-4 technical report\",\n        \"o-glassesx: Compiler provenance recovery with attention mechanism from a short code fragment\",\n        \"Xda: Accurate, robust disassembly with transfer learning\",\n        \"Glove: Global vectors for word representation\",\n        \"Deep contextualized word representations\",\n        \"Deepbugs: a learning approach to name-based bug detection\",\n        \"Improving language understanding by generative pre-training\",\n        \"Language models are unsupervised multitask learners\",\n        \"Deepspeed: System optimizations enable training deep learning models with over 100 billion parameters\",\n        \"Recognizing functions in binaries with neural networks\",\n        \"Pythia: Ai-assisted code completion system\",\n        \"jtrans: jump-aware transformer for binary code similarity detection\",\n        \"Deeprefiner: Multi-layer android malware detection system applying deep neural networks\",\n        \"Neural network-based graph embedding for cross-platform binary code similarity detection\",\n        \"Order matters: Semantic-aware neural networks for binary code similarity detection\",\n        \"Combo: Pre-training representations of binary code using contrastive learning\",\n        \"Callee: Recovering call graphs for binaries with transfer and contrastive learning\"\n    ],\n    \"reasoning\": \"Selected these 55 references because they represent foundational work and recent advances in kTrans: Knowledge-Aware Transformer for Binary Code Embedding, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}