{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 54 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Program Analysis via Multiple Context Free Language Reachability\n\nPaper Abstract: Abstract. Context-free language (CFL) reachability is a standard approach in static analyses, where the analysis question (e.g., is there a dataflow from xùë•x to yùë¶y?) is phrased as a language reachability problem on a graph Gùê∫G wrt a CFL ‚Ñí‚Ñí\\mathcal{L}. However, CFLs lack the expressiveness needed for high analysis precision. On the other hand, common formalisms for context-sensitive languages are too expressive, in the sense that the corresponding reachability problem becomes undecidable. Are there useful context-sensitive language-reachability models for static analysis? In this paper, we introduce Multiple Context-Free Language (MCFL) reachability as an expressive yet tractable model for static program analysis. MCFLs form an infinite hierarchy of mildly context sensitive languages parameterized by a dimension dùëëd and a rank rùëür. Larger dùëëd and rùëür yield progressively more expressive MCFLs, offering tunable analysis precision. We showcase the utility of MCFL reachability by developing a family of MCFLs that approximate interleaved Dyck reachability, a common but undecidable static analysis problem. Given the increased expressiveness of MCFLs, one natural question pertains to their algorithmic complexity, i.e., how fast can MCFL reachability be computed? We show that the problem takes O‚Äã(n2‚Äãd+1)ùëÇsuperscriptùëõ2ùëë1O(n^{2d+1}) time on a graph of nùëõn nodes when r=1ùëü1r=1, and O‚Äã(nd‚Äã(r+1))ùëÇsuperscriptùëõùëëùëü1O(n^{d(r+1)}) time when r>1ùëü1r>1. Moreover, we show that when r=1ùëü1r=1, even the simpler membership problem has a lower bound of n2‚Äãdsuperscriptùëõ2ùëën^{2d} based on the Strong Exponential Time Hypothesis, while reachability for d=1ùëë1d=1 has a lower bound of n3superscriptùëõ3n^{3} based on the combinatorial Boolean Matrix Multiplication Hypothesis. Thus, for r=1ùëü1r=1, our algorithm is optimal within a factor nùëõn for all levels of the hierarchy based on the dimension dùëëd (and fully optimal for d=1ùëë1d=1). We implement our MCFL reachability algorithm and evaluate it by underapproximating interleaved Dyck reachability for a standard taint analysis for Android. When combined with existing overapproximate methods, MCFL reachability discovers all tainted information on 8 out of 11 benchmarks, while it has remarkable coverage (confirming 94.3%percent94.394.3\\% of the reachable pairs reported by the overapproximation) on the remaining 3. To our knowledge, this is the first report of high and provable coverage for this challenging benchmark set.\n\n{retrieved_text}\n\nGenerate exactly 54 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 54\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"T. J. Watson Libraries for Analysis (WALA)\",\n        \"Analysis of recursive state machines\",\n        \"Model-Checking Bounded Multi-Pushdown Systems\",\n        \"A few billion lines of code later: using static analysis to find bugs in the real world\",\n        \"Inter-procedural data-flow analysis with IFDS/IDE and Soot\",\n        \"Multi-pushdown Languages and Grammars\",\n        \"Tight bounds for reachability problems on one-counter and pushdown systems\",\n        \"Optimal Dyck Reachability for Data-Dependence and Alias Analysis\",\n        \"Faster Algorithms for Dynamic Algebraic Queries in Basic RSMs with Constant Treewidth\",\n        \"Faster Algorithms for Weighted Recursive State Machines\",\n        \"Subcubic Algorithms for Recursive State Machines\",\n        \"Subcubic Certificates for CFL Reachability\",\n        \"An introduction to multiple context free grammars for linguists\",\n        \"A Better Approximation for Interleaved Dyck Reachability\",\n        \"Mutual Refinements of Context-Free Language Reachability\",\n        \"Compositional may-must program analysis: unleashing the power of alternation\",\n        \"On the Cubic Bottleneck in Subtyping and Flow Analysis\",\n        \"False Positives in Static Code Analysis\",\n        \"Scalable and Precise Taint Analysis for Android\",\n        \"An Introduction to Tree Adjoining Grammar\",\n        \"The Fine-Grained Complexity of CFL Reachability\",\n        \"The Mathematics of Language\",\n        \"Reachability of scope-bounded multistack pushdown systems\",\n        \"Finding real bugs in big programs with incorrectness logic\",\n        \"Context-Sensitive points-to analysis: is it worth it?\",\n        \"Single-Source-Single-Target Interleaved-Dyck Reachability via Integer Linear Programming\",\n        \"Precision-Preserving yet Fast Object-Sensitive Pointer Analysis with Partial Context Sensitivity\",\n        \"The Tree Width of Auxiliary Storage\",\n        \"The Fine-Grained and Parallel Complexity of Andersen‚Äôs Pointer Analysis\",\n        \"FlowCFL: Generalized Type-Based Reachability Analysis: Graph Reduction and Equivalence of CFL-Based and Type-Based Reachability\",\n        \"CFL/Dyck Reachability: An Algorithmic Perspective\",\n        \"Generalized Phrase Structure Grammars, Head Grammars, and Natural Language\",\n        \"Psalm Documentation\",\n        \"Context-Bounded Model Checking of Concurrent Software\",\n        \"Independent Parallelism in Finite Copying Parallel Rewriting Systems\",\n        \"Type-based Flow Analysis: From Polymorphic Subtyping to CFL-reachability\",\n        \"Program Analysis via Graph Reachability\",\n        \"Undecidability of context-sensitive data-dependence analysis\",\n        \"Precise interprocedural dataflow analysis via graph reachability\",\n        \"On multiple context-free grammars\",\n        \"Pointer Analysis\",\n        \"Context-, flow-, and field-sensitive data-flow analysis using synchronized Pushdown systems\",\n        \"Refinement-Based Context-Sensitive Points-to Analysis for Java\",\n        \"Demand-Driven Points-to Analysis for Java\",\n        \"Parallel Pointer Analysis with CFL-Reachability\",\n        \"Conditional Dyck-CFL Reachability Analysis for Complete and Efficient Library Summarization\",\n        \"A Robust Class of Context-Sensitive Languages\",\n        \"Characterizing Structural Descriptions Produced by Various Grammatical Formalisms\",\n        \"A new algorithm for optimal 2-constraint satisfaction and its implications\",\n        \"ON SOME FINE-GRAINED QUESTIONS IN ALGORITHMS AND COMPLEXITY\",\n        \"Subcubic Equivalences Between Path, Matrix, and Triangle Problems\",\n        \"Scaling CFL-Reachability-Based Points-To Analysis Using Context-Sensitive Must-Not-Alias Analysis\",\n        \"Graph-Theoretic Methods in Database Theory\",\n        \"Context-Sensitive Data-Dependence Analysis via Linear Conjunctive Language Reachability\"\n    ],\n    \"reasoning\": \"Selected these 54 references because they represent foundational work and recent advances in Program Analysis via Multiple Context Free Language Reachability, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}