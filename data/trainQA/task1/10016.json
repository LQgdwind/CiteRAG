{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 50 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: DASICS: Enhancing Memory Protection with Dynamic Compartmentalization\n\nPaper Abstract: Abstract In the existing software development ecosystem, security issues introduced by third-party code cannot be overlooked. Among these security concerns, memory access vulnerabilities stand out prominently, leading to risks such as the theft or tampering of sensitive data. To address this issue, software-based defense mechanisms have been established at the programming language, compiler, and operating system levels. However, as a trade-off, these mechanisms significantly reduce software execution efficiency. Hardware-software co-design approaches have sought to either construct entirely isolated trusted execution environments or attempt to partition security domains within the same address space. While such approaches enhance efficiency compared to pure software methods, they also encounter challenges related to granularity of protection, performance overhead, and portability. In response to these challenges, we present the DASICS (Dynamic in-Address-Space Isolation by Code Segments) secure processor design, which offers dynamic and flexible security protection across multiple privilege levels, addressing data flow protection, control flow protection, and secure system calls. We have implemented hardware FPGA prototypes and software QEMU simulator prototypes based on DASICS, along with necessary modifications to system software for adaptability. We illustrate the protective mechanisms and effectiveness of DASICS with two practical examples and provide potential real-world use cases where DASICS could be applied.\n\n{retrieved_text}\n\nGenerate exactly 50 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 50\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Amd sev-snp strengthening vm isolation with integrity protection and more.\",\n        \"Arm confidential compute architecture\",\n        \"Arm instruction set reference guide-branch target identification.\",\n        \"Arm pointer authentication on arm.\",\n        \"Armv8.5-a, memory tagging extension,\",\n        \"Chromium-security.\",\n        \"Hardening c/c++ programs part i – stack protector.\",\n        \"Intel, control flow enforcement technology (cet),\",\n        \"Intel memory protection keys.\",\n        \"Intel software guard extensions programming reference.\",\n        \"Nutshell official documentation.\",\n        \"The risc-v instruction set manual, volume ii: Privileged architecture, document version 1.12-draft.\",\n        \"Support for intel® memory protection extensions (intel® mpx) technology.\",\n        \"Trustzone technology for the armv8-m architecture version 2.0,\",\n        \"Xiangshan official documentation.\",\n        \"Control-flow integrity principles, implementations, and applications\",\n        \"SecureCells: A Secure Compartmentalized Architecture\",\n        \"Jump-oriented programming: a new class of code-reuse attack\",\n        \"Control-flow integrity: Precision, security, and performance\",\n        \"CHERI JNI: Sinking the Java Security Model into the C\",\n        \"{{{PKU}}} pitfalls: Attacks on {{{PKU-based}}} memory isolation systems\",\n        \"Buffer overflows: Attacks and defenses for the vulnerability of the decade\",\n        \"The performance cost of shadow stacks and stack canaries\",\n        \"The matter of heartbleed\",\n        \"Scalable memory protection in the {{{PENGLAI}}} enclave\",\n        \"Analysis of openssl heartbleed vulnerability for embedded systems\",\n        \"{EPK}: Scalable and Efficient Memory Protection Keys\",\n        \"Data-oriented programming: On the expressiveness of non-control data attacks\",\n        \"Towards efficient heap overflow discovery\",\n        \"Keystone: An open framework for architecting trusted execution environments\",\n        \"Aslr-guard: Stopping address space leakage for code reuse attacks\",\n        \"Address space layout randomization next generation\",\n        \"The rust language\",\n        \"Ending null pointer crashes\",\n        \"Going beyond the limits of sfi: Flexible and secure hardware-assisted in-process isolation with hfi\",\n        \"libmpk: Software Abstraction for Intel Memory Protection Keys (Intel {MPK})\",\n        \"Return-oriented programming\",\n        \"Return-oriented programming: Systems, languages, and applications\",\n        \"Donky: Domain keys–efficient {{{In-Process}}} isolation for {{{RISC-V}}} and x86\",\n        \"{{{AddressSanitizer}}}: A fast address sanity checker\",\n        \"Memorysanitizer: fast detector of uninitialized memory use in c++\",\n        \"Sok: Eternal war in memory\",\n        \"{ERIM}: Secure, Efficient In-process Isolation with Protection Keys ({{{{{mpk}}}}})\",\n        \"CODOMs: protecting software with code-centric memory domains\",\n        \"Risk assessment of buffer heartbleed over-read vulnerabilities\",\n        \"Fast Protection-Domain Crossing in the CHERI Capability-System Architecture\",\n        \"Cheri: A hybrid capability-system architecture for scalable software compartmentalization\",\n        \"Cornucopia: Temporal Safety for CHERI Heaps\",\n        \"The CHERI capability model: Revisiting RISC in an age of risk\",\n        \"Impulp: A hardware approach for in-process memory protection via user-level partitioning\"\n    ],\n    \"reasoning\": \"Selected these 50 references because they represent foundational work and recent advances in DASICS: Enhancing Memory Protection with Dynamic Compartmentalization, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}