{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 47 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: A Novel Training Protocol for Performance Predictors of Evolutionary Neural Architecture Search Algorithms\n\nPaper Abstract: Abstract Evolutionary Neural Architecture Search (ENAS) can automatically design the architectures of Deep Neural Networks (DNNs) using evolutionary computation algorithms. However, most ENAS algorithms require intensive computational resource, which is not necessarily available to the users interested. Performance predictors are a type of regression models which can assist to accomplish the search, while without exerting much computational resource. Despite various performance predictors have been designed, they employ the same training protocol to build the regression models: 1) sampling a set of DNNs with performance as the training dataset, 2) training the model with the mean square error criterion, and 3) predicting the performance of DNNs newly generated during the ENAS. In this paper, we point out that the three steps constituting the training protocol are not well though-out through intuitive and illustrative examples. Furthermore, we propose a new training protocol to address these issues, consisting of designing a pairwise ranking indicator to construct the training target, proposing to use the logistic regression to fit the training samples, and developing a differential method to building the training instances. To verify the effectiveness of the proposed training protocol, four widely used regression models in the field of machine learning have been chosen to perform the comparisons on two benchmark datasets. The experimental results of all the comparisons demonstrate that the proposed training protocol can significantly improve the performance prediction accuracy against the traditional training protocols.\n\n{retrieved_text}\n\nGenerate exactly 47 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 47\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Deep learning\",\n        \"Reducing the dimensionality of data with neural networks\",\n        \"Imagenet classification with deep convolutional neural networks\",\n        \"Optical flow estimation: An error analysis of gradient-based methods with local optimization\",\n        \"Deep residual learning for image recognition\",\n        \"Densely connected convolutional networks\",\n        \"Neural architecture search: A survey\",\n        \"Completely automated cnn architecture design based on blocks\",\n        \"Designing neural network architectures using reinforcement learning\",\n        \"Neural architecture search with reinforcement learning\",\n        \"Darts: Differentiable architecture search\",\n        \"Genetic CNN\",\n        \"Large-scale evolution of image classifiers\",\n        \"Hierarchical representations for efficient architecture search\",\n        \"A genetic programming approach to designing convolutional neural network architectures\",\n        \"Evolving deep convolutional neural networks for image classification\",\n        \"Evolutionary Algorithms in Theory and Practice: Evolution Strategies, Evolutionary Programming, Genetic Algorithms\",\n        \"Genetic Programming: An Introduction\",\n        \"Theory of genetic algorithms\",\n        \"Two_arch2: an improved two-archive algorithm for many-objective optimization\",\n        \"IGD indicator-based evolutionary algorithm for many-objective optimization problems\",\n        \"A new two-stage evolutionary algorithm for many-objective optimization\",\n        \"Learning multiple layers of features from tiny images\",\n        \"Evolving deep convolutional neural networks by variable-length particle swarm optimization for image classification\",\n        \"Freeze-thaw bayesian optimization\",\n        \"Speeding up automatic hyperparameter optimization of deep neural networks by extrapolation of learning curves.\",\n        \"Learning curve prediction with Bayesian neural networks\",\n        \"Efficient neural architecture search via parameter sharing\",\n        \"TAPAS: train-less accuracy predictor for architecture search\",\n        \"Accelerating neural architecture search using performance prediction\",\n        \"Peephole: Predicting network performance before training\",\n        \"Surrogate-assisted evolutionary deep learning using an end-to-end random forest-based performance predictor\",\n        \"Analysis of the behavior of a class of genetic adaptive systems\",\n        \"Genetic algorithms, tournament selection, and the effects of noise\",\n        \"Tensorflow: A system for large-scale machine learning\",\n        \"Pytorch: An imperative style, high-performance deep learning library\",\n        \"Least squares support vector machine classifiers\",\n        \"Greedy function approximation: a gradient boosting machine\",\n        \"Learning decision tree classifiers\",\n        \"Classification and regression by randomforest\",\n        \"Scikit-learn: Machine learning in python\",\n        \"Selecting a classification method by cross-validation\",\n        \"Impurity measures in databases\",\n        \"Information gain and a general measure of correlation\",\n        \"Induction of decision trees\",\n        \"Boosting algorithms as gradient descent\",\n        \"On the training of radial basis function classifiers\"\n    ],\n    \"reasoning\": \"Selected these 47 references because they represent foundational work and recent advances in A Novel Training Protocol for Performance Predictors of Evolutionary Neural Architecture Search Algorithms, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}