{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 52 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: NVTraverse: In NVRAM Data Structures, the Destination is More Important than the Journey\n\nPaper Abstract: Abstract. The recent availability of fast, dense, byte-addressable non-volatile memory has led to increasing interest in the problem of designing and specifying durable data structures that can recover from system crashes. However, designing durable concurrent data structures that are efficient and also satisfy a correctness criterion has proven to be very difficult, leading many algorithms to be inefficient or incorrect in a concurrent setting. In this paper, we present a general transformation that takes a lock-free data structure from a general class called traversal data structure (that we formally define) and automatically transforms it into an implementation of the data structure for the NVRAM setting that is provably durably linearizable and highly efficient. The transformation hinges on the observation that many data structure operations begin with a traversal phase that does not need to be persisted, and thus we only begin persisting when the traversal reaches its destination. We demonstrate the transformation’s efficiency through extensive measurements on a system with Intel’s recently released Optane DC persistent memory, showing that it can outperform competitors on many workloads.\n\n{retrieved_text}\n\nGenerate exactly 52 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 52\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Strict linearizability and the power of aborting\",\n        \"Arm architecture reference manual armv8, 2018.\",\n        \"Nesting-safe recoverable linearizability: Modular constructions for non-volatile memory\",\n        \"Delay-free concurrency on faulty persistent memory,\",\n        \"Robust shared objects for non-volatile main memory\",\n        \"The parallel persistent memory model\",\n        \"A template for implementing fast lock-free trees using htm\",\n        \"A general technique for non-blocking trees\",\n        \"Atlas: Leveraging locks for non-volatile memory consistency\",\n        \"Nvmove: Helping programmers move to byte-based persistence\",\n        \"Persistent b+-trees in non-volatile main memory\",\n        \"Nv-heaps: Making persistent objects fast and safe with next-generation, non-volatile memories\",\n        \"Efficient logging in non-volatile memory by exploiting coherency protocols\",\n        \"The inherent cost of remembering consistently\",\n        \"Benchmarking cloud serving systems with ycsb\",\n        \"Romulus: Efficient algorithms for persistent transactional memory\",\n        \"Asynchronized concurrency: The secret to scaling concurrent search data structures\",\n        \"Log-free concurrent data structures\",\n        \"Loft: Lock-free transactional data structures\",\n        \"Non-blocking binary search trees\",\n        \"A persistent lock-free queue for non-volatile memory\",\n        \"Robust emulations of shared memory in a crash-recovery model\",\n        \"A pragmatic implementation of non-blocking linked-lists\",\n        \"A simple optimistic skiplist algorithm\",\n        \"Linearizability: A correctness condition for concurrent objects\",\n        \"Linearizability of persistent memory objects under a full-system-crash failure model\",\n        \"High-performance transactions for persistent memories\",\n        \"Wort: Write optimal radix tree for persistent memory storage systems\",\n        \"Recipe: converting concurrent dram indexes to persistent-memory indexes\",\n        \"Nv-tree: An efficient disk-based index for approximate search in very large high-dimensional collections\",\n        \"Dudetm: Building durable transactions with decoupling for persistent memory\",\n        \"ido: Compiler-directed failure atomicity for nonvolatile memory\",\n        \"Persistent memory transactions\",\n        \"Safe memory reclamation for dynamic lock-free objects using atomic reads and writes\",\n        \"Simple, fast, and practical non-blocking and blocking concurrent queue algorithms\",\n        \"Fast concurrent lock-free binary search trees\",\n        \"Persistence semantics for weak memory: Integrating epoch persistency with the tso memory model\",\n        \"Persistency semantics of the intel-x86 architecture\",\n        \"Weak persistency semantics from the ground up: Formalising the persistency semantics of armv8 and transactional models\",\n        \"Onefile: A wait-free persistent transactional memory\",\n        \"Autopersist: an easy-to-use java nvm framework based on reachability\",\n        \"Persistent memory programming, 2018.\",\n        \"A practical wait-free simulation for lock-free data structures\",\n        \"Consistent and durable data structures for non-volatile byte-addressable memory\",\n        \"Mnemosyne: Lightweight persistent memory\",\n        \"Scalable logging through emerging non-volatile memory\",\n        \"Easy lock-free indexing in non-volatile memory\",\n        \"Architecture-aware, high performance transaction for persistent memory\",\n        \"{{{NOVA}}}: A log-structured file system for hybrid volatile/non-volatile main memories\",\n        \"Nv-tree: Reducing consistency cost for nvm-based single level systems\",\n        \"Optimizing persistent memory transactions\",\n        \"Efficient lock-free durable sets - under review.\"\n    ],\n    \"reasoning\": \"Selected these 52 references because they represent foundational work and recent advances in NVTraverse: In NVRAM Data Structures, the Destination is More Important than the Journey, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}