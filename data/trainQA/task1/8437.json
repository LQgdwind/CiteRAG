{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 50 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: RescueSNN: Enabling Reliable Executions on Spiking Neural Network Accelerators under Permanent Faults\n\nPaper Abstract: Abstract To maximize the performance and energy efficiency of Spiking Neural Network (SNN) processing on resource-constrained embedded systems, specialized hardware accelerators/chips are employed. However, these SNN chips may suffer from permanent faults which can affect the functionality of weight memory and neuron behavior, thereby causing potentially significant accuracy degradation and system malfunctioning. Such permanent faults may come from manufacturing defects during the fabrication process, and/or from device/transistor damages (e.g., due to wear out) during the run-time operation. However, the impact of permanent faults in SNN chips and the respective mitigation techniques have not been thoroughly investigated yet. Toward this, we propose RescueSNN, a novel methodology to mitigate permanent faults in the compute engine of SNN chips without requiring additional retraining, thereby significantly cutting down the design time and retraining costs, while maintaining the throughput and quality. The key ideas of our RescueSNN methodology are (1) analyzing the characteristics of SNN under permanent faults; (2) leveraging this analysis to improve the SNN fault-tolerance through effective fault-aware mapping (FAM); and (3) devising lightweight hardware enhancements to support FAM. Our FAM technique leverages the fault map of SNN compute engine for (i) minimizing weight corruption when mapping weight bits on the faulty memory cells, and (ii) selectively employing faulty neurons that do not cause significant accuracy degradation to maintain accuracy and throughput, while considering the SNN operations and processing dataflow. The experimental results show that our RescueSNN improves accuracy by up to 80% while maintaining the throughput reduction below 25% in high fault rate (e.g., 0.5 of the potential fault locations), as compared to running SNNs on the faulty chip without mitigation. In this manner, the embedded systems that employ RescueSNN-enhanced chips can efficiently ensure reliable executions against permanent faults during their operational lifetime. \\helveticabold 1 Keywords: spiking neural networks, accelerators, fault tolerance, manufacturing defects, reliability, resilience, permanent faults.\n\n{retrieved_text}\n\nGenerate exactly 50 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 50\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"TrueNorth: Design and tool flow of a 65 mw 1 million neuron programmable neurosynaptic chip\",\n        \"Defender: A low overhead and efficient fault-tolerant mechanism for reliable on-chip router\",\n        \"Spiking neural network integrated circuits: A review of trends and future directions\",\n        \"Loihi: A neuromorphic manycore processor with on-chip learning\",\n        \"Unsupervised learning of digit recognition using spike-timing-dependent plasticity\",\n        \"Spiking neuron hardware-level fault modeling\",\n        \"Fault diagnosis of wafer acceptance test and chip probing between front-end-of-line and back-end-of-line processes\",\n        \"A 0.086-mm2 12.7-pj/sop 64k-synapse 256-neuron online-learning digital spiking neuromorphic processor in 28-nm cmos\",\n        \"Robust machine learning systems: Reliability and security for deep neural networks\",\n        \"Robust computing for machine learning-based systems\",\n        \"BindsNET: A machine learning-oriented spiking neural networks library in python\",\n        \"Lattice map spiking neural networks (lm-snns) for clustering and classifying image data\",\n        \"Which model to use for cortical spiking neurons?\",\n        \"Dynamic spike bundling for energy-efficient spiking neural networks\",\n        \"The use of triple-modular redundancy to improve computer reliability\",\n        \"Networks of spiking neurons: The third generation of neural network models\",\n        \"Multiple permanent faults mitigation through bit-shuffling for network-on-chip architecture\",\n        \"BiSuT: A noc-based bit-shuffling technique for multiple permanent faults mitigation\",\n        \"Spyketorch: Efficient simulation of convolutional spiking neural networks with at most one spike per neuron\",\n        \"SpiNNaker: A 1-w 18-core system-on-chip for massively-parallel neural network simulation\",\n        \"T2FSNN: Deep spiking neural networks with time-to-first-spike coding\",\n        \"Deep learning with spiking neurons: Opportunities and challenges\",\n        \"ReSpawn: Energy-efficient fault-tolerance for spiking neural networks considering unreliable memories\",\n        \"SparkXD: A framework for resilient and energy-efficient spiking neural network inference using approximate DRAM\",\n        \"EnforceSNN: Enabling resilient and energy-efficient spiking neural network inference considering approximate DRAMs for embedded systems\",\n        \"SoftSNN: Low-cost fault tolerance for spiking neural network accelerators under soft errors\",\n        \"FSpiNN: An optimization framework for memory-efficient and energy-efficient spiking neural networks\",\n        \"Q-SpiNN: A framework for quantizing spiking neural networks\",\n        \"SpikeDyn: A framework for energy-efficient spiking neural networks with continual and unsupervised learning capabilities in dynamic environments\",\n        \"lpSpikeCon: Enabling low-precision spiking neural network processing for efficient unsupervised continual learning on autonomous agents\",\n        \"Mantis: Enabling energy-efficient autonomous mobile agents with spiking neural networks\",\n        \"TopSpark: A timestep optimization methodology for energy-efficient spiking neural networks on autonomous mobile agents\",\n        \"Methods for fault tolerance in networks-on-chip\",\n        \"On the self-repair role of astrocytes in STDP enabled unsupervised SNNs\",\n        \"Exploring neuromorphic computing based on spiking neural networks: Algorithms to hardware\",\n        \"STDP-based pruning of connections and weight quantization in spiking neural networks for energy-efficient recognition\",\n        \"Resilience and robustness of spiking neural networks for neuromorphic systems\",\n        \"Neuron fault tolerance in spiking neural networks\",\n        \"Spike timing dependent plasticity based enhanced self-learning for efficient pattern recognition in spiking neural networks\",\n        \"Reliability, faults, and fault tolerance\",\n        \"Energy and policy considerations for deep learning in NLP\",\n        \"Energy and policy considerations for modern deep learning research\",\n        \"Circuit and method for rapid checking of error correction codes using cyclic redundancy check US Patent 6,092,231\",\n        \"Deep learning in spiking neural networks\",\n        \"Multicore soft error rate stabilization using adaptive dual modular redundancy\",\n        \"Special session: Reliability of hardware-implemented spiking neural networks (SNN)\",\n        \"Efficient design-for-test approach for networks-on-chip\",\n        \"A survey on design approaches to circumvent permanent faults in networks-on-chip\",\n        \"Hybrid feature selection for wafer acceptance test parameters in semiconductor manufacturing\",\n        \"Analyzing and mitigating the impact of permanent faults on a systolic array based neural network accelerator\"\n    ],\n    \"reasoning\": \"Selected these 50 references because they represent foundational work and recent advances in RescueSNN: Enabling Reliable Executions on Spiking Neural Network Accelerators under Permanent Faults, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}