{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 54 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Fully Autonomous Programming with Large Language Models\n\nPaper Abstract: Abstract. Current approaches to program synthesis with Large Language Models (LLMs) exhibit a “near miss syndrome”: they tend to generate programs that semantically resemble the correct answer (as measured by text similarity metrics or human evaluation), but achieve a low or even zero accuracy as measured by unit tests due to small imperfections, such as the wrong input or output format. This calls for an approach known as Synthesize, Execute, Debug (SED), whereby a draft of the solution is generated first, followed by a program repair phase addressing the failed tests. To effectively apply this approach to instruction-driven LLMs, one needs to determine which prompts perform best as instructions for LLMs, as well as strike a balance between repairing unsuccessful programs and replacing them with newly generated ones. We explore these trade-offs empirically, comparing replace-focused, repair-focused, and hybrid debug strategies, as well as different template-based and model-based prompt-generation techniques. We use OpenAI Codex as the LLM and Program Synthesis Benchmark 2 as a database of problem descriptions and tests for evaluation. The resulting framework outperforms both conventional usage of Codex without the repair phase and traditional genetic programming approaches.\n\n{retrieved_text}\n\nGenerate exactly 54 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 54\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Toward Automatic Program Synthesis\",\n        \"Interpretable, Verifiable, and Robust Reinforcement Learning via Program Synthesis\",\n        \"A Survey of On-Device Machine Learning: An Algorithms and Learning Theory Perspective\",\n        \"Systematic Literature Review: XAI and Clinical Decision Support\",\n        \"The Role of Explainability in Assuring Safety of Machine Learning in Healthcare\",\n        \"Fundamentals of Deductive Program Synthesis\",\n        \"Syntax-Guided Synthesis\",\n        \"A Survey of Genetic Programming and Its Applications\",\n        \"Evaluating Large Language Models Trained on Code\",\n        \"Competition-Level Code Generation with AlphaCode\",\n        \"CodeBLEU: A Method for Automatic Evaluation of Code Synthesis\",\n        \"Neurosymbolic Repair for Low-Code Formula Languages\",\n        \"A Survey of Machine Learning for Big Code and Naturalness\",\n        \"Latent Execution for Neural Program Synthesis Beyond Domain-Specific Languages\",\n        \"FlashMeta: A Framework for Inductive Program Synthesis\",\n        \"BF++: A Language for General-Purpose Program Synthesis\",\n        \"A Survey of Deep Learning Techniques for Autonomous Driving\",\n        \"A Review of Shared Control for Automated Vehicles: Theory and Applications\",\n        \"CodeXGLUE: A Machine Learning Benchmark Dataset for Code Understanding and Generation\",\n        \"CrossCodeBench: Benchmarking Cross-Task Generalization of Source Code Models\",\n        \"CodeSearchNet Challenge: Evaluating the State of Semantic Code Search\",\n        \"Unsupervised Translation of Programming Languages\",\n        \"A Review-Based Comparative Study of Bad Smell Detection Tools\",\n        \"Deep Learning Based Vulnerability Detection: Are We There Yet?\",\n        \"Genetic Improvement of Software: A Comprehensive Survey\",\n        \"Automated Program Repair\",\n        \"TIOBE Index\",\n        \"Synthesize, Execute and Debug: Learning to Repair for Neural Program Synthesis\",\n        \"Mapping Language to Code in Programmatic Context\",\n        \"Programming by Example\",\n        \"Programming by Examples (and Its Applications in Data Wrangling)\",\n        \"NAPS: Natural Program Synthesis Dataset\",\n        \"Training Language Models to Follow Instructions with Human Feedback\",\n        \"Automated Repair of Programs from Large Language Models\",\n        \"Nine Worlds of Seid-magic: Ecstasy and Neo-shamanism in North European Paganism\",\n        \"Attention Is All You Need\",\n        \"OpenAI API\",\n        \"Autoencoders as Tools for Program Synthesis\",\n        \"Genetic Programming II\",\n        \"Optimal Repair–Replace Strategies for a Warranted Product\",\n        \"Artificial Intelligence a Modern Approach\",\n        \"Repair Is Nearly Generation: Multilingual Program Repair with LLMs\",\n        \"Repository-Level Prompt Generation for Large Language Models of Code\",\n        \"Prompt-Tuned Code Language Model as a Neural Knowledge Base for Type Inference in Statically-Typed Partial Code\",\n        \"Fixing Hardware Security Bugs with Large Language Models\",\n        \"QuixBugs: A Multi-Lingual Program Repair Benchmark Set Based on the Quixey Challenge\",\n        \"Can OpenAI’s Codex Fix Bugs?: An Evaluation on QuixBugs\",\n        \"An Analysis of the Automatic Bug Fixing Performance of ChatGPT\",\n        \"Less Is More: Summary of Long Instructions Is Better for Program Synthesis\",\n        \"Applying Genetic Programming to PSB2: The next Generation Program Synthesis Benchmark Suite\",\n        \"Problem-Solving Benefits of Down-Sampled Lexicase Selection\",\n        \"General Program Synthesis Benchmark Suite\",\n        \"Choose Your Programming Copilot: A Comparison of the Program Synthesis Performance of Github Copilot and Genetic Programming\",\n        \"Asleep at the Keyboard? Assessing the Security of GitHub Copilot’s Code Contributions\"\n    ],\n    \"reasoning\": \"Selected these 54 references because they represent foundational work and recent advances in Fully Autonomous Programming with Large Language Models, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}