{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 55 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Streaming enumeration on nested documents\n\nPaper Abstract: Abstract Some of the most relevant document schemas used online, such as XML and JSON, have a nested format. In the last decade, the task of extracting data from nested documents over streams has become especially relevant. We focus on the streaming evaluation of queries with outputs of varied sizes over nested documents. We model queries of this kind as Visibly Pushdown Transducers (VPT), a computational model that extends visibly pushdown automata with outputs and has the same expressive power as MSO over nested documents. Since processing a document through a VPT can generate a massive number of results, we are interested in reading the input in a streaming fashion and enumerating the outputs one after another as efficiently as possible, namely, with constant-delay. This paper presents an algorithm that enumerates these elements with constant-delay after processing the document stream in a single pass. Furthermore, we show that this algorithm is worst-case optimal in terms of update-time per symbol and memory usage.\n\n{retrieved_text}\n\nGenerate exactly 55 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 55\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"The Design and Analysis of Computer Algorithms\",\n        \"Compilers, principles, techniques\",\n        \"Efficient filtering of XML documents for selective dissemination of information\",\n        \"Streamable regular transductions\",\n        \"Visibly pushdown languages\",\n        \"A circuit-based approach to efficient enumeration\",\n        \"Constant-delay enumeration for nondeterministic document spanners\",\n        \"Enumeration on trees with tractable combined complexity and efficient updates\",\n        \"Efficient logspace classes for enumeration, counting, and uniform generation\",\n        \"Models and issues in data stream systems\",\n        \"MSO queries on tree decomposable structures are computable with linear delay\",\n        \"On acyclic conjunctive queries and constant delay enumeration\",\n        \"Buffering in query evaluation over XML streams\",\n        \"On the memory requirements of XPath evaluation over XML streams\",\n        \"Stackless processing of streamed trees\",\n        \"Constant delay enumeration for conjunctive queries: a tutorial\",\n        \"Answering conjunctive queries under updates\",\n        \"JSON: Data model and query languages\",\n        \"Trimming visibly pushdown automata\",\n        \"An efficient XPath query processor for XML streams\",\n        \"Materialized views\",\n        \"Linear delay enumeration and monadic second-order logic\",\n        \"Making data structures persistent\",\n        \"First-order queries on structures of bounded degree are computable with constant delay\",\n        \"Document spanners: A formal approach to information extraction\",\n        \"Streamability of nested word transductions\",\n        \"Visibly pushdown transducers\",\n        \"Efficient enumeration algorithms for regular document spanners\",\n        \"A logic for document spanners\",\n        \"Joining extractions of regular expressions\",\n        \"Streaming tree automata\",\n        \"Bounded delay and concurrency for earliest query answering\",\n        \"Earliest query answering for deterministic nested word automata\",\n        \"Efficient algorithms for evaluating XPath over streams\",\n        \"Processing XML streams with deterministic automata and stream indexes\",\n        \"Towards streaming evaluation of queries with correlation in complex event processing\",\n        \"A formal framework for complex event processing\",\n        \"The dynamic Yannakakis algorithm: Compact and efficient query processing under updates\",\n        \"Random generation of combinatorial structures from a uniform distribution\",\n        \"Querying XML streams\",\n        \"Trade-offs in static and dynamic evaluation of hierarchical queries\",\n        \"Visibly pushdown automata for streaming XML\",\n        \"Elements of finite model theory, volume 41\",\n        \"Document spanners for extracting incomplete information: Expressiveness and complexity\",\n        \"Incremental view maintenance with triple lock factorization benefits\",\n        \"SPEX: Streamed and progressive evaluation of XPath\",\n        \"An efficient single-pass query evaluator for XML data streams\",\n        \"Size bounds for factorised representations of query results\",\n        \"Grammars for document spanners\",\n        \"Recursive programs for document spanners\",\n        \"Enumerating with constant delay the answers to a query\",\n        \"Validating streaming XML documents\",\n        \"The space complexity of processing XML twig queries over indexed documents\",\n        \"Navigational XPath: calculus and algebra\",\n        \"Aggregate queries on sparse databases\"\n    ],\n    \"reasoning\": \"Selected these 55 references because they represent foundational work and recent advances in Streaming enumeration on nested documents, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}