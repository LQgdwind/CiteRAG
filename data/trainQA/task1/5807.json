{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 48 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: An Exploratory Study on Code Attention in BERT\n\nPaper Abstract: Abstract. Many recent models in software engineering introduced deep neural models based on the Transformer architecture or use transformer-based Pre-trained Language Models (PLM) trained on code. Although these models achieve the state of the arts results in many downstream tasks such as code summarization and bug detection, they are based on Transformer and PLM, which are mainly studied in the Natural Language Processing (NLP) field. The current studies rely on the reasoning and practices from NLP for these models in code, despite the differences between natural languages and programming languages. There is also limited literature on explaining how code is modeled. Here, we investigate the attention behavior of PLM on code and compare it with natural language. We pre-trained BERT, a Transformer based PLM, on code and explored what kind of information it learns, both semantic and syntactic. We run several experiments to analyze the attention values of code constructs on each other and what BERT learns in each layer. Our analyses show that BERT pays more attention to syntactic entities, specifically identifiers and separators, in contrast to the most attended token [CLS] in NLP. This observation motivated us to leverage identifiers to represent the code sequence instead of the [CLS] token when used for code clone detection. Our results show that employing embeddings from identifiers increases the performance of BERT by 605% and 4% F1-score in its lower layers and the upper layers, respectively. When identifiers’ embeddings are used in CodeBERT, a code-based PLM, the performance is improved by 21–24% in the F1-score of clone detection. The findings can benefit the research community by using code-specific representations instead of applying the common embeddings used in NLP, and open new directions for developing smaller models with similar performance.\n\n{retrieved_text}\n\nGenerate exactly 48 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 48\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"A Transformer-based Approach for Source Code Summarization\",\n        \"code2seq: Generating Sequences from Structured Representations of Code\",\n        \"On the Naming of Methods: A Survey of Professional Developers\",\n        \"Assessing Robustness of ML-Based Program Analysis Tools using Metamorphic Program Transformations\",\n        \"Clone detection using abstract syntax trees\",\n        \"Studying the Difference Between Natural and Programming Language Corpora\",\n        \"What Does BERT Look At? An Analysis of BERT’s Attention\",\n        \"Embedding Java Classes with code2vec\",\n        \"BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding\",\n        \"How Developers Choose Names\",\n        \"CodeBERT: A Pre-Trained Model for Programming and Natural Languages\",\n        \"Code Structure Guided Transformer for Source Code Summarization\",\n        \"GraphCodeBERT: Pre-training Code Representations with Data Flow\",\n        \"Improved Automatic Summarization of Subroutines via Attention to File Context\",\n        \"Automated software vulnerability detection with machine learning\",\n        \"Deep Code Comment Generation\",\n        \"CodeSearchNet Challenge: Evaluating the State of Semantic Code Search\",\n        \"Learning and Evaluating Contextual Embedding of Source Code\",\n        \"SCELMo: Source Code Embeddings from Language Models\",\n        \"What do pre-trained code models know about code?\",\n        \"Identifying similar code with program dependence graphs\",\n        \"A Neural Model for Generating Natural Language Summaries of Program Subroutines\",\n        \"Improving Bug Detection via Context-Based Code Representation Learning and Attention-Based Neural Networks\",\n        \"Multi-task Learning based Pre-trained Language Model for Code Completion\",\n        \"RoBERTa: A Robustly Optimized BERT Pretraining Approach\",\n        \"CodeXGLUE: A Machine Learning Benchmark Dataset for Code Understanding and Generation\",\n        \"NL2Type: Inferring JavaScript Function Types from Natural Language Information\",\n        \"Emergent linguistic structure in artificial neural networks trained by self-supervision\",\n        \"The Jensen-Shannon divergence\",\n        \"On the generation, structure, and semantics of grammar patterns in source code identifiers\",\n        \"Language Models as Knowledge Bases?\",\n        \"DeepBugs: A Learning Approach to Name-Based Bug Detection\",\n        \"On the generalizability of Neural Program Models with respect to semantic-preserving program transformations\",\n        \"Contextual Correlates of Synonymy\",\n        \"Descriptive Compound Identifier Names Improve Source Code Comprehension\",\n        \"Improving Code Search with Co-Attentive Representation Learning\",\n        \"Masked Language Modeling and the Distributional Hypothesis: Order Word Matters Pre-training for Little\",\n        \"Towards a Big Data Curated Benchmark of Inter-project Code Clones\",\n        \"BERT rediscovers the classical NLP pipeline\",\n        \"What do you learn from context? Probing for sentence structure in contextualized word representations\",\n        \"Attention Is All You Need\",\n        \"A Multiscale Visualization of Attention in the Transformer Model\",\n        \"Improving Automatic Source Code Summarization via Deep Reinforcement Learning\",\n        \"TranS3̂: A Transformer-based Framework for Unifying Code Summarization and Code Search\",\n        \"Sorting and Transforming Program Repair Ingredients via Deep Learning Code Similarities\",\n        \"HuggingFace’s Transformers: State-of-the-art Natural Language Processing\",\n        \"Natural Attack for Pre-trained Models of Code\",\n        \"Retrieval-Based Neural Source Code Summarization\"\n    ],\n    \"reasoning\": \"Selected these 48 references because they represent foundational work and recent advances in An Exploratory Study on Code Attention in BERT, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}