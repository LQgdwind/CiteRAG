{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 47 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Reinforcement Learning and Data-Generation for Syntax-Guided Synthesis\n\nPaper Abstract: Abstract Program synthesis is the task of automatically generating code based on a specification. In Syntax-Guided Synthesis (SyGuS) this specification is a combination of a syntactic template and a logical formula, and the result is guaranteed to satisfy both. We present a reinforcement-learning guided algorithm for SyGuS which uses Monte-Carlo Tree Search (MCTS) to search the space of candidate solutions. Our algorithm learns policy and value functions which, combined with the upper confidence bound for trees, allow it to balance exploration and exploitation. A common challenge in applying machine learning approaches to syntax-guided synthesis is the scarcity of training data. To address this, we present a method for automatically generating training data for SyGuS based on anti-unification of existing first-order satisfiability problems, which we use to train our MCTS policy. We implement and evaluate this setup and demonstrate that learned policy and value improve the synthesis performance over a baseline by over 262626 percentage points in the training and testing sets. Our tool outperforms state-of-the-art tool cvc5 on the training set and performs comparably in terms of the total number of problems solved on the testing set (solving 23%percent2323\\% of the benchmarks on which cvc5 fails). We make our data set publicly available, to enable further application of machine learning methods to the SyGuS problem.\n\n{retrieved_text}\n\nGenerate exactly 47 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 47\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Counterexample guided inductive synthesis modulo theories\",\n        \"Syntax-guided synthesis\",\n        \"Syntax Guided Synthesis Competition\",\n        \"Scaling Enumerative Program Synthesis via Divide and Conquer\",\n        \"Term rewriting and all that\",\n        \"DeepCoder: Learning to Write Programs\",\n        \"cvc5: A Versatile and Industrial-Strength SMT Solver\",\n        \"AutoPandas: neural-backed generators for program synthesis\",\n        \"Leveraging grammar and reinforcement learning for neural program synthesis\",\n        \"Monte-Carlo Expression Discovery\",\n        \"Anti-unification and Generalization: A Survey\",\n        \"Using SyGuS to Synthesize Reactive Motion Plans\",\n        \"XGBoost: A Scalable Tree Boosting System\",\n        \"Program Synthesis Using Deduction-Guided Reinforcement Learning\",\n        \"ENIGMA-NG: Efficient Neural and Gradient-Boosted Inference Guidance for E\",\n        \"Program Synthesis for Program Analysis\",\n        \"Z3: An Efficient SMT Solver\",\n        \"Write, Execute, Assess: Program Synthesis with a REPL\",\n        \"Machine Learning Guidance for Connection Tableaux\",\n        \"Quantified Invariants via Syntax-Guided Synthesis\",\n        \"Program synthesis using conflict-driven learning\",\n        \"Deep Reinforcement Learning for Synthesizing Functions in Higher-Order Logic\",\n        \"Predicting SMT Solver Performance for Software Verification\",\n        \"DeepMath - Deep Sequence Models for Premise Selection\",\n        \"ENIGMA: Efficient Learning-Based Inference Guiding Machine\",\n        \"Oracle-guided component-based program synthesis\",\n        \"A theory of formal synthesis via inductive learning\",\n        \"Reinforcement Learning of Theorem Proving\",\n        \"Verified lifting of stencil computations\",\n        \"Bandit Based Monte-Carlo Planning\",\n        \"Anti-Unification: Algorithms and Applications\",\n        \"Learning to Find Proofs and Theorems by Learning to Refine Search Strategies: The Case of Loop Invariant Synthesis\",\n        \"Accelerating search-based program synthesis using learned probabilistic models\",\n        \"An Efficient Unification Algorithm\",\n        \"What Can We Learn Even from the Weakest? Learning Sketches for Programmatic Strategies\",\n        \"Grammar Filtering for Syntax-Guided Synthesis\",\n        \"BUSTLE: Bottom-Up Program Synthesis Through Learning-Guided Exploration\",\n        \"A Note on Inductive Generalization\",\n        \"Programming by Example Using Least General Generalizations\",\n        \"cvc4sy: Smart and Fast Term Enumeration for Syntax-Guided Synthesis\",\n        \"SyGuS Techniques in the Core of an SMT Solver\",\n        \"Code2Inv: A Deep Learning Framework for Program Verification\",\n        \"A general reinforcement learning algorithm that masters chess, shogi, and Go through self-play\",\n        \"The sketching approach to program synthesis\",\n        \"Learning compositional programs with arguments and sampling\",\n        \"The SMT Competition 2015-2018\",\n        \"Anti-unification in Constraint Logic Programming\"\n    ],\n    \"reasoning\": \"Selected these 47 references because they represent foundational work and recent advances in Reinforcement Learning and Data-Generation for Syntax-Guided Synthesis, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}