{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 70 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Large Language Models for Compiler Optimization\n\nPaper Abstract: Abstract We explore the novel application of Large Language Models to code optimization. We present a 7B-parameter transformer model trained from scratch to optimize LLVM assembly for code size. The model takes as input unoptimized assembly and outputs a list of compiler options to best optimize the program. Crucially, during training, we ask the model to predict the instruction counts before and after optimization, and the optimized code itself. These auxiliary learning tasks significantly improve the optimization performance of the model and improve the model’s depth of understanding. We evaluate on a large suite of test programs. Our approach achieves a 3.0% improvement in reducing instruction counts over the compiler, outperforming two state-of-the-art baselines that require thousands of compilations. Furthermore, the model shows surprisingly strong code reasoning abilities, generating compilable code 91% of the time and perfectly emulating the output of the compiler 70% of the time.\n\n{retrieved_text}\n\nGenerate exactly 70 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 70\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"StarCoder: may the source be with you!\",\n        \"Competition-Level Code Generation with AlphaCode\",\n        \"GPT-4 Technical Report\",\n        \"SantaCoder: don’t reach for the stars!\",\n        \"PaLM: Scaling Language Modeling with Pathways\",\n        \"InCoder: A Generative Model for Code Infilling and Synthesis\",\n        \"Textbooks Are All You Need\",\n        \"Evaluating Large Language Models Trained on Code\",\n        \"Code Llama: Open Foundation Models for Code\",\n        \"Unsupervised Translation of Programming Languages\",\n        \"Learning C to x86 Translation: An Experiment in Neural Compilation\",\n        \"Code Translation with Compiler Representations\",\n        \"Automated conformance testing for JavaScript engines via deep compiler fuzzing\",\n        \"Large Language Models Are Zero-Shot Fuzzers: Fuzzing Deep-Learning Libraries via Large Language Models\",\n        \"Adaptive Test Generation Using a Large Language Model\",\n        \"ChatGPT\",\n        \"MLGO: a Machine Learning Guided Compiler Optimizations Framework\",\n        \"Machine Learning in Compiler Optimisation\",\n        \"Machine Learning in Compilers: Past, Present and Future\",\n        \"Learning Compiler Pass Orders using Coreset and Normalized Value Prediction\",\n        \"ProGraML: A Graph-based Program Representation for Data Flow Analysis and Compiler Optimizations\",\n        \"LLVM: A Compilation Framework for Lifelong Program Analysis & Transformation\",\n        \"Limits for Learning with Language Models\",\n        \"Limitations of Language Models in Arithmetic and Symbolic Induction\",\n        \"Llama 2: Open Foundation and Fine-Tuned Chat Models\",\n        \"Evaluating Iterative Compilation\",\n        \"CompilerGym: Robust, Performant Compiler Optimization Environments for AI Research\",\n        \"The Stack: 3TB of Permissively Licensed Source Code\",\n        \"The Pile: An 800GB Dataset of Diverse Text for Language Modeling\",\n        \"CodeSearchNet Challenge: Evaluating the State of Semantic Code Search\",\n        \"Overview of the PAN@FIRE 2020 task on the authorship identification of SOurce COde (AI-SOCO)\",\n        \"ExeBench: an ML-scale Dataset of Executable C Functions\",\n        \"Convolutional Neural Networks Over Tree Structures for Programming Language Processing\",\n        \"Finding and Understanding Bugs in C Compilers\",\n        \"Random Testing for C and C++ Compilers with YARPGen\",\n        \"SLaDe: A Portable Small Language Model Decompiler for Optimized Assembler\",\n        \"Attention Is All You Need\",\n        \"A New Algorithm for Data Compression\",\n        \"AutoPhase: Juggling HLS Phase Orderings in Random Forests with Deep Reinforcement Learning\",\n        \"Decoupled Weight Decay Regularization\",\n        \"BLEU: A Method for Automatic Evaluation of Machine Translation\",\n        \"Proximal Policy Optimization Algorithms\",\n        \"LLVM Canon\",\n        \"Differential Testing for Software\",\n        \"LongNet: Scaling Transformers to 1,000,000,000 Tokens\",\n        \"Extending Context Window of Large Language Models via Positional Interpolation\",\n        \"A Length-Extrapolatable Transformer\",\n        \"Chain-of-thought prompting elicits reasoning in large language models\",\n        \"Pal: Program-aided language models\",\n        \"Training Verifiers to Solve Math Word Problems\",\n        \"SmoothQuant: Accurate and Efficient Post-Training Quantization for Large Language Models\",\n        \"Iterative Compilation in a Non-linear Optimisation Space\",\n        \"Combined Selection of Tile Sizes and Unroll Factors using Iterative Compilation\",\n        \"Using Machine Learning to Focus Iterative Optimization\",\n        \"Minimizing the Cost of Iterative Compilation with Active Learning\",\n        \"MLGOPerf: An ML Guided Inliner to Optimize Performance\",\n        \"NeuroVectorizer: End-to-End Vectorization with Deep Reinforcement Learning\",\n        \"End-to-End Deep Learning of Optimization Heuristics\",\n        \"A Flexible Approach to Autotuning Multi-pass Machine Learning Compilers\",\n        \"Beyond the C: Retargetable Decompilation using Neural Machine Translation\",\n        \"LLVM Intermediate Representation for Code Weakness Identification\",\n        \"CodeBERT: A Pre-trained Model for Programming and Natural Languages\",\n        \"GraphCodeBERT: Pre-training Code Representations with Data Flow\",\n        \"CodeT5: Identifier-aware Unified Pre-trained Encoder-Decoder Models for Code Understanding and Generation\",\n        \"Universal Fuzzing via Large Language Models\",\n        \"Less Training, More Repairing Please: Revisiting Automated Program Repair via Zero-shot Learning\",\n        \"Automated Program Repair in the Era of Large Pre-Trained Language Models\",\n        \"Keep the Conversation Going: Fixing 162 out of 337 bugs for $0.42 each using ChatGPT\",\n        \"Llama: Open and efficient foundation language models\",\n        \"Copilot\"\n    ],\n    \"reasoning\": \"Selected these 70 references because they represent foundational work and recent advances in Large Language Models for Compiler Optimization, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}