{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 46 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Discrete Prompt Compression with Reinforcement Learning\n\nPaper Abstract: Abstract Instruction-tuned Language Models (LMs) are widely used by users to address various problems with task-specific prompts. Constraints associated with the context window length and computational costs encourage the development of compressed prompts. Existing methods rely heavily on training embeddings, which are designed to accommodate multiple token meanings. This presents challenges in terms of interpretability, a fixed number of embedding tokens, reusability across different LMs, and inapplicability when interacting with black-box APIs. This study proposes prompt compression with reinforcement learning (PCRL), a novel discrete prompt compression method that addresses these issues. PCRL employs a computationally efficient policy network that directly edits prompts. The PCRL training approach can be flexibly applied to various types of LMs, as well as decoder-only and encoder-decoder architecture, and can be trained without gradient access to LMs or labeled data. PCRL achieves an average reduction of 24.6% in token count across various instruction prompts while preserving performance. Further, we demonstrate that the learned policy can be transferred to larger LMs, and through various analyses, we aid the understanding of token importance within prompts.\n\n{retrieved_text}\n\nGenerate exactly 46 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 46\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Falcon-40B: an open large language model with state-of-the-art performance\",\n        \"Natural language processing with Python: analyzing text with the natural language toolkit\",\n        \"Understanding and customizing stopword lists for enhanced patent mapping\",\n        \"Language models are few-shot learners\",\n        \"Deep Communicating Agents for Abstractive Summarization\",\n        \"FrugalGPT: How to Use Large Language Models While Reducing Cost and Improving Performance\",\n        \"Adapting Language Models to Compress Contexts\",\n        \"Scaling instruction-finetuned language models\",\n        \"RLPrompt: Optimizing Discrete Text Prompts with Reinforcement Learning\",\n        \"BanditSum: Extractive Summarization as a Contextual Bandit\",\n        \"How does punctuation affect neural models in natural language inference\",\n        \"Efficient Unsupervised Sentence Compression by Fine-tuning Transformers with Reinforcement Learning\",\n        \"Chatgpt outperforms crowd-workers for text-annotation tasks\",\n        \"Reinforcement learning with deep energy-based policies\",\n        \"Is chatgpt better than human annotators? potential and limitations of chatgpt in explaining implicit hate speech\",\n        \"The Summary Loop: Learning to Write Abstractive Summaries Without Examples\",\n        \"Keep it simple: Unsupervised simplification of multi-paragraph text\",\n        \"The Power of Scale for Parameter-Efficient Prompt Tuning\",\n        \"Automatic evaluation of summaries using n-gram co-occurrence statistics\",\n        \"GPT understands, too.\",\n        \"Contextual multi-armed bandits\",\n        \"Learning to compress prompts with gist tokens\",\n        \"Ranking sentences for extractive summarization with reinforcement learning\",\n        \"Training language models to follow instructions with human feedback\",\n        \"A Deep Reinforced Model for Abstractive Summarization\",\n        \"GrIPS: Gradient-free, Edit-based Instruction Search for Prompting Large Language Models\",\n        \"Language models are unsupervised multitask learners\",\n        \"Self-critical sequence training for image captioning\",\n        \"DistilBERT, a distilled version of BERT: smaller, faster, cheaper and lighter\",\n        \"Multitask Prompted Training Enables Zero-Shot Task Generalization\",\n        \"Stopwords in technical language processing\",\n        \"Exploiting Cloze-Questions for Few-Shot Text Classification and Natural Language Inference\",\n        \"Discrete Optimization for Unsupervised Sentence Summarization with Word-Level Extraction\",\n        \"AutoPrompt: Eliciting Knowledge from Language Models with Automatically Generated Prompts\",\n        \"Policy gradient methods for reinforcement learning with function approximation\",\n        \"Stanford Alpaca: An Instruction-following LLaMA model\",\n        \"Llama 2: Open foundation and fine-tuned chat models\",\n        \"Is chatgpt a good nlg evaluator? a preliminary study\",\n        \"Self-instruct: Aligning language model with self generated instructions\",\n        \"Super-NaturalInstructions: Generalization via Declarative Instructions on 1600+ NLP Tasks\",\n        \"Do Prompt-Based Models Really Understand the Meaning of Their Prompts?\",\n        \"Finetuned Language Models are Zero-Shot Learners\",\n        \"Prompt Compression and Contrastive Conditioning for Controllability and Toxicity Reduction in Language Models\",\n        \"Tempera: Test-time prompt editing via reinforcement learning\",\n        \"Simple Unsupervised Summarization by Contextual Matching\",\n        \"Large Language Models are Human-Level Prompt Engineers\"\n    ],\n    \"reasoning\": \"Selected these 46 references because they represent foundational work and recent advances in Discrete Prompt Compression with Reinforcement Learning, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}