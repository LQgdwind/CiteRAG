{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 47 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Benchmarking Symbolic Execution Using Constraint Problems - Initial Results\n\nPaper Abstract: Abstract Symbolic execution is a powerful technique for bug finding and program testing. It is successful in finding bugs in real-world code. The core reasoning techniques use constraint solving, path exploration, and search, which are also the same techniques used in solving combinatorial problems, e.g., finite-domain constraint satisfaction problems (CSPs). We propose CSP instances as more challenging benchmarks to evaluate the effectiveness of the core techniques in symbolic execution. We transform CSP benchmarks into C programs suitable for testing the reasoning capabilities of symbolic execution tools. From a single CSP PùëÉP, we transform PùëÉP depending on transformation choice into different C programs. Preliminary testing with the KLEE, Tracer-X, and LLBMC tools show substantial runtime differences from transformation and solver choice. Our C benchmarks are effective in showing the limitations of existing symbolic execution tools. The motivation for this work is we believe that benchmarks of this form can spur the development and engineering of improved core reasoning in symbolic execution engines.\n\n{retrieved_text}\n\nGenerate exactly 47 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 47\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Symbolic execution and program testing\",\n        \"Klee: Unassisted and automatic generation of high-coverage tests for complex systems programs\",\n        \"Dart: Directed automated random testing\",\n        \"Cute: A concolic unit testing engine for c\",\n        \"Reverse engineering of binary device drivers with revnic\",\n        \"Semfix: Program repair via semantic analysis\",\n        \"American Fuzzy Lop\",\n        \"Sok: (state of) the art of war: Offensive techniques in binary analysis\",\n        \"Driller: Augmenting fuzzing through selective symbolic execution\",\n        \"Symbolic execution for software testing: Three decades later\",\n        \"Chopped symbolic execution\",\n        \"A comparative study of incremental constraint solving approaches in symbolic execution\",\n        \"Multi-solver support in symbolic execution\",\n        \"Symbolic execution of obfuscated code\",\n        \"Shape neutral analysis of graph-based data-structures\",\n        \"LLVM compiler infrastructure project\",\n        \"A decision procedure for bit-vectors and arrays\",\n        \"Z3: An efficient smt solver\",\n        \"Tracer-X: next-generation symbolic execution.\",\n        \"The bounded model checker LLBMC\",\n        \"Enhancing symbolic execution with veritesting\",\n        \"Satisfability modulo theories: introduction and applications\",\n        \"KLEE system\",\n        \"KLEE papers\",\n        \"An interpolation method for CLP traversal\",\n        \"SAGE: Whitebox fuzzing for security testing\",\n        \"S2E: A platform for in-vivo multi-path analysis of software systems\",\n        \"A survey of symbolic execution techniques\",\n        \"Challenges and opportunities with concolic testing\",\n        \"Benchmarking the capability of symbolic execution tools with logic bombs\",\n        \"Cryptographic function detection in obfuscated binaries via bit-precise symbolic loop mapping\",\n        \"Efficient symbolic execution for analysing cryptographic protocol implementations\",\n        \"A case study of concolic testing tools and their limitations\",\n        \"Evaluating symbolic execution-based test tools\",\n        \"Constraint Processing\",\n        \"Handbook of Constraint Programming (Foundations of Artificial Intelligence)\",\n        \"XCSP3: an integrated format for benchmarking combinatorial constrained problems\",\n        \"XCSP3\",\n        \"XCSP3 competition\",\n        \"CSP-C\",\n        \"Tracer: A symbolic execution tool for verification\",\n        \"Three uses of the Herbrand-Gentzen theorem in relating model theory and proof theory\",\n        \"Abscon: A prototype to solve csps with abstraction\",\n        \"AbsCon\",\n        \"MiniSat\",\n        \"Speculative symbolic execution\",\n        \"Mixed integer programming: Analyzing 12 years of progress\"\n    ],\n    \"reasoning\": \"Selected these 47 references because they represent foundational work and recent advances in Benchmarking Symbolic Execution Using Constraint Problems - Initial Results, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}