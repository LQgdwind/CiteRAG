{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 48 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Customizing Static Analysis using Codesearch\n\nPaper Abstract: Abstract Static analysis is a growing application of software engineering, leading to a range of essential security tools, bug-finding tools, as well as software verification. Recent years show an increase of universal static analysis tools that validate a range of properties and allow customizing parts of the scanner to validate additional properties or “static analysis rules”. A commonly used language to describe a range of static analysis applications is Datalog. Unfortunately, the language is still non-trivial to use, leading to analysis that is difficult to implement in a precise but performant way. In this work, we aim to make building custom static analysis tools much easier for developers, while at the same time, providing a familiar framework for application security and static analysis experts. Our approach introduces a language called StarLang, a variant of Datalog which only includes programs with a fast runtime by the means of having low time complexity of its decision procedure.\n\n{retrieved_text}\n\nGenerate exactly 48 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 48\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Astrée static analyzer\",\n        \"Checkmarx\",\n        \"CppCheck\",\n        \"ESLint\",\n        \"FindBugs\",\n        \"PyLint\",\n        \"SemGrep\",\n        \"Snyk Code\",\n        \"SonarSource\",\n        \"StaticCheck\",\n        \"Foundations of Databases\",\n        \"Staged points-to analysis for large code bases\",\n        \"Datalog-based program analysis with BES and RWL\",\n        \"Program Analysis and Specialization for the C Programming Language\",\n        \"Building a join optimizer for soufflé\",\n        \"Flowdroid: precise context, flow, field, object-sensitive and lifecycle-aware taint analysis for android apps\",\n        \"QL: object-oriented queries on relational data\",\n        \"Naive evaluation of recursively defined relations\",\n        \"Structure and complexity of relational queries\",\n        \"Horn clauses queries and generalizations\",\n        \"A relational model of data for large shared data banks\",\n        \"Abstract interpretation: A unified lattice model for static analysis of programs by construction or approximation of fixpoints\",\n        \"Linear datalog and bounded path duality of relational structures\",\n        \"Complexity and expressive power of logic programming\",\n        \"Symmetric datalog and constraint satisfaction problems in logspace\",\n        \"Effective typestate verification in the presence of aliasing\",\n        \"Unfounded sets and well-founded semantics for general logic programs\",\n        \"P/taint: unified points-to and taint analysis\",\n        \"DATALOG queries with stratified negation and choice: from P to dpp{}^{\\\\mbox{p}}\",\n        \"Freewill: Automatically diagnosing use-after-free bugs via reference miscounting detection on binaries\",\n        \"On sentences which are true of direct unions of algebras\",\n        \"Type analysis for javascript\",\n        \"Exploring and enforcing security guarantees via program dependence graphs\",\n        \"Soufflé: On synthesis of program analyzers\",\n        \"Hybrid context-sensitivity for points-to analysis\",\n        \"Query optimization through the looking glass, and what we found running the join order benchmark\",\n        \"Fluently specifying taint-flow queries with fluent tql\",\n        \"Precise interprocedural dataflow analysis via graph reachability\",\n        \"Static program analysis via 3-valued logic\",\n        \"Handbook of Graph Grammars and Computing by Graph Transformations, Volume 1: Foundations\",\n        \"Precise interprocedural dataflow analysis with applications to constant propagation\",\n        \"On fast large-scale program analysis in datalog\",\n        \"Learning loop invariants for program verification\",\n        \"Pointer analysis\",\n        \"Introspective analysis: context-sensitivity, across the board\",\n        \"Inca: a dsl for the definition of incremental program analyses\",\n        \"Making pointer analysis more precise by unleashing the power of selective context sensitivity\",\n        \"TAJ: effective taint analysis of web applications\"\n    ],\n    \"reasoning\": \"Selected these 48 references because they represent foundational work and recent advances in Customizing Static Analysis using Codesearch, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}