{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 55 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Fast Mapping onto Census Blocks\n\nPaper Abstract: Abstract Pandemic measures such as social distancing and contact tracing can be enhanced by rapidly integrating dynamic location data and demographic data. Projecting billions of longitude and latitude locations onto hundreds of thousands of highly irregular demographic census block polygons is computationally challenging in both research and deployment contexts. This paper describes two approaches labeled “simple” and “fast”. The simple approach can be implemented in any scripting language (Matlab/Octave, Python, Julia, R) and is easily integrated and customized to a variety of research goals. This simple approach uses a novel combination of hierarchy, sparse bounding boxes, polygon crossing-number, vectorization, and parallel processing to achieve 100,000,000+ projections per second on 100 servers. The simple approach is compact, does not increase data storage requirements, and is applicable to any country or region. The fast approach exploits the thread, vector, and memory optimizations that are possible using a low-level language (C++) and achieves similar performance on a single server. This paper details these approaches with the goal of enabling the broader community to quickly integrate location and demographic data.\n\n{retrieved_text}\n\nGenerate exactly 55 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 55\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Panstop: a decade of rapid containment exercises for pandemic preparedness in the who western pacific region\",\n        \"Contact tracing and disease control\",\n        \"Response to covid-19 in taiwan: big data analytics, new technology, and proactive testing\",\n        \"Adaptive main-memory indexing for high-performance point-polygon joins\",\n        \"Redundancy in spatial databases\",\n        \"Multi-step processing of spatial joins\",\n        \"A raster approximation for processing of spatial joins\",\n        \"Spatial join techniques\",\n        \"Efficient processing of large spatial queries using interior approximations\",\n        \"Quadtree and r-tree indexes in oracle spatial: a comparison using GIS data\",\n        \"Spatial indexing in microsoft SQL server 2008\",\n        \"GPU rasterization for real-time spatial aggregation over arbitrary polygons\",\n        \"Approximate query processing in spatial databases using raster signatures\",\n        \"Improving spatial data processing by clipping minimum bounding boxes\",\n        \"The ph-tree: a space-efficient storage structure and multi-dimensional index\",\n        \"GeoBlocks: A query-driven storage layout for geospatial data\",\n        \"DeepSPACE: Approximate geospatial query processing with deep learning\",\n        \"PostGIS: Spatial and geographic objects for PostgreSQL.\",\n        \"Geocoding addresses from a large population-based study: lessons learned\",\n        \"Optimal estimation of census block group clusters to improve the computational efficiency of drive time calculations.\",\n        \"Census Intersection.\",\n        \"call_geolocator_latlon.\",\n        \"2D Range and Neighbor Search .\",\n        \"MIT Geometric Computing.\",\n        \"Julia PolygonOps.\",\n        \"First-and second-order conservative remapping schemes for grids in spherical coordinates\",\n        \"SCRIP.\",\n        \"A fast ’point(s)-in-polygon’ test for MATLAB.\",\n        \"Fast Mapping.\",\n        \"Cartographic Boundary Files - Shapefile.\",\n        \"USA Census Tract Boundaries.\",\n        \"Graph Algorithms in the Language of Linear Algebra.\",\n        \"Standards for graph algorithm primitives\",\n        \"Graphs, matrices, and the GraphBLAS: Seven good reasons\",\n        \"Mathematical foundations of the graphblas\",\n        \"Enabling massive deep neural networks with the graphblas\",\n        \"Design of the GraphBLAS API for C\",\n        \"SuiteSparse:GraphBLAS\",\n        \"Graph algorithms via suitesparse: Graphblas: triangle counting and k-truss\",\n        \"Ibm power9 and cognitive computing\",\n        \"Redisgraph graphblas enabled graph database\",\n        \"Write quick, run fast: Sparse deep neural network in 20 minutes of development time via suitesparse:graphblas\",\n        \"Algorithm 1000: Suitesparse:graphblas: Graph algorithms in the language of sparse linear algebra\",\n        \"Algorithm 112: position of point relative to polygon\",\n        \"Approximate geospatial joins with precision guarantees\",\n        \"Google S2 library.\",\n        \"Hyperscaling internet graph analysis with d4m on the mit supercloud\",\n        \"Interactive supercomputing on 40,000 cores for machine learning and data analysis\",\n        \"Dynamic Distributed Dimensional Data Model (D4M) database and computation system\",\n        \"Mathematics of big data: Spreadsheets, databases, matrices, and graphs.\",\n        \"Streaming 1.9 billion hypersparse network updates per second with d4m\",\n        \"75,000,000,000 streaming inserts/second using hierarchical hypersparse graphblas matrices\",\n        \"Lincoln Laboratory’s new artificial intelligence supercomputer is the most powerful at a university.\",\n        \"Parallel MATLAB for Multicore and Multinode Computers.\",\n        \"The case for hybrid succinct data structures\"\n    ],\n    \"reasoning\": \"Selected these 55 references because they represent foundational work and recent advances in Fast Mapping onto Census Blocks, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}