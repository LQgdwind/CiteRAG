{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 54 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Getting a Handle on Unmanaged Memory\n\nPaper Abstract: Abstract. The inability to relocate objects in unmanaged languages brings with it a menagerie of problems. Perhaps the most impactful is memory fragmentation, which has long plagued applications such as databases and web servers. These issues either fester or require Herculean programmer effort to address on a per-application basis because, in general, heap objects cannot be moved in unmanaged languages. In contrast, managed languages like C# cleanly address fragmentation through the use of compacting garbage collection techniques built upon heap object movement. In this work, we bridge this gap between unmanaged and managed languages through the use of handles, a level of indirection allowing heap object movement. Handles open the door to seamlessly employing runtime features from managed languages in existing, unmodified code written in unmanaged languages. We describe a new compiler and runtime system, Alaska, that acts as a drop-in replacement for malloc. Without any programmer effort, the Alaska compiler transforms pointer-based code to utilize handles, with optimizations to minimize performance impact. A codesigned runtime system manages this new level of indirection and exploits heap object movement via an extensible service interface. We investigate the overheads of Alaska on large benchmarks and applications spanning multiple domains. To show the power and extensibility of handles, we use Alaska to eliminate fragmentation on the heap through defragmentation, reducing memory usage by up to 40% in Redis.\n\n{retrieved_text}\n\nGenerate exactly 54 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 54\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"The GNU C library\",\n        \"The libunwind project\",\n        \"memcached\",\n        \"MUSL libc\",\n        \"Oilpan: C++ garbage collection\",\n        \"Redis active memory defragmentation\",\n        \"Redis\",\n        \"Spec cpu 2017 - gcc_s description\",\n        \"Spec cpu 2017 - perlbench_s description\",\n        \"Stack maps and patch points in LLVM â€” LLVM documentation\",\n        \"Tiobe index\",\n        \"Propeller: A Profile Guided, Relinking Optimizer for Warehouse-Scale Applications\",\n        \"Gc points in a threaded environment\",\n        \"Garbage collection and local variable type-precision and liveness in java virtual machines\",\n        \"Compilers: Principles, Techniques, and Tools (2nd Edition)\",\n        \"The nas parallel benchmarks 2.0\",\n        \"The gap benchmark suite\",\n        \"Tiny pointers\",\n        \"Embench: An evolving benchmark suite for embedded iot computers from an academic-industrial cooperative\",\n        \"Barriers: friend or foe?\",\n        \"Cache-conscious structure layout\",\n        \"Benchmarking cloud serving systems with ycsb\",\n        \"Improving locality of reference in a garbage-collecting memory management system\",\n        \"Garbage collection and run-time typing as a c++ library\",\n        \"Improving cache performance in dynamic applications through data and computation reorganization at run time\",\n        \"Precompiling c++ for garbage collection\",\n        \"Tick tock, malloc needs a clock\",\n        \"Shenandoah: An open-source concurrent compacting garbage collector for openjdk\",\n        \"Practical and accurate low-level pointer analysis\",\n        \"Mira: A program-behavior-guided far memory system\",\n        \"Inside Macintosh. Vol. 2, volume 2\",\n        \"The case for a read barrier\",\n        \"ThinLTO: Scalable and incremental LTO\",\n        \"LLVM: A compilation framework for lifelong program analysis & transformation\",\n        \"Automatic pool allocation: Improving performance by controlling data structure layout in the heap\",\n        \"NOELLE Offers Empowering LLvm Extensions\",\n        \"Representing data collections in an ssa form\",\n        \"Barrier techniques for incremental tracing\",\n        \"Schism: Fragmentation-tolerant real-time garbage collection\",\n        \"Mesh: Compacting memory management for c/c++ applications\",\n        \"Worst case fragmentation of first fit and best fit storage allocation strategies\",\n        \"AIFM: High-performance, application-integrated far memory\",\n        \"Activepointers: A case for software address translation on gpus\",\n        \"Points-to analysis in almost linear time\",\n        \"Carat: A case for virtual memory through compiler- and runtime-based address translation\",\n        \"Carat cake: Replacing paging via compiler/kernel cooperation\",\n        \"Svf: interprocedural static value-flow analysis in llvm\",\n        \"TrackFM: Far-out compiler support for a far memory world\",\n        \"Automatic Restructuring of Linked Data Structures, volume 5898 of Lecture Notes in Computer Science\",\n        \"On-the-fly structure splitting for heap objects\",\n        \"Cheri: A hybrid capability-system architecture for scalable software compartmentalization\",\n        \"The cheri capability model: Revisiting risc in an age of risk\",\n        \"Merchandiser: Data placement on heterogeneous memory for task-parallel hpc applications with load-balance awareness\",\n        \"Barrier methods for garbage collection\"\n    ],\n    \"reasoning\": \"Selected these 54 references because they represent foundational work and recent advances in Getting a Handle on Unmanaged Memory, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}