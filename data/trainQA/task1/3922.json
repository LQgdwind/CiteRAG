{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 51 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: CVEfixes: Automated Collection of Vulnerabilities and Their Fixes from Open-Source Software\n\nPaper Abstract: Abstract. Data-driven research on the automated discovery and repair of security vulnerabilities in source code requires comprehensive datasets of real-life vulnerable code and their fixes. To assist in such research, we propose a method to automatically collect and curate a comprehensive vulnerability dataset from Common Vulnerabilities and Exposures (CVE) records in the public National Vulnerability Database (NVD). We implement our approach in a fully automated dataset collection tool and share an initial release of the resulting vulnerability dataset named CVEfixes. The CVEfixes collection tool automatically fetches all available CVE records from the NVD, gathers the vulnerable code and corresponding fixes from associated open-source repositories, and organizes the collected information in a relational database. Moreover, the dataset is enriched with meta-data such as programming language, and detailed code and security metrics at five levels of abstraction. The collection can easily be repeated to keep up-to-date with newly discovered or patched vulnerabilities. The initial release of CVEfixes spans all published CVEs up to 9 June 2021, covering 5365 CVE records for 1754 open-source projects that were addressed in a total of 5495 vulnerability fixing commits. CVEfixes supports various types of data-driven software security research, such as vulnerability prediction, vulnerability classification, vulnerability severity prediction, analysis of vulnerability-related code changes, and automated vulnerability repair.\n\n{retrieved_text}\n\nGenerate exactly 51 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 51\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Common Vulnerabilities and Exposures (CVE)\",\n        \"End-to-End Prediction of Buffer Overruns from Raw Source Code via Neural Memory Networks\",\n        \"Challenges with Applying Vulnerability Prediction Models\",\n        \"Œºùúá\\\\muVulDeePecker: A Deep Learning-Based System for Multiclass Vulnerability Detection\",\n        \"Detecting \\\"0-Day\\\" Vulnerability: An Empirical Study of Secret Security Patch in OSS\",\n        \"CodeBERT: A Pre-Trained Model for Programming and Natural Languages\",\n        \"Automated Vulnerability Detection in Source Code Using Deep Representation Learning\",\n        \"Code Analysis for Intelligent Cyber Systems: A Data-Driven Approach\",\n        \"Software Vulnerability Detection Using Deep Neural Networks: A Survey\",\n        \"Juliet 1.1 C/C++ and Java Test Suite\",\n        \"A Software Assurance Reference Dataset: Thousands of Programs With Known Bugs\",\n        \"Text-Mining and Pattern-Matching Based Prediction Models for Detecting Vulnerable Files in Web Applications\",\n        \"Predicting Cross-Site Scripting (XSS) Security Vulnerabilities in Web Applications\",\n        \"MARFCAT: Fast Code Analysis for Defects and Vulnerabilities\",\n        \"Automatic Detection and Correction of Web Application Vulnerabilities Using Data Mining to Predict False Positives\",\n        \"The Use of NLP Techniques in Static Code Analysis to Detect Weaknesses and Vulnerabilities\",\n        \"D2A: A Dataset Built for AI-Based Vulnerability Detection Methods Using Differential Analysis\",\n        \"The Vulnerability Dataset of a Large Software Ecosystem\",\n        \"FindBugs\",\n        \"Collecting Vulnerable Source Code from Open-Source Repositories for Dataset Generation\",\n        \"Devign: Effective Vulnerability Identification by Learning Comprehensive Program Semantics via Graph Neural Networks\",\n        \"VulDeePecker: A Deep Learning-Based System for Vulnerability Detection\",\n        \"From Reports to Bug-Fix Commits: A 10 Years Dataset of Bug-Fixing Activity from 55 Apache‚Äôs Open Source Projects\",\n        \"Software Metrics and Security Vulnerabilities: Dataset and Exploratory Study\",\n        \"VulinOSS: A Dataset of Security Vulnerabilities in Open-Source Systems\",\n        \"Enabling the Continuous Analysis of Security Vulnerabilities with VulData7\",\n        \"A Manually-Curated Dataset of Fixes to Vulnerabilities of Open-Source Software\",\n        \"A C/C++ Code Vulnerability Dataset with Code Changes and CVE Summaries\",\n        \"Deep Learning-Based Vulnerable Function Detection: A Benchmark\",\n        \"World of Code: Enabling a Research Workflow for Mining and Analyzing the Universe of Open Source VCS Data\",\n        \"Perceval: Software Project Data at Your Will\",\n        \"PyDriller: Python Framework for Mining Software Repositories\",\n        \"National Vulnerability Database (NVD)\",\n        \"Common Weakness Enumeration (CWE)\",\n        \"Common Vulnerability Scoring System (CVSS)\",\n        \"The Delta Maintainability Model: Measuring Maintainability of Fine-Grained Code Changes\",\n        \"How Often Do Single-Statement Bugs Occur? The ManySStuBs4J Dataset\",\n        \"Automated Vulnerability Detection in Source Code Using Minimum Intermediate Representation Learning\",\n        \"Project Achilles: A Prototype Tool for Static Method-Level Vulnerability Detection of Java Source Code Using a Recurrent Neural Network\",\n        \"Automatic Feature Learning for Predicting Vulnerable Software Components\",\n        \"Inspecting JavaScript Vulnerability Mitigation Patches with Automated Fix Generation in Mind\",\n        \"Pre-Patch: Find Hidden Threats in Open Software Based on Machine Learning Method\",\n        \"A Practical Approach to the Automatic Classification of Security-Relevant Commits\",\n        \"PatchSweetner: Exploit Detection Through the Automatic Transformation of Security Patches\",\n        \"SEQUENCER: Sequence-to-Sequence Learning for End-to-End Program Repair\",\n        \"Using Sequence-to-Sequence Learning for Repairing C Vulnerabilities\",\n        \"Applying CodeBERT for Automated Program Repair of Java Simple Bugs\",\n        \"On the Rise and Fall of Simple Stupid Bugs: A Life-Cycle Analysis of SStuBs\",\n        \"A Large-Scale Study on Human-Cloned Changes for Automated Program Repair\",\n        \"On the Effectiveness of Deep Vulnerability Detectors to Simple Stupid Bug Detection\",\n        \"The Impact of Tangled Code Changes on Defect Prediction Models\"\n    ],\n    \"reasoning\": \"Selected these 51 references because they represent foundational work and recent advances in CVEfixes: Automated Collection of Vulnerabilities and Their Fixes from Open-Source Software, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}