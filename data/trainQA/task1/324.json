{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 71 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Optimizing Streaming Parallelism on Heterogeneous Many-Core Architectures: A Machine Learning Based Approach\n\nPaper Abstract: Abstract As many-core accelerators keep integrating more processing units, it becomes increasingly more difficult for a parallel application to make effective use of all available resources. An effective way for improving hardware utilization is to exploit spatial and temporal sharing of the heterogeneous processing units by multiplexing computation and communication tasks – a strategy known as heterogeneous streaming. Achieving effective heterogeneous streaming requires carefully partitioning hardware among tasks, and matching the granularity of task parallelism to the resource partition. However, finding the right resource partitioning and task granularity is extremely challenging, because there is a large number of possible solutions and the optimal solution varies across programs and datasets. This article presents an automatic approach to quickly derive a good solution for hardware resource partition and task granularity for task-based parallel applications on heterogeneous many-core architectures. Our approach employs a performance model to estimate the resulting performance of the target application under a given resource partition and task granularity configuration. The model is used as a utility to quickly search for a good configuration at runtime. Instead of hand-crafting an analytical model that requires expert insights into low-level hardware details, we employ machine learning techniques to automatically learn it. We achieve this by first learning a predictive model offline using training programs. The learnt model can then be used to predict the performance of any unseen program at runtime. We apply our approach to 39 representative parallel applications and evaluate it on two representative heterogeneous many-core platforms: a CPU-XeonPhi platform and a CPU-GPU platform. Compared to the single-stream version, our approach achieves, on average, a 1.6x and 1.1x speedup on the XeonPhi and the GPU platform, respectively. These results translate to over 93% of the performance delivered by a theoretically perfect predictor.\n\n{retrieved_text}\n\nGenerate exactly 71 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 71\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Gpu computing\",\n        \"Exploring and analyzing the real impact of modern on-package memory on HPC scientific kernels\",\n        \"LU factorization on heterogeneous systems: an energy-efficient approach towards high performance\",\n        \"Modeling and predicting performance of high performance computing applications on hardware accelerators\",\n        \"A comprehensive performance comparison of CUDA and opencl\",\n        \"Heterogeneous streaming\",\n        \"CUDA C Best Practices Guide Version 7.0\",\n        \"OpenCL - The open standard for parallel programming of heterogeneous systems\",\n        \"hStreams Architecture for MPSS 3.5\",\n        \"Performance models for cpu-gpu data transfers\",\n        \"Performance models for asynchronous data transfers on consumer graphics processing units\",\n        \"Software pipelining for graphic processing unit acceleration: Partition, scheduling and granularity\",\n        \"Streaming applications on heterogeneous platforms\",\n        \"Evaluating multiple streams on heterogeneous platforms\",\n        \"Evaluating the performance impact of multiple streams on the mic-based heterogeneous platform\",\n        \"Auto-tuning streamed applications on intel xeon phi\",\n        \"LLVM: A compilation framework for lifelong program analysis & transformation\",\n        \"Scikit-learn: Machine learning in python\",\n        \"Milepost gcc: machine learning based research compiler\",\n        \"Automatic and portable mapping of data parallel programs to opencl for gpu-based heterogeneous systems\",\n        \"Statistics in a Nutshell, 2nd Edition\",\n        \"Multivariate statistical methods: a primer\",\n        \"Openmp to gpgpu: a compiler framework for automatic translation and optimization\",\n        \"Portable mapping of data parallel programs to opencl for heterogeneous systems\",\n        \"Kernelgen–the design and implementation of a next generation compiler platform for accelerating numerical models on gpus\",\n        \"Polly-acc transparent compilation to heterogeneous hardware\",\n        \"Automatic cpu/gpu generation of multi-versioned opencl kernels for c++ scientific applications\",\n        \"On the definition of speedup\",\n        \"Advanced Engineering Mathematics, 10th Eddition\",\n        \"Factor Analysis, 2nd Edition\",\n        \"Analysis of a complex of statistical variables into principal components.\",\n        \"A survey of CPU-GPU heterogeneous computing techniques\",\n        \"Qilin: exploiting parallelism on heterogeneous multiprocessors with adaptive mapping\",\n        \"Workload partitioning for accelerating applications on heterogeneous platforms\",\n        \"Many-core needs fine-grained scheduling: A case study of query processing on intel xeon phi processors\",\n        \"Improving main memory hash joins on intel xeon phi processors: An experimental approach\",\n        \"Mrphi: An optimized mapreduce framework on intel xeon phi coprocessors\",\n        \"Model-based optimization of eulag kernel on intel xeon phi through load imbalancing\",\n        \"Optimizing and auto-tuning scale-free sparse matrix-vector multiplication on intel xeon phi\",\n        \"Optimizing matrix multiplication on intel® xeon phi th x200 architecture\",\n        \"Stream processing on hybrid cpu/intel® xeon phi systems\",\n        \"Hstream: A directive-based language extension for heterogeneous stream computing\",\n        \"End-to-end deep learning of optimization heuristics\",\n        \"Machine learning in compiler optimisation\",\n        \"Predicting cross-core performance interference on multicore processors with regression analysis\",\n        \"Using machine learning to partition streaming programs\",\n        \"Towards a holistic approach to auto-parallelization: integrating profile-driven parallelism detection and machine-learning based mapping\",\n        \"Partitioning streaming parallelism for multi-cores: a machine learning based approach\",\n        \"Integrating profile-driven parallelism detection and machine-learning-based mapping\",\n        \"Adaptive optimization for opencl programs on embedded heterogeneous systems\",\n        \"Smart, adaptive mapping of parallelism in the presence of external workload\",\n        \"Improving spark application throughput via memory aware task co-location: A mixture of experts approach\",\n        \"Optimise web browsing on heterogeneous mobile platforms: a machine learning based approach\",\n        \"Proteus: Network-aware web browsing on heterogeneous mobile systems\",\n        \"Using machine learning to optimize web interactions on heterogeneous mobile systems\",\n        \"Adaptive deep learning model selection on embedded systems\",\n        \"Smart multi-task scheduling for opencl programs on cpu/gpu heterogeneous platforms\",\n        \"Stencil computation optimization and auto-tuning on state-of-the-art multicore architectures\",\n        \"Opentuner: An extensible framework for program autotuning\",\n        \"Halide: A language and compiler for optimizing parallelism, locality, and recomputation in image processing pipelines\",\n        \"Auto-tuning 3-d fft library for cuda gpus\",\n        \"Input-aware auto-tuning of compute-bound hpc kernels\",\n        \"An auto-tuner for opencl work-group size on gpus\",\n        \"Auto-tuning skepu: a multi-backend skeleton programming framework for multi-gpu systems\",\n        \"Bootstrapping parameter space exploration for fast tuning\",\n        \"Optimizing sparse matrix–vector multiplications on an armv8-based many-core architecture\",\n        \"Auto-tuning on numa and many-core environments with an fdm code\",\n        \"Uhcl-darknet: An opencl-based deep neural network framework for heterogeneous multi-/many-core clusters\",\n        \"Openmpc: Extended openmp programming and tuning for gpus\",\n        \"Exploitation of gpus for the parallelisation of probably parallel legacy code\",\n        \"Domain-specific optimization and generation of high-performance gpu code for stencil computations\"\n    ],\n    \"reasoning\": \"Selected these 71 references because they represent foundational work and recent advances in Optimizing Streaming Parallelism on Heterogeneous Many-Core Architectures: A Machine Learning Based Approach, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}