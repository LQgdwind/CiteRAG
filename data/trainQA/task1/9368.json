{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 51 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: In-depth Analysis On Parallel Processing Patterns for High-Performance Dataframes\n\nPaper Abstract: Abstract The Data Science domain has expanded monumentally in both research and industry communities during the past decade, predominantly owing to the Big Data revolution. Artificial Intelligence (AI) and Machine Learning (ML) are bringing more complexities to data engineering applications, which are now integrated into data processing pipelines to process terabytes of data. Typically, a significant amount of time is spent on data preprocessing in these pipelines, and hence improving its efficiency directly impacts the overall pipeline performance. The community has recently embraced the concept of Dataframes as the de-facto data structure for data representation and manipulation. However, the most widely used serial Dataframes today (R, pandas) experience performance limitations while working on even moderately large data sets. We believe that there is plenty of room for improvement by taking a look at this problem from a high-performance computing point of view. In a prior publication, we presented a set of parallel processing patterns for distributed dataframe operators and the reference runtime implementation, Cylon [1]. In this paper, we are expanding on the initial concept by introducing a cost model for evaluating the said patterns. Furthermore, we evaluate the performance of Cylon on the ORNL Summit supercomputer.\n\n{retrieved_text}\n\nGenerate exactly 51 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 51\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"High performance dataframes from parallel processing patterns\",\n        \"Apache hadoop\",\n        \"Mapreduce: simplified data processing on large clusters\",\n        \"Apache spark™ - unified engine for large-scale data analytics\",\n        \"Apache flink: Stateful computations over data streams\",\n        \"Pandas: a foundational python library for data analysis and statistics\",\n        \"A bridging model for parallel computation\",\n        \"Solving problems on concurrent processors vol. 1: General techniques and regular problems\",\n        \"Cylon\",\n        \"Scaling joins to a thousand gpus\",\n        \"High performance data engineering everywhere\",\n        \"rapidsai/cudf: cudf - gpu dataframe library\",\n        \"Ray: A distributed framework for emerging {{AI}} applications\",\n        \"Shuffling for groupby and join — dask documentation\",\n        \"Performance tips and tuning — ray 2.0.0\",\n        \"Ucx: an open source framework for hpc network apis and beyond\",\n        \"Open mpi: Open source high performance computing\",\n        \"facebookincubator/gloo: Collective communications library with various primitives for multi-machine training.\",\n        \"Pmix — process management interface - exascale copyright 2017-2020 pmix community\",\n        \"Towards scalable dataframe systems\",\n        \"The communication challenge for mpp: Intel paragon and meiko cs-2\",\n        \"Logp: Towards a realistic model of parallel computation\",\n        \"Loggp: Incorporating long messages into the logp model for parallel computation\",\n        \"Optimization of collective communication operations in mpich\",\n        \"Implementing a classic: Zero-copy all-to-all communication with mpi datatypes\",\n        \"Efficient algorithms for all-to-all communications in multiport message passing systems\",\n        \"Performance analysis of mpi collective operations\",\n        \"Collmark: Mpi collective communication benchmark\",\n        \"Optimization of collective reduction operations\",\n        \"On the versatility of parallel sorting by regular sampling\",\n        \"A fast, scalable, universal approach for distributed data reductions\",\n        \"Distributed join algorithms on thousands of cores\",\n        \"Summit user guide - olcf user documentation\",\n        \"Conda - conda documentation\",\n        \"Pypi - the python package index\",\n        \"Ibm spectrum mpi - overview\",\n        \"pandas - python data analysis library\",\n        \"Towards scalable high performance data engineering systems\",\n        \"Supercharging distributed computing environments for high performance data engineering\",\n        \"Tpc-homepage\",\n        \"Optimizing the deep learning recommendation model on nvidia gpus\",\n        \"Hptmt: Operator-based architecture for scalable high-performance data-intensive frameworks\",\n        \"Twister2: Design of a big data toolkit\",\n        \"Hiframes: High performance data frames in a scripting language\",\n        \"Dask — scale the python tools you love\",\n        \"Dask: Parallel computation with blocked algorithms and task scheduling\",\n        \"Modin, Scale your pandas workflow by changing a single line of code — modin 0.18.0 documentation\",\n        \"Resilient distributed datasets: A {{Fault-Tolerant}} abstraction for {{In-Memory}} cluster computing\",\n        \"Velox: Meta’s unified execution engine\",\n        \"Photon: A fast query engine for lakehouse systems\",\n        \"substrait-io/substrait: A cross platform way to express data transformation, relational algebra, standardized record expression and plans.\"\n    ],\n    \"reasoning\": \"Selected these 51 references because they represent foundational work and recent advances in In-depth Analysis On Parallel Processing Patterns for High-Performance Dataframes, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}