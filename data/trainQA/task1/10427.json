{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 45 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Large Language Models Based Fuzzing Techniques: A Survey\n\nPaper Abstract: Abstract In the modern era where software plays a pivotal role, software security and vulnerability analysis have become essential for software development. Fuzzing test, as an efficient software testing method, are widely used in various domains. Moreover, the rapid development of Large Language Models (LLMs) has facilitated their application in the field of software testing, demonstrating remarkable performance. Considering existing fuzzing test techniques are not entirely automated and software vulnerabilities continue to evolve, there is a growing trend towards employing fuzzing test generated based on large language models. This survey provides a systematic overview of the approaches that fuse LLMs and fuzzing tests for software testing. In this paper, a statistical analysis and discussion of the literature in three areas, including LLMs, fuzzing test, and fuzzing test generated based on LLMs, are conducted by summarising the state-of-the-art methods up until 2024. Our survey also investigates the potential for widespread deployment and application of fuzzing test techniques generated by LLMs in the future.\n\n{retrieved_text}\n\nGenerate exactly 45 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 45\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Large language models for fuzzing parsers (registered report)\",\n        \"Claude 2 — anthropic.com.\",\n        \"Coverage-based greybox fuzzing as markov chain\",\n        \"Directed greybox fuzzing\",\n        \"Language models are few-shot learners\",\n        \"A systematic review of fuzzing techniques\",\n        \"Evaluating large language models trained on code\",\n        \"Fuzzing deep-learning libraries via automated relational api inference\",\n        \"Large language models are zero-shot fuzzers: Fuzzing deep-learning libraries via large language models\",\n        \"Large language models are edge-case fuzzers: Testing deep learning libraries via fuzzgpt\",\n        \"Bert: Pre-training of deep bidirectional transformers for language understanding\",\n        \"Incoder: A generative model for code infilling and synthesis\",\n        \"Decoder-only or encoder-decoder? interpreting language model as a regularized encoder-decoder\",\n        \"AI-Powered Fuzzing: Breaking the Bug Hunting Barrier — security.googleblog.com.\",\n        \"Welcome — vdalabs.com.\",\n        \"Muffin: Testing deep learning libraries via neural architecture fuzzing\",\n        \"Augmenting greybox fuzzing with generative ai\",\n        \"Bertrlfuzzer: A bert and reinforcement learning based fuzzer\",\n        \"Challenges and applications of large language models\",\n        \"Evaluating fuzz testing\",\n        \"Fairfuzz: A targeted mutation strategy for increasing greybox fuzz testing coverage\",\n        \"Fuzzing: State of the art\",\n        \"Identifying insufficient data coverage in databases with multiple relations\",\n        \"Testing the limits: Unusual text inputs generation for mobile app crash detection with large language model\",\n        \"Demystify the fuzzing methods: A comprehensive survey\",\n        \"The art, science, and engineering of fuzzing: A survey\",\n        \"Large language model guided protocol fuzzing\",\n        \"A comprehensive overview of large language models\",\n        \"Codegen: An open large language model for code with multi-turn program synthesis\",\n        \"Language models as knowledge bases?\",\n        \"Aflnet: a greybox fuzzer for network protocols\",\n        \"Nsfuzz: Towards efficient and state-aware network service fuzzing\",\n        \"Chemfuzz: Large language models-assisted fuzzing for quantum chemistry software bug detection\",\n        \"Improving language understanding by generative pre-training\",\n        \"GitHub - google/honggfuzz: Security oriented software fuzzer. Supports evolutionary, feedback-driven fuzzing based on code coverage (SW and HW based) — github.com.\",\n        \"StarCoder: A State-of-the-Art LLM for Code — huggingface.co.\",\n        \"Superion: Grammar-aware greybox fuzzing\",\n        \"Deep learning library testing via effective model generation\",\n        \"Free lunch for testing: Fuzzing deep-learning libraries from open source\",\n        \"Smart fuzzing of 5g wireless software implementation\",\n        \"Fuzz4all: Universal fuzzing with large language models\",\n        \"Parafuzz: An interpretability-driven technique for detecting poisoned samples in nlp\",\n        \"White-box compiler fuzzing empowered by large language models\",\n        \"american fuzzy lop — lcamtuf.coredump.cx.\",\n        \"Understanding large language model based fuzz driver generation\"\n    ],\n    \"reasoning\": \"Selected these 45 references because they represent foundational work and recent advances in Large Language Models Based Fuzzing Techniques: A Survey, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}