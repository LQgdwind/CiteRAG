{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 49 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Evaluation of OpenAI Codex for HPC Parallel Programming Models Kernel Generation\n\nPaper Abstract: Abstract. We evaluate AI-assisted generative capabilities on fundamental numerical kernels in high-performance computing (HPC), including AXPY, GEMV, GEMM, SpMV, Jacobi Stencil, and CG. We test the generated kernel codes for a variety of language-supported programming models, including (1) C++ (e.g., OpenMP [including offload], OpenACC, Kokkos, SyCL, CUDA, and HIP), (2) Fortran (e.g., OpenMP [including offload] and OpenACC), (3) Python (e.g., numba, Numba, cuPy, and pyCUDA), and (4) Julia (e.g., Threads, CUDA.jl, AMDGPU.jl, and KernelAbstractions.jl). We use the GitHub Copilot capabilities powered by OpenAI Codex available in Visual Studio Code as of April 2023 to generate a vast amount of implementations given simple <kernel> + <programming model> + <optional hints> prompt variants. To quantify and compare the results, we propose a proficiency metric around the initial 10 suggestions given for each prompt. Results suggest that the OpenAI Codex outputs for C++ correlate with the adoption and maturity of programming models. For example, OpenMP and CUDA score really high, whereas HIP is still lacking. We found that prompts from either a targeted language such as Fortran or the more general-purpose Python can benefit from adding code keywords, while Julia prompts perform acceptably well for its mature programming models (e.g., Threads and CUDA.jl). We expect for these benchmarks to provide a point of reference for each programming model’s community. Overall, understanding the convergence of large language models, AI, and HPC is crucial due to its rapidly evolving nature and how it is redefining human-computer interactions.\n\n{retrieved_text}\n\nGenerate exactly 49 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 49\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"AMD ROCm v5.2 Release\",\n        \"Fortran\",\n        \"Effective Extensible Programming: Unleashing Julia on GPUs\",\n        \"Julia: A Fresh Approach to Numerical Computing\",\n        \"Exploring the Implications of OpenAI Codex on Education for Industry 4.0\",\n        \"Language Models are Few-Shot Learners\",\n        \"Kokkos: Enabling manycore performance portability through polymorphic memory access patterns\",\n        \"Evaluating large language models trained on code\",\n        \"JuliaGPU/KernelAbstractions.jl: v0.8.3\",\n        \"Code Generation Using Machine Learning: A Systematic Review\",\n        \"Conversing with Copilot: Exploring Prompt Engineering for Solving CS1 Problems Using Natural Language\",\n        \"DARPA’s HPCS Program: History, Models, Tools, Languages\",\n        \"The International Exascale Software Project roadmap\",\n        \"One-shot learning of object categories\",\n        \"Object Classification from a Single Example Utilizing Class Relevance Metrics\",\n        \"The Robots Are Coming: Exploring the Implications of OpenAI Codex on Introductory Programming\",\n        \"GPT-3: Its nature, scope, limits, and consequences\",\n        \"Evaluating performance and portability of high-level programming models: Julia, Python/Numba, and Kokkos on exascale nodes\",\n        \"PSB2: The Second Program Synthesis Benchmark Suite\",\n        \"Advances in natural language processing\",\n        \"Is GitHub Copilot a Substitute for Human Pair-Programming? An Empirical Study\",\n        \"The Rodinia Benchmarks in SYCL\",\n        \"Hecbench\",\n        \"PyExaFMM: an exercise in designing high-performance software with Python and Numba\",\n        \"pycuda 2022.2.2 documentation\",\n        \"PyCUDA and PyOpenCL: A scripting-based approach to GPU run-time code generation\",\n        \"Experimental multi-threading support for the Julia programming language\",\n        \"Exascale Computing in the United States\",\n        \"Numba: A LLVM-based Python JIT compiler\",\n        \"Analysis of the popularity of programming languages in open source software communities\",\n        \"An Empirical Evaluation of GitHub Copilot’s Code Suggestions\",\n        \"Cupy: A numpy-compatible library for nvidia gpu calculations\",\n        \"CUDA Toolkit Documentation - v11.7.0\",\n        \"The API reference guide for Thrust, the CUDA C++ template library\",\n        \"OpenACC Application Program Interface Version 3.1\",\n        \"OpenMP Application Program Interface Version 5.2\",\n        \"Asleep at the Keyboard? Assessing the Security of GitHub Copilot’s Code Contributions\",\n        \"CuPy – NumPy & SciPy for GPU\",\n        \"JuliaGPU/AMDGPU.jl: v0.4.1\",\n        \"Automatic Generation of Programming Exercises and Code Explanations Using Large Language Models\",\n        \"Choose Your Programming Copilot: A Comparison of the Program Synthesis Performance of Github Copilot and Genetic Programming\",\n        \"The C++ programming language\",\n        \"Expectation vs. Experience: Evaluating the Usability of Code Generation Tools Powered by Large Language Models\",\n        \"The NumPy array: a structure for efficient numerical computation\",\n        \"Python Programming Language.\",\n        \"Extreme Heterogeneity 2018 - Productive Computational Science in the Era of Extreme Heterogeneity: Report for DOE ASCR Workshop on Extreme Heterogeneity\",\n        \"Generalizing from a Few Examples: A Survey on Few-Shot Learning\",\n        \"Using GitHub Copilot to Solve Simple Programming Problems\",\n        \"Assessing the Quality of GitHub Copilot’s Code Generation\"\n    ],\n    \"reasoning\": \"Selected these 49 references because they represent foundational work and recent advances in Evaluation of OpenAI Codex for HPC Parallel Programming Models Kernel Generation, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}