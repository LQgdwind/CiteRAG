{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 45 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: ComPar: Optimized Multi-Compiler for Automatic OpenMP S2S Parallelization\n\nPaper Abstract: Abstract Parallelization schemes are essential in order to exploit the full benefits of multi-core architectures, which have become widespread in recent years. In shared-memory architectures, the most comprehensive parallelization API is OpenMP. However, the introduction of correct and optimal OpenMP parallelization to applications is not always a simple task, due to common parallel shared-memory management pitfalls, architecture heterogeneity and the current necessity for human expertise in order to comprehend many fine details and abstract correlations. To ease this process, many automatic parallelization compilers were created over the last decade. [1] tested several source-to-source compilers and concluded that each has its advantages and disadvantages and no compiler is superior to all other compilers in all tests. This indicates that a fusion of the compilers’ best outputs under the best hyper-parameters for the current hardware setups can yield greater speedups. To create such a fusion, one should execute a computationally intensive hyper-parameter sweep, in which the performance of each option is estimated and the best option is chosen. We created a novel parallelization source-to-source multi-compiler named ComPar, which uses code segmentation-and-fusion with hyper-parameters tuning to achieve the best parallel code possible without any human intervention while maintaining the program’s validity. In this paper we present ComPar and analyze its results on NAS and PolyBench benchmarks. We conclude that although the resources ComPar requires to produce parallel code are greater than other source-to-source parallelization compilers – as it depends on the number of parameters the user wishes to consider, and their combinations – ComPar achieves superior performance overall compared to the serial code version and other tested parallelization compilers. ComPar is publicly available at: https://github.com/Scientific-Computing-Lab-NRCN/compar.\n\n{retrieved_text}\n\nGenerate exactly 45 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 45\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Source-to-source parallelization compilers for scientific shared-memory multi-core and accelerated multiprocessing: Analysis, pitfalls, enhancement and potential\",\n        \"Design of ion-implanted mosfet’s with very small physical dimensions\",\n        \"A survey of multicore processors\",\n        \"An introduction to parallel programming\",\n        \"Working Effectively with Legacy Code\",\n        \"Openmp: an industry standard api for shared-memory programming\",\n        \"A study on popular auto-parallelization frameworks\",\n        \"Understanding source code evolution using abstract syntax tree matching\",\n        \"Identifying pitfalls in automatic parallelization of nas parallel benchmarks\",\n        \"Cetus: A source-to-source compiler infrastructure for multicores\",\n        \"Par4all: From convex array regions to heterogeneous computing\",\n        \"Pluto: A practical and fully automatic polyhedral parallelizer and locality optimizer\",\n        \"Parallware: The OpenMP-enabling Source-to-Source Compiler\",\n        \"Novel source-to-source compiler approach for the automatic parallelization of codes based on the method of moments\",\n        \"ROSE homepage\",\n        \"Rose: Compiler support for object-oriented frameworks\",\n        \"Intel c++ compiler for linux systems user’s guide\",\n        \"The nas parallel benchmarks\",\n        \"Gprof: A call graph execution profiler\",\n        \"AutoPar documentations\",\n        \"Towards autotuning of openmp applications on multicore architectures\",\n        \"Effective source-to-source outlining to support whole program empirical optimization\",\n        \"Performance analysis and tuning of automatically parallelized openmp applications\",\n        \"Autotuning and adaptivity in energy efficient hpc systems: the antarex toolbox\",\n        \"Autotuning in high-performance computing applications\",\n        \"A framework for enabling openmp autotuning\",\n        \"Using OpenMP The Next Step: Affinity, Accelerators, Tasking, and SIMD\",\n        \"Using MPI: portable parallel programming with the message-passing interface, volume 1\",\n        \"Mcompiler: A synergistic compilation framework\",\n        \"Pgi compiler user’s guide\",\n        \"Gcc online documentation\",\n        \"Llvm and clang: Next generation compiler technology\",\n        \"Polly-polyhedral optimization in llvm\",\n        \"Cetus homepage\",\n        \"Par4All homepage\",\n        \"SLURM\",\n        \"ComPar GitHub\",\n        \"PolyBench Benchmarks\",\n        \"AMD Opteron(tm) Processor 6376\",\n        \"Nas parallel benchmarks\",\n        \"Polybench: The polyhedral benchmark suite\",\n        \"Understanding polybench/c 3.2 kernels\",\n        \"Towards a holistic approach to auto-parallelization: integrating profile-driven parallelism detection and machine-learning based mapping\",\n        \"Vtune performance analyzer essentials\",\n        \"NegevHPC Project\"\n    ],\n    \"reasoning\": \"Selected these 45 references because they represent foundational work and recent advances in ComPar: Optimized Multi-Compiler for Automatic OpenMP S2S Parallelization, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}