{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 53 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: cmaes : A Simple yet Practical Python Library for CMA-ES\n\nPaper Abstract: Abstract. The covariance matrix adaptation evolution strategy (CMA-ES) has been highly effective in black-box continuous optimization, as demonstrated by its success in both benchmark problems and various real-world applications. To address the need for an accessible yet potent tool in this domain, we developed cmaes, a simple and practical Python library for CMA-ES. cmaes is characterized by its simplicity, offering intuitive use and high code readability. This makes it suitable for quickly using CMA-ES, as well as for educational purposes and seamless integration into other libraries. Despite its simplistic design, cmaes maintains enhanced functionality. It incorporates recent advancements in CMA-ES, such as learning rate adaptation for challenging scenarios, transfer learning, and mixed-integer optimization capabilities. These advanced features are accessible through a user-friendly API, ensuring that cmaes can be easily adopted in practical applications. We regard cmaes as the first choice for a Python CMA-ES library among practitioners. The software is available under the MIT license at https://github.com/CyberAgentAILab/cmaes.\n\n{retrieved_text}\n\nGenerate exactly 53 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 53\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Optuna: A next-generation hyperparameter optimization framework\",\n        \"Comparison-Based Natural Gradient Optimization in High Dimension\",\n        \"Projection-Based Restricted Covariance Matrix Adaptation for High Dimension\",\n        \"Diagonal Acceleration for Covariance Matrix Adaptation Evolution Strategies\",\n        \"Bidirectional Relation between CMA Evolution Strategies and Natural Evolution Strategies\",\n        \"Efficient Feature Selection via CMA-ES (Covariance Matrix Adaptation Evolution Strategy)\",\n        \"Linearly Convergent Evolution Strategies via Augmented Lagrangian Constraint Handling\",\n        \"A Restart CMA Evolution Strategy With Increasing Population Size\",\n        \"Flake8\",\n        \"Pymoo: Multi-Objective Optimization in Python\",\n        \"Object-Oriented Programming of Optimizersâ€“Examples in Scilab\",\n        \"Hyperparameter Optimization\",\n        \"The Python Package Index\",\n        \"Black\",\n        \"A Tutorial on Bayesian Optimization\",\n        \"A Scalable and Cloud-Native Hyperparameter Tuning System\",\n        \"Atheris\",\n        \"World Models\",\n        \"CMA-ES with Margin: Lower-Bounding Marginal Probability for Mixed-Integer Black-Box Optimization\",\n        \"Marginal Probability-Based Integer Handling for CMA-ES Tackling Single-and Multi-Objective Mixed-Integer Black-Box Optimization\",\n        \"Benchmarking a BI-Population CMA-ES on the BBOB-2009 Function Testbed\",\n        \"The CMA Evolution Strategy: A Tutorial\",\n        \"A Global Surrogate Assisted CMA-ES\",\n        \"CMA-ES/pycma on Github\",\n        \"Principled Design of Continuous Stochastic Search: From Theory to Practice\",\n        \"COCO: A Platform for Comparing Continuous Optimizers in a Black-Box Setting\",\n        \"Evaluating the CMA Evolution Strategy on Multimodal Test Functions\",\n        \"Completely Derandomized Self-Adaptation in Evolution Strategies\",\n        \"Array programming with NumPy\",\n        \"Modeling Visual Containment for Web Page Layout Optimization\",\n        \"Constrained Graphic Layout Generation via Latent Optimization\",\n        \"evosax: JAX-based Evolution Strategies\",\n        \"Hypothesis: A new approach to property-based testing\",\n        \"Well Placement Optimization for Carbon Dioxide Capture and Storage via CMA-ES with Mixed Integer Support\",\n        \"Effect of the Mean Vector Learning Rate in CMA-ES\",\n        \"PSA-CMA-ES: CMA-ES with Population Size Adaptation\",\n        \"CMA-ES with Learning Rate Adaptation: Can CMA-ES with Default Population Size Solve Multimodal and Noisy Problems?\",\n        \"CMA-ES with Learning Rate Adaptation\",\n        \"Warm Starting CMA-ES for Hyperparameter Optimization\",\n        \"CMA-ES for Post Hoc Ensembling in AutoML: A Great Success and Salvageable Failure\",\n        \"Mypy\",\n        \"Nevergrad - A gradient-free optimization platform\",\n        \"Derivative-free optimization: A review of algorithms and comparison of software implementations\",\n        \"A Simple Modification in CMA-ES Achieving Linear Time and Space Complexity\",\n        \"PePy\",\n        \"BBTv2: Towards a Gradient-Free Future with Large Language Models\",\n        \"Black-Box Tuning for Language-Model-as-a-Service\",\n        \"EvoJAX: Hardware-Accelerated Neuroevolution\",\n        \"kurobako\",\n        \"When to be Discrete: Analyzing Algorithm Performance on Discretized Continuous Problems\",\n        \"(1+1)-CMA-ES with Margin for Discrete and Mixed-Integer Problems\",\n        \"Natural Evolution Strategies\",\n        \"Bayesian Optimization for Materials Design with Mixed Quantitative and Qualitative Variables\"\n    ],\n    \"reasoning\": \"Selected these 53 references because they represent foundational work and recent advances in cmaes : A Simple yet Practical Python Library for CMA-ES, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}