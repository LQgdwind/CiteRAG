{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 48 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Improved Bounds on Neural Complexity for Representing Piecewise Linear Functions\n\nPaper Abstract: Abstract A deep neural network using rectified linear units represents a continuous piecewise linear (CPWL) function and vice versa. Recent results in the literature estimated that the number of neurons needed to exactly represent any CPWL function grows exponentially with the number of pieces or exponentially in terms of the factorial of the number of distinct linear components. Moreover, such growth is amplified linearly with the input dimension. These existing results seem to indicate that the cost of representing a CPWL function is expensive. In this paper, we propose much tighter bounds and establish a polynomial time algorithm to find a network satisfying these bounds for any given CPWL function. We prove that the number of hidden neurons required to exactly represent any CPWL function is at most a quadratic function of the number of pieces. In contrast to all previous results, this upper bound is invariant to the input dimension. Besides the number of pieces, we also study the number of distinct linear components in CPWL functions. When such a number is also given, we prove that the quadratic complexity turns into bilinear, which implies a lower neural complexity because the number of distinct linear components is always not greater than the minimum number of pieces in a CPWL function. When the number of pieces is unknown, we prove that, in terms of the number of distinct linear components, the neural complexities of any CPWL function are at most polynomial growth for low-dimensional inputs and factorial growth for the worst-case scenario, which are significantly better than existing results in the literature.\n\n{retrieved_text}\n\nGenerate exactly 48 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 48\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Understanding deep neural networks with rectified linear units\",\n        \"Convex Optimization\",\n        \"ResNEsts and DenseNEsts: Block-based DNN models with improved representation guarantees\",\n        \"Canonical piecewise-linear representation\",\n        \"Approximation by superpositions of a sigmoidal function\",\n        \"The power of depth for feedforward neural networks\",\n        \"Neocognitron: A self-organizing neural network model for a mechanism of pattern recognition unaffected by shift in position\",\n        \"Maxout networks\",\n        \"Complexity of linear regions in deep networks\",\n        \"Deep ReLU networks have surprisingly few activation patterns\",\n        \"ReLU deep neural networks and linear finite elements\",\n        \"Deep residual learning for image recognition\",\n        \"Towards lower bounds on the depth of ReLU neural networks\",\n        \"An analysis of the piece-wise affine structure of ReLU feed-forward neural networks\",\n        \"A framework for the construction of upper bounds on the number of affine linear regions of relu feed-forward neural networks\",\n        \"Multilayer feedforward networks are universal approximators\",\n        \"Densely connected convolutional networks\",\n        \"Un-rectifying non-linear networks for signal representation\",\n        \"A new polynomial-time algorithm for linear programming\",\n        \"A polynomial algorithm in linear programming\",\n        \"ImageNet classification with deep convolutional neural networks\",\n        \"The expressive power of neural networks: A view from the width\",\n        \"Rectifier nonlinearities improve neural network acoustic models\",\n        \"Convex piecewise-linear fitting\",\n        \"Human-level control through deep reinforcement learning\",\n        \"Notes on the number of linear regions of deep neural networks\",\n        \"On the number of linear regions of deep neural networks\",\n        \"Rectified linear units improve restricted boltzmann machines\",\n        \"Max-min representation of piecewise linear functions\",\n        \"On the number of response regions of deep feed forward networks with piece-wise linear activations\",\n        \"On the expressive power of deep neural networks\",\n        \"A polynomial-time algorithm, based on Newtonâ€™s method, for linear programming\",\n        \"Reverse-engineering deep ReLU networks\",\n        \"U-Net: Convolutional networks for biomedical image segmentation\",\n        \"Bounding and counting linear regions of deep neural networks\",\n        \"Mastering the game of Go with deep neural networks and tree search\",\n        \"Very deep convolutional networks for large-scale image recognition\",\n        \"Mathematical problems for the next century\",\n        \"Region configurations for realizability of lattice piecewise-linear models\",\n        \"A representation method for PWL functions oriented to parallel processing\",\n        \"Benefits of depth in neural networks\",\n        \"Size and depth separation in approximating benign functions with neural networks\",\n        \"Attention is all you need\",\n        \"A primal-dual interior point method whose running time depends only on the constraint matrix\",\n        \"General constructive representations for continuous piecewise-linear functions\",\n        \"Generalization of hinging hyperplanes\",\n        \"Facing up to arrangements: Face-count formulas for partitions of space by hyperplanes, volume 154\",\n        \"On rectified linear units for speech processing\"\n    ],\n    \"reasoning\": \"Selected these 48 references because they represent foundational work and recent advances in Improved Bounds on Neural Complexity for Representing Piecewise Linear Functions, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}