{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 49 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: A Simple Approach for State-Action Abstraction using a Learned MDP Homomorphism\n\nPaper Abstract: Abstract Animals can rapidly infer, from limited experience, when sets of state-action pairs have equivalent reward and transition dynamics. On the other hand, reinforcement learning systems must painstakingly learn through trial and error that sets of state-action pairs are value equivalent—requiring a prohibitively large amount of samples from their environment. Previous works use Markov decision process (MDP) homomorphisms, which are abstracted MDPs enabling sample efficient policy learning. Consequently, impressive improvements in sample efficiency have been achieved when a suitable MDP homomorphism can be constructed a priori—usually by exploiting a practitioner’s knowledge of environment symmetries. Here, we propose an approach for constructing homomorphisms in discrete action spaces, which uses a partial model of environment dynamics to infer which state-action pairs lead to the same state—reducing the size of the state-action space by a factor approximately equal to the cardinality of the action space. On MDP homomorphism benchmarks, we demonstrate improved sample efficiency over previous attempts to learn homomorphisms, and achieve comparable sample efficiency to approaches that rely on prior knowledge of environment symmetries.\n\n{retrieved_text}\n\nGenerate exactly 49 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 49\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Contrastive behavioral similarity embeddings for generalization in reinforcement learning\",\n        \"Asap-uct: Abstraction of state-action pairs in uct\",\n        \"Planning in stochastic environments with a learned model\",\n        \"Model-based reinforcement learning exploiting state-action equivalence\",\n        \"Agent57: Outperforming the atari human benchmark\",\n        \"Coberl: Contrastive bert for reinforcement learning\",\n        \"The arcade learning environment: An evaluation platform for general agents\",\n        \"Experiment tracking with weights and biases\",\n        \"Online abstraction with mdp homomorphisms for deep learning\",\n        \"Learning discrete state abstractions with deep variational inference\",\n        \"Openai gym\",\n        \"Bisimulation metrics for continuous markov decision processes\",\n        \"Bisimulation metrics are optimal value functions\",\n        \"Equivalence notions and model minimization in markov decision processes\",\n        \"Learning latent dynamics for planning from pixels\",\n        \"Mastering atari with discrete world models\",\n        \"What uncertainties do we need in bayesian deep learning for computer vision?\",\n        \"Adam: A method for stochastic optimization\",\n        \"Bisimulation through probabilistic testing\",\n        \"Calculus of variations and optimal control theory: a concise introduction\",\n        \"Scaling up q-learning via exploiting state–action equivalence\",\n        \"Revisiting the arcade learning environment: Evaluation protocols and open problems for general agents\",\n        \"How to stay curious while avoiding noisy TVs using aleatoric uncertainty estimation\",\n        \"Kinematic state abstraction and provably efficient rich-observation reinforcement learning\",\n        \"Asynchronous methods for deep reinforcement learning\",\n        \"pandas-dev/pandas: Pandas\",\n        \"Automatic differentiation in pytorch\",\n        \"Automatic data augmentation for generalization in reinforcement learning\",\n        \"Symmetries and model minimization in markov decision processes\",\n        \"Continuous mdp homomorphisms and homomorphic policy gradient\",\n        \"Clockwork variational autoencoders\",\n        \"Proximal policy optimization algorithms\",\n        \"Lecture notes in reinforcement learning\",\n        \"Mastering the game of go with deep neural networks and tree search\",\n        \"Mastering the game of go without human knowledge\",\n        \"rlpyt: A research code base for deep reinforcement learning in pytorch\",\n        \"Reinforcement learning: An introduction\",\n        \"Deepmind control suite\",\n        \"Temporal difference learning and td-gammon\",\n        \"Plannable approximations to mdp homomorphisms: Equivariance under actions\",\n        \"Mdp homomorphic networks: Group symmetries in reinforcement learning\",\n        \"Grandmaster level in starcraft ii using multi-agent reinforcement learning\",\n        \"So (2) equivariant reinforcement learning\",\n        \"Q-learning\",\n        \"Mastering atari games with limited data\",\n        \"Minatar: An atari-inspired testbed for thorough and reproducible reinforcement learning experiments\",\n        \"Learning state representations via retracing in reinforcement learning\",\n        \"Learning invariant representations for reinforcement learning without reconstruction\",\n        \"Invariant action effect model for reinforcement learning\"\n    ],\n    \"reasoning\": \"Selected these 49 references because they represent foundational work and recent advances in A Simple Approach for State-Action Abstraction using a Learned MDP Homomorphism, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}