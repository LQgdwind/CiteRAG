{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 50 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: 1 Introduction\n\nPaper Abstract: Abstract Benefiting from expanding cloud infrastructure, today’s deep neural networks (DNNs) have increasingly high performance when trained in the cloud. Researchers spend months of effort competing for an extra few percentage points of model accuracy. However, when these models are actually deployed on edge devices in practice, very often, the performance can abruptly drop over 10% without obvious reasons. The key challenge is that there is not much visibility into ML inference execution on edge devices, and very little awareness of potential issues during the edge deployment process. We present ML-EXray, an end-to-end framework which provides visibility into layer-level details of the ML execution, and helps developers analyze and debug cloud-to-edge deployment issues. More often than not, the reason for sub-optimal edge performance does not only lie in the model itself, but every operation throughout the data flow and the deployment process. Evaluations show that ML-EXray can effectively catch deployment issues, such as pre-processing bugs, quantization issues, suboptimal kernels, etc. Using ML-EXray, users need to write less than 15 lines of code to fully examine the edge deployment pipeline. Eradicating these issues, ML-EXray can correct model performance by up to 30%, pinpoint error-prone layers, and guide users to optimize kernel execution latency by two orders of magnitude. Code and APIs will be released as an open-source multi-lingual instrumentation library and a Python deployment validation library.\n\n{retrieved_text}\n\nGenerate exactly 50 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 50\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Tensorflow lite built-in op resolver\",\n        \"Tensorflow lite built-in reference op resolver\",\n        \"Qualcomm adreno mobile gpu\",\n        \"Arduino platform\",\n        \"Benchmarking deep learning operations on different hardware\",\n        \"Intel vpu\",\n        \"Tensorflow keras application module: tf.keras.applications\",\n        \"Simple audio recognition tutorial\",\n        \"Tensorflow model optimization\",\n        \"Pytorch mobile\",\n        \"Yamnet: a speech recognition model\",\n        \"A neural probabilistic language model\",\n        \"Deeplab: Semantic image segmentation with deep convolutional nets, atrous convolution, and fully connected crfs\",\n        \"Characterizing and taming model instability across edge devices\",\n        \"Tensorflow lite micro: Embedded machine learning for tinyml systems\",\n        \"Imagenet: A large-scale hierarchical image database\",\n        \"Bert: Pre-training of deep bidirectional transformers for language understanding\",\n        \"An image is worth 16x16 words: Transformers for image recognition at scale\",\n        \"Deep compression: Compressing deep neural networks with pruning, trained quantization and huffman coding\",\n        \"Mobilenets: Efficient convolutional neural networks for mobile vision applications\",\n        \"Densely connected convolutional networks\",\n        \"Quantization and training of neural networks for efficient integer-arithmetic-only inference\",\n        \"Model assertions for debugging machine learning\",\n        \"Quantizing deep convolutional networks for efficient inference: A whitepaper\",\n        \"On-device neural net inference with mobile gpus\",\n        \"On the quantization of recurrent neural networks\",\n        \"Microsoft coco: Common objects in context\",\n        \"Ssd: Single shot multibox detector\",\n        \"Comparison and benchmarking of ai models and frameworks on mobile devices\",\n        \"Learning word vectors for sentiment analysis\",\n        \"Mlperf training benchmark\",\n        \"A white paper on neural network quantization\",\n        \"Challenges in deploying machine learning: a survey of case studies\",\n        \"Mlperf inference benchmark\",\n        \"Mlperf mobile inference benchmark\",\n        \"Faster r-cnn: Towards real-time object detection with region proposal networks\",\n        \"How tensorflow’s tf.image.resize stole 60 days of my life\",\n        \"Optimizing speech recognition for the edge\",\n        \"A survey on image data augmentation for deep learning\",\n        \"Very deep convolutional networks for large-scale image recognition\",\n        \"Mobilebert: a compact task-agnostic bert for resource-limited devices\",\n        \"Efficientdet: Scalable and efficient object detection\",\n        \"To bridge neural network design and real-world performance: A behaviour study for neural networks\",\n        \"Benchip: Benchmarking intelligence processors\",\n        \"The jpeg still picture compression standard\",\n        \"A systematic methodology for analysis of deep learning hardware and software platforms\",\n        \"Speech Commands: A Dataset for Limited-Vocabulary Speech Recognition\",\n        \"Tinyml: Machine learning with tensorflow lite on arduino and ultra-low-power microcontrollers\",\n        \"nn-meter: towards accurate latency prediction of deep-learning model inference on diverse edge devices\",\n        \"Voxelnet: End-to-end learning for point cloud based 3d object detection\"\n    ],\n    \"reasoning\": \"Selected these 50 references because they represent foundational work and recent advances in 1 Introduction, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}