{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 59 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Lero: A Learning-to-Rank Query Optimizer\n\nPaper Abstract: Abstract. A recent line of works apply machine learning techniques to assist or rebuild cost-based query optimizers in DBMS. While exhibiting superiority in some benchmarks, their deficiencies, e.g., unstable performance, high training cost, and slow model updating, stem from the inherent hardness of predicting the cost or latency of execution plans using machine learning models. In this paper, we introduce a learning-to-rank query optimizer, called Lero, which builds on top of a native query optimizer and continuously learns to improve the optimization performance. The key observation is that the relative order or rank of plans, rather than the exact cost or latency, is sufficient for query optimization. Lero employs a pairwise approach to train a classifier to compare any two plans and tell which one is better. Such a binary classification task is much easier than the regression task to predict the cost or latency, in terms of model efficiency and accuracy. Rather than building a learned optimizer from scratch, Lero is designed to leverage decades of wisdom of databases and improve the native query optimizer. With its non-intrusive design, Lero can be implemented on top of any existing DBMS with minimal integration efforts. We implement Lero and demonstrate its outstanding performance using PostgreSQL. In our experiments, Lero achieves near optimal performance on several benchmarks. It reduces the plan execution time of the native optimizer in PostgreSQL by up to 70%percent7070\\% and other learned query optimizers by up to 37%percent3737\\%. Meanwhile, Lero continuously learns and automatically adapts to query workloads and changes in data.\n\n{retrieved_text}\n\nGenerate exactly 59 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 59\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Balsa Implementation\",\n        \"Lero on PostgreSQL\",\n        \"Database Tuning Advisor for Microsoft SQL Server 2005\",\n        \"Scope: easy and efficient parallel processing of massive data sets\",\n        \"An Efficient Cost-Driven Index Selection Tool for Microsoft SQL Server\",\n        \"Revisiting distributed synchronous SGD\",\n        \"TPC-DS Vesion 2 and Version 3\",\n        \"TPC-H Vesion 2 and Version 3\",\n        \"Efficiently approximating query optimizer plan diagrams\",\n        \"Ai meets ai: Leveraging query executions to improve index recommendations\",\n        \"Identifying robust plans through plan diagram reduction\",\n        \"Selectivity estimation for range predicates using lightweight models\",\n        \"An efficient boosting algorithm for combining preferences\",\n        \"Optimum polynomial retrieval functions based on the probability ranking principle\",\n        \"Github repository: STATS End-to-End CardEst Benchmark\",\n        \"Cardinality Estimation in DBMS: A Comprehensive Benchmark Evaluation\",\n        \"Deep q-learning from demonstrations\",\n        \"DeepDB: learn from data, not from queries!\",\n        \"Preference Learning\",\n        \"Scheduling with inserted idle time: problem taxonomy and literature review\",\n        \"Learning to rank for recommender systems\",\n        \"Learned cardinalities: Estimating correlated joins with deep learning\",\n        \"Learning to optimize join queries with deep reinforcement learning\",\n        \"How good are query optimizers, really?\",\n        \"Robust estimation of resource consumption for sql queries using statistical techniques\",\n        \"Mcrank: Learning to rank using multiple classification and gradient boosting\",\n        \"Fauce: fast and accurate deep ensembles with uncertainty for cardinality estimation\",\n        \"Learning to Rank for Information Retrieval\",\n        \"Personalized Re-ranking with Item Relationships for E-commerce\",\n        \"Bao appendix\",\n        \"Github repository: Bao for PostgreSQL\",\n        \"Bao: Making learned query optimization practical\",\n        \"Neo: A Learned Query Optimizer\",\n        \"Plan-structured deep neural network models for query performance prediction\",\n        \"Preventing Bad Plans by Bounding the Impact of Cardinality Estimation Errors\",\n        \"Convolutional neural networks over tree structures for programming language processing\",\n        \"Steering Query Optimizers: A Practical Take on Big Data Workloads\",\n        \"Setrank: Learning a permutation-invariant ranking model for information retrieval\",\n        \"Analyzing Plan Diagrams of Database Query Optimizers\",\n        \"Access path selection in a relational database management system\",\n        \"An end-to-end learning-based cost estimator\",\n        \"Pirank: Scalable learning to rank via differentiable sorting\",\n        \"On the likelihood that one unknown probability exceeds another in view of the evidence of two samples\",\n        \"Skinnerdb: Regret-bounded query evaluation via reinforcement learning\",\n        \"Lightweight graphical models for selectivity estimation without independence assumptions\",\n        \"DB2 Advisor: An Optimizer Smart Enough to Recommend Its Own Indexes\",\n        \"Rank and relevance in novelty and diversity metrics for recommender systems\",\n        \"Are We Ready For Learned Cardinality Estimation?\",\n        \"Predicting query execution time: Are optimizer cost models really unusable?\",\n        \"BayesCard: A Unified Bayesian Framework for Cardinality Estimation\",\n        \"Balsa: Learning a Query Optimizer Without Expert Demonstrations\",\n        \"NeuroCard: One Cardinality Estimator for All Tables\",\n        \"Deep unsupervised cardinality estimation\",\n        \"Reinforcement learning with tree-lstm for join order selection\",\n        \"Efficient Deep Learning Pipelines for Accurate Cost Estimations Over Large Scale Query Workload\",\n        \"A survey on contextual multi-armed bandits\",\n        \"Query performance prediction for concurrent queries using graph embedding\",\n        \"Learned Query Optimizer: At the Forefront of AI-Driven Databases.\",\n        \"FLAT: Fast, Lightweight and Accurate Method for Cardinality Estimation\"\n    ],\n    \"reasoning\": \"Selected these 59 references because they represent foundational work and recent advances in Lero: A Learning-to-Rank Query Optimizer, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}