{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 50 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Dr Jekyll and Mr Hyde: The Strange Case of Off-Policy Policy Updates\n\nPaper Abstract: Abstract The policy gradient theorem states that the policy should only be updated in states that are visited by the current policy, which leads to insufficient planning in the off-policy states, and thus to convergence to suboptimal policies. We tackle this planning issue by extending the policy gradient theory to policy updates with respect to any state density. Under these generalized policy updates, we show convergence to optimality under a necessary and sufficient condition on the updates‚Äô state densities, and thereby solve the aforementioned planning issue. We also prove asymptotic convergence rates that significantly improve those in the policy gradient literature. To implement the principles prescribed by our theory, we propose an agent, Dr Jekyll & Mr Hyde (J&H), with a double personality: Dr Jekyll purely exploits while Mr Hyde purely explores. J&H‚Äôs independent policies allow to record two separate replay buffers: one on-policy (Dr Jekyll‚Äôs) and one off-policy (Mr Hyde‚Äôs), and therefore to update J&H‚Äôs models with a mixture of on-policy and off-policy updates. More than an algorithm, J&H defines principles for actor-critic algorithms to satisfy the requirements we identify in our analysis. We extensively test on finite MDPs where J&H demonstrates a superior ability to recover from converging to a suboptimal policy without impairing its speed of convergence. We also implement a deep version of the algorithm and test it on a simple problem where it shows promising results.\n\n{retrieved_text}\n\nGenerate exactly 50 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 50\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Spinning up in deep reinforcement learning\",\n        \"Optimality and approximation with policy gradient methods in markov decision processes\",\n        \"Unifying count-based exploration and intrinsic motivation\",\n        \"Large-scale multiclass support vector machine training via euclidean projection onto the simplex\",\n        \"Exploration by random network distillation\",\n        \"Reinforcement learning coach\",\n        \"Deep reinforcement learning algorithms with pytorch\",\n        \"Better exploration with optimistic actor critic\",\n        \"Expected policy gradients\",\n        \"Off-policy actor-critic\",\n        \"Openai baselines\",\n        \"Soft actor-critic: Off-policy maximum entropy deep reinforcement learning with a stochastic actor\",\n        \"Distributed prioritized experience replay\",\n        \"An off-policy policy gradient theorem using emphatic weightings\",\n        \"Actor-critic algorithms\",\n        \"Pytorch implementations of reinforcement learning algorithms\",\n        \"Safe policy improvement with baseline bootstrapping\",\n        \"Rllib: Abstractions for distributed reinforcement learning\",\n        \"Continuous control with deep reinforcement learning\",\n        \"Off-policy policy gradient with stationary distribution correction\",\n        \"On the global convergence rates of softmax policy gradient methods\",\n        \"Asynchronous methods for deep reinforcement learning\",\n        \"Human-level control through deep reinforcement learning\",\n        \"Is the policy gradient a gradient?\",\n        \"Openai five\",\n        \"Logarithmic online regret bounds for undiscounted reinforcement learning\",\n        \"Deep exploration via bootstrapped dqn\",\n        \"Deep exploration via randomized value functions\",\n        \"Eligibility traces for off-policy policy evaluation\",\n        \"Density constrained reinforcement learning\",\n        \"Opac: Opportunistic actor-critic\",\n        \"Prioritized experience replay\",\n        \"Off-policy actor-critic with shared experience replay\",\n        \"Trust region policy optimization\",\n        \"Proximal policy optimization algorithms\",\n        \"Mastering the game of go with deep neural networks and tree search\",\n        \"Deterministic policy gradient algorithms\",\n        \"rlpyt: A research code base for deep reinforcement learning in pytorch\",\n        \"Reinforcement Learning: An Introduction (2nd Edition)\",\n        \"Policy gradient methods for reinforcement learning with function approximation\",\n        \"Between mdps and semi-mdps: A framework for temporal abstraction in reinforcement learning\",\n        \"Bias in natural actor-critic algorithms\",\n        \"Data-efficient off-policy policy evaluation for reinforcement learning\",\n        \"Adaptive ŒµùúÄ\\\\varepsilon-greedy exploration in reinforcement learning based on value differences\",\n        \"Deep reinforcement learning with double q-learning\",\n        \"Sample efficient actor-critic with experience replay\",\n        \"Simple statistical gradient-following algorithms for connectionist reinforcement learning\",\n        \"Modularized implementation of deep rl algorithms in pytorch\",\n        \"Generalized off-policy actor-critic\",\n        \"A deeper look at discounting mismatch in actor-critic algorithms\"\n    ],\n    \"reasoning\": \"Selected these 50 references because they represent foundational work and recent advances in Dr Jekyll and Mr Hyde: The Strange Case of Off-Policy Policy Updates, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}