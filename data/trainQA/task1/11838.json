{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 45 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: WasmWalker: Path-based Code Representations for Improved WebAssembly Program Analysis\n\nPaper Abstract: Abstract WebAssembly, or Wasm, is a low-level binary language that enables execution of near-native-performance code in web browsers. Wasm has proven to be useful in applications including gaming, audio and video processing, and cloud computing, providing a high-performance, low-overhead alternative to JavaScript in web development. The fast and widespread adoption of WebAssembly by all major browsers has created an opportunity for analysis tools that support this new technology. Deep learning program analysis models can greatly benefit from the program structure information included in Abstract Syntax Tree (AST)-aware code representations. To obtain such code representations, we performed an empirical analysis on the AST paths in the WebAssembly Text format of a large dataset of WebAssembly binary files compiled from source packages in the Ubuntu 18.04 repositories. After refining the collected paths, we discovered that only 3,352 unique paths appeared across all of these binary files. With this insight, we propose two novel code representations for WebAssembly binaries. These novel representations serve not only to generate fixed-size code embeddings but also to supply additional information to sequence-to-sequence models. Ultimately, our approach helps program analysis models uncover new properties from Wasm binaries, expanding our understanding of their potential. We evaluated our new code representation on two applications: (i) method name prediction and (ii) recovering precise return types. Our results demonstrate the superiority of our novel technique over previous methods. More specifically, our new method resulted in 5.36% (11.31%) improvement in Top-1 (Top-5) accuracy in method name prediction and 8.02% (7.92%) improvement in recovering precise return types, compared to the previous state-of-the-art technique, SnowWhite.\n\n{retrieved_text}\n\nGenerate exactly 45 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 45\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Emscripten: A C/C++ to JavaScript compiler\",\n        \"Suggesting accurate method and class names\",\n        \"code2vec: Learning distributed representations of code\",\n        \"Learning-based vulnerability detection in binary code\",\n        \"Neural machine translation by jointly learning to align and translate\",\n        \"Ahoy SAILR! there is no need to dream of C: A compiler-aware structuring algorithm for binary decompilation\",\n        \"A novel deep learning-based feature selection model for improving the static analysis of vulnerability detection\",\n        \"Neural code comprehension: A learnable representation of code semantics\",\n        \"Language models are few-shot learners\",\n        \"Learning-based recursive aggregation of abstract syntax trees for code clone detection\",\n        \"A literature study of embeddings on source code\",\n        \"Neural nets can learn function type signatures from binaries\",\n        \"Reverse compilation techniques\",\n        \"Semantic code repair using neuro-symbolic transformation networks\",\n        \"Scalable graph-based bug search for firmware images\",\n        \"CodeBERT: A pre-trained model for programming and natural languages\",\n        \"Bringing the web up to speed with WebAssembly\",\n        \"Digital Design and Computer Architecture\",\n        \"An empirical study of real-world WebAssembly binaries: Security, languages, use cases\",\n        \"Long short-term memory\",\n        \"LLVM: a compilation framework\",\n        \"Not so fast: Analyzing the performance of WebAssembly vs. native code\",\n        \"Adam: A method for stochastic optimization\",\n        \"Opennmt: Open-source toolkit for neural machine translation\",\n        \"Pathminer: a library for mining of path-based representations of code\",\n        \"Everything old is new again: Binary security of WebAssembly\",\n        \"Finding the Dwarf: Recovering precise types from WebAssembly binaries\",\n        \"CCLearner: A deep learning-based clone detection approach\",\n        \"Vuldeepecker: A deep learning-based system for vulnerability detection\",\n        \"Visualizing data using t-SNE\",\n        \"Deep neural network based hybrid approach for software defect prediction using software metrics\",\n        \"Distributed representations of words and phrases and their compositionality\",\n        \"Binaryen\",\n        \"Deep learning based software defect prediction\",\n        \"Code completion with statistical language models\",\n        \"A cross-architecture instruction embedding model for natural language processing-inspired binary code analysis\",\n        \"Bidirectional recurrent neural networks\",\n        \"Psiminer: A tool for mining rich abstract syntax trees from code\",\n        \"Dropout: A simple way to prevent neural networks from overfitting\",\n        \"WebAssembly Binary Toolkit\",\n        \"Attention is all you need\",\n        \"Detecting code clones with graph neural network and flow-augmented abstract syntax tree\",\n        \"Neural network-based graph embedding for cross-platform binary code similarity detection\",\n        \"Vuldeepecker: A deep learning-based system for multiclass vulnerability detection\",\n        \"Neural machine translation inspired binary code similarity comparison beyond function pairs\"\n    ],\n    \"reasoning\": \"Selected these 45 references because they represent foundational work and recent advances in WasmWalker: Path-based Code Representations for Improved WebAssembly Program Analysis, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}