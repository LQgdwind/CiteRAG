{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 51 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: A Simple Model for Portable and Fast Prediction of Execution Time and Power Consumption of GPU Kernels\n\nPaper Abstract: Abstract. Characterizing compute kernel execution behavior on GPUs for efficient task scheduling is a non-trivial task. We address this with a simple model enabling portable and fast predictions among different GPUs using only hardware-independent features. This model is built based on random forests using 189 individual compute kernels from benchmarks such as Parboil, Rodinia, Polybench-GPU and SHOC. Evaluation of the model performance using cross-validation yields a median Mean Average Percentage Error (MAPE) of 8.86–52.0% for time and 1.84–2.94% for power prediction across five different GPUs, while latency for a single prediction varies between 15 and 108 milliseconds.\n\n{retrieved_text}\n\nGenerate exactly 51 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 51\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"An Automated Framework for Characterizing and Subsetting GPGPU Workloads\",\n        \"A comparison of GPU execution time prediction using machine learning and analytical modeling\",\n        \"PPT-GPU: Scalable GPU Performance Modeling\",\n        \"An Adaptive Performance Modeling Tool for GPU Architectures\",\n        \"A Regression-based Approach to Scalability Prediction\",\n        \"Performance Metrics (Error Measures) in Machine Learning Regression, Forecasting and Prognostics: Properties and Typology\",\n        \"CUDA Flux: A Lightweight Instruction Profiler for CUDA Applications\",\n        \"Random Forests\",\n        \"Measuring GPU Power with the K20 Built-in Sensor\",\n        \"An Improved Abstract GPU Model with Data Transfer\",\n        \"On Over-Fitting in Model Selection and Subsequent Selection Bias in Performance Evaluation\",\n        \"Rodinia: A Benchmark Suite for Heterogeneous Computing\",\n        \"Statistical GPU Power Analysis Using Tree-Based Methods\",\n        \"A Roofline Model of Energy\",\n        \"Volta: Performance and Programmability\",\n        \"The Scalable Heterogeneous Computing (SHOC) Benchmark Suite\",\n        \"Predictable GPUs Frequency Scaling for Energy and Performance\",\n        \"Auto-Tuning a High-Level Language Targeted to GPU Codes\",\n        \"Modern Compiler Design\",\n        \"GPGPU Power Modeling for Multi-domain Voltage-Frequency Scaling\",\n        \"GPU Static Modeling Using PTX and Deep Structured Learning\",\n        \"An Analytical Model for a GPU Architecture with Memory-level and Thread-level Parallelism Awareness\",\n        \"An Integrated GPU Power and Performance Model\",\n        \"GPUMech: GPU Performance Modeling Technique Based on Interval Analysis\",\n        \"OpenCL Performance Prediction using Architecture-Independent Features\",\n        \"A Novel Computational Model for GPUs with Application to I/O Optimal Sorting Algorithms\",\n        \"Application performance modeling in a virtualized environment\",\n        \"Performance Prediction and Ranking of SpMV Kernels on GPU Architectures\",\n        \"Power Modeling for GPU Architectures Using McPAT\",\n        \"Understanding Random Forests: From Theory to Practice\",\n        \"The Landscape of GPGPU Performance Modeling Tools\",\n        \"Dynamic GPGPU Power Management Using Adaptive Model Predictive Control\",\n        \"Statistical power modeling of GPU kernels using performance counters\",\n        \"NVIDIA system management interface\",\n        \"Sparrow: Distributed, Low Latency Scheduling\",\n        \"Computer Organization and Design: The Hardware/Software Interface\",\n        \"Scikit-learn: Machine Learning in Python\",\n        \"Following the Blind Seer – Creating Better Performance Models Using Less Information\",\n        \"Learning Neural Representations for Predicting GPU Performance\",\n        \"Machine learning benchmarks and random forest regression\",\n        \"A Simplified and Accurate Model of Power-Performance Efficiency on Emergent GPU Architectures\",\n        \"Aspen: A domain specific language for performance modeling\",\n        \"Flexible Software Profiling of GPU Architectures\",\n        \"Parboil: A Revised Benchmark Suite for Scientific and Commercial Throughput Computing\",\n        \"Phoenix: A Constraint-Aware Scheduler for Heterogeneous Datacenters\",\n        \"A Bias Correction for the Minimum Error Rate in Cross-Validation\",\n        \"A Bridging Model for Parallel Computation\",\n        \"GPGPU Performance Estimation with Core and Memory Frequency Scaling\",\n        \"A Hybrid Framework for Fast and Accurate GPU Performance Estimation through Source-Level Analysis and Trace-Based Simulation\",\n        \"GPGPU Performance and Power Estimation Using Machine Learning\",\n        \"A quantitative performance analysis model for GPU architectures\"\n    ],\n    \"reasoning\": \"Selected these 51 references because they represent foundational work and recent advances in A Simple Model for Portable and Fast Prediction of Execution Time and Power Consumption of GPU Kernels, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}