{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 49 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: REMIX: Efficient Range Query for LSM-trees\n\nPaper Abstract: Abstract LSM-tree based key-value (KV) stores organize data in a multi-level structure for high-speed writes. Range queries on traditional LSM-trees must seek and sort-merge data from multiple table files on the fly, which is expensive and often leads to mediocre read performance. To improve range query efficiency on LSM-trees, we introduce a space-efficient KV index data structure, named REMIX, that records a globally sorted view of KV data spanning multiple table files. A range query on multiple REMIX-indexed data files can quickly locate the target key using a binary search, and retrieve subsequent keys in sorted order without key comparisons. We build RemixDB, an LSM-tree based KV-store that adopts a write-efficient compaction strategy and employs REMIXes for fast point and range queries. Experimental results show that REMIXes can substantially improve range query performance in a write-optimized LSM-tree based KV-store.\n\n{retrieved_text}\n\nGenerate exactly 49 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 49\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"LinkBench: a database benchmark based on the Facebook social graph\",\n        \"Workload analysis of a large-scale key-value store\",\n        \"FloDB: Unlocking Memory in Persistent Key-Value Stores\",\n        \"Space/Time Trade-offs in Hash Coding with Allowable Errors\",\n        \"Write Endurance in Flash Drives: Measurements and Analysis\",\n        \"Apache hadoop goes realtime at Facebook\",\n        \"Analytics in Motion: High Performance Event-Processing AND Real-Time Analytics in the Same Database\",\n        \"Characterizing, Modeling, and Benchmarking RocksDB Key-Value Workloads at Facebook\",\n        \"Bigtable: A distributed storage system for structured data\",\n        \"Realtime Data Processing at Facebook\",\n        \"LMDB: Lightning Memory-Mapped Database Manager\",\n        \"SplinterDB: Closing the Bandwidth Gap for NVMe Key-Value Stores\",\n        \"Benchmarking Cloud Serving Systems with YCSB\",\n        \"From WiscKey to Bourbon: A Learned Index for Log-Structured Merge Trees\",\n        \"Monkey: Optimal Navigable Key-Value Store\",\n        \"Dostoevsky: Better Space-Time Trade-Offs for LSM-Tree Based Key-Value Stores via Adaptive Removal of Superfluous Merging\",\n        \"The Log-Structured Merge-Bush & the Wacky Continuum\",\n        \"Dynamo: amazonâ€™s highly available key-value store\",\n        \"Longest prefix matching using bloom filters\",\n        \"RocksDB\",\n        \"RocksDB Tuning Guide\",\n        \"Cuckoo Filter: Practically Better Than Bloom\",\n        \"Algorithms\",\n        \"EvenDB: optimizing key-value storage for spatial locality\",\n        \"Towards Scalable Real-Time Analytics: An Architecture for Scale-out of OLxP Workloads\",\n        \"LevelDB\",\n        \"Characterizing flash memory: anomalies, observations, and applications\",\n        \"The Unwritten Contract of Solid State Drives\",\n        \"Endurable Transient Inconsistency in Byte-Addressable Persistent B+-Tree\",\n        \"A simple algorithm for merging two disjoint linearly ordered sets\",\n        \"SLM-DB: Single-Level Key-Value Store with Persistent Memory\",\n        \"Redesigning LSMs for Nonvolatile Memory with NoveLSM\",\n        \"The Art of Computer Programming, Volume 3: (2nd Ed.) Sorting and Searching\",\n        \"Cassandra: a decentralized structured storage system\",\n        \"KVell: the design and implementation of a fast persistent key-value store\",\n        \"WiscKey: Separating Keys from Values in SSD-conscious Storage\",\n        \"Rosetta: A Robust Space-Time Optimized Range Filter for Key-Value Stores\",\n        \"The Log-Structured Merge-Tree (LSM-Tree)\",\n        \"Berkeley DB\",\n        \"PebblesDB: Building Key-Value Stores using Fragmented Log-Structured Merge Trees\",\n        \"mLSM: Making Authenticated Storage Faster in Ethereum\",\n        \"ScyllaDB\",\n        \"PebblesDB\",\n        \"TokuDB\",\n        \"Towards an Unwritten Contract of Intel Optane SSD\",\n        \"LSM-trie: An LSM-tree-based Ultra-Large Key-Value Store for Small Data\",\n        \"A large scale analysis of hundreds of in-memory cache clusters at Twitter\",\n        \"MatrixKV: Reducing Write Stalls and Write Amplification in LSM-tree Based KV Stores with Matrix Container in NVM\",\n        \"SuRF: Practical Range Query Filtering with Fast Succinct Tries\"\n    ],\n    \"reasoning\": \"Selected these 49 references because they represent foundational work and recent advances in REMIX: Efficient Range Query for LSM-trees, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}