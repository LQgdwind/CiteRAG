{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 48 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Learning Logic Programs by Finding Minimal Unsatisfiable Subprograms\n\nPaper Abstract: Abstract The goal of inductive logic programming (ILP) is to search for a logic program that generalises training examples and background knowledge. We introduce an ILP approach that identifies minimal unsatisfiable subprograms (MUSPs). We show that finding MUSPs allows us to efficiently and soundly prune the search space. Our experiments on multiple domains, including program synthesis and game playing, show that our approach can reduce learning times by 99%.\n\n{retrieved_text}\n\nGenerate exactly 48 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 48\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"RUTH: an ILP theory revision system\",\n        \"ASP and subset minimality: Enumeration, cautious reasoning and muses\",\n        \"Towards meta-interpretive learning of programming language semantics\",\n        \"From SMT to ASP: solver-based approaches to solving datalog synthesis-as-rule-selection problems\",\n        \"Top-down induction of first-order logical decision trees\",\n        \"Grounding compositional hypothesis generation in specific instances\",\n        \"Reformation: A domain-independent algorithm for theory repair\",\n        \"Inductive logic programming in answer set programming\",\n        \"Learning logic programs by combining programs\",\n        \"Learning logic programs by discovering where not to search\",\n        \"Learning programs by learning from failures\",\n        \"Predicate invention by learning from failures\",\n        \"Logical reduction of metarules\",\n        \"Turning 30: New ideas in inductive logic programming\",\n        \"Inductive general game playing\",\n        \"Abductive knowledge induction from raw data\",\n        \"Clausal discovery\",\n        \"Inducing probabilistic relational rules from probabilistic examples\",\n        \"A scalable algorithm for minimal unsatisfiable core extraction\",\n        \"Learning relational representations with auto-encoding logic programs\",\n        \"Learning explanatory rules from noisy data\",\n        \"Fast rule mining in ontological knowledge bases with AMIE+\",\n        \"Answer Set Solving in Practice\",\n        \"The international general game playing competition\",\n        \"Neuro-symbolic hierarchical rule induction\",\n        \"Complete bottom-up predicate invention in meta-interpretive learning\",\n        \"Meta-interpretive learning using hex-programs\",\n        \"Inductive inference of VL decision rules\",\n        \"Inductive learning of answer set programs\",\n        \"Foundations of logic programming\",\n        \"On computing minimum unsatisfiable cores\",\n        \"Mapping and revising markov logic networks for transfer learning\",\n        \"Learning logic programs by explaining their failures\",\n        \"ILP turns 20 - biography and future challenges\",\n        \"Meta-interpretive learning of higher-order dyadic Datalog: predicate invention revisited\",\n        \"Inverse entailment and progol\",\n        \"On the use of stochastic local search techniques to revise first-order logic theories from examples\",\n        \"Top program construction and reduction for polynomial time meta-interpretive learning\",\n        \"Automatic Methods of Inductive Inference\",\n        \"Learning higher-order logic programs from failures\",\n        \"Provenance-guided synthesis of datalog programs\",\n        \"Automated refinement of first-order horn-clause domain theories\",\n        \"Algorithmic Program DeBugging\",\n        \"Syntax-guided synthesis of datalog programs\",\n        \"The ALEPH manual\",\n        \"Synthesizing highly expressive sql queries from input-output examples\",\n        \"Concept formation during interactive theory revision\",\n        \"Quickfoil: Scalable inductive logic programming\"\n    ],\n    \"reasoning\": \"Selected these 48 references because they represent foundational work and recent advances in Learning Logic Programs by Finding Minimal Unsatisfiable Subprograms, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}