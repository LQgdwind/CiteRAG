{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 52 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Investigating the Use of One-Class Support Vector Machine for Software Defect Prediction\n\nPaper Abstract: Abstract Early software defect identification is considered an important step towards software quality assurance. Software defect prediction aims at identifying software components that are likely to cause faults before a software is made available to the end-user. To date, this task has been modeled as a two-class classification problem, however its nature also allows it to be formulated as a one-class classification task. Preliminary results obtained in prior work show that One-Class Support Vector Machine (OCSVM) can outperform two-class classifiers for defect prediction. If confirmed, these results would overcome the data imbalance problem researchers have for long attempted to tackle in this field. In this paper, we further investigate whether learning from one class only is sufficient to produce effective defect prediction models by conducting a thorough large-scale empirical study investigating 15 real-world software projects, three validation scenarios, eight classifiers, robust evaluation measures and statistical significance tests. The results reveal that OCSVM is more suitable for cross-version and cross-project, rather than for within-project defect prediction, thus suggesting it performs better with heterogeneous data. While, we cannot conclude that OCSVM is the best classifier (Random Forest performs best herein), our results show interesting findings that open up further research avenues for training accurate defect prediction classifiers when defective instances are scarce or unavailable.\n\n{retrieved_text}\n\nGenerate exactly 52 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 52\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Repd: Source code defect prediction as anomaly detection\",\n        \"Is” better data” better than” better data miners”?\",\n        \"On the need of removing last releases of data when using or validating defect prediction models\",\n        \"Cross-version defect prediction: use historical data, cross-project data, or both?\",\n        \"A hitchhiker’s guide to statistical tests for assessing randomized algorithms in software engineering\",\n        \"On the time-based conclusion stability of cross-project defect prediction models\",\n        \"Random forests\",\n        \"A tutorial on support vector machines for pattern recognition\",\n        \"Smote: synthetic minority over-sampling technique\",\n        \"Software fault prediction based on one-class svm\",\n        \"A genetic algorithm to configure support vector machines for predicting fault-prone components\",\n        \"A novel software defect prediction method based on isolation forest\",\n        \"Evaluating defect prediction approaches: a benchmark and an extensive comparison\",\n        \"High-dimensional and large-scale anomaly detection using a linear one-class svm with deep learning\",\n        \"A vast graveyard of undead theories: Publication bias and psychological science’s aversion to the null\",\n        \"A systematic literature review on fault prediction performance in software engineering\",\n        \"Less is more: Temporal fault predictive performance over multiple hadoop releases\",\n        \"Adasyn: Adaptive synthetic sampling approach for imbalanced learning\",\n        \"A comparative study to benchmark cross-project defect prediction approaches\",\n        \"A systematic literature review and meta-analysis on cross project defect prediction\",\n        \"The importance of accounting for real-world labelling when predicting software vulnerabilities\",\n        \"Applied Software Measurement: Global Analysis of Productivity and Quality, 3rd edn\",\n        \"One-class classification: taxonomy of study and review of techniques\",\n        \"Attribute selection and imbalanced data: Problems in software defect prediction\",\n        \"A positive and unlabeled learning algorithm for one-class classification of remote-sensing data\",\n        \"One-class svms for document classification\",\n        \"Negative results for software effort estimation\",\n        \"Transfer defect learning\",\n        \"Heterogeneous defect prediction\",\n        \"Modeling software defects as anomalies: A case study on promise repository\",\n        \"Transformed vargha-delaney effect size\",\n        \"Foreword to the special section on negative results in software engineering\",\n        \"Scikit-learn: Machine learning in Python\",\n        \"The jinx on the nasa software defect data sets\",\n        \"Linear programming as a baseline for software effort estimation\",\n        \"A further analysis on the use of genetic algorithm to configure support vector machines for inter-release fault prediction\",\n        \"Multi-objective software effort estimation\",\n        \"The PROMISE Repository of Software Engineering Databases\",\n        \"Evaluating prediction systems in software project estimation\",\n        \"Data quality: Some comments on the nasa software defect datasets\",\n        \"Researcher bias: The use of machine learning in software defect prediction\",\n        \"Automated parameter optimization of classification techniques for defect prediction models\",\n        \"The impact of class rebalancing techniques on the performance and interpretation of defect prediction models\",\n        \"Hints for reviewing empirical work in software engineering\",\n        \"Using class imbalance learning for software defect prediction\",\n        \"Practical machine learning tools and techniques\",\n        \"Wilcoxon signed-rank test\",\n        \"Hydra: Massively compositional model for cross-project defect prediction\",\n        \"Assessing software defection prediction performance: why using the matthews correlation coefficient matters\",\n        \"Mining software defects: should we consider affected releases?\",\n        \"Fall detection by wearable sensor and one-class svm algorithm\",\n        \"How far we have progressed in the journey? an examination of cross-project defect prediction\"\n    ],\n    \"reasoning\": \"Selected these 52 references because they represent foundational work and recent advances in Investigating the Use of One-Class Support Vector Machine for Software Defect Prediction, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}