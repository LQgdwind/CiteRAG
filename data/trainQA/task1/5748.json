{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 51 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: AdaTest: Reinforcement Learning and Adaptive Sampling for On-chip Hardware Trojan Detection\n\nPaper Abstract: Abstract This paper proposes AdaTest, a novel adaptive test pattern generation framework for efficient and reliable Hardware Trojan (HT) detection. HT is a backdoor attack that tampers with the design of victim integrated circuits (ICs). AdaTest improves the existing HT detection techniques in terms of scalability and accuracy of detecting smaller Trojans in the presence of noise and variations. To achieve high trigger coverage, AdaTest leverages Reinforcement Learning (RL) to produce a diverse set of test inputs. Particularly, we progressively generate test vectors with high ‘reward’ values in an iterative manner. In each iteration, the test set is evaluated and adaptively expanded as needed. Furthermore, AdaTest integrates adaptive sampling to prioritize test samples that provide more information for HT detection, thus reducing the number of samples while improving the samples’ quality for faster exploration. We develop AdaTest with a Software/Hardware co-design principle and provide an optimized on-chip architecture solution. AdaTest’s architecture minimizes the hardware overhead in two ways: (i) Deploying circuit emulation on programmable hardware to accelerate reward evaluation of the test input; (ii) Pipelining each computation stage in AdaTest by automatically constructing auxiliary circuit for test input generation, reward evaluation, and adaptive sampling. We evaluate AdaTest’s performance on various HT benchmarks and compare it with two prior works that use logic testing for HT detection. Experimental results show that AdaTest engenders up to two orders of test generation speedup and two orders of test set size reduction compared to the prior works while achieving the same level or higher Trojan detection rate.\n\n{retrieved_text}\n\nGenerate exactly 51 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 51\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Eyeriss: A spatial architecture for energy-efficient dataflow for convolutional neural networks\",\n        \"Wireless body sensor network with adaptive low-power design for biometrics and healthcare applications\",\n        \"Introduction to hardware security and trust\",\n        \"Survey of hardware protection of design data for integrated circuits and intellectual properties\",\n        \"A survey of hardware trojan taxonomy and detection\",\n        \"Hardware trojan attacks: Threat analysis and countermeasures\",\n        \"Hardware trojan detection through golden chip-free statistical side-channel fingerprinting\",\n        \"Trojan side-channels: Lightweight hardware trojans through side-channel engineering\",\n        \"Mero: A statistical approach for hardware trojan detection\",\n        \"Hardware trojan detection using an advised genetic algorithm based logic testing\",\n        \"Improved test pattern generation for hardware trojan detection using genetic algorithm and boolean satisfiability\",\n        \"Integrated circuit (ic) decamouflaging: Reverse engineering camouflaged ics within minutes\",\n        \"Concurrent hardware trojan detection in wireless cryptographic ics\",\n        \"Hardware trojan detection and isolation using current integration and localized current analysis\",\n        \"Trojan taxonomy\",\n        \"An attribute based classification of hardware trojans\",\n        \"Fanci: identification of stealthy malicious logic using boolean functional analysis\",\n        \"Veritrust: Verification for hardware trust\",\n        \"Automated test generation for hardware trojan detection using reinforcement learning\",\n        \"Reinforcement learning: A survey\",\n        \"Reinforcement learning\",\n        \"Reinforcement learning: An introduction\",\n        \"Playing atari with deep reinforcement learning\",\n        \"Time limits in reinforcement learning\",\n        \"The state-of-the-art in ic reverse engineering\",\n        \"Netlist reverse engineering for high-level functionality reconstruction\",\n        \"Reverse engineering circuits using behavioral pattern mining\",\n        \"Hardware reverse engineering: Overview and open challenges\",\n        \"Provably secure camouflaging strategy for ic protection\",\n        \"Camoperturb: Secure ic camouflaging for minterm protection\",\n        \"Covert gates: Protecting integrated circuits with undetectable camouflaging\",\n        \"On the impossibility of approximation-resilient circuit locking\",\n        \"On improving the security of logic locking\",\n        \"Evolution of logic locking\",\n        \"Anti-sat: Mitigating sat attack on logic locking\",\n        \"Benchmarking at the frontier of hardware security: Lessons from logic locking\",\n        \"Benchmarking of hardware trojans and maliciously affected circuits\",\n        \"Survey: Hardware trojan detection for netlist\",\n        \"A novel technique for improving hardware trojan detection and reducing trojan activation time\",\n        \"Hardware trojans: Lessons learned after one decade of research\",\n        \"A survey of hardware trojan threat and defense\",\n        \"Scoap: Sandia controllability/observability analysis program\",\n        \"Simplified odd-even sort using multiple shift-register loops\",\n        \"Triggered instructions: a control paradigm for spatially-programmed architectures\",\n        \"Unveiling the iscas-85 benchmarks: A case study in reverse engineering\",\n        \"MCNC Benchmark Netlists.\",\n        \"ISCAS89 Benchmark Netlists.\",\n        \"Enhancing sat-based bounded model checking using sequential logic implications\",\n        \"Sequential Equivalence Checking of Circuits with Different State Encodings by Pruning Simulation-based Multi-Node Invariants\",\n        \"Testability measurement tool\",\n        \"pycosat 0.6.3\"\n    ],\n    \"reasoning\": \"Selected these 51 references because they represent foundational work and recent advances in AdaTest: Reinforcement Learning and Adaptive Sampling for On-chip Hardware Trojan Detection, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}