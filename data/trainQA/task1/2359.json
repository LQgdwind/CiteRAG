{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 55 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Persistence and Synchronization: Friends or Foes?\n\nPaper Abstract: Abstract Emerging non-volatile memory (NVM) technologies promise memory speed byte-addressable persistent storage with a load/store interface. However, programming applications to directly manipulate NVM data is complex and error-prone. Applications generally employ libraries that hide the low-level details of the hardware and provide a transactional programming model to achieve crash-consistency. Furthermore, applications continue to expect correctness during concurrent executions, achieved through the use of synchronization. To achieve this, applications seek well-known ACID guarantees. However, realizing this presents designers of transactional systems with a range of choices in how to combine several low-level techniques, given target hardware features and workload characteristics. In this paper, we provide a comprehensive evaluation of the impact of combining existing crash-consistency and synchronization methods for achieving performant and correct NVM transactional systems. We consider different hardware characteristics, in terms of support for hardware transactional memory (HTM) and the boundaries of the persistence domain (transient or persistent caches). By characterizing persistent transactional systems in terms of their properties, we make it possible to better understand the tradeoffs of different implementations and to arrive at better design choices for providing ACID guarantees. We use both real hardware with Intel Optane DC persistent memory and simulation to evaluate a persistent version of hardware transactional memory, a persistent version of software transactional memory, and undo/redo logging. Through our empirical study, we show two major factors that impact the cost of supporting persistence in transactional systems: the persistence domain (transient or persistent caches) and application characteristics, such as transaction size and parallelism.\n\n{retrieved_text}\n\nGenerate exactly 55 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 55\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Breakthrough nonvolatile memory technology\",\n        \"Storage Management in the NVRAM Era\",\n        \"Better i/o through byte-addressable, persistent memory\",\n        \"Mnemosyne: Lightweight persistent memory\",\n        \"Nv-heaps: making persistent objects fast and safe with next-generation, non-volatile memories\",\n        \"An analysis of persistent memory use with whisper\",\n        \"Deprecating the pcommit instruction\",\n        \"What’s in HPE’s persistent memory?\",\n        \"Hardware transactions in nonvolatile memory\",\n        \"Phytm: Persistent hybrid transactional memory\",\n        \"Persistent transactional memory\",\n        \"Dhtm: Durable hardware transactional memory\",\n        \"Atomic persistence for scm with a non-intrusive backend controller\",\n        \"Pmdk\",\n        \"Big memory breakthrough for your biggest data challenges\",\n        \"Transactional memory: Architectural support for lock-free data structures\",\n        \"Software transactional memory\",\n        \"Viyojit: Decoupling battery and dram capacities for battery-backed dram\",\n        \"Transactional Synchronization in Haswell\",\n        \"intel architecture instruction set extensions programming reference\",\n        \"Supporting nested transactional memory in logtm\",\n        \"Basic Performance Measurements of the Intel Optane DC Persistent Memory Module\",\n        \"Pleasetm: Enabling transaction conflict management in requester-wins hardware transactional memory\",\n        \"Stamp: Stanford transactional applications for multi-processing\",\n        \"Brief announcement: Hardware transactional storage class memory\",\n        \"Continuous checkpointing of htm transactions in nvm\",\n        \"Pisces: a scalable and efficient persistent transactional memory\",\n        \"Durable transactional memory can scale with timestone\",\n        \"Atlas: Leveraging locks for non-volatile memory consistency\",\n        \"Nvthreads: Practical persistence for multi-threaded applications\",\n        \"Persistency for synchronization-free regions\",\n        \"Language-level persistency\",\n        \"ido: Compiler-directed failure atomicity for nonvolatile memory\",\n        \"Dudetm: Building durable transactions with decoupling for persistent memory\",\n        \"Hardware transactional memory meets memory persistency\",\n        \"Memory persistency\",\n        \"Delegated persist ordering\",\n        \"Loose-ordering consistency for persistent memory\",\n        \"Lazy persistency: A high-performing and write-efficient software persistency technique\",\n        \"Steal but no force: Efficient hardware undo+redo logging for persistent memory systems\",\n        \"Failure-atomic slotted paging for persistent memory\",\n        \"Unified address translation for memory-mapped ssds with flashmap\",\n        \"Scalable logging through emerging non-volatile memory\",\n        \"Atom: Atomic durability in non-volatile memory through hardware logging\",\n        \"Proteus: A flexible and fast software supported hardware logging approach for nvm\",\n        \"High-performance transactions for persistent memories\",\n        \"Atomic in-place updates for non-volatile main memories with kamino-tx\",\n        \"Energy-efficient hybrid dram/nvm main memory\",\n        \"System software for persistent memory\",\n        \"Persistent memcached: Bringing legacy code to byte-addressable persistent memory\",\n        \"A study of application performance with non-volatile main memory\",\n        \"Whole-system persistence\",\n        \"Kiln: Closing the performance gap between systems with and without persistence support\",\n        \"Failure-atomic persistent memory updates via justdo logging\",\n        \"Persistent memory transactions\"\n    ],\n    \"reasoning\": \"Selected these 55 references because they represent foundational work and recent advances in Persistence and Synchronization: Friends or Foes?, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}