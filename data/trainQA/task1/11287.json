{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 45 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: An LLM-Tool Compiler for Fused Parallel Function Calling\n\nPaper Abstract: Abstract. State-of-the-art sequential reasoning in Large Language Models (LLMs) has expanded the capabilities of Copilots beyond conversational tasks to complex function calling, managing thousands of API calls. However, the tendency of compositional prompting to segment tasks into multiple steps, each requiring a round-trip to the GPT APIs, leads to increased system latency and costs. Although recent advancements in parallel function calling have improved tool execution per API call, they may necessitate more detailed in-context instructions and task breakdown at the prompt level, resulting in higher engineering and production costs. Inspired by the hardware design principles of multiply-add (MAD) operations, which fuse multiple arithmetic operations into a single task from the compilerâ€™s perspective, we propose LLM-Tool Compiler, which selectively fuses similar types of tool operations under a single function at runtime, presenting them as a unified task to the LLM. This selective fusion inherently enhances parallelization and efficiency. Benchmarked on a large-scale Copilot platform, LLM-Tool Compiler achieves up to four times more parallel calls than existing methods, reducing token costs and latency by up to 40% and 12%, respectively.\n\n{retrieved_text}\n\nGenerate exactly 45 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 45\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Phi-3 Technical Report: A Highly Capable Language Model Locally on Your Phone\",\n        \"Introducing Meta Llama 3: The most capable openly available LLM to date\",\n        \"Hardware-Aware DNN Compression via Diverse Pruning and Mixed-Precision Quantization\",\n        \"Neuralpower: Predict and deploy energy-efficient convolutional neural networks\",\n        \"Adapting Language Models to Compress Contexts\",\n        \"SpQR: A Sparse-Quantized Representation for Near-Lossless LLM Weight Compression\",\n        \"A Survey on In-context Learning\",\n        \"Text Generation Inference: A Rust, Python, and gRPC server for text generation inference\",\n        \"Extending Context Window of Large Language Models via Semantic Compression\",\n        \"GeckOpt: LLM System Efficiency via Intent-Based Tool Selection\",\n        \"GPTQ: Accurate Post-Training Quantization for Generative Pre-trained Transformers\",\n        \"LLMLingua: Compressing Prompts for Accelerated Inference of Large Language Models\",\n        \"Adaptive Skeleton Graph Decoding\",\n        \"OmniBoost: Boosting Throughput of Heterogeneous Embedded Devices under Multi-DNN Workload\",\n        \"SqueezeLLM: Dense-and-Sparse Quantization\",\n        \"An LLM Compiler for Parallel Function Calling\",\n        \"VisualWebArena: Evaluating Multimodal Agents on Realistic Visual Web Tasks\",\n        \"A Fast Post-Training Pruning Framework for Transformers\",\n        \"Efficient Memory Management for Large Language Model Serving with PagedAttention\",\n        \"Retrieval Augmented Generation (RAG)\",\n        \"Retrieval-Augmented Generation for Knowledge-Intensive NLP Tasks\",\n        \"Compressing Context to Enhance Inference Efficiency of Large Language Models\",\n        \"AWQ: Activation-aware Weight Quantization for LLM Compression and Acceleration\",\n        \"APAR: LLMs Can Do Auto-Parallel Auto-Regressive Decoding\",\n        \"Chameleon: Plug-and-Play Compositional Reasoning with Large Language Models\",\n        \"TOFU: A Task of Fictitious Unlearning for LLMs\",\n        \"OpenEQA: Embodied Question Answering in the Era of Foundation Models\",\n        \"Hardware-aware machine learning: Modeling and optimization\",\n        \"Skeleton-of-Thought: Prompting LLMs for Efficient Parallel Generation\",\n        \"TensorRT-LLM: A TensorRT Toolbox for Optimized Large Language Model Inference\",\n        \"Function Calling\",\n        \"Parallel Function Calling\",\n        \"Evaluating Tool-Augmented Agents in Remote Sensing Platforms\",\n        \"GeoLLM-Engine: A Realistic Environment for Building Geospatial Copilots\",\n        \"NexusRaven: a commercially-permissive Language Model for function calling\",\n        \"Chain-of-Thought Prompting Elicits Reasoning in Large Language Models\",\n        \"RECOMP: Improving Retrieval-Augmented LMs with Compression and Selective Augmentation\",\n        \"Berkeley Function Calling Leaderboard\",\n        \"MM-REACT: Prompting ChatGPT for Multimodal Reasoning and Action\",\n        \"Tree of Thoughts: Deliberate Problem Solving with Large Language Models\",\n        \"ReAct: Synergizing Reasoning and Acting in Language Models\",\n        \"LLM Inference Unveiled: Survey and Roofline Model Insights\",\n        \"Efficiently Programming Large Language Models using SGLang\",\n        \"Efficient Prompting via Dynamic In-Context Learning\",\n        \"ToolQA: A Dataset for LLM Question Answering with External Tools\"\n    ],\n    \"reasoning\": \"Selected these 45 references because they represent foundational work and recent advances in An LLM-Tool Compiler for Fused Parallel Function Calling, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}