{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 56 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Learning to Rank Ace Neural Architectures via Normalized Discounted Cumulative Gain\n\nPaper Abstract: Abstract One of the key challenges in Neural Architecture Search (NAS) is to efficiently rank the performances of architectures. The mainstream assessment of performance rankers uses ranking correlations (e.g., Kendall’s tau), which pay equal attention to the whole space. However, the optimization goal of NAS is identifying top architectures while paying less attention on other architectures in the search space. In this paper, we show both empirically and theoretically that Normalized Discounted Cumulative Gain (NDCG) is a better metric for rankers. Subsequently, we propose a new algorithm, AceNAS, which directly optimizes NDCG with LambdaRank. It also leverages weak labels produced by weight-sharing NAS to pre-train the ranker, so as to further reduce search cost. Extensive experiments on 12 NAS benchmarks and a large-scale search space demonstrate that our approach consistently outperforms SOTA NAS methods, with up to 3.67% accuracy improvement and 8×\\times reduction on search cost.\n\n{retrieved_text}\n\nGenerate exactly 56 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 56\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"NAS-bench-suite: NAS evaluation is (now) surprisingly easy\",\n        \"Accelerating neural architecture search using performance prediction\",\n        \"Understanding and simplifying one-shot architecture search\",\n        \"Can weight sharing outperform random architecture search? an investigation with tunas\",\n        \"Learning to rank using gradient descent\",\n        \"Learning to rank with nonsmooth cost functions\",\n        \"Once-for-all: Train one network and specialize it for efficient deployment\",\n        \"Proxylessnas: Direct neural architecture search on target task and hardware\",\n        \"Brp-nas: Prediction-based nas using gcns\",\n        \"Probabilistic retrieval based on staged logistic regression\",\n        \"Pranking with ranking\",\n        \"Chamnet: Towards efficient network design through platform-aware model adaptation\",\n        \"Fbnetv3: Joint architecture-recipe search using neural acquisition function\",\n        \"Nas-bench-201: Extending the scope of reproducible neural architecture search\",\n        \"Neural architecture search: A survey\",\n        \"Bohb: Robust and efficient hyperparameter optimization at scale\",\n        \"The impact of negative relevance judgments on ndcg\",\n        \"Single path one-shot neural architecture search with uniform sampling\",\n        \"pytorch-examples\",\n        \"Searching for mobilenetv3\",\n        \"Cumulated gain-based evaluation of ir techniques\",\n        \"Semi-supervised classification with graph convolutional networks\",\n        \"Random search and reproducibility for neural architecture search\",\n        \"Darts: Differentiable architecture search\",\n        \"Learning to rank for information retrieval\",\n        \"Neural architecture search with gbdt\",\n        \"Semi-supervised neural architecture search\",\n        \"Neural architecture search without training\",\n        \"Disturbance-immune weight sharing for neural architecture search\",\n        \"Megdet: A large mini-batch object detector\",\n        \"Efficient neural architecture search via parameter sharing\",\n        \"To share or not to share: A comprehensive appraisal of weight-sharing\",\n        \"On network design spaces for visual recognition\",\n        \"Regularized evolution for image classifier architecture search\",\n        \"Generative adversarial neural architecture search\",\n        \"Bridging the gap between sample-based and one-shot neural architecture search with bonas\",\n        \"The evolved transformer\",\n        \"Single-path nas: Designing hardware-efficient convnets in less than 4 hours\",\n        \"Efficientnet: Rethinking model scaling for convolutional neural networks\",\n        \"Mnasnet: Platform-aware neural architecture search for mobile\",\n        \"Frank: a ranking method with fidelity loss\",\n        \"Neural predictor for neural architecture search\",\n        \"How powerful are performance predictors in neural architecture search?\",\n        \"Fbnet: Hardware-aware efficient convnet design via differentiable neural architecture search\",\n        \"Renas:relativistic evaluation of neural architecture search\",\n        \"Does unsupervised architecture representation learning help neural architecture search?\",\n        \"Nas-bench-101: Towards reproducible neural architecture search\",\n        \"Evaluating the search phase of neural architecture search\",\n        \"How to train your super-net: An analysis of training heuristics in weight-sharing nas\",\n        \"Context encoding for semantic segmentation\",\n        \"An end-to-end deep learning architecture for graph classification\",\n        \"Retiarii: A deep learning exploratory-training framework\",\n        \"Deeper insights into weight sharing in neural architecture search\",\n        \"How does supernet help in neural architecture search?\",\n        \"Few-shot neural architecture search\",\n        \"Neural architecture search with reinforcement learning\"\n    ],\n    \"reasoning\": \"Selected these 56 references because they represent foundational work and recent advances in Learning to Rank Ace Neural Architectures via Normalized Discounted Cumulative Gain, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}