{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 52 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Taming Performance Variability caused by Client-Side Hardware Configuration\n\nPaper Abstract: Abstract Many online services running in datacenters are implemented using a microservice software architecture characterized by strict latency requirements. Consequently, this popular software paradigm is increasingly used for the performance evaluation of server systems. Due to the scale and complexity of datacenters, the evaluation of server optimization techniques is usually done on a smaller scale using a client-server model. Although the experimental details of the server side are excessively described in most publications, the client side is often ignored. This paper identifies the hardware configuration of the client side as an important source of performance variation that can affect the accuracy and the correctness of the conclusions of a study that analyzes the performance of microservices. This is partially attributed to the strict latency requirements of microservices and the small scale of the experimental environment. In this work we present, using a widely used online-service, several examples where the accuracy and the trends of the conclusions differ based on the configuration of the client-side. At the same time we show that the experimental evaluation time can be significantly affected by the hardware configuration of the client. All these provoke the discussion of the right way to configure the experimental environment for assessing the performance of microservices.\n\n{retrieved_text}\n\nGenerate exactly 52 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 52\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Memcached: A Distributed Memory Object Caching System\",\n        \"Variability in architectural simulations of multi-threaded workloads\",\n        \"Agilepkgc: An agile system idle state architecture for energy proportional datacenter servers\",\n        \"Peafowl: In-application CPU Scheduling to Reduce Power Consumption of In-memory Key-value Stores\",\n        \"Workload analysis of a large-scale key-value store\",\n        \"The ix operating system: Combining low latency, high throughput, and efficiency in a protected dataplane\",\n        \"Œºùúá\\\\muDPM: Dynamic Power Management for the Microsecond Era\",\n        \"Dynsleep: Fine-grained power management for a latency-critical data center application\",\n        \"Stress-ng\",\n        \"Workload generators for web-based systems: Characteristics, current status, and challenges\",\n        \"In datacenter performance, the only constant is change\",\n        \"Avoiding the ordering trap in systems performance measurement\",\n        \"The design and operation of CloudLab\",\n        \"An open-source benchmark suite for microservices and their hardware-software implications for cloud & edge systems\",\n        \"I-dvfs: Instantaneous frequency switch during dynamic voltage and frequency scaling\",\n        \"Energy Efficient Servers: Blueprints for Data Center Optimization\",\n        \"Scientific benchmarking of parallel computing systems: twelve ways to tell the masses when reporting performance results\",\n        \"The Art of Computer Systems Performance Analysis: Techniques For Experimental Design, Measurement, Simulation, and Modeling\",\n        \"Microservices\",\n        \"Characterizing and reducing cross-platform performance variability using os-level virtualization\",\n        \"Benchmark Precision and Random Initial State\",\n        \"Tailbench: a benchmark suite and evaluation methodology for latency-critical applications\",\n        \"CPU Performance Scaling - The Linux Kernel documentation.\",\n        \"Lancet: A self-correcting latency measuring tool\",\n        \"Performance Evaluation of Computer and Communication Systems\",\n        \"Reconciling high server utilization and sub-millisecond quality-of-service\",\n        \"Supporting exploratory hypothesis testing and analysis\",\n        \"Characterizing microservice dependency and performance: Alibaba trace analysis\",\n        \"Taming performance variability\",\n        \"Q-zilla: A scheduling framework and core microarchitecture for tail-tolerant microservices\",\n        \"Producing wrong data without doing anything obviously wrong!\",\n        \"On the evaluation of the total-cost-of-ownership trade-offs in edge vs cloud deployments: A wireless-denial-of-service case study\",\n        \"Total Cost of Ownership Perspective of Cloud vs Edge Deployments of IoT Applications\",\n        \"Quantifying process variations and its impacts on smartphones\",\n        \"DevOps at Amazon: A Look at Our Tools and Processes.\",\n        \"The network data repository with interactive graph analytics and visualization\",\n        \"An analysis of variance test for normality (complete samples)\",\n        \"¬µ Suite: A Benchmark Suite for Microservices\",\n        \"Using variability as a guiding principle to reduce latency in web applications via os profiling\",\n        \"No_hz: Reducing scheduling-clock ticks.\",\n        \"Reducing performance evaluation sensitivity and variability by input shaking\",\n        \"Simultaneous multithreading: maximizing on-chip parallelism\",\n        \"Decomposing Twitter: Adventures in Service Oriented Architecture.\",\n        \"Is big data performance reproducible in modern cloud networks?\",\n        \"Statistical techniques for online anomaly detection in data centers\",\n        \"Smartharvest: harvesting idle cpus safely and efficiently in the cloud\",\n        \"Measuring and understanding variation in benchmark performance\",\n        \"Agilewatts: An energy-efficient cpu core idle-state architecture for latency-sensitive server applications\",\n        \"CARB: A C-state Power Management Arbiter for Latency-critical Workloads\",\n        \"Treadmill: attributing the source of tail latency through precise load testing and statistical inference\",\n        \"Cloud performance variability prediction\",\n        \"Benchmarking microservice systems for software engineering research\"\n    ],\n    \"reasoning\": \"Selected these 52 references because they represent foundational work and recent advances in Taming Performance Variability caused by Client-Side Hardware Configuration, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}