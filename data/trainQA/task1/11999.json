{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 58 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: SoliDiffy: AST Differencing for Solidity Smart Contracts\n\nPaper Abstract: Abstract Smart contracts, primarily written in Solidity, are integral to blockchain software applications, yet precise analysis and maintenance are hindered by the limitations of existing differencing tools. We introduce SoliDiffy, a novel Abstract Syntax Tree (AST) differencing tool specifically designed for Solidity. SoliDiffy enables fine-grained analysis by generating accurate and concise edit scripts of smart contracts , making it ideal for downstream tasks such as vulnerability detection, automated code repair, and code reviews. Our comprehensive evaluation on a large dataset of real-world Solidity contracts demonstrates that SoliDiffy delivers shorter and more precise edit scripts compared to state-of-the-art tools, while performing consistently in complex contract modifications. SoliDiffy is made publicly available at https://github.com/mojtaba-eshghie/SoliDiffy.\n\n{retrieved_text}\n\nGenerate exactly 58 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 58\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Ethereum: A secure decentralised generalised transaction ledger\",\n        \"Smart Contracts.\",\n        \"Home.\",\n        \"Solidity — Solidity 0.8.23 documentation.\",\n        \"HDD: hierarchical delta debugging\",\n        \"Sguard: Towards fixing vulnerable smart contracts automatically\",\n        \"ReenRepair: Automatic and semantic equivalent repair of reentrancy in smart contracts\",\n        \"Smart contract repair\",\n        \"Aroc: An automatic repair framework for on-chain smart contracts\",\n        \"Slither: a static analysis framework for smart contracts\",\n        \"Manticore: A user-friendly symbolic execution framework for binaries and smart contracts\",\n        \"Dynamic Vulnerability Detection on Smart Contracts Using Machine Learning\",\n        \"Oracle-guided vulnerability diversity and exploit synthesis of smart contracts using llms\",\n        \"Highguard: Cross-chain business logic monitoring of smart contracts\",\n        \"An Initial Investigation of Automatic Program Repair for Solidity Smart Contracts with Large Language Models\",\n        \"Checking smart contracts with structural code embedding\",\n        \"Understanding code reuse in smart contracts\",\n        \"SmartEmbed: A tool for clone and bug detection in smart contracts through structural code embedding\",\n        \"Fine-grained and accurate source code differencing\",\n        \"Operation-Based, Fine-Grained Version Control Model for Tree-Based Representation\",\n        \"Difftastic.\",\n        \"srcDiff: A syntactic differencing approach to improve the understandability of deltas\",\n        \"ClDiff: generating concise linked code differences\",\n        \"Hyperast: Enabling efficient analysis of software histories at scale\",\n        \"Supporting source code difference analysis\",\n        \"Abstract syntax from concrete syntax\",\n        \"How different are different diff algorithms in git? use–histogram for code changes\",\n        \"Change detection in hierarchically structured information\",\n        \"Tree-sitter Introduction.\",\n        \"DAppSCAN: Building Large-Scale Datasets for Smart Contract Weaknesses in DApp Projects.\",\n        \"Uniswap/v4-core.\",\n        \"InPlusLab/DAppSCAN.\",\n        \"DISL: Fueling Research with A Large Dataset of Solidity Smart Contracts.\",\n        \"Investigations of the software testing coupling effect\",\n        \"SuMo: A mutation testing approach and tool for the Ethereum blockchain\",\n        \"MorenaBarboni/SuMo-SOlidity-MUtator.\",\n        \"Using Mutations to Analyze Formal Specifications\",\n        \"Certora/gambit.\",\n        \"Individual comparisons by ranking methods\",\n        \"The kolmogorov-smirnov test for goodness of fit\",\n        \"Dex: a semantic-graph differencing tool for studying changes in large code bases\",\n        \"UMLDiff: an algorithm for object-oriented design differencing\",\n        \"Diff/TS: A Tool for Fine-Grained Structural Change Analysis\",\n        \"Move-optimized source code tree differencing\",\n        \"Generating Accurate and Compact Edit Scripts Using Tree Differencing\",\n        \"Beyond GumTree: A Hybrid Approach to Generate Edit Scripts\",\n        \"Pruning the ast with hunks to speed up tree differencing\",\n        \"Code Version Control Using GitHub Platform\",\n        \"Towards an Autonomous Bot for Automatic Source Code Refactoring\",\n        \"RefBot: Intelligent Software Refactoring Bot\",\n        \"A Differential Testing Approach for Evaluating Abstract Syntax Tree Mapping Algorithms\",\n        \"Change Distilling:Tree Differencing for Fine-Grained Source Code Change Extraction\",\n        \"RTED: a robust algorithm for the tree edit distance\",\n        \"Tree edit distance: Robust and memory-efficient\",\n        \"Hyperparameter optimization for ast differencing\",\n        \"GumTreeDiff/tree-sitter-parser.\",\n        \"SIF: A Framework for Solidity Contract Instrumentation and Analysis\",\n        \"skalermo/smartdiffer: Tool to compare smart contracts source code.\"\n    ],\n    \"reasoning\": \"Selected these 58 references because they represent foundational work and recent advances in SoliDiffy: AST Differencing for Solidity Smart Contracts, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}