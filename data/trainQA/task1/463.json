{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 45 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: DegreeSketch: Distributed Cardinality Sketches on Massive Graphs with Applications\n\nPaper Abstract: Abstract We present DegreeSketch, a semi-streaming distributed sketch datastructure and demonstrate its utility for estimating local neighborhood sizes and local triangle count heavy hitters on massive graphs. DegreeSketch consists of vertex-centric cardinality sketches distributed across a set of processors that are accumulated in a single pass, and then behaves as a persistent query engine capable of approximately answering graph queries pertaining to the sizes of adjacency set unions and intersections. The tùë°tth local neighborhood of a vertex is the number of vertices reachable in Gùê∫G from vùë£v by traversing at most tùë°t edges, whereas the local triangle count is the number of 3-cycles in which it is included. Both metrics are useful in graph analysis applications, but exact computations scale poorly as graph sizes grow. We present efficient algorithms for estimating both local neighborhood sizes and local triangle count heavy hitters using DegreeSketch. In our experiments we implement DegreeSketch using the celebrated hyperloglog cardinality sketch and utilize the distributed communication tool YGM to achieve state-of-the-art performance in distributed memory.\n\n{retrieved_text}\n\nGenerate exactly 45 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 45\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"On sampling from massive graph streams\",\n        \"The space complexity of approximating the frequency moments\",\n        \"Patric: A parallel algorithm for counting triangles in massive networks\",\n        \"Counting distinct elements in a data stream\",\n        \"Efficient semi-streaming algorithms for local triangle counting in massive graphs\",\n        \"Efficient algorithms for large-scale local triangle counting\",\n        \"Tolerating the community detection resolution limit with edge weighting\",\n        \"Hyperanf: Approximating the neighbourhood function of very large graphs on a budget\",\n        \"Optimal classifier for imbalanced data using matthews correlation coefficient metric\",\n        \"Triangle listing in massive networks and its applications\",\n        \"Trusses: Cohesive subgraphs for social network analysis\",\n        \"A minimal variance estimator for the cardinality of big data set intersection\",\n        \"xxHash\",\n        \"The university of florida sparse matrix collection\",\n        \"Loglog counting of large cardinalities\",\n        \"New cardinality estimation algorithms for hyperloglog sketches\",\n        \"Bitmap algorithms for counting active flows on high speed links\",\n        \"Probabilistic counting algorithms for data base applications\",\n        \"Hyperloglog: the analysis of a near-optimal cardinality estimation algorithm\",\n        \"Wtf: The who to follow service at twitter\",\n        \"Hyperloglog in practice: algorithmic engineering of a state of the art cardinality estimation algorithm\",\n        \"A space efficient streaming algorithm for triangle counting using the birthday paradox\",\n        \"An optimal algorithm for the distinct elements problem\",\n        \"Design, generation, and validation of extreme scale power-law graphs\",\n        \"Konect: the koblenz network collection\",\n        \"SNAP Datasets: Stanford large network dataset collection\",\n        \"Kronecker graphs: An approach to modeling networks\",\n        \"Mascot: Memory-efficient and accurate sampling for counting local triangles in graph streams\",\n        \"Network motifs: simple building blocks of complex networks\",\n        \"Information network or social network?: the structure of the twitter follow graph\",\n        \"Anf: A fast and scalable tool for data mining in massive graphs\",\n        \"Triangle counting for scale-free graphs at scale in distributed memory\",\n        \"You‚Äôve Got Mail: Building missing asynchronous communication primitives\",\n        \"Loglog-beta and more: A new algorithm for cardinality estimation based on loglog counting\",\n        \"On large-scale graph generation with validation of diverse triangle statistics at edges and vertices\",\n        \"Tri-Fly: Distributed estimation of global and local triangle counts in graph streams\",\n        \"Dislr: Distributed sampling with limited redundancy for triangle counting in graph streams\",\n        \"Tri√®st: Counting local and global triangles in fully dynamic streams with fixed memory size\",\n        \"Counting triangles and the curse of the last reducer\",\n        \"Towards optimal cardinality estimation of unions and intersections with sketches\",\n        \"Fast counting of triangles in large real networks without counting: Algorithms and laws\",\n        \"Doulion: counting triangles in massive graphs with a coin\",\n        \"On triangulation-based dense neighborhood graph discovery\",\n        \"The kronecker product of graphs\",\n        \"Fast linear algebra-based triangle counting with kokkoskernels\"\n    ],\n    \"reasoning\": \"Selected these 45 references because they represent foundational work and recent advances in DegreeSketch: Distributed Cardinality Sketches on Massive Graphs with Applications, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}