{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 45 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: FlexGen: High-Throughput Generative Inference of Large Language Models with a Single GPU\n\nPaper Abstract: Abstract The high computational and memory requirements of large language model (LLM) inference make it feasible only with multiple high-end accelerators. Motivated by the emerging demand for latency-insensitive tasks with batched processing, this paper initiates the study of high-throughput LLM inference using limited resources, such as a single commodity GPU. We present FlexGen, a high-throughput generation engine for running LLMs with limited GPU memory. FlexGen can be flexibly configured under various hardware resource constraints by aggregating memory and computation from the GPU, CPU, and disk. By solving a linear programming problem, it searches for efficient patterns to store and access tensors. FlexGen further compresses the weights and the attention cache to 4 bits with negligible accuracy loss. These techniques enable FlexGen to have a larger space of batch size choices and thus significantly increase maximum throughput. As a result, when running OPT-175B on a single 16GB GPU, FlexGen achieves significantly higher throughput compared to state-of-the-art offloading systems, reaching a generation throughput of 1 token/s for the first time with an effective batch size of 144144144. On the HELM benchmark, FlexGen can benchmark a 30B model with a 16GB GPU on 7 representative sub-scenarios in 21 hours. The code is available at https://github.com/FMInference/FlexGen.\n\n{retrieved_text}\n\nGenerate exactly 45 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 45\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Deepspeed-inference: Enabling efficient inference of transformer models at unprecedented scale\",\n        \"On the opportunities and risks of foundation models\",\n        \"Petals: Collaborative inference and fine-tuning of large models\",\n        \"Language models are few-shot learners\",\n        \"Spreadsheetcoder: Formula prediction from semi-structured context\",\n        \"Palm: Scaling language modeling with pathways\",\n        \"Communication-avoiding algorithms for linear algebra and beyond\",\n        \"The case for 4-bit precision: k-bit inference scaling laws\",\n        \"Llm.int8(): 8-bit matrix multiplication for transformers at scale\",\n        \"Turbotransformers: an efficient gpu serving system for transformer models\",\n        \"Switch transformers: Scaling to trillion parameter models with simple and efficient sparsity\",\n        \"Massive language models can be accurately pruned in one-shot\",\n        \"Gptq: Accurate post-training quantization for generative pre-trained transformers\",\n        \"Sparsity in deep learning: Pruning and growth for efficient inference and training in neural networks\",\n        \"Swapadvisor: Pushing deep learning beyond the gpu memory limit via smart swapping\",\n        \"Gpipe: Efficient training of giant neural networks using pipeline parallelism\",\n        \"Hugging face accelerate\",\n        \"Opt-iml: Scaling language model instruction meta learning through the lens of generalization\",\n        \"I/o complexity: The red-blue pebble game\",\n        \"Alphatuning: Quantization-aware parameter-efficient adaptation of large-scale pre-trained language models\",\n        \"Harmony: Overcoming the hurdles of gpu memory capacity to train massive dnn models on commodity servers\",\n        \"Holistic evaluation of language models\",\n        \"Pointer sentinel mixture models\",\n        \"Pagecachemangagement\",\n        \"Can foundation models wrangle your data?\",\n        \"Donâ€™t give me the details, just the summary! topic-aware convolutional neural networks for extreme summarization\",\n        \"Efficient large-scale language model training on gpu clusters using megatron-lm\",\n        \"Fastertransformer\",\n        \"The lambada dataset: Word prediction requiring a broad discourse context\",\n        \"nuqmm: Quantized matmul for efficient inference of large-scale generative language models\",\n        \"Pytorch: An imperative style, high-performance deep learning library\",\n        \"Efficiently scaling transformer inference\",\n        \"Zero-infinity: Breaking the gpu memory wall for extreme scale deep learning\",\n        \"Zero-offload: Democratizing billion-scale model training\",\n        \"Swarm parallelism: Training large models can be surprisingly communication-efficient\",\n        \"Bloom: A 176b-parameter open-access multilingual language model\",\n        \"Q-bert: Hessian based ultra low precision quantization of bert\",\n        \"Olla: Optimizing the lifetime and location of arrays to reduce the memory usage of neural networks\",\n        \"Superneurons: Dynamic gpu memory management for training deep neural networks\",\n        \"Lightseq: A high performance inference library for transformers\",\n        \"Smoothquant: Accurate and efficient post-training quantization for large language models\",\n        \"Zeroquant: Efficient and affordable post-training quantization for large-scale transformers\",\n        \"Orca: A distributed serving system for {{\\\\{Transformer-Based}}} generative models\",\n        \"Opt: Open pre-trained transformer language models\",\n        \"Alpa: Automating inter-and intra-operator parallelism for distributed deep learning\"\n    ],\n    \"reasoning\": \"Selected these 45 references because they represent foundational work and recent advances in FlexGen: High-Throughput Generative Inference of Large Language Models with a Single GPU, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}