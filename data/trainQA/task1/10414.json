{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 50 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: A Graph-Native Query Optimization Framework\n\nPaper Abstract: Abstract. Graph queries that combine pattern matching with relational operations, referred as PatRelQuery, are widely used in many real-world applications. It allows users to identify arbitrary patterns in a graph and further perform in-depth relational analysis on the results. To effectively support PatRelQuery, two key challenges need to be addressed: (1) how to optimize PatRelQuery in a unified framework, and (2) how to handle the arbitrary type constraints in patterns in PatRelQuery. In this paper, we present a graph-native query optimization framework named GOpt, to tackle these issues. GOpt is built on top of a unified intermediate representation (IR) that is capable of capturing both graph and relational operations, thereby streamlining the optimization of PatRelQuery. To handle the arbitrary type constraints, GOpt employs an automatic type inference approach to identify implicit type constraints. Additionally, GOpt introduces a graph-native optimizer, which encompasses an extensive collection of optimization rules along with cost-based techniques tailored for arbitrary patterns, to optimize PatRelQuery. Through comprehensive experiments, we demonstrate that GOpt can achieve significant query performance improvements, in both crafted benchmarks and real-world applications.\n\n{retrieved_text}\n\nGenerate exactly 50 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 50\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"ANTLR: ANother Tool for Language Recognition\",\n        \"GQL: Graph Query Language Standardization\",\n        \"JanusGraph: A Transactional Graph Database\",\n        \"Neo4j Graph Database\",\n        \"OrientDB\",\n        \"TigerGraph: Graph Analytics Platform\",\n        \"Emptyheaded: A relational engine for graph processing\",\n        \"Distributed Evaluation of Subgraph Queries Using Worst-Case Optimal Low-Memory Dataflows\",\n        \"The Property Graph Database Model\",\n        \"G-CORE: A Core for Future Graph Query Languages\",\n        \"Foundations of Modern Query Languages for Graph Databases\",\n        \"PG-Schema: Schemas for Property Graphs\",\n        \"AWS Neptune\",\n        \"Apache Calcite: A Foundational Framework for Optimized Query Processing Over Heterogeneous Data Sources\",\n        \"Efficient subgraph matching by postponing cartesian products\",\n        \"Protein-to-protein interactions: Technologies, databases, and algorithms\",\n        \"Aggregation Support for Modern Graph Analytics in TigerGraph\",\n        \"GraphScope: A Unified Engine for Big Graph Processing\",\n        \"Self-organization and identification of web communities\",\n        \"Cypher: An evolving query language for property graphs\",\n        \"Graph kernels in chemoinformatics\",\n        \"GraphDB: Modeling and Querying Graphs in Databases\",\n        \"Turboiso: Towards Ultrafast and Robust Subgraph Isomorphism Search in Large Graph Databases\",\n        \"GRFusion: Graphs as First-Class Citizens in Main-Memory Relational Database Systems\",\n        \"Local structure can identify and quantify influential global spreaders in large scale social networks\",\n        \"On the Optimization of Recursive Relational Queries: Application to Graph Queries\",\n        \"Making RDBMSs Efficient on Graph Workloads through Predefined Joins\",\n        \"GRAPHiQL: A graph intuitive query language for relational databases\",\n        \"Graphflow: An Active Graph Database\",\n        \"Implementing Graph Pattern Queries on a Relational Database\",\n        \"Scalable subgraph enumeration in mapreduce\",\n        \"Distributed subgraph matching on timely dataflow\",\n        \"GLogS: Interactive Graph Pattern Matching Query At Large Scale\",\n        \"LDBC Social Network Benchmark\",\n        \"Optimizing subgraph queries by combining binary and worst-case optimal joins\",\n        \"Worst-case optimal join algorithms\",\n        \"Protocol Buffers\",\n        \"Efficient estimation of graphlet frequency distributions in proteinâ€“protein interaction networks\",\n        \"GAIA: A System for Interactive Analysis on Distributed Graphs Using a High-Level Language\",\n        \"The Gremlin Graph Traversal Machine and Language (Invited Talk)\",\n        \"Taming Verification Hardness: An Efficient Algorithm for Testing Subgraph Isomorphism\",\n        \"Banyan: a scoped dataflow engine for graph query service\",\n        \"SQLGraph: An Efficient Relational-Based Property Graph Store\",\n        \"Reducing Property Graph Queries to Relational Algebra for Incremental View Maintenance\",\n        \"IBM Db2 Graph: Supporting Synergistic and Retrofittable Graph Queries Inside IBM Db2\",\n        \"An algorithm for subgraph isomorphism\",\n        \"PGQL: A Property Graph Query Language\",\n        \"GraphGen: Adaptive Graph Processing Using Relational Databases\",\n        \"Huge: An efficient and scalable subgraph enumeration system\",\n        \"Superstructure Searching Algorithm for Generic Reaction Retrieval\"\n    ],\n    \"reasoning\": \"Selected these 50 references because they represent foundational work and recent advances in A Graph-Native Query Optimization Framework, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}