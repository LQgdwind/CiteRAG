{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 46 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: WatChat: Explaining perplexing programs by debugging mental models\n\nPaper Abstract: Abstract Often, a good explanation for a program’s unexpected behavior is a bug in the programmer’s code. But sometimes, an even better explanation is a bug in the programmer’s mental model of the language they are using. Instead of merely debugging our current code (“giving the programmer a fish”), what if our tools could directly debug our mental models (“teaching the programmer to fish”)? In this paper, we apply ideas from computational cognitive science to do exactly that. Given a perplexing program, we use program synthesis techniques to automatically infer potential misconceptions that might cause the user to be surprised by the program’s behavior. By analyzing these misconceptions, we provide succinct, useful explanations of the program’s behavior. Our methods can even be inverted to synthesize pedagogical example programs for diagnosing and correcting misconceptions in students.\n\n{retrieved_text}\n\nGenerate exactly 46 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 46\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Do developers read compiler error messages?\",\n        \"Domain-specific symbolic compilation\",\n        \"Plan explanations as model reconciliation: moving beyond explanation as soliloquy\",\n        \"Bonsai: synthesis-based reasoning for type systems\",\n        \"Cooperative Explanation as Rational Communication\",\n        \"Inferring the future by imagining the past\",\n        \"Compiler Errors for Humans\",\n        \"The nature of explanation\",\n        \"A Grounded Conceptual Model for Ownership Types in Rust\",\n        \"Z3: An efficient SMT solver\",\n        \"Bugs as deviant behavior: A general approach to inferring errors in systems code\",\n        \"Expectations affect physical causation judgments.\",\n        \"Logic and conversation\",\n        \"The essence of JavaScript\",\n        \"ECMAScript(R) 2024 Language Specification\",\n        \"Force concept inventory\",\n        \"Conversational processes and causal explanation.\",\n        \"Mental models and causal explanation: Judgements of probable cause and explanatory relevance\",\n        \"Mental models in cognitive science\",\n        \"Abductive inference: Computation, philosophy, technology\",\n        \"Inference from explanation.\",\n        \"Debugging reinvented: asking and answering why and why not questions about program behavior\",\n        \"Designing the whyline: a debugging interface for asking questions about program behavior\",\n        \"Extracting and answering why and why not questions about Java program output\",\n        \"Finding causes of program output with the Java Whyline\",\n        \"Are they all created equal? A comparison of different concept inventory development methodologies\",\n        \"Contrastive explanation\",\n        \"The structure and function of explanations\",\n        \"Identifying and Correcting Programming Language Behavior Misconceptions\",\n        \"Goal-based explanations of actions and outcomes\",\n        \"Explanation in artificial intelligence: Insights from the social sciences\",\n        \"Expert blind spot: When content knowledge eclipses pedagogical content knowledge\",\n        \"The power of “why” and “why not”: Enriching scenario exploration with provenance\",\n        \"JISET: JavaScript IR-based semantics extraction toolchain\",\n        \"Type Directives in Elm\",\n        \"Left to the Reader: Abstracting Solutions in Mathematical Reasoning\",\n        \"Inferring learners’ knowledge from their actions\",\n        \"Faster teaching via pomdp planning\",\n        \"The mystery of b:=(b= false)\",\n        \"“That’s (not) the output I expected!” On the role of end user expectations in creating explanations of AI systems\",\n        \"It’s like python but: Towards supporting transfer of programming language knowledge\",\n        \"Automated feedback generation for introductory programming assignments\",\n        \"A lightweight symbolic virtual machine for solver-aided host languages\",\n        \"Growing solver-aided languages with Rosette\",\n        \"Mind bugs: The origins of procedural misconceptions\",\n        \"Answer to “What is the explanation for these bizarre JavaScript behaviours mentioned in the ‘Wat’ talk for CodeMash 2012?”\"\n    ],\n    \"reasoning\": \"Selected these 46 references because they represent foundational work and recent advances in WatChat: Explaining perplexing programs by debugging mental models, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}