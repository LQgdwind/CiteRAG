{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 46 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: FLAME: A Small Language Model for Spreadsheet Formulas\n\nPaper Abstract: Abstract Spreadsheets are a vital tool for end-user data management. Using large language models for formula authoring assistance in these environments can be difficult, as these models are expensive to train and challenging to deploy due to their size (up to billions of parameters). We present FLAME, a transformer-based model trained exclusively on Excel formulas that leverages domain insights to achieve competitive performance while being substantially smaller (60M parameters) and training on two orders of magnitude less data. We curate a training dataset using sketch deduplication, introduce an Excel-specific formula tokenizer, and use domain-specific versions of masked span prediction and noisy auto-encoding as pre-training objectives. We evaluate FLAME on formula repair, formula completion, and similarity-based formula retrieval. FLAME can outperform much larger models, such as the Davinci (175B) and Cushman (12B) variants of Codex and CodeT5 (220M), in 10 of 14 evaluation settings for the repair and completion tasks. For formula retrieval, FLAME outperforms CodeT5, CodeBERT, and GraphCodeBERT.\n\n{retrieved_text}\n\nGenerate exactly 46 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 46\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"GoalDebug: A spreadsheet debugger for end users\",\n        \"The adverse effects of code duplication in machine learning models of code\",\n        \"Fuse: a reproducible, extendable, internet-scale corpus of spreadsheets\",\n        \"Neurosymbolic Repair for Low-Code Formula Languages\",\n        \"Tfix: Learning to fix coding errors with a text-to-text transformer\",\n        \"Pre-training tasks for embedding-based large-scale retrieval\",\n        \"Evaluating Large Language Models Trained on Code\",\n        \"Spreadsheetcoder: Formula prediction from semi-structured context\",\n        \"Palm: Scaling language modeling with pathways\",\n        \"Table pre-training: A survey on model architectures, pre-training objectives, and downstream tasks\",\n        \"Hierarchical neural story generation\",\n        \"CodeBERT: A Pre-Trained Model for Programming and Natural Languages\",\n        \"Incoder: A generative model for code infilling and synthesis\",\n        \"Dependence language model for information retrieval\",\n        \"GitHub CoPilot\",\n        \"GraphCodeBERT: Pre-training Code Representations with Data Flow\",\n        \"Learning to complete code with sketches\",\n        \"Deepfix: Fixing common c language errors by deep learning\",\n        \"HermEs: Interactive Spreadsheet Formula Prediction via Hierarchical Formulet Expansion\",\n        \"Enronâ€™s spreadsheets and related emails: A dataset and analysis\",\n        \"The curious case of neural text degeneration\",\n        \"Parameter-efficient transfer learning for NLP\",\n        \"Lora: Low-rank adaptation of large language models\",\n        \"Repair is nearly generation: Multilingual program repair with llms\",\n        \"Deduplicating training data mitigates privacy risks in language models\",\n        \"Deduplicating training data makes language models better\",\n        \"BART: Denoising Sequence-to-Sequence Pre-training for Natural Language Generation, Translation, and Comprehension\",\n        \"Automating code review activities by large-scale pre-training\",\n        \"TAPEX: Table pre-training via learning a neural SQL executor\",\n        \"Morgan Stanley Technology, Media & Telecom Conference\",\n        \"CodeGen: An Open Large Language Model for Code with Multi-Turn Program Synthesis\",\n        \"Synchromesh: Reliable code generation from pre-trained language models\",\n        \"Exploring the Limits of Transfer Learning with a Unified Text-to-Text Transformer\",\n        \"Benchmarking spreadsheet systems\",\n        \"Sentence-BERT: Sentence Embeddings using Siamese BERT-Networks\",\n        \"Neural Machine Translation of Rare Words with Subword Units\",\n        \"FormaT5: Abstention and Examples for Conditional Table Formatting with Natural Language\",\n        \"A general language model for information retrieval\",\n        \"Language model information retrieval with document expansion\",\n        \"UL2: Unifying Language Learning Paradigms\",\n        \"Diverse beam search: Decoding diverse solutions from neural sequence models\",\n        \"Codet5: Identifier-aware unified pre-trained encoder-decoder models for code understanding and generation\",\n        \"A systematic evaluation of large language models of code\",\n        \"Graph-based, self-supervised program repair from diagnostic feedback\",\n        \"Break-it-fix-it: Unsupervised learning for program repair\",\n        \"A proximity language model for information retrieval\"\n    ],\n    \"reasoning\": \"Selected these 46 references because they represent foundational work and recent advances in FLAME: A Small Language Model for Spreadsheet Formulas, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}