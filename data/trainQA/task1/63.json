{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 60 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Occlum: Secure and Efficient Multitasking Inside a Single Enclave of Intel SGX\n\nPaper Abstract: Abstract. Intel Software Guard Extensions (SGX) enables user-level code to create private memory regions called enclaves, whose code and data are protected by the CPU from software and hardware attacks outside the enclaves. Recent work introduces library operating systems (LibOSes) to SGX so that legacy applications can run inside enclaves with few or even no modifications. As virtually any non-trivial application demands multiple processes, it is essential for LibOSes to support multitasking. However, none of the existing SGX LibOSes support multitasking both securely and efficiently. This paper presents Occlum, a system that enables secure and efficient multitasking on SGX. We implement the LibOS processes as SFI-Isolated Processes (SIPs). SFI is a software instrumentation technique for sandboxing untrusted modules (called domains). We design a novel SFI scheme named MPX-based, Multi-Domain SFI (MMDSFI) and leverage MMDSFI to enforce the isolation of SIPs. We also design an independent verifier to ensure the security guarantees of MMDSFI. With SIPs safely sharing the single address space of an enclave, the LibOS can implement multitasking efficiently. The Occlum LibOS outperforms the state-of-the-art SGX LibOS on multitasking-heavy workloads by up to 6,600×6,600\\times on micro-benchmarks and up to 500×500\\times on application benchmarks.\n\n{retrieved_text}\n\nGenerate exactly 60 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 60\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Overview of Intel Protected File System Library Using Software Guard Extensions\",\n        \"byte-unixbench\",\n        \"Download the Windows version of PostgreSQL\",\n        \"fish shell\",\n        \"Large single compilation-unit C programs\",\n        \"Lighttpd, fly light\",\n        \"The Linux FUSE (Filesystem in Userspace) interface\",\n        \"The LLVM Compiler Infrastructure\",\n        \"musl libc\",\n        \"Occlum: A memory-safe, multi-process LibOS for Intel SGX\",\n        \"Redis on Windows\",\n        \"The Rust Programming Language\",\n        \"Single Address Space OperatingSystem\",\n        \"sshd - OpenSSH SSH daemon\",\n        \"Using Apache With Microsoft Windows\",\n        \"Zydis: Fast and lightweight x86/x86-64 disassembler library\",\n        \"Compilers: Principles, Techniques, and Tools (2nd Edition)\",\n        \"An In-depth Analysis of Disassembly on Full-scale x86/x64 Binaries\",\n        \"SCONE: Secure Linux Containers with Intel SGX\",\n        \"A fork() in the road\",\n        \"Shielding Applications from an Untrusted Cloud with Haven\",\n        \"Foreshadow: Extracting the Keys to the Intel SGX Kingdom with Transient Out-of-Order Execution\",\n        \"Control-Flow Bending: On the Effectiveness of Control-Flow Integrity\",\n        \"Iago Attacks: Why the System Call API is a Bad Untrusted RPC Interface\",\n        \"SgxPectre Attacks: Stealing Intel Secrets from SGX Enclaves via Speculative Execution\",\n        \"Memory protection keys\",\n        \"CINT2006 (Integer Component of SPEC CPU2006)\",\n        \"posix_spawn() as an actual system call\",\n        \"Shielding Software From Privileged Side-Channel Attacks\",\n        \"Exokernel: An Operating System Architecture for Application-Level Resource Management\",\n        \"Fluentd is an open source data collector for unified logging layer\",\n        \"ab - Apache HTTP server benchmarking tool\",\n        \"GCC, the GNU Compiler Collection\",\n        \"Auxiliary Vector\",\n        \"Out of Control: Overcoming Control-Flow Integrity\",\n        \"Ryoan: A Distributed Sandbox for Untrusted Computation on Secret Data\",\n        \"Introduction to Intel(R) Memory Protection Extensions\",\n        \"Intel SGX for Linux\",\n        \"Intel(R) Software Guard Extensions SDK\",\n        \"No Need to Hide: Protecting Safe Regions on Commodity Hardware\",\n        \"Static Disassembly of Obfuscated Binaries\",\n        \"SGXBOUNDS: Memory Safety for Shielded Execution\",\n        \"Sego: Pervasive Trusted Metadata for Efficiently Verified Untrusted System Services\",\n        \"Efficient, Verifiable Binary Sandboxing for a CISC Architecture\",\n        \"Varys: Protecting SGX Enclaves from Practical Side-Channel Attacks\",\n        \"Rethinking the Library OS from the Top Down\",\n        \"The Art of UNIX Programming\",\n        \"etcd: a distributed, reliable key-value store for the most critical data of a distributed system\",\n        \"Disassembly of Executable Code Revisited\",\n        \"Adapting Software Fault Isolation to Contemporary CPU Architectures\",\n        \"T-SGX: Eradicating Controlled-Channel Attacks Against Enclave Programs\",\n        \"Panoply: Low-TCB Linux Applications With SGX Enclaves\",\n        \"Firmalice - Automatic Detection of Authentication Bypass Vulnerabilities in Binary Firmware\",\n        \"A design and verification methodology for secure isolated regions\",\n        \"Graphene-SGX: A Practical Library OS for Unmodified Applications on SGX\",\n        \"Efficient Software-Based Fault Isolation\",\n        \"Towards Memory Safe Enclave Programming with Rust-SGX\",\n        \"Leaky Cauldron on the Dark Land: Understanding Memory Side-Channel Hazards in SGX\",\n        \"RIPE: Runtime Intrusion Prevention Evaluator\",\n        \"Combining control-flow integrity and static analysis for efficient and validated data sandboxing\"\n    ],\n    \"reasoning\": \"Selected these 60 references because they represent foundational work and recent advances in Occlum: Secure and Efficient Multitasking Inside a Single Enclave of Intel SGX, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}