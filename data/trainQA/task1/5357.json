{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 57 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: On the Importance of Building High-quality Training Datasets for Neural Code Search\n\nPaper Abstract: Abstract. The performance of neural code search is significantly influenced by the quality of the training data from which the neural models are derived. A large corpus of high-quality query and code pairs is demanded to establish a precise mapping from the natural language to the programming language. Due to the limited availability, most widely-used code search datasets are established with compromise, such as using code comments as a replacement of queries. Our empirical study on a famous code search dataset reveals that over one-third of its queries contain noises that make them deviate from natural user queries. Models trained through noisy data are faced with severe performance degradation when applied in real-world scenarios. To improve the dataset quality and make the queries of its samples semantically identical to real user queries is critical for the practical usability of neural code search. In this paper, we propose a data cleaning framework consisting of two subsequent filters: a rule-based syntactic filter and a model-based semantic filter. This is the first framework that applies semantic query cleaning to code search datasets. Experimentally, we evaluated the effectiveness of our framework on two widely-used code search models and three manually-annotated code retrieval benchmarks. Training the popular DeepCS model with the filtered dataset from our framework improves its performance by 19.2% MRR and 21.3% Answer@1, on average with the three validation benchmarks.\n\n{retrieved_text}\n\nGenerate exactly 57 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 57\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Github\",\n        \"How to Write Doc Comments for the Javadoc Tool\",\n        \"On the Importance of Building High-quality Training Datasets for Neural Code Search\",\n        \"StackOverflow\",\n        \"Variational Autoencoder based Anomaly Detection using Reconstruction Probability\",\n        \"A Parallel Corpus of Python Functions and Documentation Strings for Automated Code Documentation and Code Generation\",\n        \"When deep learning met code search\",\n        \"Fake Twitter followers detection by denoising autoencoder\",\n        \"A Neural Framework for Retrieval and Summarization of Source Code\",\n        \"Unsupervised change detection using Spatial Transformer Networks\",\n        \"Learning Phrase Representations using RNN Encoder-Decoder for Statistical Machine Translation\",\n        \"Sampling techniques\",\n        \"A Coefficient of Agreement for Nominal Scales\",\n        \"Maximum likelihood from incomplete data via the EM - algorithm plus discussions on the paper\",\n        \"Deep Code Search\",\n        \"A Multi-Perspective Architecture for Semantic Code Search\",\n        \"Neural joint attention code search over structure embeddings for software Q&A sites\",\n        \"Deep Code Comment Generation\",\n        \"CodeSearchNet Challenge: Evaluating the State of Semantic Code Search\",\n        \"Determining sample size\",\n        \"FaCoY - A Code-to-Code Search Engine\",\n        \"Auto-Encoding Variational Bayes\",\n        \"Finding Anomalies with Generative Adversarial Networks for a Patrolbot\",\n        \"Neural Code Search Evaluation Dataset\",\n        \"Accessing Inaccessible Android APIs: An Empirical Study\",\n        \"Characterising Deprecated Android APIs\",\n        \"CDA: Characterising Deprecated Android APIs\",\n        \"Learning Code-Query Interaction for Enhancing Code Searches\",\n        \"Anomaly Detection for Time Series Using VAE-LSTM Hybrid Model\",\n        \"Adaptive Deep Code Search\",\n        \"Opportunities and Challenges in Code Search Tools\",\n        \"Simplifying Deep-Learning-Based Model for Code Search\",\n        \"Identifying and Characterizing Silently-Evolved Methods in the Android API\",\n        \"Distributed Anomaly Detection Using Autoencoder Neural Networks in WSN for IoT\",\n        \"An introduction to neural information retrieval\",\n        \"What makes a good code example?: A study of programming Q&A in StackOverflow\",\n        \"Libraries.io Open Source Repository and Dependency Metadata\",\n        \"Deep Learning for Anomaly Detection: A Survey\",\n        \"Classifying code comments in Java software systems\",\n        \"OCoR: An Overlapping-Aware Code Retriever\",\n        \"Improving Code Search with Co-Attentive Representation Learning\",\n        \"Anomaly Detection for Temporal Data using Long Short-Term Memory (LSTM)\",\n        \"Echo-state conditional variational autoencoder for anomaly detection\",\n        \"PSCS: A Path-based Neural Model for Semantic Code Search\",\n        \"CSNIPPEX: automated synthesis of compilable code snippets from Q&A sites\",\n        \"Multi-modal Attention Network Learning for Semantic Source Code Retrieval\",\n        \"TranS3Ì‚: A Transformer-based Framework for Unifying Code Summarization and Code Search\",\n        \"Principal component analysis\",\n        \"Unsupervised Anomaly Detection via Variational Auto-Encoder for Seasonal KPIs in Web Applications\",\n        \"Are the Code Snippets What We Are Searching for? A Benchmark and an Empirical Study on Code Search with Natural-Language Queries\",\n        \"CoaCor: Code Annotation for Code Retrieval with Reinforcement Learning\",\n        \"StaQC: A Systematically Mined Question-Code Dataset from Stack Overflow\",\n        \"Leveraging Code Generation to Improve Code Retrieval and Summarization via Dual Learning\",\n        \"Learning to Mine Aligned Code and Natural Language Pairs from Stack Overflow\",\n        \"Are Code Examples on an Online Q&A Forum Reliable?: A Study of API Misuse on Stack Overflow\",\n        \"Detecting rumors on Online Social Networks using multi-layer autoencoder\",\n        \"On the Impact of Sample Duplication in Machine Learning based Android Malware Detection\"\n    ],\n    \"reasoning\": \"Selected these 57 references because they represent foundational work and recent advances in On the Importance of Building High-quality Training Datasets for Neural Code Search, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}