{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 53 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Hoplite: Efficient and Fault-Tolerant Collective Communication for Task-Based Distributed Systems\n\nPaper Abstract: Abstract. Task-based distributed frameworks (e.g., Ray, Dask, Hydro) have become increasingly popular for distributed applications that contain asynchronous and dynamic workloads, including asynchronous gradient descent, reinforcement learning, and model serving. As more data-intensive applications move to run on top of task-based systems, collective communication efficiency has become an important problem. Unfortunately, traditional collective communication libraries (e.g., MPI, Horovod, NCCL) are an ill fit, because they require the communication schedule to be known before runtime and they do not provide fault tolerance. We design and implement Hoplite, an efficient and fault-tolerant collective communication layer for task-based distributed systems. Our key technique is to compute data transfer schedules on the fly and execute the schedules efficiently through fine-grained pipelining. At the same time, when a task fails, the data transfer schedule adapts quickly to allow other tasks to keep making progress. We apply Hoplite to a popular task-based distributed framework, Ray. We show that Hoplite speeds up asynchronous stochastic gradient descent, reinforcement learning, and serving an ensemble of machine learning models that are difficult to execute efficiently with traditional collective communication by up to 7.8x, 3.9x, and 3.3x, respectively.\n\n{retrieved_text}\n\nGenerate exactly 53 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 53\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"TensorFlow: A System for Large-Scale Machine Learning\",\n        \"Amazon S3. Object storage built to store and retrieve any amount of data from anywhere.\",\n        \"Tfx: A tensorflow-based production-scale machine learning platform\",\n        \"Cilk: An efficient multithreaded runtime system\",\n        \"Scribe: a large-scale and decentralized application-level multicast infrastructure\",\n        \"SplitStream: High-Bandwidth Multicast in Cooperative Environments\",\n        \"Efficient Coflow Scheduling Without Prior Knowledge\",\n        \"Managing Data Transfers in Computer Clusters with Orchestra\",\n        \"Efficient Coflow Scheduling with Varys\",\n        \"Clipper: A low-latency online prediction serving system\",\n        \"Large scale distributed deep networks\",\n        \"MapReduce: Simplified Data Processing on Large Clusters\",\n        \"Impala: Scalable distributed deep-rl with importance weighted actor-learner architectures\",\n        \"Collective communications library with various primitives for multi-machine training\",\n        \"Accurate, large minibatch sgd: Training imagenet in 1 hour\",\n        \"Open MPI: A flexible high performance MPI\",\n        \"gRPC\",\n        \"Deep residual learning for image recognition\",\n        \"Hydro\",\n        \"SqueezeNet: AlexNet-level accuracy with 50x fewer parameters andÂ¡ 0.5 MB model size\",\n        \"IP Multicast Technology Overview\",\n        \"Keynote: Building a Fusion Engine with Ray\",\n        \"Imagenet classification with deep convolutional neural networks\",\n        \"Application-Driven Bandwidth Guarantees in Datacenters\",\n        \"Scaling distributed machine learning with the parameter server\",\n        \"Parameter server for distributed machine learning\",\n        \"RLlib: Abstractions for distributed reinforcement learning\",\n        \"Shufflenet v2: Practical guidelines for efficient cnn architecture design\",\n        \"Asynchronous Methods for Deep Reinforcement Learning\",\n        \"Ray: A Distributed Framework for Emerging AI Applications\",\n        \"MPICH\",\n        \"CIEL: a universal execution engine for distributed data-flow computing\",\n        \"PipeDream: Generalized Pipeline Parallelism for DNN Training\",\n        \"The NVIDIA Collective Communication Library (NCCL)\",\n        \"NumPy\",\n        \"TensorFlow-Serving: Flexible, High-Performance ML Serving\",\n        \"PyTorch: An Imperative Style, High-Performance Deep Learning Library\",\n        \"A Generic Communication Scheduler for Distributed DNN Training Acceleration\",\n        \"Low Latency Geo-Distributed Data Analytics\",\n        \"Shuffling, Fast and Slow: Scalable Analytics on Serverless Infrastructure\",\n        \"Parameter Server\",\n        \"Ray Serve\",\n        \"Redis\",\n        \"Dask: Parallel computation with blocked algorithms and task scheduling\",\n        \"Mobilenetv2: Inverted residuals and linear bottlenecks\",\n        \"Proximal policy optimization algorithms\",\n        \"Horovod: fast and easy distributed deep learning in TensorFlow\",\n        \"Very Deep Convolutional Networks for Large-Scale Image Recognition\",\n        \"A fault-tolerance shim for serverless computing\",\n        \"Efficientnet: Rethinking model scaling for convolutional neural networks\",\n        \"Blink: Fast and Generic Collectives for Distributed ML\",\n        \"Lineage Stash: Fault Tolerance off the Critical Path\",\n        \"Apache Spark: A Unified Engine for Big Data Processing\"\n    ],\n    \"reasoning\": \"Selected these 53 references because they represent foundational work and recent advances in Hoplite: Efficient and Fault-Tolerant Collective Communication for Task-Based Distributed Systems, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}