{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 49 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: SynCoBERT: Syntax-Enhanced Contrastive Pre-Training for Code Representation\n\nPaper Abstract: Abstract Code representation learning, which aims to encode the semantics of source code into distributed vectors, plays an important role in recent deep-learning-based models for code intelligence. Recently, many pre-trained language models for source code (e.g., CuBERT and CodeBERT) have been proposed to model the context of code and serve as a basis for downstream code intelligence tasks such as code search, code clone detection, and program translation. Current approaches typically consider the source code as a plain sequence of tokens, or inject the structure information (e.g., AST and data-flow) into the sequential model pre-training. To further explore the properties of programming languages, this paper proposes SynCoBERT, a Syntax-guided multi-modal contrastive pre-training approach for better Code representations. Specially, we design two novel pre-training objectives originating from the symbolic and syntactic properties of source code, i.e., Identifier Prediction (IP) and AST Edge Prediction (TEP), which are designed to predict identifiers, and edges between two nodes of AST, respectively. Meanwhile, to exploit the complementary information in semantically equivalent modalities (i.e., code, comment, AST) of the code, we propose a multi-modal contrastive learning strategy to maximize the mutual information among different modalities. Extensive experiments on four downstream tasks related to code intelligence show that SynCoBERT advances the state-of-the-art with the same pre-training corpus and model size.\n\n{retrieved_text}\n\nGenerate exactly 49 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 49\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Unified Pre-training for Program Understanding and Generation\",\n        \"code2vec: learning distributed representations of code\",\n        \"Self-Supervised Contrastive Learning for Code Retrieval and Summarization via Semantic-Preserving Transformations\",\n        \"A Simple Framework for Contrastive Learning of Visual Representations\",\n        \"Tree-to-tree neural networks for program translation\",\n        \"On the Properties of Neural Machine Translation: Encoderâ€“Decoder Approaches\",\n        \"ELECTRA: Pre-training Text Encoders as Discriminators Rather Than Generators\",\n        \"On using distributed representations of source code for the detection of C security vulnerabilities\",\n        \"BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding\",\n        \"CERT: Contrastive Self-supervised Learning for Language Understanding\",\n        \"CodeBERT: A Pre-Trained Model for Programming and Natural Languages\",\n        \"DeCLUTR: Deep Contrastive Learning for Unsupervised Textual Representations\",\n        \"Deep code search\",\n        \"GraphCodeBERT: Pre-training Code Representations with Data Flow\",\n        \"Contrastive Multi-View Representation Learning on Graphs\",\n        \"CodeSearchNet Challenge: Evaluating the State of Semantic Code Search\",\n        \"Contrastive Code Representation Learning\",\n        \"TreeBERT: A Tree-Based Pre-Trained Model for Programming Language\",\n        \"Learning and Evaluating Contextual Embedding of Source Code\",\n        \"Convolutional Neural Networks for Sentence Classification\",\n        \"Statistical phrase-based translation\",\n        \"ALBERT: A Lite BERT for Self-supervised Learning of Language Representations\",\n        \"BART: Denoising Sequence-to-Sequence Pre-training for Natural Language Generation, Translation, and Comprehension\",\n        \"On the Sentence Embeddings from Pre-trained Language Models\",\n        \"Software Defect Prediction via Convolutional Neural Network\",\n        \"Multi-task learning based pre-trained language model for code completion\",\n        \"RoBERTa: A Robustly Optimized BERT Pretraining Approach\",\n        \"CodeXGLUE: A Machine Learning Benchmark Dataset for Code Understanding and Generation\",\n        \"Effective Approaches to Attention-based Neural Machine Translation\",\n        \"Self-Supervised Learning of Pretext-Invariant Representations\",\n        \"Convolutional neural networks over tree structures for programming language processing\",\n        \"CoTexT: Multi-task Learning with Code-Text Transformer\",\n        \"Improving language understanding by generative pre-training\",\n        \"Exploring the Limits of Transfer Learning with a Unified Text-to-Text Transformer\",\n        \"Sentence-BERT: Sentence Embeddings using Siamese BERT-Networks\",\n        \"Neural Machine Translation of Rare Words with Subword Units\",\n        \"Towards a Big Data Curated Benchmark of Inter-project Code Clones\",\n        \"Intellicode compose: Code generation using transformer\",\n        \"Improved Semantic Representations From Tree-Structured Long Short-Term Memory Networks\",\n        \"On Mutual Information Maximization for Representation Learning\",\n        \"Attention is All You Need\",\n        \"Tree transformer: Integrating tree structures into self-attention\",\n        \"Deep learning code fragments for code clone detection\",\n        \"CLEAR: Contrastive Learning for Sentence Representation\",\n        \"Contrastive Multi-Modal Clustering\",\n        \"ConSERT: A Contrastive Framework for Self-Supervised Sentence Representation Transfer\",\n        \"Multimodal Contrastive Training for Visual Representation Learning\",\n        \"Devign: Effective Vulnerability Identification by Learning Comprehensive Program Semantics via Graph Neural Networks\",\n        \"Language-Agnostic Representation Learning of Source Code from Structure and Context\"\n    ],\n    \"reasoning\": \"Selected these 49 references because they represent foundational work and recent advances in SynCoBERT: Syntax-Enhanced Contrastive Pre-Training for Code Representation, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}