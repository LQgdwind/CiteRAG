{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 51 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Pluvio: Assembly Clone Search for Out-of-domain Architectures and Libraries through Transfer Learning and Conditional Variational Information Bottleneck\n\nPaper Abstract: Abstract. The practice of code reuse is crucial in software development for a faster and more efficient development lifecycle. In reality, however, code reuse practices lack proper control, resulting in issues such as vulnerability propagation and intellectual property infringements. Assembly clone search, a critical shift-right defence mechanism, has been effective in identifying vulnerable code resulting from reuse in released executables. Recent studies on assembly clone search demonstrate a trend towards using machine learning-based methods to match assembly code variants produced by different toolchains. However, these methods are limited to what they learn from a small number of toolchain variants used in training, rendering them inapplicable to unseen architectures and their corresponding compilation toolchain variants. This paper presents the first study on the problem of assembly clone search with unseen architectures and libraries. We propose incorporating human common knowledge through large-scale pre-trained natural language models, in the form of transfer learning, into current learning-based approaches for assembly clone search. Transfer learning can aid in addressing the limitations of the existing approaches, as it can bring in broader knowledge from human experts in assembly code. We further address the sequence limit issue by proposing a reinforcement learning agent to remove unnecessary and redundant tokens. Coupled with a new Variational Information Bottleneck learning strategy, the proposed system minimizes the reliance on potential indicators of architectures and optimization settings, for a better generalization of unseen architectures. We simulate the unseen architecture clone search scenarios and the experimental results show the effectiveness of the proposed approach against the state-of-the-art solutions.\n\n{retrieved_text}\n\nGenerate exactly 51 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 51\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Detecting Semantic Similarity Of Documents Using Natural Language Processing\",\n        \"Inline function: Kotlin\",\n        \"Deep Variational Information Bottleneck\",\n        \"Chapter 13 - Kidney disease prediction using a machine learning approach: A comparative and comprehensive analysis\",\n        \"Semantic Search on Text and Knowledge Bases\",\n        \"Mathematical statistics\",\n        \"How to use out-of-fold predictions in machine learning\",\n        \"Automatic Patch-Based Exploit Generation is Possible: Techniques and Implications\",\n        \"Detecting Self-mutating Malware Using Control-Flow Graph Matching\",\n        \"The Effect of Code Expanding Optimizations on Instruction Cache Design\",\n        \"The IDA pro book The unofficial guide to the worldâ€™s most popular disassembler\",\n        \"Function inlining\",\n        \"Classification: ROC curve and AUC\",\n        \"BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding\",\n        \"Kam1n0: MapReduce-based Assembly Clone Search for Reverse Engineering\",\n        \"Asm2Vec: Boosting Static Representation Robustness for Binary Clone Search against Code Obfuscation and Compiler Optimization\",\n        \"Conditional variational autoencoders\",\n        \"Sentence-transformers/all-mpnet-base-V2\",\n        \"An introduction to ROC analysis\",\n        \"A closer look at Inline\",\n        \"Chapter 2: Getting to Know Your Data\",\n        \"A Survey of Binary Code Similarity\",\n        \"Cross-Architecture Binary Semantics Understanding via Similar Code Comparison\",\n        \"Hugging face hub documentation\",\n        \"What does it mean to inline a function and how does it affect a program\",\n        \"Reinforcement Learning: A Survey\",\n        \"Learning Kotlin: Inline functions\",\n        \"Auto-Encoding Variational Bayes\",\n        \"Software reuse\",\n        \"Variational inference\",\n        \"Distributed Representations of Sentences and Documents\",\n        \"PalmTree: Learning an Assembly Language Model for Instruction Embedding\",\n        \"Semantics-Based Obfuscation-Resilient Binary Code Similarity Comparison with Applications to Software and Algorithm Plagiarism Detection\",\n        \"SAFE: Self-Attentive Function Embeddings for Binary Similarity\",\n        \"Area under the ROC Curve\",\n        \"Conditional Variational Autoencoder for Neural Machine Translation\",\n        \"Trex: Learning Execution Semantics from Micro-Traces for Binary Similarity\",\n        \"Cross-Architecture Bug Search in Binary Executables\",\n        \"Variational Information Bottleneck Model for Accurate Indoor Position Recognition\",\n        \"Sentence-BERT: Sentence Embeddings using Siamese BERT-Networks\",\n        \"DistilBERT, a distilled version of BERT: smaller, faster, cheaper and lighter\",\n        \"Code reuse in open source software development: Quantitative evidence, drivers, and impediments\",\n        \"MPNet: Masked and Permuted Pre-training for Language Understanding\",\n        \"Reinforcement learning - an introduction\",\n        \"The information bottleneck method\",\n        \"Policy-gradient methods\",\n        \"Attention is All you Need\",\n        \"Neural Network-based Graph Embedding for Cross-Platform Binary Code Similarity Detection\",\n        \"XLNet: Generalized Autoregressive Pretraining for Language Understanding\",\n        \"Order Matters: Semantic-Aware Neural Networks for Binary Code Similarity Detection\",\n        \"Neural machine translation inspired binary code similarity comparison beyond function pairs\"\n    ],\n    \"reasoning\": \"Selected these 51 references because they represent foundational work and recent advances in Pluvio: Assembly Clone Search for Out-of-domain Architectures and Libraries through Transfer Learning and Conditional Variational Information Bottleneck, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}