{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 57 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: TABLE OF CONTENTS\n\nPaper Abstract: Abstract Hardware presents an enticing target for attackers attempting to gain access to a secured computer system. Software-only exploits of hardware vulnerabilities may bypass software level security features. Hardware must be made secure. However, to understand whether a hardware design is secure, security specifications must be generated to define security on that design. Micro-architectural design elements, undocumented or under-documented features, debug interfaces, and information–flow side channels all may introduce new vulnerabilities. The secure behavior of each must be specified in order ensure the design meets its security requirements and contains no vulnerabilities. However, manual efforts can be overwhelmed by design complexity, and many hardware vulnerabilities, such as Memory Sinkhole, SYSRET privilege escalation, and most recently Spectre/Meltdown, persisted in product lines for decades despite extensive testing. An automated solution is needed to specify secure designs. Specification mining offers a solution by automating security specification for hardware. Specification miners use a form of machine learning to specify behaviors of a system by studying a system in execution. However, specification mining was first developed for use with software. Complex hardware designs offer unique challenges for this technique. Further, specification miners traditionally capture functional specifications without a notion of security, and may not use the specification logics necessary to describe some security requirements. This work demonstrates specification mining for hardware security. On CISC architectures such as x86, I demonstrate that a miner partitioning the design state space along control signals discovers a specification that includes manually defined properties and, if followed, would secure CPU designs against Memory Sinkhole and SYSRET privilege escalation. For temporal properties, I demonstrate that a miner using security specific linear temporal logic (LTL) templates for specification detection may find properties that, if followed, would secure designs against historical documented security vulnerabilities and against potential future attacks targeting system initialization. For information–flow hyperproperties, I demonstrate that a miner may use Information Flow Tracking (IFT) to develop output properties containing designer specified information–flow security properties as well as properties that demonstrate a design does not contain certain Common Weakness Enumerations (CWEs).\n\n{retrieved_text}\n\nGenerate exactly 57 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 57\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Compilers: Principles, Techniques, and Tools\",\n        \"Virtual cpu validation\",\n        \"Mining specifications\",\n        \"Clepsydra: Modeling timing flows in hardware designs\",\n        \"Register transfer level information–flow tracking for provably secure hardware design\",\n        \"Arbitrary precision and complexity tradeoffs for gate-level information–flow tracking\",\n        \"QEMU, a fast and portable dynamic translator\",\n        \"Security checkers: Detecting processor malicious inclusions at runtime\",\n        \"Evaluating security requirements in a general-purpose processor by combining assertion checkers with code coverage\",\n        \"Cross-validation processor specifications\",\n        \"Automatic assertion extraction via sequential data mining of simulation traces\",\n        \"SgxPectre attacks: Leaking enclave secrets via speculative execution\",\n        \"Temporal logics for hyperproperties\",\n        \"Hyperproperties\",\n        \"Automatic extraction of assertions from execution traces of behavioural models\",\n        \"Automatic generation of power state machines through dynamic mining of temporal assertions\",\n        \"A-TEAM: Automatic template-based assertion miner\",\n        \"Z3: An efficient smt solver\",\n        \"Hardfails: Insights into software-exploitable hardware bugs\",\n        \"A methodology for creating information–flow specifications of hardware designs\",\n        \"Mining security critical linear temporal logic specifications for processors\",\n        \"Evaluating security specification mining for a cisc architecture\",\n        \"The memory sinkhole: An architectural privelege escalation vulnerability\",\n        \"The intel sysret privilege escalation - xen project\",\n        \"Automatic generation of hardware design properties from simulation traces\",\n        \"The Daikon system for dynamic detection of likely invariants\",\n        \"Branchscope: A new side-channel attack on directional branch predictor\",\n        \"Javert: Fully automatic mining of general temporal properties from dynamic traces\",\n        \"Symbolic mining of temporal specifications\",\n        \"Security policies and security models\",\n        \"Tracking down software bugs using automatic anomaly detection\",\n        \"IODINE: A tool to automatically infer dynamic invariants for hardware designs\",\n        \"Mining hardware assertions with guidance from static analysis\",\n        \"SPECS: A lightweight runtime mechanism for protecting software from security-critical processor bugs\",\n        \"On verifying timed hyperproperties\",\n        \"Property specific information–flow analysis for hardware security verification\",\n        \"Imprecise security: Quality and complexity tradeoffs for hardware information–flow tracking\",\n        \"Gate-level information–flow tracking for security lattices\",\n        \"Intel 64 and IA-32 Architectures Software Developer Manuals\",\n        \"Spectre attacks: Exploiting speculative execution\",\n        \"General ltl specification mining (t)\",\n        \"Scalable specification mining for verification and diagnosis\",\n        \"Meltdown: Reading kernel memory from user space\",\n        \"Word level feature discovery to enhance quality of assertion mining\",\n        \"Automatic generation of system level assertions from transaction level models\",\n        \"Cross-checking semantic correctness: The case of finding file system bugs\",\n        \"Automatically patching errors in deployed software\",\n        \"Mining hyperproperties from behavioral traces\",\n        \"A pattern-based approach to parametric specification mining\",\n        \"AKER: A design and verification framework for safe and secure soc access control\",\n        \"AutoISES: Automatically inferring security specifications and detecting violations\",\n        \"Mining temporal specifications for error detection\",\n        \"Vulnerability extrapolation: Assisted discovery of vulnerabilities using machine learning\",\n        \"Fast PokeEMU: Scaling generated instruction tests using aggregation and state chaining\",\n        \"Perracotta: Mining temporal API rules from imperfect traces\",\n        \"Identifying security critical properties for the dynamic verification of a processor\",\n        \"Transys: Leveraging common security properties across hardware designs\"\n    ],\n    \"reasoning\": \"Selected these 57 references because they represent foundational work and recent advances in TABLE OF CONTENTS, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}