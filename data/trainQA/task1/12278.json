{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 52 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Modular probabilistic programming with algebraic effects (2019)\n\nPaper Abstract: Abstract Probabilistic programming languages, which exist in abundance, are languages that allow users to calculate probability distributions defined by probabilistic programs, by using inference algorithms. However, the underlying inference algorithms are not implemented in a modular fashion, though, the algorithms are presented as a composition of other inference components. This discordance between the theory and the practice of Bayesian machine learning, means that reasoning about the correctness of probabilistic programs is more difficult, and composing inference algorithms together in code may not necessarily produce correct compound inference algorithms. In this dissertation, I create a modular probabilistic programming library, already a nice property as its not a standalone language, called Koka Bayes, that is based off of both the modular design of Monad Bayes – a probabilistic programming library developed in Haskell – and its semantic validation. The library is embedded in a recently created programming language, Koka, that supports algebraic effect handlers and expressive effect types – novel programming abstractions that support modular programming. Effects are generalizations of computational side-effects, and it turns out that fundamental operations in probabilistic programming such as probabilistic choice and conditioning are instances of effects. 222See the GitHub from 2019: https://github.com/oliverjgoldstein/koka-bayes-writeup and see the language: https://github.com/oliverjgoldstein/koka-bayes\n\n{retrieved_text}\n\nGenerate exactly 52 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 52\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Explainable artificial intelligence via bayesian teaching\",\n        \"Bayesian reasoning and machine learning\",\n        \"Infer.net 0.3, 2018.\",\n        \"Simple, distributed, and accelerated probabilistic programming\",\n        \"Pyro: Deep universal probabilistic programming\",\n        \"Detection and defense of ddos attack–based on deep learning in openflow-based sdn\",\n        \"Imagery library for intelligent detection systems (i-lids)\",\n        \"Diagnostic assessment of deep learning algorithms for detection of lymph node metastases in women with breast cancer\",\n        \"Algebraic operations and generic effects\",\n        \"Handlers in action\",\n        \"Denotational validation of higher-order bayesian inference\",\n        \"Effect handling for composable program transformations in edward2\",\n        \"Following a moving target—monte carlo inference for dynamic bayesian models\",\n        \"An introduction to sequential monte carlo methods\",\n        \"Probabilistic inference using markov chain monte carlo methods\",\n        \"A language and program for complex bayesian modelling\",\n        \"Functional programming for modular bayesian inference\",\n        \"Probabilistic programming\",\n        \"Probabilistic lcf\",\n        \"Papers using infer.net, 2018.\",\n        \"Trueskill™: a bayesian skill rating system\",\n        \"Problog2: Probabilistic logic programming\",\n        \"Tabular: a schema-driven probabilistic programming language\",\n        \"Gen: a general-purpose probabilistic programming system with programmable inference\",\n        \"Noncomputable conditional distributions\",\n        \"Introduction to probabilistic modelling\",\n        \"On-line student modeling for coached problem solving using bayesian networks\",\n        \"Syntax and semantics for operations with scopes\",\n        \"No value restriction is needed for algebraic effects and handlers\",\n        \"Automatic reparameterisation in probabilistic programming.\",\n        \"On sequential monte carlo sampling methods for bayesian filtering\",\n        \"Embedding population dynamics models in inference\",\n        \"Sequential monte carlo methods for dynamic systems\",\n        \"A tutorial on particle filtering and smoothing: Fifteen years later\",\n        \"On resampling algorithms for particle filters\",\n        \"Information theory, inference and learning algorithms\",\n        \"Particle markov chain monte carlo methods\",\n        \"On the expressive power of user-defined effects: effect handlers, monadic reflection, delimited control\",\n        \"Paris agreement climate proposals need a boost to keep warming well below 2 c\",\n        \"Importance of the pre-industrial baseline for likelihood of exceeding paris goals\",\n        \"Estimating changes in global temperature since the preindustrial period\",\n        \"A unifying review of linear gaussian models\",\n        \"d-separation: From theorems to algorithms\",\n        \"Berkeley earth temperature averaging process\",\n        \"Elicitation of prior distributions\",\n        \"Modeling errors in daily precipitation measurements: Additive or multiplicative?\",\n        \"250 years of global warming, 2012.\",\n        \"A new estimate of the average earth surface land temperature spanning 1753 to 2011\",\n        \"Handbook of monte carlo methods, volume 706.\",\n        \"Exact bayesian inference by symbolic disintegration\",\n        \"Learning probabilistic programs using backpropagation\",\n        \"Dependently typed programming in agda\"\n    ],\n    \"reasoning\": \"Selected these 52 references because they represent foundational work and recent advances in Modular probabilistic programming with algebraic effects (2019), providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}