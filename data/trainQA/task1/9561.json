{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 56 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Synthesis of Procedural Models for Deterministic Transition Systems\n\nPaper Abstract: Abstract This paper introduces a general approach for synthesizing procedural models of the state-transitions of a given discrete system. The approach is general in that it accepts different target languages for modeling the state-transitions of a discrete system; different model acquisition tasks with different target languages, such as the synthesis of Strips action models, or the update rule of a cellular automaton, fit as particular instances of our general approach. We follow an inductive approach to synthesis meaning that a set of examples of state-transitions, represented as (pre-state, action, post-state) tuples, are given as input. The goal is to synthesize a structured program that, when executed on a given pre-state, outputs its associated post-state. Our synthesis method implements a combinatorial search in the space of well-structured terminating programs that can be built using a Random-Access Machine (RAM), with a minimalist instruction set, and a finite amount of memory. The combinatorial search is guided with functions that asses the complexity of the candidate programs, as well as their fitness to the given input set of examples.\n\n{retrieved_text}\n\nGenerate exactly 56 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 56\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Learning action models with minimal observability\",\n        \"A comprehensive framework for learning declarative action models\",\n        \"Learning partially observable deterministic action models\",\n        \"A review of learning planning action models\",\n        \"Learning neural-symbolic descriptive planning models via cube-space priors: The voyage home (to strips)\",\n        \"Principles of model checking\",\n        \"Knowledge-based programs as building blocks for planning\",\n        \"Inductive Logic Programming: from machine learning to software engineering\",\n        \"Computability and logic\",\n        \"Probabilistic programs as an action description language\",\n        \"Working with numbers\",\n        \"On average and highest number of flips in pancake sorting\",\n        \"Model checking\",\n        \"Acquiring planning domain models using locm\",\n        \"Logical and relational learning\",\n        \"Reasoning about knowledge\",\n        \"Learning and executing generalized robot plans\",\n        \"Knowledge-based simulation: methodology and application\",\n        \"Knowledge based simulation: An artificial intelligence approach to system modeling and automating the simulation life cycle.\",\n        \"Tarski: An AI planning modeling framework\",\n        \"Target languages (vs. inductive biases) for learning to act and plan\",\n        \"A concise introduction to models and methods for automated planning\",\n        \"The international general game playing competition\",\n        \"Probabilistic relational models\",\n        \"Automated Planning: theory and practice\",\n        \"An introduction to the planning domain definition language\",\n        \"The fast downward planning system\",\n        \"A review of machine learning for automated planning\",\n        \"A review of generalized planning\",\n        \"Safe learning of lifted action models\",\n        \"Semi-black box: rapid development of planning based solutions\",\n        \"Unifying sat-based and graph-based planning\",\n        \"Frontier search\",\n        \"Louga: learning planning operators using genetic algorithms\",\n        \"Online learning of action models for pddl planning.\",\n        \"Recursive unsolvability of post’s problem of “tag” and other topics in theory of turing machines\",\n        \"Learning strips operators from noisy and incomplete observations\",\n        \"Inductive logic programming\",\n        \"Planning. domains\",\n        \"Learning symbolic models of stochastic domains\",\n        \"The book of why: the new science of cause and effect\",\n        \"Statistical relational artificial intelligence: Logic, probability, and computation\",\n        \"A theory of diagnosis from first principles\",\n        \"Lama 2008 and 2011\",\n        \"Learning first-order representations for planning from black-box states: New results\",\n        \"On the relative expressiveness of adl and golog: The last piece in the puzzle.\",\n        \"Mastering atari, go, chess and shogi by planning with a learned model\",\n        \"Scaling-up generalized planning as heuristic search with landmarks\",\n        \"Generalized planning as heuristic search\",\n        \"Computing programs for generalized planning as heuristic search\",\n        \"Online action recognition\",\n        \"Strips action discovery\",\n        \"Learning structural descriptions from examples\",\n        \"A new kind of science\",\n        \"Learning cellular automaton dynamics with neural networks\",\n        \"Learning action models from plan examples using weighted max-sat\"\n    ],\n    \"reasoning\": \"Selected these 56 references because they represent foundational work and recent advances in Synthesis of Procedural Models for Deterministic Transition Systems, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}