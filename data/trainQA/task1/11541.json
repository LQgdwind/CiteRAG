{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 57 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: RE#: High Performance Derivative-Based Regex Matching with Intersection, Complement and Lookarounds\n\nPaper Abstract: Abstract. We present a tool and theory ùêëùêÑ‚Äã#ùêëùêÑ#\\mathbf{RE\\#} for regular expression matching that is built on symbolic derivatives, does not use backtracking, and, in addition to the classical operators, also supports complement, intersection and lookarounds. We develop the theory formally and show that the main matching algorithm has input-linear complexity both in theory as well as experimentally. We apply thorough evaluation on popular benchmarks that show that ùêëùêÑ‚Äã#ùêëùêÑ#\\mathbf{RE\\#} is over 71% faster than the next fastest regex engine in Rust on the baseline, and outperforms all state-of-the-art engines on extensions of the benchmarks often by several orders of magnitude.\n\n{retrieved_text}\n\nGenerate exactly 57 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 57\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Partial Derivatives of Regular Expressions and Finite Automata Constructions\",\n        \"POSIX Lexing with Derivatives of Regular Expressions (Proof Pearl)\",\n        \"cvc5: A Versatile and Industrial-Strength SMT Solver\",\n        \"Linear Matching of JavaScript Regular Expressions\",\n        \"Formalising and implementing Boost POSIX regular expression matching\",\n        \"Regular Expressions with Lookahead\",\n        \"Derivatives of regular expressions\",\n        \"On Extended Regular Expressions\",\n        \"Partial Derivatives of an Extended Regular Expression\",\n        \"Solving String Constraints with Regex-Dependent Functions through Transducers with Priorities and Variables\",\n        \"On Lookaheads in Regular Expressions with Backreferences\",\n        \"Regular Expression Matching in the Wild\",\n        \"Automata Modulo Theories\",\n        \"Rethinking Regex Engines to Address ReDoS\",\n        \"The Impact of Regular Expression Denial of Service (ReDoS) in Practice: An Empirical Study at the Ecosystem Scale\",\n        \"Z3: An Efficient SMT Solver\",\n        \"A Play on Regular Expressions: Functional Pearl\",\n        \"Greedy Regular Expression Matching\",\n        \"BurntSushi: rebar\",\n        \"Succinctness of the Complement and Intersection of Regular Expressions\",\n        \"Regular Expression Matching using Bit Vector Automata\",\n        \"The abstract theory of automata\",\n        \"grep\",\n        \"RE2\",\n        \"Kleenex: compiling nondeterministic transducers to deterministic streaming transducers\",\n        \"Fast Matching of Regular Patterns with Synchronizing Counting\",\n        \"akoumjian: datefinder\",\n        \"Kleene algebra with tests\",\n        \"NFAs with tagged transitions, their conversion to deterministic automata and application to regular expressions\",\n        \"A Decision Procedure for Regular Membership and Length Constraints over Unbounded Strings?\",\n        \"Sound Regular Expression Semantics for Dynamic Symbolic Execution of JavaScript\",\n        \"Efficient Matching of Regular Expressions with Lookaround Assertions\",\n        \"Regular expressions and state graphs for automata\",\n        \"CredScan\",\n        \"Regular Expression Language - Quick Reference\",\n        \".NET Regular Expressions\",\n        \"Derivatives of Regular Expressions with Lookahead\",\n        \"Translation of Regular Expression with Lookahead into Finite State Automaton\",\n        \"Derivative Based Nonbacktracking Real-World Regex Matching with Backtracking Semantics\",\n        \"Regular expression Denial of Service - ReDoS\",\n        \"Regular-expression Derivatives Re-examined\",\n        \"Symbolic Algorithms for Language Equivalence and Kleene Algebra with Tests\",\n        \"Teddy: An Efficient SIMD-based Literal Matching Engine for Scalable Deep Packet Inspection\",\n        \"The Rust Programming Language: regex\",\n        \"Symbolic Regex Matcher\",\n        \"The Satisfiability Modulo Theories Library\",\n        \"Software Solutions in C\",\n        \"Symbolic Boolean Derivatives for Efficiently Solving Extended Regular Expression Constraints\",\n        \"Regular Expression Sub-Matching Using Partial Derivatives\",\n        \"POSIX Lexing with Bitcoded Derivatives\",\n        \"Programming Techniques: Regular Expression Search Algorithm\",\n        \"Counting in Regexes Considered Harmful: Exposing ReDoS Vulnerability of Nonbacktracking Matchers\",\n        \"Regex Matching with Counting-Set Automata\",\n        \"POSIX Lexing with Derivatives of Regular Expressions\",\n        \"Accompanying web application for the article\",\n        \"Hyperscan: A Fast Multi-pattern Regex Matcher for Modern CPUs\",\n        \"Lean Formalization of Extended Regular Expression Matching with Lookarounds\"\n    ],\n    \"reasoning\": \"Selected these 57 references because they represent foundational work and recent advances in RE#: High Performance Derivative-Based Regex Matching with Intersection, Complement and Lookarounds, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}