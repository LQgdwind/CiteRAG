{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 50 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Optimising AI Training Deployments using Graph Compilers and Containers\n\nPaper Abstract: Abstract Artificial Intelligence (AI) applications based on Deep Neural Networks (DNN) or Deep Learning (DL) have become popular due to their success in solving problems like image analysis and speech recognition. Training a DNN is computationally intensive and High Performance Computing (HPC) has been a key driver in AI growth. Virtualisation and container technology have led to the convergence of cloud and HPC infrastructure. These infrastructures with diverse hardware increase the complexity of deploying and optimising AI training workloads. AI training deployments in HPC or cloud can be optimised with target-specific libraries, graph compilers, and by improving data movement or IO. Graph compilers aim to optimise the execution of a DNN graph by generating an optimised code for a target hardware/backend. As part of SODALITE (a Horizon 2020 project), MODAK tool is developed to optimise application deployment in software defined infrastructures. Using input from the data scientist and performance modelling, MODAK maps optimal application parameters to a target infrastructure and builds an optimised container. In this paper, we introduce MODAK and review container technologies and graph compilers for AI. We illustrate optimisation of AI training deployments using graph compilers and Singularity containers. Evaluation using MNIST-CNN and ResNet50 training workloads shows that custom built optimised containers outperform the official images from DockerHub. We also found that the performance of graph compilers depends on the target hardware and the complexity of the neural network.\n\n{retrieved_text}\n\nGenerate exactly 50 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 50\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"The history began from alexnet: A comprehensive survey on deep learning approaches\",\n        \"Deep learning\",\n        \"Neocognitron: A self-organizing neural network model for a mechanism of pattern recognition unaffected by shift in position\",\n        \"Imagenet classification with deep convolutional neural networks\",\n        \"Tensorflow: A system for large-scale machine learning\",\n        \"Pytorch: An imperative style, high-performance deep learning library\",\n        \"Mxnet: A flexible and efficient machine learning library for heterogeneous distributed systems\",\n        \"Cntk: Microsoft’s open-source deep-learning toolkit\",\n        \"Keras\",\n        \"Slurm: Simple linux utility for resource management\",\n        \"Planning and optimization in torque resource manager\",\n        \"Sodalite\",\n        \"Profiling and predicting application performance on the cloud.\",\n        \"Paraopt: Automated application parameterization and optimization for the cloud\",\n        \"Comparative benchmarking of cloud computing vendors with high performance linpack\",\n        \"Continuous evaluation of the performance of cloud infrastructure for scientific applications\",\n        \"Confadvisor: A performance-centric configuration tuning framework for containers on kubernetes\",\n        \"Aws compute optimizer\",\n        \"Google compute engine\",\n        \"Deploying ai frameworks on secure hpc systems with containers.\",\n        \"Charliecloud: Unprivileged containers for user-defined software stacks in hpc\",\n        \"Prototype of application and infrastructure performance models\",\n        \"Containers and cloud: From lxc to docker to kubernetes\",\n        \"Lxc: Linux container tools\",\n        \"Performance comparison between linux containers and virtual machines\",\n        \"Docker: lightweight linux containers for consistent development and deployment\",\n        \"Shifter: Containers for hpc\",\n        \"Singularity\",\n        \"Singularity: Scientific containers for mobility of compute\",\n        \"Containers in hpc: A scalability and portability study in production biological simulations\",\n        \"Sarus: Highly scalable docker containers for hpc systems\",\n        \"Xla: Optimizing compiler for machine learning : Tensorflow\",\n        \"Xla: Tensorflow, compiled\",\n        \"Glow: Graph lowering compiler techniques for neural networks\",\n        \"Intel ngraph: An intermediate representation, compiler, and executor for deep learning\",\n        \"Onnc: A compilation framework connecting onnx to proprietary deep learning accelerators\",\n        \"Intel math kernel library\",\n        \"Gpu accelerated deep learning with cudnn\",\n        \"Hlrs - high-performance computing center — stuttgart\",\n        \"User namespaces and fakeroot\",\n        \"Tensorflow: Build from source\",\n        \"Pytorch: From source\",\n        \"Glow\",\n        \"MNIST handwritten digit database\",\n        \"Imagenet: A large-scale hierarchical image database\",\n        \"The mnist database of handwritten digit images for machine learning research [best of the web]\",\n        \"Gradient-based learning applied to document recognition\",\n        \"Imagenet large scale visual recognition challenge\",\n        \"Deep residual learning for image recognition\",\n        \"Gradient flow in recurrent nets: the difficulty of learning long-term dependencies\"\n    ],\n    \"reasoning\": \"Selected these 50 references because they represent foundational work and recent advances in Optimising AI Training Deployments using Graph Compilers and Containers, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}