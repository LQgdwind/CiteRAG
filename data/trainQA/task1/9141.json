{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 51 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Resource Efficient Neural Networks Using Hessian Based Pruning\n\nPaper Abstract: Abstract Neural network pruning is a practical way for reducing the size of trained models and the number of floating point operations (FLOPs). One way of pruning is to use the relative Hessian trace to calculate sensitivity of each channel, as compared to the more common magnitude pruning approach. However, the stochastic approach used to estimate the Hessian trace needs to iterate over many times before it can converge. This can be time-consuming when used for larger models with many millions of parameters. To address this problem, we modify the existing approach by estimating the Hessian trace using FP16 precision instead of FP32. We test the modified approach (EHAP) on ResNet-32/ResNet-56/WideResNet-28-8 trained on CIFAR10/CIFAR100 image classification tasks and achieve faster computation of the Hessian trace. Specifically, our modified approach can achieve speed ups ranging from 17% to as much as 44% during our experiments on different combinations of model architectures and GPU devices. Our modified approach also takes up ∼similar-to\\sim40% less GPU memory when pruning ResNet-32 and ResNet-56 models, which allows for a larger Hessian batch size to be used for estimating the Hessian trace. Meanwhile, we also present the results of pruning using both FP16 and FP32 Hessian trace calculation and show that there is no noticeable accuracy differences between the two. Overall, it is a simple and effective way to compute the relative Hessian trace faster without sacrificing on pruned model performance. We also present a full pipeline using EHAP and quantization aware training (QAT), using INT8 QAT to compress the network further after pruning. In particular, we use symmetric quantization for the weights and asymmetric quantization for the activations. The framework has been open-sourced and the code is available at https://github.com/JackkChong/Resource-Efficient-Neural-Networks-Using-Hessian-Based-Pruning.\n\n{retrieved_text}\n\nGenerate exactly 51 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 51\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Deep learning\",\n        \"Efficientnet: Rethinking model scaling for convolutional neural networks\",\n        \"Scaling vision transformers\",\n        \"Efficient processing of deep neural networks: A tutorial and survey\",\n        \"Hessian-aware pruning and optimal neural implant\",\n        \"Language models are few-shot learners\",\n        \"Jointpruning: Pruning networks along multiple dimensions for efficient point cloud processing\",\n        \"Visual tracking by structurally optimizing pre-trained cnn\",\n        \"Quintuple-media joint correlation learning with deep compression and regularization\",\n        \"A real-time action representation with temporal encoding and deep compression\",\n        \"Accelerator-aware pruning for convolutional neural networks\",\n        \"A survey of model compression and acceleration for deep neural networks\",\n        \"Overview of the neural network compression and representation (nnr) standard\",\n        \"Dynamic capacity networks\",\n        \"N2n learning: Network to network compression via policy gradient reinforcement learning\",\n        \"Squeezenet: Alexnet-level accuracy with 50x fewer parameters and ¡0.5mb model size\",\n        \"Efficient neural architecture search via parameter sharing\",\n        \"What is the state of neural network pruning?\",\n        \"Soft threshold weight reparameterization for learnable sparsity\",\n        \"Auto-balanced filter pruning for efficient convolutional neural networks\",\n        \"Winning the lottery with continuous sparsification\",\n        \"Exploring structural sparsity in cnn via selective penalty\",\n        \"Neural pruning via growing regularization\",\n        \"Optimal brain damage\",\n        \"Second order derivatives for network pruning: Optimal brain surgeon\",\n        \"The optimal BERT surgeon: Scalable and accurate second-order pruning for large language models\",\n        \"Snip: Single-shot network pruning based on connection sensitivity\",\n        \"Picking winning tickets before training by preserving gradient flow\",\n        \"AC/DC: Alternating compressed/decompressed training of deep neural networks\",\n        \"Data-free parameter pruning for deep neural networks\",\n        \"Dynamic model pruning with feedback\",\n        \"Pruning convolutional neural networks for resource efficient inference\",\n        \"Dynamic sparse training: Find efficient sparse network from scratch with trainable masked layers\",\n        \"Progressive skeletonization: Trimming more fat from a network at initialization\",\n        \"Model compression using progressive channel pruning\",\n        \"Rigging the lottery: Making all tickets winners\",\n        \"Layer-adaptive sparsity for the magnitude-based pruning\",\n        \"To prune, or not to prune: exploring the efficacy of pruning for model compression\",\n        \"Sparse connection and pruning in large dynamic artificial neural networks\",\n        \"Lookahead: a far-sighted alternative of magnitude-based pruning\",\n        \"Is complexity required for neural network pruning? a case study on global magnitude pruning\",\n        \"Learning efficient convolutional networks through network slimming\",\n        \"Optimal brain surgeon: Extensions and performance comparisons\",\n        \"Eigendamage: Structured pruning in the kronecker-factored eigenbasis\",\n        \"Pruning and quantization for deep neural network acceleration: A survey\",\n        \"Post-training quantization for neural networks with provable guarantees\",\n        \"A white paper on neural network quantization\",\n        \"HAWQV3: dyadic neural network quantization\",\n        \"Some large-scale matrix computation problems\",\n        \"Automatic mixed precision package - torch.amp — pytorch 1.13 documentation.\",\n        \"Cifar-10 (canadian institute for advanced research).\"\n    ],\n    \"reasoning\": \"Selected these 51 references because they represent foundational work and recent advances in Resource Efficient Neural Networks Using Hessian Based Pruning, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}