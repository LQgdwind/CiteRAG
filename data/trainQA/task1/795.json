{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 42 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: A Way Around UMIP and Descriptor-Table Exiting via TSX-based Side-Channel\n\nPaper Abstract: Abstract Nowadays, in operating systems, numerous protection mechanisms prevent or limit the user-mode applications to access the kernel‚Äôs internal information. This is regularly carried out by software-based defenses such as Address Space Layout Randomization (ASLR) and Kernel ASLR (KASLR). They play pronounced roles when the security of sandboxed applications such as Web-browser are considered. Armed with arbitrary write access in the kernel memory, if these protections are bypassed, an adversary could find a suitable where to write in order to get an elevation of privilege or code execution in ring 0. In this paper, we introduce a reliable method based on Transactional Synchronization Extensions (TSX) side-channel leakage to reveal the address of the Global Descriptor Table (GDT) and Interrupt Descriptor Table (IDT). We indicate that by detecting these addresses, one could execute instructions to sidestep the Intel‚Äôs User-Mode Instruction Prevention (UMIP) and the Hypervisor-based mitigation and, consequently, neutralized them. The introduced method is successfully performed after the most recent patches for Meltdown and Spectre. Moreover, the implementation of the proposed approach on different platforms, including the latest releases of Microsoft Windows, Linux, and, Mac OSX with the latest 9t‚Äãhsuperscript9ùë°‚Ñé9^{th} generation of Intel processors, shows that the proposed mechanism is independent from the Operating System implementation. We demonstrate that a combination of this method with call-gate mechanism (available in modern processors) in a chain of events will eventually lead to a system compromise despite the limitations of a super-secure sandboxed environment in the presence of Windows‚Äôs proprietary Virtualization Based Security (VBS). Finally, we suggest the software-based mitigation to avoid these issues with an acceptable overhead cost.\n\n{retrieved_text}\n\nGenerate exactly 42 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 42\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Multi-agent non-overlapping pathfinding with monte-carlo tree search\",\n        \"Fast aes implementation: A high-throughput bitsliced approach\",\n        \"A survey of microarchitectural timing attacks and countermeasures on contemporary hardware\",\n        \"Meltdown: Reading kernel memory from user space\",\n        \"Spectre attacks: Exploiting speculative execution\",\n        \"Foreshadow-ng: Breaking the virtual memory abstraction with transient out-of-order execution\",\n        \"Fallout: Reading kernel writes from user space\",\n        \"Zombieload: Cross-privilege-boundary data sampling\",\n        \"NetCAT: Practical Cache Attacks from the Network\",\n        \"Kaslr is dead: long live kaslr\",\n        \"Flipping bits in memory without accessing them: An experimental study of dram disturbance errors\",\n        \"Exploiting the dram rowhammer bug to gain kernel privileges\",\n        \"Kva shadow: Mitigating meltdown on windows\",\n        \"Kernel isolation: From an academic idea to an efficient patch for every computer\",\n        \"Westmere arrives\",\n        \"Translation lookaside buffer\",\n        \"4.10.1 process-context identifiers (pcids) - volume 3a: System programming guide, part 1\",\n        \"Pcid is now a critical performance/security feature on x86\",\n        \"Virtualization based security (vbs) and hypervisor enforced code integrity (hvci) for olympia users!\",\n        \"Intel¬Æ 64 and ia-32 architectures software developer‚Äôs manual\",\n        \"Hypervisor from scratch ‚Äì part 1: Basic concepts and configure testing environment\",\n        \"Hypervisor from scratch ‚Äì part 5: Setting up vmcs and running guest code\",\n        \"Windows integrity mechanism design\",\n        \"Lazyfp: Leaking fpu register state using microarchitectural side-channels\",\n        \"Amd64 architecture programmer‚Äôs manual volume 2: System programming\",\n        \"Call gates‚Äô ring transitioning in ia-32 mode\",\n        \"blog post\",\n        \"Cwe-123: Write-what-where condition\",\n        \"Hypervisor from scratch ‚Äì part 6: Virtualizing an already running system\",\n        \"Intel virtualization technology flexmigration application note\",\n        \"Malware guard extension: Using sgx to conceal cache attacks\",\n        \"Fantastic timers and where to find them: high-resolution microarchitectural attacks in javascript\",\n        \"Sysenter\",\n        \"Flush+ reload: a high resolution, low noise, l3 cache side-channel attack\",\n        \"Translation leak-aside buffer: Defeating cache side-channel protections with TLB attacks\",\n        \"Malicious management unit: Why stopping cache attacks in software is harder than you think\",\n        \"Secure page fusion with vusion: https://www. vusec. net/projects/vusion\",\n        \"Cache attacks and countermeasures: the case of aes\",\n        \"Gdt and ldt in windows kernel vulnerability exploitation\",\n        \"Using a call gate to prevent secure sandbox leakage\",\n        \"Generating high quality random numbers: A high throughput parallel bitsliced approach\",\n        \"Decentralized cooperative communication-less multi-agent task assignment with monte-carlo tree search\"\n    ],\n    \"reasoning\": \"Selected these 42 references because they represent foundational work and recent advances in A Way Around UMIP and Descriptor-Table Exiting via TSX-based Side-Channel, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}