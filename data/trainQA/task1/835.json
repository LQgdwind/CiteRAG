{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 52 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: CedrusDB: Persistent Key-Value Store with Memory-Mapped Lazy-Trie\n\nPaper Abstract: Abstract. As a result of RAM becoming cheaper, there has been a trend in key-value store design towards maintaining a fast in-memory index (such as a hash table) while logging user operations to disk, allowing high performance under failure-free conditions while still being able to recover from failures. This design, however, comes at the cost of long recovery times or expensive checkpoint operations. This paper presents a new in-memory index that is also storage-friendly. A “lazy-trie” is a variant of the hash-trie data structure that achieves near-optimal height, has practical storage overhead, and can be maintained on-disk with standard write-ahead logging. We implemented CedrusDB, persistent key-value store based on a lazy-trie. The lazy-trie is kept on disk while made available in memory using standard memory-mapping. The lazy-trie organization in virtual memory allows CedrusDB to better leverage concurrent processing than other on-disk index schemes (LSMs, B+-trees). CedrusDB achieves comparable or superior performance to recent log-based in-memory key-value stores in mixed workloads while being able to recover quickly from failures.\n\n{retrieved_text}\n\nGenerate exactly 52 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 52\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"madvise(2) - Linux manual page\",\n        \"Jungle: Towards dynamically adjustable key-value store by combining LSM-tree and copy-on-write B+-tree\",\n        \"Fast keyed hash/pseudo-random function using SIMD multiply and permute\",\n        \"Engineering the servo web browser engine using rust\",\n        \"Hashcache: Cache storage for the next billion\",\n        \"HOT: A height optimized trie index for main-memory database systems\",\n        \"Accordion: Better memory organization for LSM key-value stores\",\n        \"Characterizing, modeling, and benchmarking RocksDB key-value workloads at Facebook\",\n        \"FASTER: A concurrent key-value store with in-place updates\",\n        \"Persistent B+-trees in non-volatile main memory\",\n        \"Benchmarking cloud serving systems with YCSB\",\n        \"LMDB: Lightning Memory-Mapped Database Manager\",\n        \"Symas lightning memory-mapped database\",\n        \"Monkey: Optimal navigable key-value store\",\n        \"Dostoevsky: Better space-time trade-offs for LSM-tree based key-value stores via adaptive removal of superfluous merging\",\n        \"Dynamo: Amazon’s highly available key-value store\",\n        \"Redox - your next(gen) OS\",\n        \"The Rustonomicon: the dark arts of advanced and unsafe Rust programming\",\n        \"Optimizing space amplification in RocksDB\",\n        \"Inside HyperLevelDB\",\n        \"Memtable - facebook/rocksdb wiki\",\n        \"SnappyDB: a fast and lightweight key/value database library for Android\",\n        \"The memory fragmentation problem: Solved?\",\n        \"SLM-DB: single-level key-value store with persistent memory\",\n        \"The Art of Computer Programming, Volume 1: Fundamental Algorithms, vol. 1\",\n        \"Achieving high throughput and elasticity in a larger-than-memory store\",\n        \"Recipe: converting concurrent DRAM indexes to persistent-memory indexes\",\n        \"The adaptive radix tree: Artful indexing for main-memory databases\",\n        \"KVell: the design and implementation of a fast persistent key-value store\",\n        \"SILT: a memory-efficient, high-performance key-value store\",\n        \"Project Voldemort - a distributed database\",\n        \"LB+-trees: Optimizing persistent index performance on 3D XPoint memory\",\n        \"OrientDB\",\n        \"Cache craftiness for fast multicore key-value storage\",\n        \"Non-volatile memory through customized key-value stores\",\n        \"Concurrent log-structured memory for many-core key-value stores\",\n        \"FASTER - Key Features\",\n        \"FasterKV basics - FASTER\",\n        \"Aries: A transaction recovery method supporting fine-granularity locking and partial rollbacks using write-ahead logging\",\n        \"PATRICIA - practical algorithm to retrieve information coded in alphanumeric\",\n        \"Machine learning and deep learning frameworks and libraries for large-scale data mining: a survey\",\n        \"nix — crates.io: Rust package registry\",\n        \"Performance evaluation of range queries in key value stores\",\n        \"Asynchronous I/O (the GNU C library)\",\n        \"PebblesDB: Building key-value stores using fragmented log-structured merge trees\",\n        \"mLSM: Making authenticated storage faster in Ethereum\",\n        \"Optimizing flash-based key-value cache systems\",\n        \"Rust programming language\",\n        \"Forkbase: An efficient storage engine for blockchain and forkable applications\",\n        \"LSM-trie: An LSM-tree-based ultra-large key-value store for small data items\",\n        \"Surf: Practical range query filtering with fast succinct tries\",\n        \"S3: A scalable in-memory skip-list index for key-value store\"\n    ],\n    \"reasoning\": \"Selected these 52 references because they represent foundational work and recent advances in CedrusDB: Persistent Key-Value Store with Memory-Mapped Lazy-Trie, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}