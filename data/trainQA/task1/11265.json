{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 47 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: GPU Implementations for Midsize Integer Addition and Multiplication\n\nPaper Abstract: Abstract This paper explores practical aspects of using a high-level functional language for GPU-based arithmetic on “midsize” integers. By this we mean integers of up to about a quarter million bits, which is sufficient for most practical purposes. The goal is to understand whether it is possible to support efficient nested-parallel programs with a small, flexible code base. We report on GPU implementations for addition and multiplication of integers that fit in one CUDA block, thus leveraging temporal reuse from scratchpad memories. Our key contribution resides in the simplicity of the proposed solutions: We recognize that addition is a straightforward application of scan, which is known to allow efficient GPU implementation. For quadratic multiplication we employ a simple work-partitioning strategy that offers good temporal locality. For FFT multiplication, we efficiently map the computation in the domain of integral fields by finding “good” primes that enable almost-full utilization of machine words. In comparison, related work uses complex tiling strategies—which feel too big a hammer for the job—or uses the computational domain of reals, which may degrade the magnitude of the base in which the computation is carried. We evaluate the performance in comparison to the state-of-the-art CGBN library, authored by NvidiaLab, and report that our CUDA prototype outperforms CGBN for integer sizes higher than 323232K bits, while offering comparable performance for smaller sizes. Moreover, we are, to our knowledge, the first to report that FFT multiplication outperforms the classical one on the larger sizes that still fit in a CUDA block. Finally, we examine Futhark’s strengths and weaknesses for efficiently supporting such computations and find out that the significant overheads and scalability issues of the Futhark implementation are mainly caused by the absence of a compiler pass aimed at efficient sequentialization of excess parallelism.\n\n{retrieved_text}\n\nGenerate exactly 47 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 47\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"TensorFlow: A system for large-scale machine learning\",\n        \"Big integer multiplication with cuda fft(cufft) library\",\n        \"Maple Programming Guide\",\n        \"Scans as Primitive Parallel Operations\",\n        \"Vector models for data-parallel computing\",\n        \"Programming Parallel Algorithms\",\n        \"Implementation of a Portable Nested Data-Parallel Language\",\n        \"Reverse-mode ad of multi-reduce and scan in futhark\",\n        \"Big prime field FFT on the GPU\",\n        \"Parametric Polymorphism for Computer Algebra Software Components\",\n        \"An algorithm for the machine calculation of complex fourier series\",\n        \"Efficient high-precision integer multiplication on the gpu\",\n        \"High precision integer addition, subtraction and multiplication with a graphics processing unit\",\n        \"Compiling machine learning programs via high-level tracing\",\n        \"Massively-parallel change detection for satellite time series data with missing values\",\n        \"Futhark: Purely functional GPU-programming with nested parallelism and in-place array updates\",\n        \"Incremental flattening for nested data parallelism\",\n        \"Mathematica, Version 14.0\",\n        \"Using floating-point intervals for non-modular computations in residue number system\",\n        \"CAMPARY: Cuda multiple precision arithmetic library and applications\",\n        \"CAMPARY library\",\n        \"Computational Frameworks for the Fast Fourier Transform\",\n        \"Compiler optimization of implicit reductions for distributed memory multiprocessors\",\n        \"Supporting extended precision on grahics processors\",\n        \"Single-pass Parallel Prefix Scan with Decoupled Lookback\",\n        \"Static and Dynamic Analyses for Efficient GPU Execution\",\n        \"Dataset sensitive autotuning of multi-versioned code based on monotonic properties\",\n        \"Memory optimizations in an array language\",\n        \"Implementation of multiple-precision floating-point arithmetic for GPU computing\",\n        \"CUMP library\",\n        \"Cooperative Groups Big Numbers (CGBN) Library\",\n        \"Financial software on gpus: Between haskell and fortran\",\n        \"Set-congruence dynamic analysis for thread-level speculation (tls)\",\n        \"A new approach to parallelising tracing algorithms\",\n        \"Logical inference techniques for loop parallelization\",\n        \"A Hybrid Approach to Proving Memory Reference Monotonicity\",\n        \"Scalable conditional induction variables (civ) analysis\",\n        \"Domains and expressions: an interface between two approaches to computer algebra\",\n        \"Parametric polymorphism for software component architectures\",\n        \"Approximate nearest-neighbour fields via massively-parallel propagation-assisted k-d trees\",\n        \"Interlingual automatic differentiation: Software 2.0 between pytorch and julia\",\n        \"Mixed-language automatic differentiation\",\n        \"PyTorch: An imperative style, high-performance deep learning library\",\n        \"Ad for an array language with nested parallelism\",\n        \"Seasonal-trend time series decomposition on graphics processing units\",\n        \"Schnelle multiplikation großer zahlen\",\n        \"Multiple-precision Integer Arithmetic. Final project of the “Data Parallel Programming\\\" MSc-level course\"\n    ],\n    \"reasoning\": \"Selected these 47 references because they represent foundational work and recent advances in GPU Implementations for Midsize Integer Addition and Multiplication, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}