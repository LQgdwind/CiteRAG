{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 61 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Sandslash: A Two-Level Framework for Efficient Graph Pattern Mining\n\nPaper Abstract: Abstract. Graph pattern mining (GPM) is used in diverse application areas including social network analysis, bioinformatics, and chemical engineering. Existing GPM frameworks either provide high-level interfaces for productivity at the cost of expressiveness or provide low-level interfaces that can express a wide variety of GPM algorithms at the cost of increased programming complexity. Moreover, existing systems lack the flexibility to explore combinations of optimizations to achieve performance competitive with hand-optimized applications. We present Sandslash, an in-memory Graph Pattern Mining (GPM) framework that uses a novel programming interface to support productive, expressive, and efficient GPM on large graphs. Sandslash provides a high-level API that needs only a specification of the GPM problem, and it implements fast subgraph enumeration, provides efficient data structures, and applies high-level optimizations automatically. To achieve performance competitive with expert-optimized implementations, Sandslash also provides a low-level API that allows users to express algorithm-specific optimizations. This enables Sandslash to support both high-productivity and high-efficiency without losing expressiveness. We evaluate Sandslash on shared-memory machines using five GPM applications and a wide range of large real-world graphs. Experimental results demonstrate that applications written using Sandslash high-level or low-level API outperform that in state-of-the-art GPM systems AutoMine, Pangolin, and Peregrine on average by 13.8×\\times, 7.9×\\times, and 5.4×\\times, respectively. We also show that these Sandslash applications outperform expert-optimized GPM implementations by 2.3×\\times on average with less programming effort.\n\n{retrieved_text}\n\nGenerate exactly 61 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 61\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Emptyheaded: A relational engine for graph processing\",\n        \"Managing and Mining Graph Data\",\n        \"Efficient graphlet counting for large networks\",\n        \"Biomolecular network motif counting and discovery by color coding\",\n        \"The GAP benchmark suite\",\n        \"Higher-order organization of complex networks\",\n        \"CECI: Compact Embedding Cluster Index for Scalable Subgraph Matching\",\n        \"Efficient subgraph matching by postponing cartesian products\",\n        \"A large time-aware graph\",\n        \"The WebGraph framework I: Compression techniques\",\n        \"G-miner: An efficient task-oriented graph mining system\",\n        \"Pangolin: An efficient and flexible graph mining system on cpu and gpu\",\n        \"Dataset for statistics and social network of youtube videos\",\n        \"Arboricity and subgraph listing algorithms\",\n        \"Predicting protein function by frequent functional association pattern mining in protein interaction networks\",\n        \"Listing k-cliques in sparse real-world graphs*\",\n        \"Frequent substructure-based approaches for classifying chemical compounds\",\n        \"Theoretically efficient parallel graph algorithms can be fast and scalable\",\n        \"Fractal: A general-purpose graph pattern mining system\",\n        \"A puzzle concerning triads in social networks: Graph constraints and the triad census\",\n        \"Matching structure and semantics: A survey on graph-based pattern matching\",\n        \"PDTL: Parallel and distributed triangle listing for massive graphs\",\n        \"Network motif discovery using subgraph enumeration and symmetry-breaking\",\n        \"The NBER patent citation data file: Lessons, insights and methodological tools\",\n        \"Graph theory\",\n        \"DistTC: High performance distributed triangle counting\",\n        \"Tricore: Parallel triangle counting on gpus\",\n        \"The power of pivoting for exact clique counting\",\n        \"Peregrine: A pattern-aware graph mining system\",\n        \"Path sampling: A fast and provable method for estimating 4-vertex subgraph counts\",\n        \"Graphflow: An active graph database\",\n        \"DUALSIM: Parallel subgraph enumeration in a massive graph on a single machine\",\n        \"Turboflux: A fast continuous subgraph matching system for streaming graph data\",\n        \"What is twitter, a social network or a news media?\",\n        \"Scalable subgraph enumeration in mapreduce\",\n        \"Snap: Stanford network analysis platform\",\n        \"Distributed graph pattern matching\",\n        \"Graphzero: Breaking symmetry for efficient graph mining\",\n        \"Automine: Harmonizing high-level abstraction and high performance for graph mining\",\n        \"Optimizing subgraph queries by combining binary and worst-case optimal joins\",\n        \"Network motifs: Simple building blocks of complex networks\",\n        \"A lightweight infrastructure for graph analytics\",\n        \"H-index: Hash-indexing for parallel triangle counting on gpus\",\n        \"One quadrillion triangles queried on one million processors\",\n        \"Escape: Efficiently counting all 5-vertex subgraphs\",\n        \"Fast and robust distributed subgraph enumeration\",\n        \"Parallel subgraph listing in a large-scale graph\",\n        \"Multicore triangle computations without tuning\",\n        \"Efficient parallel subgraph enumeration on a single machine\",\n        \"Scaling up subgraph query processing with efficient subgraph matching\",\n        \"Counting triangles and the curse of the last reducer\",\n        \"A distributed approach for graph mining in massive networks\",\n        \"Parallel graph mining with dynamic load balancing\",\n        \"Arabesque: A system for distributed graph mining\",\n        \"An algorithm for subgraph isomorphism\",\n        \"Rstream: Marrying relational algebra with streaming for efficient graph mining on a single machine\",\n        \"Fast linear algebra-based triangle counting with kokkoskernels\",\n        \"gspan: graph-based substructure pattern mining\",\n        \"Defining and evaluating network communities based on ground-truth\",\n        \"Fast triangle counting using cilk\",\n        \"Kaleido: An Efficient Out-of-core Graph Mining System on A Single Machine\"\n    ],\n    \"reasoning\": \"Selected these 61 references because they represent foundational work and recent advances in Sandslash: A Two-Level Framework for Efficient Graph Pattern Mining, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}