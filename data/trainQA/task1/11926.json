{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 49 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Automatic programming via large language models with population self-evolution for dynamic job shop scheduling problem\n\nPaper Abstract: Abstract Heuristic dispatching rules (HDRs) are widely regarded as effective methods for solving dynamic job shop scheduling problems (DJSSP) in real-world production environments. However, their performance is highly scenario-dependent, often requiring expert customization. To address this, genetic programming (GP) and gene expression programming (GEP) have been extensively used for automatic algorithm design. Nevertheless, these approaches often face challenges due to high randomness in the search process and limited generalization ability, hindering the application of trained dispatching rules to new scenarios or dynamic environments. Recently, the integration of large language models (LLMs) with evolutionary algorithms has opened new avenues for prompt engineering and automatic algorithm design. To enhance the capabilities of LLMs in automatic HDRs design, this paper proposes a novel population self-evolutionary (SeEvo) method, a general search framework inspired by the self-reflective design strategies of human experts. The SeEvo method accelerates the search process and enhances exploration capabilities. Experimental results show that the proposed SeEvo method outperforms GP, GEP, end-to-end deep reinforcement learning methods, and more than 10 common HDRs from the literature, particularly in unseen and dynamic scenarios.\n\n{retrieved_text}\n\nGenerate exactly 49 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 49\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Feature selection approach for evolving reactive scheduling policies for dynamic job shop scheduling problem using gene expression programming\",\n        \"Automated design of production scheduling heuristics: A review\",\n        \"Solving the job-shop scheduling problem optimally by dynamic programming\",\n        \"A branch and bound algorithm for the job-shop scheduling problem\",\n        \"Mathematical modeling and multi-attribute rule mining for energy efficient job-shop scheduling\",\n        \"Testing the performance of teachingâ€“learning based optimization (tlbo) algorithm on combinatorial problems: Flow shop and job shop scheduling cases\",\n        \"A new neighbourhood structure for job shop scheduling problems\",\n        \"An effective hybrid optimization strategy for job-shop scheduling problems\",\n        \"Efficient dispatching rules for scheduling in a job shop\",\n        \"Hybrid strategies using linear and piecewise-linear decision rules for multistage adaptive linear optimization\",\n        \"Survey on Genetic Programming and Machine Learning Techniques for Heuristic Design in Job Shop Scheduling\",\n        \"A comparison of bloat control methods for genetic programming\",\n        \"Genetic programming and reinforcement learning on learning heuristics for dynamic scheduling: A preliminary comparison\",\n        \"Learning to schedule job-shop problems: Representation and policy learning using graph neural network and reinforcement learning\",\n        \"A reinforcement learning environment for job-shop scheduling\",\n        \"Real-time data-driven dynamic scheduling for flexible job shop with insufficient transportation resources using hybrid deep Q network\",\n        \"A deep reinforcement learning framework based on an attention mechanism and disjunctive graph embedding for the job-shop scheduling problem\",\n        \"Dynamic job-shop scheduling via graph attention networks and deep reinforcement learning\",\n        \"A survey on evaluation of large language models\",\n        \"Reevo: Large language models as hyper-heuristics with reflective evolution\",\n        \"Mathematical discoveries from program search with large language models\",\n        \"A review of dynamic job shop scheduling techniques\",\n        \"Mathematical models for job-shop scheduling problems with routing and process plan flexibility\",\n        \"A novel milp model for job shop scheduling problem with mobile robots\",\n        \"A hybrid algorithm with a new neighborhood structure for job shop scheduling problems\",\n        \"Hybrid genetic algorithms for minimizing makespan in dynamic job shop scheduling problem\",\n        \"A hybrid algorithm based on a new neighborhood structure evaluation method for job shop scheduling problem\",\n        \"An improved particle swarm optimization algorithm for dynamic job shop scheduling problems with random job arrivals\",\n        \"An efficient memetic algorithm for solving the job shop scheduling problem\",\n        \"A survey of dispatching rules for the dynamic unrelated machines environment\",\n        \"A hybrid genetic programming algorithm for automated design of dispatching rules\",\n        \"Instance-rotation-based surrogate in genetic programming with brood recombination for dynamic job-shop scheduling\",\n        \"An efficient feature selection algorithm for evolving job shop scheduling rules with genetic programming\",\n        \"Reinforcement learning applications to machine scheduling problems: A comprehensive literature review\",\n        \"A deep reinforcement learning model for dynamic job-shop scheduling problem with uncertain processing time\",\n        \"Teaching large language models to self-debug\",\n        \"Learning performance-improving code edits\",\n        \"Large language models help computer programs to evolve\",\n        \"Competition-level code generation with AlphaCode\",\n        \"Reflexion: Language agents with verbal reinforcement learning\",\n        \"Ai models collapse when trained on recursively generated data\",\n        \"Code as policies: Language model programs for embodied control\",\n        \"Connecting large language models with evolutionary algorithms yields powerful prompt optimizers\",\n        \"Eureka: Human-level reward design via coding large language models\",\n        \"Algorithm evolution using large language model\",\n        \"An example of evolutionary computation + large language model beating human: Design of efficient guided local search\",\n        \"Reactive scheduling in a job shop where jobs arrive over time\",\n        \"Genetic programming with multi-tree representation for dynamic flexible job shop scheduling\",\n        \"Learning to dispatch for job shop scheduling via deep reinforcement learning\"\n    ],\n    \"reasoning\": \"Selected these 49 references because they represent foundational work and recent advances in Automatic programming via large language models with population self-evolution for dynamic job shop scheduling problem, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}