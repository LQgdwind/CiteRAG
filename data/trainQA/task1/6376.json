{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 57 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: ParGeo: A Library for Parallel Computational Geometry\n\nPaper Abstract: Abstract This paper presents ParGeo, a multicore library for computational geometry. ParGeo contains modules for fundamental tasks including kùëòkd-tree based spatial search, spatial graph generation, and algorithms in computational geometry. We focus on three new algorithmic contributions provided in the library. First, we present a new parallel convex hull algorithm based on a reservation technique to enable parallel modifications to the hull. We also provide the first parallel implementations of the randomized incremental convex hull algorithm as well as a divide-and-conquer convex hull algorithm in ‚Ñù3superscript‚Ñù3\\mathbb{R}^{3}. Second, for the smallest enclosing ball problem, we propose a new sampling-based algorithm to quickly reduce the size of the data set. We also provide the first parallel implementation of Welzl‚Äôs classic algorithm for smallest enclosing ball. Third, we present the BDL-tree, a parallel batch-dynamic kùëòkd-tree that allows for efficient parallel updates and kùëòk-NN queries over dynamically changing point sets. BDL-trees consist of a log-structured set of kùëòkd-trees which can be used to efficiently insert, delete, and query batches of points in parallel. On 36 cores with two-way hyper-threading, our fastest convex hull algorithm achieves up to 44.7x self-relative parallel speedup and up to 559x speedup against the best existing sequential implementation. Our smallest enclosing ball algorithm using our sampling-based algorithm achieves up to 27.1x self-relative parallel speedup and up to 178x speedup against the best existing sequential implementation. Our implementation of the BDL-tree achieves self-relative parallel speedup of up to 46.1x. Across all of the algorithms in ParGeo, we achieve self-relative parallel speedup of 8.1‚Äì46.61x.\n\n{retrieved_text}\n\nGenerate exactly 57 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 57\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"C++ implementation of the 3d quickhull algorithm.\",\n        \"The computational geometry algorithms library.\",\n        \"Header only 3d quickhull in c99.\",\n        \"A header-only C implementation of the quickhull algorithm for building n-dimensional convex hulls and Delaunay meshes.\",\n        \"Matlab geometry toolbox for 2d/3d geometric computing.\",\n        \"Qhull.\",\n        \"Quickhull3d: A robust 3d convex hull algorithm in Java.\",\n        \"The Stanford 3d scanning repository.\",\n        \"Cache-oblivious data structures for orthogonal range searching.\",\n        \"Parallel computational geometry.\",\n        \"The parallel 3d convex hull problem revisited.\",\n        \"The problem-based benchmark suite (PBBS), v2.\",\n        \"Cache-oblivious data structures.\",\n        \"The quickhull algorithm for convex hulls.\",\n        \"Parallel geometric algorithms for multi-core computers.\",\n        \"Multidimensional binary search trees used for associative searching.\",\n        \"Decomposable searching problems.\",\n        \"Decomposable searching problems I. static-to-dynamic transformation.\",\n        \"Vector models for data-parallel computing, volume 2.\",\n        \"ParlayLib - a toolkit for parallel algorithms on shared-memory multicore machines.\",\n        \"Parallel nearest neighbors in low dimensions with batch updates.\",\n        \"Internally deterministic parallel algorithms can be fast.\",\n        \"Parallelism in randomized incremental algorithms.\",\n        \"Randomized incremental convex hull is highly parallel.\",\n        \"Faster algorithms for some geometric graph problems in higher dimensions.\",\n        \"A decomposition of multidimensional point sets with applications to k-nearest-neighbors and n-body potential fields.\",\n        \"Applications of random sampling in computational geometry, II.\",\n        \"Introduction to algorithms.\",\n        \"Parallel construction of subdivision hierarchies.\",\n        \"Computational Geometry: Algorithms and Applications.\",\n        \"Cache-oblivious algorithms and data structures.\",\n        \"An algorithm for finding best matches in logarithmic expected time.\",\n        \"DBSCAN revisited: Mis-claim, un-fixability, and approximation.\",\n        \"GHull: A GPU algorithm for 3d convex hull.\",\n        \"Fast and robust smallest enclosing balls.\",\n        \"A proof for a quickhull algorithm.\",\n        \"Tetrahedral meshing in the wild.\",\n        \"libigl: A simple C++ geometry processing library, 2018.\",\n        \"Introduction to Parallel Algorithms.\",\n        \"A framework for computational morphology.\",\n        \"Parallel computation of optimal enclosing balls by iterative orthant scan.\",\n        \"ArborX: A performance portable geometric search library.\",\n        \"cinolib: a generic programming header only C++ library for processing polygonal and polyhedral meshes.\",\n        \"Leda: A platform for combinatorial and geometric computing.\",\n        \"A framework for multi-core implementations of divide and conquer algorithms and its application to the convex hull problem.\",\n        \"Convex hulls of finite sets of points in two and three dimensions.\",\n        \"Computational Geometry: An Introduction.\",\n        \"Bkd-tree: A dynamic scalable kd-tree.\",\n        \"Reducing contention through priority updates.\",\n        \"Brief announcement: The problem based benchmark suite.\",\n        \"The polygon mesh processing library, 2020.\",\n        \"Parallelizing two dimensional convex hull on NVIDIA GPU and Cell BE.\",\n        \"Cudahull: Fast parallel 3d convex hull on the gpu.\",\n        \"GPU accelerated convex hull computation.\",\n        \"Finding convex hulls using quickhull on the GPU.\",\n        \"Fast parallel algorithms for Euclidean minimum spanning tree and hierarchical spatial clustering.\",\n        \"Smallest enclosing disks (balls and ellipsoids).\"\n    ],\n    \"reasoning\": \"Selected these 57 references because they represent foundational work and recent advances in ParGeo: A Library for Parallel Computational Geometry, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}