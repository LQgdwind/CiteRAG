{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 59 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Parallel Clique Counting and Peeling Algorithms\n\nPaper Abstract: Abstract We present a new parallel algorithm for kùëòk-clique counting/listing that has polylogarithmic span (parallel time) and is work-efficient (matches the work of the best sequential algorithm) for sparse graphs. Our algorithm is based on computing low out-degree orientations, which we present new linear-work and polylogarithmic-span algorithms for computing in parallel. We also present new parallel algorithms for producing unbiased estimations of clique counts using graph sparsification. Finally, we design two new parallel work-efficient algorithms for approximating the kùëòk-clique densest subgraph, the first of which is a 1/k1ùëò1/k-approximation and the second of which is a 1/(k‚Äã(1+œµ))1ùëò1italic-œµ1/(k(1+\\epsilon))-approximation and has polylogarithmic span. Our first algorithm does not have polylogarithmic span, but we prove that it solves a ùñØùñØ\\mathsf{P}-complete problem. In addition to the theoretical results, we also implement the algorithms and propose various optimizations to improve their practical performance. On a 30-core machine with two-way hyper-threading, our algorithms achieve 13.23‚Äì38.99x and 1.19‚Äì13.76x self-relative parallel speedup for kùëòk-clique counting and kùëòk-clique densest subgraph, respectively. Compared to the state-of-the-art parallel kùëòk-clique counting algorithms, we achieve up to 9.88x speedup, and compared to existing implementations of kùëòk-clique densest subgraph, we achieve up to 11.83x speedup. We are able to compute the 444-clique counts on the largest publicly-available graph with over two hundred billion edges for the first time.\n\n{retrieved_text}\n\nGenerate exactly 59 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 59\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"EmptyHeaded: A relational engine for graph processing\",\n        \"Graphlet decomposition: framework, algorithms, and applications\",\n        \"A ùñØùñØ\\\\mathsf{P}-complete problem and approximations to it\",\n        \"Densest subgraph in streaming and MapReduce\",\n        \"Sublogarithmic distributed MIS algorithm for sparse graphs using Nash-Williams decomposition\",\n        \"High-performance parallel graph coloring with strong guarantees on work, depth, and quality\",\n        \"Brief announcement: ParlayLib ‚Äì a toolkit for parallel algorithms on shared-memory multicore machines\",\n        \"Space-efficient scheduling of multithreaded computations\",\n        \"The parallel evaluation of general arithmetic expressions\",\n        \"Motif counting beyond five nodes\",\n        \"Motivo: Fast motif counting via succinct color coding and adaptive sampling\",\n        \"Arboricity and subgraph listing algorithms\",\n        \"Introduction to Algorithms (3. ed.)\",\n        \"The Lemur project\",\n        \"Listing kùëòk-cliques in sparse real-world graphs*\",\n        \"Julienne: A framework for parallel graph algorithms using work-efficient bucketing\",\n        \"Theoretically efficient parallel graph algorithms can be fast and scalable\",\n        \"Parallel batch-dynamic kùëòk-clique counting\",\n        \"Fixed-parameter tractability and completeness I: Basic results\",\n        \"Listing all maximal cliques in sparse graphs in near-optimal time\",\n        \"Efficient algorithms for densest subgraph discovery\",\n        \"Clique partitions, graph compression and speeding-up algorithms\",\n        \"Clique counting in MapReduce: Algorithms and experiments\",\n        \"Towards a theory of nearly constant time parallel algorithms\",\n        \"External-memory network analysis algorithms for naturally sparse graphs\",\n        \"Parallel kùëòk-clique community detection on large-scale networks\",\n        \"A fast and provable method for estimating clique counts using Tur√°n‚Äôs theorem\",\n        \"The power of pivoting for exact clique counting\",\n        \"Introduction to Parallel Algorithms\",\n        \"Distributed subgraph matching on timely dataflow\",\n        \"SNAP Datasets: Stanford large network dataset collection\",\n        \"Ordering heuristics for kùëòk-clique listing\",\n        \"Smallest-last ordering and clustering and graph coloring algorithms\",\n        \"The graph structure in the web‚Äìanalyzed on different aggregation levels\",\n        \"Optimizing subgraph queries by combining binary and worst-case optimal joins\",\n        \"Edge-disjoint spanning trees of finite graphs\",\n        \"On the complexity of the subgraph problem\",\n        \"Worst-case optimal join algorithms\",\n        \"Colorful triangle counting and a MapReduce implementation\",\n        \"Enumerating trillion subgraphs on distributed systems\",\n        \"ESCAPE: Efficiently counting all 5-vertex subgraphs\",\n        \"Optimal and sublogarithmic time randomized parallel sorting algorithms\",\n        \"Higher-order network representation learning\",\n        \"Estimation of graphlet counts in massive networks\",\n        \"Butterfly counting in bipartite networks\",\n        \"Peeling bipartite networks for dense subgraph discovery\",\n        \"Local algorithms for hierarchical dense subgraph discovery\",\n        \"Nucleus decompositions for identifying hierarchy of dense subgraphs\",\n        \"Parallel algorithms for butterfly computations\",\n        \"Smaller and faster: Parallel processing of compressed graphs with Ligra+\",\n        \"Multicore triangle computations without tuning\",\n        \"KClist++: A simple algorithm for finding k-clique densest subgraphs in large graphs\",\n        \"The kùëòk-clique densest subgraph problem\",\n        \"Counting triangles in real-world networks using projections\",\n        \"Spectral counting of triangles via element-wise sparsification and triangle-based link recommendation\",\n        \"Scalable motif-aware graph clustering\",\n        \"Efficient algorithms for clique problems\",\n        \"MOSS-5: A fast method of approximating counts of 5-node graphlets in large graphs\",\n        \"Higher-order clustering in networks\"\n    ],\n    \"reasoning\": \"Selected these 59 references because they represent foundational work and recent advances in Parallel Clique Counting and Peeling Algorithms, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}