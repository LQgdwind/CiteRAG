{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 56 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: SECDA: Efficient Hardware/Software Co-Design of FPGA-based DNN Accelerators for Edge Inference\n\nPaper Abstract: Abstract Edge computing devices inherently face tight resource constraints, which is especially apparent when deploying Deep Neural Networks (DNN) with high memory and compute demands. FPGAs are commonly available in edge devices. Since these reconfigurable circuits can achieve higher throughput and lower power consumption than general purpose processors, they are especially well-suited for DNN acceleration. However, existing solutions for designing FPGA-based DNN accelerators for edge devices come with high development overheads, given the cost of repeated FPGA synthesis passes, reimplementation in a Hardware Description Language (HDL) of the simulated design, and accelerator system integration. In this paper we propose SECDA, a new hardware/software co-design methodology to reduce design time of optimized DNN inference accelerators on edge devices with FPGAs. SECDA combines cost-effective SystemC simulation with hardware execution, streamlining design space exploration and the development process via reduced design evaluation time. As a case study, we use SECDA to efficiently develop two different DNN accelerator designs on a PYNQ-Z1 board, a platform that includes an edge FPGA. We quickly and iteratively explore the system’s hardware/software stack, while identifying and mitigating performance bottlenecks. We evaluate the two accelerator designs with four common DNN models, achieving an average performance speedup across models of up to 3.5×\\times with a 2.9×\\times reduction in energy consumption over CPU-only inference. Our code is available at https://github.com/gicLAB/SECDA\n\n{retrieved_text}\n\nGenerate exactly 56 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 56\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"ImageNet Classification with Deep Convolutional Neural Networks\",\n        \"Towards End-to-End Speech Recognition with Deep Convolutional Neural Networks\",\n        \"DeepEar: Robust Smartphone Audio Sensing in Unconstrained Acoustic Environments Using Deep Learning\",\n        \"Characterising Across-Stack Optimisations for Deep Convolutional Neural Networks\",\n        \"A Mixed-Precision RISC-V Processor for Extreme-Edge DNN Inference\",\n        \"NVIDIA Tensor Core Programmability, Performance & Precision\",\n        \"In-Datacenter Performance Analysis of a Tensor Processing Unit\",\n        \"Eyeriss v2: A Flexible Accelerator for Emerging Deep Neural Networks on Mobile Devices\",\n        \"MAERI: Enabling Flexible Dataflow Mapping over DNN Accelerators via Reconfigurable Interconnects\",\n        \"Fused-layer CNN accelerators\",\n        \"Throughput-Optimized FPGA Accelerator for Deep Convolutional Neural Networks\",\n        \"FINN: A Framework for Fast, Scalable Binarized Neural Network Inference\",\n        \"A Hardware-Software Blueprint for Flexible Deep Learning Specialization\",\n        \"DNNBuilder: An Automated Tool for Building High-Performance DNN Hardware Accelerators for FPGAs\",\n        \"Rethinking the Inception Architecture for Computer Vision\",\n        \"MobileNets: Efficient Convolutional Neural Networks for Mobile Vision Applications\",\n        \"SIGMA: A Sparse and Irregular GEMM Accelerator with Flexible Interconnects for DNN Training\",\n        \"A High-Performance FPGA Accelerator for Sparse Neural Networks: Work-in-Progress\",\n        \"Introduction to Logic Synthesis using Verilog HDL\",\n        \"Automatic SoC Design Flow on Many-Core Processors: A Software Hardware Co-Design Approach for FPGAs\",\n        \"OpenCL: A Parallel Programming Standard for Heterogeneous Computing Systems\",\n        \"STONNE: Enabling Cycle-Level Microarchitectural Simulation for DNN Inference Accelerators\",\n        \"SMAUG: End-to-End Full-Stack Simulation Infrastructure for Deep Learning Workloads\",\n        \"IEEE Standard for Standard SystemC Language Reference Manual\",\n        \"Characterizing the Microarchitectural Implications of a Convolutional Neural Network (CNN) Execution on GPUs\",\n        \"TensorFlow: A System for Large-Scale Machine Learning\",\n        \"PYNQ Z1 Manual\",\n        \"Measuring the Algorithmic Efficiency of Neural Networks\",\n        \"Exploiting Parallelism Opportunities with Deep Learning Frameworks\",\n        \"Implementing FPGA design with the OpenCL standard\",\n        \"IEEE Standard for Verilog Hardware Description Language\",\n        \"IEEE Standard for VHDL Language Reference Manual\",\n        \"Design Productivity of a High Level Synthesis Compiler Versus HDL\",\n        \"Co-designing Accelerators and SoC Interfaces using gem5-Aladdin\",\n        \"Automatic Differentiation in PyTorch\",\n        \"Efficient Processing of Deep Neural Networks: A Tutorial and Survey\",\n        \"Transaction Level Modeling\",\n        \"Incremental Network Quantization: Towards Lossless CNNs with Low-precision Weights\",\n        \"Understanding Reuse, Performance, and Hardware Cost of DNN Dataflow: A Data-Centric Approach\",\n        \"Quantization and Training of Neural Networks for Efficient Integer-Arithmetic-Only Inference\",\n        \"MobileNetV2: Inverted Residuals and Linear Bottlenecks\",\n        \"Going Deeper with Convolutions\",\n        \"Deep Residual Learning for Image Recognition\",\n        \"ImageNet Large Scale Visual Recognition Challenge\",\n        \"TVM: An Automated End-to-End Optimizing Compiler for Deep Learning\",\n        \"Design Space Exploration of Accelerators and End-to-End DNN Evaluation with TFLITE-SOC\",\n        \"SystemC HW/SW Co-Design Methodology Applied to the Design of an Elliptic Curve Crypto System on Chip\",\n        \"Hardware/Software Co-Design of Embedded Image Processing System Using SystemC Modeling Platform\",\n        \"Learning to Optimize Tensor Programs\",\n        \"Automated Systolic Array Architecture Synthesis for High Throughput CNN Inference on FPGAs\",\n        \"FP-DNN: An Automated Framework for Mapping Deep Neural Networks onto FPGAs with RTL-HLS Hybrid Templates\",\n        \"FPGA/DNN Co-Design: An Efficient Design Methodology for IoT Intelligence on the Edge\",\n        \"NAIS: Neural Architecture and Implementation Search and its Applications in Autonomous Driving\",\n        \"Hardware/Software Co-Exploration of Neural Architectures\",\n        \"Codesign-NAS: Automatic FPGA/CNN Codesign Using Neural Architecture Search\",\n        \"Accelerating Sparse Deep Neural Networks on FPGAs\"\n    ],\n    \"reasoning\": \"Selected these 56 references because they represent foundational work and recent advances in SECDA: Efficient Hardware/Software Co-Design of FPGA-based DNN Accelerators for Edge Inference, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}