{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 69 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: DPMC: Weighted Model Counting by Dynamic Programming on Project-Join TreesWork supported in part by NSF grants IIS-1527668, CCF-1704883, IIS-1830549, and DMS-1547433.\n\nPaper Abstract: Abstract We propose a unifying dynamic-programming framework to compute exact literal-weighted model counts of formulas in conjunctive normal form. At the center of our framework are project-join trees, which specify efficient project-join orders to apply additive projections (variable eliminations) and joins (clause multiplications). In this framework, model counting is performed in two phases. First, the planning phase constructs a project-join tree from a formula. Second, the execution phase computes the model count of the formula, employing dynamic programming as guided by the project-join tree. We empirically evaluate various methods for the planning phase and compare constraint-satisfaction heuristics with tree-decomposition tools. We also investigate the performance of different data structures for the execution phase and compare algebraic decision diagrams with tensors. We show that our dynamic-programming model-counting framework DPMC is competitive with the state-of-the-art exact weighted model counters Cachet, c2d, d4, and miniC2D.\n\n{retrieved_text}\n\nGenerate exactly 69 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 69\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"htd–a free, open-source framework for (customized) tree decompositions and beyond\",\n        \"Random 3-SAT and BDDs: the plot thickens further\",\n        \"Quantum computation and the evaluation of tensor networks\",\n        \"Solving #SAT and Bayesian inference with backtracking search\",\n        \"Algebraic decision diagrams and their applications\",\n        \"Synthesis of high-performance parallel programs for a class of ab initio quantum chemistry models\",\n        \"Dynamic programming\",\n        \"Gestion de la dynamicité et énumération d’impliquants premiers: une approche fondée sur les Diagrammes de Décision Binaire\",\n        \"Symbolic model checking with partitioned transition relations\",\n        \"Laissez-faire caching for parallel #SAT solving\",\n        \"BDD-based dynamic programming on tree decompositions\",\n        \"Compiling Bayesian networks using variable elimination\",\n        \"Era of big data processing: a new approach via tensor networks and tensor decompositions\",\n        \"Tensor decompositions for signal processing applications: from two-way to multiway component analysis\",\n        \"Bounded model checking using satisfiability solving\",\n        \"Parallel probabilistic inference by weighted model counting\",\n        \"Constraint satisfaction, bounded treewidth, and finite-variable logics\",\n        \"Dynamic jointrees\",\n        \"New advances in compiling CNF to decomposable negation normal form\",\n        \"Bucket elimination: a unifying framework for reasoning\",\n        \"Constraint processing\",\n        \"Tree clustering for constraint networks\",\n        \"Sylvan: multi-core decision diagrams\",\n        \"Probabilistic planning via heuristic forward search and weighted model counting\",\n        \"Efficient contraction of large tensor networks for weighted model counting through graph decompositions\",\n        \"ADDMC: weighted model counting with algebraic decision diagrams\",\n        \"Parallel weighted model counting with tensor networks\",\n        \"Improving the efficiency of variational tensor network algorithms\",\n        \"A knowledge compilation map for ordered real-valued decision diagrams\",\n        \"Understanding the efficiency of GPU algorithms for matrix-matrix multiplication\",\n        \"Exploiting database management systems and treewidth for counting\",\n        \"An improved GPU-based SAT model counter\",\n        \"Approximation by Quantization\",\n        \"Model counting\",\n        \"SPUDD: stochastic planning using decision diagrams\",\n        \"Improving exact solution counting for decomposition methods\",\n        \"Unifying tree decompositions for reasoning in graphical models\",\n        \"The tensor algebra compiler\",\n        \"SAT-based analysis and quantification of information flow in programs\",\n        \"Conjunctive-query containment and constraint satisfaction\",\n        \"Knowledge compilation for model counting: affine decision trees\",\n        \"Treewidth: computational experiments\",\n        \"Fast counting with tensor networks\",\n        \"Stochastic model checking\",\n        \"Preprocessing for propositional model counting\",\n        \"An improved decision-DNNF compiler\",\n        \"Basic linear algebra subprograms for Fortran usage\",\n        \"Projection pushing revisited\",\n        \"From LTL to symbolically represented deterministic automata\",\n        \"Constraint-based random stimuli generation for hardware verification\",\n        \"A guide to NumPy, vol. 1\",\n        \"A top-down compiler for sentential decision diagrams\",\n        \"Compiling uncertainty away in conformant planning problems with bounded width\",\n        \"Symbolic techniques in satisfiability solving\",\n        \"Graph minors. X. Obstructions to tree-decomposition\",\n        \"Algorithms for propositional model counting\",\n        \"Constraint satisfaction with bounded treewidth revisited\",\n        \"Combining component caching and clause learning for effective model counting\",\n        \"Performing Bayesian inference by weighted model counting\",\n        \"Global conditioning for probabilistic inference in belief networks\",\n        \"Formal methods for the validation of automotive product configuration data\",\n        \"Multi-way analysis: applications in the chemical sciences\",\n        \"CUDD: CU decision diagram package–release 3.0.0\",\n        \"Computing tree decompositions with FlowCutter: PACE 2017 submission\",\n        \"Factored Boolean functional synthesis\",\n        \"Positive-instance-driven dynamic programming for treewidth\",\n        \"Simple linear-time algorithms to test chordality of graphs, test acyclicity of hypergraphs, and selectively reduce acyclic hypergraphs\",\n        \"Ordered binary decision diagrams and the Davis-Putnam procedure\",\n        \"The complexity of enumeration and reliability problems\"\n    ],\n    \"reasoning\": \"Selected these 69 references because they represent foundational work and recent advances in DPMC: Weighted Model Counting by Dynamic Programming on Project-Join TreesWork supported in part by NSF grants IIS-1527668, CCF-1704883, IIS-1830549, and DMS-1547433., providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}