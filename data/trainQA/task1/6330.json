{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 46 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: InvAASTCluster : On Applying Invariant-Based Program Clustering to Introductory Programming Assignments\n\nPaper Abstract: Abstract. Due to the vast number of students enrolled in Massive Open Online Courses (MOOCs), there has been an increasing number of automated program repair techniques focused on introductory programming assignments (IPAs). Such state-of-the-art techniques use program clustering to take advantage of previous correct student implementations to repair a given new incorrect submission. Usually, these repair techniques use clustering methods since analyzing all available correct student submissions to repair a program is not feasible. The clustering methods use program representations based on several features such as abstract syntax tree (AST), syntax, control flow, and data flow. However, these features are sometimes brittle when representing semantically similar programs. This paper proposes InvAASTCluster, a novel approach for program clustering that takes advantage of dynamically generated program invariants observed over several program executions to cluster semantically equivalent IPAs. Our main objective is to find a more suitable representation of programs using a combination of the program’s semantics, through its invariants, and its structure, through its anonymized abstract syntax tree. The evaluation of InvAASTCluster shows that the proposed program representation outperforms syntax-based representations when clustering a set of different correct IPAs. Furthermore, we integrate InvAASTCluster into a state-of-the-art clustering-based program repair tool and evaluate it on a set of IPAs. Our results show that InvAASTCluster advances the current state-of-the-art when used by clustering-based program repair tools by repairing a larger number of students’ programs in a shorter amount of time.\n\n{retrieved_text}\n\nGenerate exactly 46 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 46\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"SOSRepair: Expressive Semantic Search for Real-World Program Repair\",\n        \"Verifix: Verified Repair of Programming Assignments\",\n        \"Compilers: Principles, Techniques, and Tools\",\n        \"code2seq: Generating Sequences from Structured Representations of Code\",\n        \"Understanding Automatically-Generated Patches Through Symbolic Invariant Differences\",\n        \"Semantic program alignment for equivalence checking\",\n        \"Program equivalence for assisted grading of functional programs\",\n        \"Improving Program Matching to Automatically Repair Introductory Programs\",\n        \"Leveraging program invariants to promote population diversity in search-based automatic program repair\",\n        \"The Daikon system for dynamic detection of likely invariants\",\n        \"CodeBERT: A Pre-Trained Model for Programming and Natural Languages\",\n        \"PaCon: a symbolic analysis approach for tactic-oriented clustering of programming submissions\",\n        \"OverCode: Visualizing Variation in Student Solutions to Programming Problems at Scale\",\n        \"Feedback generation for performance problems in introductory programming assignments\",\n        \"Automated clustering and program repair for introductory programming assignments\",\n        \"DeepFix: Fixing Common C Language Errors by Deep Learning\",\n        \"Distributional structure\",\n        \"Introduction to automata theory, languages, and computation, 3rd Edition\",\n        \"Re-Factoring Based Program Repair Applied to Programming Assignments\",\n        \"DECKARD: Scalable and Accurate Tree-Based Detection of Code Clones\",\n        \"Repairing Programs with Semantic Code Search (T)\",\n        \"Binary codes capable of correcting deletions, insertions, and reversals\",\n        \"Automatic grading of programming assignments: an approach based on formal semantics\",\n        \"FAPR: Fast and Accurate Program Repair for Introductory Programming Courses\",\n        \"Aroma: code recommendation via structural code search\",\n        \"Cross-language code search using static and dynamic analyses\",\n        \"DirectFix: Looking for Simple Program Repairs\",\n        \"Angelix: scalable multiline program patch synthesis via symbolic analysis\",\n        \"An Algebraic Definition of Simulation Between Programs\",\n        \"SemFix: program repair via semantic analysis\",\n        \"C-Pack of IPAs: A C90 Program Benchmark of Introductory Programming Assignments\",\n        \"SemCluster: clustering of imperative programming assignments based on quantitative semantic features\",\n        \"Semantics-based code search\",\n        \"Classes of recursively enumerable sets and their decision problems\",\n        \"Winnowing: Local Algorithms for Document Fingerprinting\",\n        \"Introduction to information retrieval\",\n        \"Sur la division des corps matériels en parties\",\n        \"Toward semantic search via SMT solver\",\n        \"Code search with input/output queries: Generalizing, ranking, and assessment\",\n        \"Visualizing data using t-SNE\",\n        \"Search, align, and repair: data-driven feedback generation for introductory programming exercises\",\n        \"Exploring the differences between plausible and correct patches at fine-grained level\",\n        \"A feasibility study of using automated program repair for introductory programming assignments\",\n        \"An Automated Framework for Recommending Program Elements to Novices (N)\",\n        \"Language-Agnostic Representation Learning of Source Code from Structure and Context\",\n        \"Tobias Kirschstein\"\n    ],\n    \"reasoning\": \"Selected these 46 references because they represent foundational work and recent advances in InvAASTCluster : On Applying Invariant-Based Program Clustering to Introductory Programming Assignments, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}