{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 53 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: RNNLogic: Learning Logic Rules for Reasoning on Knowledge Graphs\n\nPaper Abstract: Abstract This paper studies learning logic rules for reasoning on knowledge graphs. Logic rules provide interpretable explanations when used for prediction as well as being able to generalize to other tasks, and hence are critical to learn. Existing methods either suffer from the problem of searching in a large search space (e.g., neural logic programming) or ineffective optimization due to sparse rewards (e.g., techniques based on reinforcement learning). To address these limitations, this paper proposes a probabilistic model called RNNLogic. RNNLogic treats logic rules as a latent variable, and simultaneously trains a rule generator as well as a reasoning predictor with logic rules. We develop an EM-based algorithm for optimization. In each iteration, the reasoning predictor is first updated to explore some generated logic rules for reasoning. Then in the E-step, we select a set of high-quality rules from all generated rules with both the rule generator and reasoning predictor via posterior inference; and in the M-step, the rule generator is updated with the rules selected in the E-step. Experiments on four datasets prove the effectiveness of RNNLogic.\n\n{retrieved_text}\n\nGenerate exactly 53 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 53\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Tucker: Tensor factorization for knowledge graph completion\",\n        \"Translating embeddings for modeling multi-relational data\",\n        \"Kbgan: Adversarial learning for knowledge graph embeddings\",\n        \"Variational knowledge graph reasoning\",\n        \"Tensorlog: Deep learning meets probabilistic databases\",\n        \"Principal neighbourhood aggregation for graph nets\",\n        \"Stochastic logic programs: sampling, inference and applications\",\n        \"Go for a walk and arrive at the answer: Reasoning over paths in knowledge bases using reinforcement learning\",\n        \"Convolutional 2d knowledge graph embeddings\",\n        \"Rule-enhanced penalized regression by column generation using rectangular maximum agreement\",\n        \"Amie: association rule mining under incomplete evidence in ontological knowledge bases\",\n        \"Boosting classifiers with tightened l0-relaxation penalties\",\n        \"Long short-term memory\",\n        \"Categorical reparameterization with gumbel-softmax\",\n        \"Learning markov logic networks via functional gradient boosting\",\n        \"Adam: A method for stochastic optimization\",\n        \"Learning the structure of markov logic networks\",\n        \"Statistical predicate invention\",\n        \"Probabilistic graphical models: principles and techniques\",\n        \"Canonical tensor decomposition for knowledge base completion\",\n        \"Relational retrieval using a combination of path-constrained random walks\",\n        \"Random walk inference and learning in a large scale knowledge base\",\n        \"Multi-hop knowledge graph reasoning with reward shaping\",\n        \"The concrete distribution: A continuous relaxation of discrete random variables\",\n        \"Anytime bottom-up rule learning for knowledge graph completion\",\n        \"Learning reasoning strategies in end-to-end differentiable proving\",\n        \"Boosting relational dependency networks\",\n        \"A view of the em algorithm that justifies incremental, sparse, and other variants\",\n        \"Relational dependency networks\",\n        \"Holographic embeddings of knowledge graphs\",\n        \"Probabilistic logic neural networks for reasoning\",\n        \"Gmnn: Graph markov neural networks\",\n        \"Markov logic networks\",\n        \"End-to-end differentiable proving\",\n        \"Drum: End-to-end differentiable rule mining on knowledge graphs\",\n        \"M-walk: Learning to walk over graphs using monte carlo tree search\",\n        \"On a global upper bound for jensenâ€™s inequality\",\n        \"Rotate: Knowledge graph embedding by relational rotation in complex space\",\n        \"A re-evaluation of knowledge graph completion methods\",\n        \"Inductive relation prediction on knowledge graphs\",\n        \"Observed versus latent features for knowledge base and text inference\",\n        \"Complex embeddings for simple link prediction\",\n        \"Programming with personalized pagerank: a locally groundable first-order probabilistic logic\",\n        \"Proppr: Efficient first-order probabilistic logic programming for structure discovery, parameter learning, and scalable inference\",\n        \"Structure learning via parameter learning\",\n        \"Knowledge graph embedding by translating on hyperplanes\",\n        \"Simple statistical gradient-following algorithms for connectionist reinforcement learning\",\n        \"Deeppath: A reinforcement learning method for knowledge graph reasoning\",\n        \"Embedding entities and relations for learning and inference in knowledge bases\",\n        \"Differentiable learning of logical rules for knowledge base reasoning\",\n        \"Learn to explain efficiently via neural logic inductive learning\",\n        \"Efficient probabilistic logic reasoning with graph neural networks\",\n        \"Neural bellman-ford networks: A general graph neural network framework for link prediction\"\n    ],\n    \"reasoning\": \"Selected these 53 references because they represent foundational work and recent advances in RNNLogic: Learning Logic Rules for Reasoning on Knowledge Graphs, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}