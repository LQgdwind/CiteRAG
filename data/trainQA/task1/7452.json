{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 57 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Specognitor: Identifying Spectre Vulnerabilities via Prediction-Aware Symbolic Execution\n\nPaper Abstract: Abstract Spectre attacks exploit speculative execution to leak sensitive information. In the last few years, a number of static side-channel detectors have been proposed to detect cache leakage in the presence of speculative execution. However, these techniques either ignore branch prediction mechanism, detect static pre-defined patterns which is not suitable for detecting new patterns, or lead to false negatives. In this paper, we illustrate the weakness of prediction-agnostic state-of-the-art approaches. We propose Specognitor, a novel prediction-aware symbolic execution engine to soundly explore program paths and detect subtle spectre variant 1 and variant 2 vulnerabilities. We propose a dynamic pattern detection mechanism to account for both existing and future vulnerabilities. Our experimental results show the effectiveness and efficiency of Specognitor in analyzing real-world cryptographic programs w.r.t. different processor families.\n\n{retrieved_text}\n\nGenerate exactly 57 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 57\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"An efficient algorithm for exploiting multiple arithmetic units\",\n        \"Spectre attacks: Exploiting speculative execution\",\n        \"What you corrupt is not what you crash: Challenges in fuzzing embedded devices.\",\n        \"Symbolic execution and program testing\",\n        \"Enhancing symbolic execution with veritesting\",\n        \"Billions and billions of constraints: Whitebox fuzz testing in production\",\n        \"Unleashing mayhem on binary code\",\n        \"Klee: unassisted and automatic generation of high-coverage tests for complex systems programs.\",\n        \"Exe: Automatically generating inputs of death\",\n        \"Dart: Directed automated random testing\",\n        \"Specsafe: detecting cache side channels in a speculative world\",\n        \"Spectector: Principled detection of speculative information flows\",\n        \"Specusym: Speculative symbolic execution for cache timing leak detection\",\n        \"Kleespectre: Detecting information leakage through speculative cache attacks via symbolic execution\",\n        \"The microarchitecture of the pentium® 4 processor\",\n        \"Hardware-software contracts for secure speculation\",\n        \"Arm cortex-a53 mpcore processor, technical reference manual, rev r0p4\",\n        \"Cortex-a9 technical reference manual, rev r4p1\",\n        \"Cortex-a7 mpcore technical reference manual, rev r0p5\",\n        \"A review of branch prediction schemes and a study of branch predictors in modern microprocessors\",\n        \"Alternative implementations of two-level adaptive branch prediction\",\n        \"A comparison of dynamic branch predictors that use two levels of branch history\",\n        \"Improving the accuracy of dynamic branch prediction using branch correlation\",\n        \"Arm’s cotex a7: Bringing cheaper dual-core & more power efficient eigh-end devices\",\n        \"The alpha 21264 microprocessor\",\n        \"Hyperthreading technology in the netburst microarchitecture\",\n        \"Intel® architecture optimization reference manual\",\n        \"Arm11 mpcore processor technical reference manual, rev r1p0\",\n        \"Timing attacks on implementations of diffie-hellman, rsa, dss, and other systems\",\n        \"Differential power analysis\",\n        \"The em side—channel (s)\",\n        \"Soc it to em: electromagnetic side-channel attacks on a complex system-on-chip\",\n        \"Side channel attack-survey\",\n        \"Cache-timing attacks on aes\",\n        \"Netspectre: Read arbitrary memory over network\",\n        \"Cache attacks and countermeasures: the case of aes\",\n        \"Cache template attacks: Automating attacks on inclusive {{\\\\{Last-Level\\\\}}} caches\",\n        \"{{\\\\{ARMageddon\\\\}}}: Cache attacks on mobile devices\",\n        \"Cache missing for fun and profit\",\n        \"Cache-collision timing attacks against aes\",\n        \"Last-level cache side-channel attacks are practical\",\n        \"Efficient cache attacks on aes, and countermeasures\",\n        \"{{\\\\{FLUSH+ RELOAD\\\\}}}: A high resolution, low noise, l3 cache {{\\\\{Side-Channel\\\\}}} attack\",\n        \"Flush+ flush: a fast and stealthy cache attack\",\n        \"Speculative leakage in arm cortex-a53\",\n        \"A systematic evaluation of transient execution attacks and defenses\",\n        \"Spectre mitigations in microsoft’s c/c++ compiler.\",\n        \"Retpoline technique for mitigating spectre attack\",\n        \"Analyzing performance vulnerability due to resource denial of service attack on chip multiprocessors\",\n        \"Denial-of-service attacks on shared cache in multicore: Analysis and prevention\",\n        \"Llvm language reference manual.\",\n        \"Llvm: A compilation framework for lifelong program analysis & transformation\",\n        \"Inside 6th-generation intel core: New microarchitecture code-named skylake\",\n        \"Efficiently computing static single assignment form and the control dependence graph\",\n        \"A decision procedure for bit-vectors and arrays\",\n        \"{{\\\\{CacheD\\\\}}}: Identifying {{\\\\{Cache-Based\\\\}}} timing channels in production software\",\n        \"Casym: Cache aware symbolic execution for side channel detection and mitigation\"\n    ],\n    \"reasoning\": \"Selected these 57 references because they represent foundational work and recent advances in Specognitor: Identifying Spectre Vulnerabilities via Prediction-Aware Symbolic Execution, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}