{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 54 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: DeepContext: A Context-aware, Cross-platform, and Cross-framework Tool for Performance Profiling and Analysis of Deep Learning Workloads\n\nPaper Abstract: Abstract. Effective performance profiling and analysis are essential for optimizing training and inference of deep learning models, especially given the growing complexity of heterogeneous computing environments. However, existing tools often lack the capability to provide comprehensive program context information and performance optimization insights for sophisticated interactions between CPUs and GPUs. This paper introduces DeepContext, a novel profiler that links program contexts across high-level Python code, deep learning frameworks, underlying libraries written in C/C++, as well as device code executed on GPUs. DeepContext incorporates measurements of both coarse- and fine-grained performance metrics for major deep learning frameworks, such as PyTorch and JAX, and is compatible with GPUs from both Nvidia and AMD, as well as various CPU architectures, including x86 and ARM. In addition, DeepContext integrates a novel GUI that allows users to quickly identify hotpots and an innovative automated performance analyzer that suggests users with potential optimizations based on performance metrics and program context. Through detailed use cases, we demonstrate how DeepContext can help users identify and analyze performance issues to enable quick and effective optimization of deep learning workloads. We believe DeepContext is a valuable tool for users seeking to optimize complex deep learning workflows across multiple compute environments.\n\n{retrieved_text}\n\nGenerate exactly 54 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 54\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Eclipse Theia: Cloud and desktop ide platform\",\n        \"VSCodium: Open-source visual studio code without microsoft branding\",\n        \"Gpt-4 technical report\",\n        \"ROCm Tracer (Roctracer)\",\n        \"Pytorch 2: Faster machine learning through dynamic python bytecode transformation and graph compilation\",\n        \"Relational inductive biases, deep learning, and graph networks\",\n        \"Scalene: Scripting-language aware profiling for python\",\n        \"Findings of the 2017 conference on machine translation (wmt17)\",\n        \"JAX: composable transformations of Python+NumPy programs\",\n        \"Normalization.cuh\",\n        \"Nvidia dlprof: Deep learning profiler\",\n        \"Nvidia nsight compute\",\n        \"Criteo 1tb click logs dataset\",\n        \"Benchmarking Neural Network Training Algorithms\",\n        \"Imagenet: A large-scale hierarchical image database\",\n        \"An image is worth 16x16 words: Transformers for image recognition at scale\",\n        \"The llama 3 herd of models\",\n        \"Llama model implementation in transformers library\",\n        \"cprofile: Python code profiler\",\n        \"Rl-scope: Cross-stack profiling for deep reinforcement learning workloads\",\n        \"The flame graph\",\n        \"Issue #41162: Advanced indexing gradient is extremely slow when there are many duplicate indices\",\n        \"Conformer: Convolution-augmented transformer for speech recognition\",\n        \"Deep residual learning for image recognition\",\n        \"Training compute-optimal large language models\",\n        \"Open graph benchmark: Datasets for machine learning on graphs\",\n        \"Intel vtune profiler\",\n        \"Jax profiler\",\n        \"Scaling laws for neural language models\",\n        \"NanoGPT\",\n        \"Xsp: Across-stack profiling and analysis of machine learning models on gpus\",\n        \"Linux Perf: Performance Monitoring for Linux\",\n        \"Visual Studio Code\",\n        \"Libunwind\",\n        \"Deep learning recommendation model for personalization and recommendation systems\",\n        \"NVIDIA CUPTI: CUDA Profiling Tools Interface\",\n        \"Nvidia nsight systems\",\n        \"Librispeech: an asr corpus based on public domain audio books\",\n        \"Pytorch: An imperative style, high-performance deep learning library\",\n        \"Scalable diffusion models with transformers\",\n        \"Pytorch profiler\",\n        \"U-net: Convolutional networks for biomedical image segmentation\",\n        \"The tau parallel performance system\",\n        \"Hotline profiler: Automatic annotation and a multi-scale timeline for visualizing time-use in dnn training\",\n        \"Gemma: Open models based on gemini research and technology\",\n        \"Memory format tutorial\",\n        \"Attention is all you need\",\n        \"Measuring energy and power with papi\",\n        \"Skyline: Interactive in-editor computational performance profiling for deep neural network training\",\n        \"fastmri: An open dataset and benchmarks for accelerated mri\",\n        \"Drcctprof: a fine-grained call path profiler for arm-based clusters\",\n        \"Measurement and analysis of gpu-accelerated applications with hpctoolkit\",\n        \"Low overhead and context sensitive profiling of gpu-accelerated applications\",\n        \"Gpa: A gpu performance advisor based on instruction sampling\"\n    ],\n    \"reasoning\": \"Selected these 54 references because they represent foundational work and recent advances in DeepContext: A Context-aware, Cross-platform, and Cross-framework Tool for Performance Profiling and Analysis of Deep Learning Workloads, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}