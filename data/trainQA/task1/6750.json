{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 45 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: SwiftPruner: Reinforced Evolutionary Pruning for Efficient Ad Relevance\n\nPaper Abstract: Abstract. Ad relevance modeling plays a critical role in online advertising systems including Microsoft Bing. To leverage powerful transformers like BERT in this low-latency setting, many existing approaches perform ad-side computations offline. While efficient, these approaches are unable to serve cold start ads, resulting in poor relevance predictions for such ads. This work aims to design a new, low-latency BERT via structured pruning to empower real-time online inference for cold start ads relevance on a CPU platform. Our challenge is that previous methods typically prune all layers of the transformer to a high, uniform sparsity, thereby producing models which cannot achieve satisfactory inference speed with an acceptable accuracy. In this paper, we propose SwiftPruner - an efficient framework that leverages evolution-based search to automatically find the best-performing layer-wise sparse BERT model under the desired latency constraint. Different from existing evolution algorithms that conduct random mutations, we propose a reinforced mutator with a latency-aware multi-objective reward to conduct better mutations for efficiently searching the large space of layer-wise sparse models. Extensive experiments demonstrate that our method consistently achieves higher ROC AUC and lower latency than the uniform sparse baseline and state-of-the-art search methods. Remarkably, under our latency requirement of 1900us on CPU, SwiftPruner achieves a 0.86% higher AUC than the state-of-the-art uniform sparse baseline for BERT-Mini on a large scale real-world dataset. Online A/B testing shows that our model also achieves a significant 11.7% cut in the ratio of defective cold start ads with satisfactory real-time serving latency.\n\n{retrieved_text}\n\nGenerate exactly 45 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 45\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Algorithms for hyper-parameter optimization\",\n        \"Microsoft open sources breakthrough optimizations for transformer inference on GPU and CPU\",\n        \"Optimizing BERT model for Intel CPU Cores using ONNX runtime default execution provider\",\n        \"Once-for-All: Train One Network and Specialize it for Efficient Deployment\",\n        \"Quantization of Deep Neural Networks for Accurate Edge Computing\",\n        \"Renas: Reinforced evolutionary neural architecture search\",\n        \"AutoADR: Automatic Model Design for Ad Relevance\",\n        \"BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding\",\n        \"Rigging the Lottery: Making All Tickets Winners\",\n        \"Compressing BERT: Studying the Effects of Weight Pruning on Transfer Learning\",\n        \"Single Path One-Shot Neural Architecture Search with Uniform Sampling\",\n        \"AMC: AutoML for Model Compression and Acceleration on Mobile Devices\",\n        \"Generating Better Search Engine Text Advertisements with Deep Reinforcement Learning\",\n        \"TinyBERT: Distilling BERT for Natural Language Understanding\",\n        \"I-bert: Integer-only bert quantization\",\n        \"Fastformers: Highly efficient transformer models for natural language understanding\",\n        \"Block Pruning For Faster Transformers\",\n        \"Layer-adaptive Sparsity for the Magnitude-based Pruning\",\n        \"Random Forests\",\n        \"MetaPruning: Meta Learning for Automatic Neural Network Channel Pruning\",\n        \"TwinBERT: Distilling Knowledge to Twin-Structured Compressed BERT Models for Large-Scale Retrieval\",\n        \"TPrune: Efficient Transformer Pruning for Mobile Devices\",\n        \"Structured pruning of a bert-based question answering model\",\n        \"Are sixteen heads really better than one?\",\n        \"Distilling Optimal Neural Networks: Rapid Search in Diverse Spaces\",\n        \"Efficient Neural Architecture Search via Parameter Sharing\",\n        \"Regularized Evolution for Image Classifier Architecture Search\",\n        \"DistilBERT, a distilled version of BERT: smaller, faster, cheaper and lighter\",\n        \"Movement pruning: Adaptive sparsity by fine-tuning\",\n        \"Practical Bayesian Optimization of Machine Learning Algorithms\",\n        \"DominoSearch: Find layer-wise fine-grained N: M sparse schemes from dense neural networks\",\n        \"MobileBERT: a Compact Task-Agnostic BERT for Resource-Limited Devices\",\n        \"Well-Read Students Learn Better: The Impact of Student Initialization on Knowledge Distillation\",\n        \"Attention is All You Need\",\n        \"Analyzing multi-head self-attention: Specialized heads do the heavy lifting, the rest can be pruned\",\n        \"SuperGLUE: A Stickier Benchmark for General-Purpose Language Understanding Systems\",\n        \"AttentiveNAS: Improving Neural Architecture Search via Attentive Sampling\",\n        \"Reinforcing Pretrained Models for Generating Attractive Text Advertisements\",\n        \"Simple Statistical Gradient-Following Algorithms for Connectionist Reinforcement Learning\",\n        \"Structured Pruning Learns Compact and Accurate Models\",\n        \"NAS-BERT: Task-Agnostic and Adaptive-Size BERT Compression with Neural Architecture Search\",\n        \"MLPruning: A Multilevel Structured Pruning Framework for Transformer-based Models\",\n        \"Ranking Relevance in Yahoo Search\",\n        \"Q8bert: Quantized 8bit bert\",\n        \"Neural Architecture Search with Reinforcement Learning\"\n    ],\n    \"reasoning\": \"Selected these 45 references because they represent foundational work and recent advances in SwiftPruner: Reinforced Evolutionary Pruning for Efficient Ad Relevance, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}