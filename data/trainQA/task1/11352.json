{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 60 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: SquirrelFS: using the Rust compiler to check file-system crash consistency\n\nPaper Abstract: Abstract This work introduces a new approach to building crash-safe file systems for persistent memory. We exploit the fact that Rustâ€™s typestate pattern allows compile-time enforcement of a specific order of operations. We introduce a novel crash-consistency mechanism, Synchronous Soft Updates, that boils down crash safety to enforcing ordering among updates to file-system metadata. We employ this approach to build SquirrelFS, a new file system with crash-consistency guarantees that are checked at compile time. SquirrelFS avoids the need for separate proofs, instead incorporating correctness guarantees into the typestate itself. Compiling SquirrelFS only takes tens of seconds; successful compilation indicates crash consistency, while an error provides a starting point for fixing the bug. We evaluate SquirrelFS against state of the art file systems such as NOVA and WineFS, and find that SquirrelFS achieves similar or better performance on a wide range of benchmarks and applications.\n\n{retrieved_text}\n\nGenerate exactly 60 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 60\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"BTRFS documentation\",\n        \"Compute Express Link (CXL) specification\",\n        \"Direct Access for files\",\n        \"Filebench\",\n        \"Linux test project\",\n        \"LMDB\",\n        \"Rocksdb\",\n        \"Rust for linux\",\n        \"Typestate programming\",\n        \"xfstests\",\n        \"Typestate-oriented programming\",\n        \"Cogent: Verifying high-assurance file system implementations\",\n        \"Soft updates, hard problems\",\n        \"Exploring the Software Ecosystem for Compute Express Link (CXL) Memory\",\n        \"Using lightweight formal methods to validate a key-value storage node in Amazon S3\",\n        \"Specifying and checking file system crash-consistency models\",\n        \"Verifying the DaisyNFS concurrent and crash-safe file system with sequential reasoning\",\n        \"Verifying a high-performance crash-safe file system using a tree specification\",\n        \"Using crash hoare logic for certifying the fscq file system\",\n        \"Orderless and Eventually Durable File Systems\",\n        \"Consistency Without Ordering\",\n        \"Benchmarking cloud serving systems with ycsb\",\n        \"Soft updates made simple and fast on non-volatile memory\",\n        \"System software for persistent memory\",\n        \"Generalized file system dependencies\",\n        \"Metadata update performance in file systems\",\n        \"Rust for Rustaceans\",\n        \"Reimplementing the cedar file system using logging and group commit\",\n        \"Storage systems are distributed systems (so verify them that way!)\",\n        \"Ironfleet: Proving practical distributed systems correct\",\n        \"File system design for an NFS file server appliance\",\n        \"Corundum: Statically-enforced persistent memory safety\",\n        \"Software Abstractions\",\n        \"Winefs: A hugepage-aware file system for persistent memory that ages gracefully\",\n        \"Splitfs: Reducing software overhead in file systems for persistent memory\",\n        \"Vinter: Automatic Non-Volatile memory crash consistency testing for full systems\",\n        \"Finding semantic bugs in file systems with an extensible fuzzing framework\",\n        \"The Rust Programming Language\",\n        \"Strata: A cross media file system\",\n        \"Bug #317781: Ext4 Data Loss\",\n        \"Chipmunk: Investigating crash-consistency in persistent-memory file systems\",\n        \"Physical Integrity in a Large Segmented Database\",\n        \"Soft updates: A technique for eliminating most synchronous writes in the fast filesystem\",\n        \"The Design and Implementation of the FreeBSD Operating System\",\n        \"High velocity kernel file systems with bento\",\n        \"CrashMonkey and ACE: Systematically testing file-system crash consistency\",\n        \"AGAMOTTO: How persistent is your persistent memory application?\",\n        \"The cedar file system\",\n        \"How amazon web services uses formal methods\",\n        \"All file systems are not created equal: On the complexity of crafting crash-consistent applications\",\n        \"Crash consistency\",\n        \"Persistent memory programming\",\n        \"Push-Button verification of file systems via crash refinement\",\n        \"Typestate: A programming language concept for enhancing software reliability\",\n        \"Synthesis-Aided Crash Consistency for Storage Systems\",\n        \"Finding and fixing performance pathologies in persistent memory software stacks\",\n        \"NOVA: A log-structured file system for hybrid Volatile/Non-volatile main memories\",\n        \"An empirical guide to the behavior and use of scalable persistent memory\",\n        \"Using model checking to find serious file system errors\",\n        \"Enabling high-performance and secure userspace nvm file systems with the trio architecture\"\n    ],\n    \"reasoning\": \"Selected these 60 references because they represent foundational work and recent advances in SquirrelFS: using the Rust compiler to check file-system crash consistency, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}