{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 48 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Code Simulation Challenges for Large Language Models\n\nPaper Abstract: Abstract We investigate the extent to which Large Language Models (LLMs) can simulate the execution of computer code and algorithms. We begin by looking at straight line programs, and show that current LLMs demonstrate poor performance even with such simple programs – performance rapidly degrades with the length of code. We then investigate the ability of LLMs to simulate programs that contain critical paths and redundant instructions. We also go beyond straight line program simulation with sorting algorithms and nested loops, and we show the computational complexity of a routine directly affects the ability of an LLM to simulate its execution. We observe that LLMs execute instructions sequentially and with a low error margin only for short programs or standard procedures. LLMs’ code simulation is in tension with their pattern recognition and memorisation capabilities: on tasks where memorisation is detrimental, we propose a novel prompting method to simulate code execution line by line. Empirically, our new Chain of Simulation (CoSm) method improves on the standard Chain of Thought prompting approach by avoiding the pitfalls of memorisation.\n\n{retrieved_text}\n\nGenerate exactly 48 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 48\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"The reversal curse: Llms trained on” a is b” fail to learn” b is a”\",\n        \"Emergent and predictable memorization in large language models\",\n        \"Language models are few-shot learners\",\n        \"Position information in transformers: An overview\",\n        \"Faith and fate: Limits of transformers on compositionality\",\n        \"Who’s harry potter? approximate unlearning in llms\",\n        \"Mathematical capabilities of ChatGPT\",\n        \"The pile: An 800gb dataset of diverse text for language modeling\",\n        \"Looped transformers as programmable computers\",\n        \"Reasoning with language model is planning with world model\",\n        \"Large language models for software engineering: A systematic literature review\",\n        \"Gpt is becoming a turing machine: Here are some ways to program it\",\n        \"Large language models are zero-shot reasoners\",\n        \"Code as policies: Language model programs for embodied control\",\n        \"Jurassic-1: Technical details and evaluation\",\n        \"Code execution with pre-trained language models\",\n        \"How much do language models copy from their training data? Evaluating linguistic novelty in text generation using RAVEN\",\n        \"Embers of autoregression: Understanding large language models through the problem they are trained to solve\",\n        \"Rethinking the role of demonstrations: What makes in-context learning work?\",\n        \"In-context learning and induction heads\",\n        \"GPT-4 technical report\",\n        \"Training language models to follow instructions with human feedback\",\n        \"Attention is turing complete\",\n        \"When do prompting and prefix-tuning work? a theory of capabilities and limitations\",\n        \"Code Llama: Open foundation models for code\",\n        \"Always provide context: The effects of code context on programming error message enhancement\",\n        \"BLOOM: A 176B-parameter open-access multilingual language model\",\n        \"Memory augmented large language models are computationally universal\",\n        \"Minds, brains, and programs\",\n        \"Talking about large language models\",\n        \"Detecting pretraining data from large language models\",\n        \"LLaMA: Open and efficient foundation language models\",\n        \"LLaMA 2: Open foundation and fine-tuned chat models\",\n        \"Predicting code coverage without execution\",\n        \"Expectation vs. experience: Evaluating the usability of code generation tools powered by large language models\",\n        \"Attention is all you need\",\n        \"Learning deep transformer models for machine translation\",\n        \"Statistically meaningful approximation: a case study on approximating turing machines with transformers\",\n        \"Chain of thought prompting elicits reasoning in large language models\",\n        \"Thinking like transformers\",\n        \"The generative ai paradox:” what it can create, it may not understand”\",\n        \"Addressing compiler errors: Stack overflow or large language models?\",\n        \"What do code models memorize? an empirical study on large language models of code\",\n        \"How well do large language models perform in arithmetic tasks?\",\n        \"Large language models meet nl2code: A survey\",\n        \"One small step for generative AI, one giant leap for AGI: A complete survey on ChatGPT in AIGC era\",\n        \"Can transformers learn to solve problems recursively?\",\n        \"What algorithms can transformers learn? a study in length generalization\"\n    ],\n    \"reasoning\": \"Selected these 48 references because they represent foundational work and recent advances in Code Simulation Challenges for Large Language Models, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}