{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 52 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Pattern Morphing for Efficient Graph Mining\n\nPaper Abstract: Abstract. Graph mining applications analyze the structural properties of large graphs, and they do so by finding subgraph isomorphisms, which makes them computationally intensive. Existing graph mining techniques including both custom graph mining applications and general-purpose graph mining systems, develop efficient execution plans to speed up the exploration of the given query patterns that represent subgraph structures of interest. In this paper, we step beyond the traditional philosophy of optimizing the execution plans for a given set of patterns, and exploit the sub-structural similarities across different query patterns. We propose Pattern Morphing, a technique that enables structure-aware algebra over patterns to accurately infer the results for a given set of patterns using the results of a completely different set of patterns that are less expensive to compute. Pattern morphing morphs (or converts) a given set of query patterns into alternative patterns, while retaining full equivalency. It is a general technique that supports various operations over matches of a pattern beyond just counting (e.g., support calculation, enumeration, etc.), making it widely applicable to various graph mining applications like Motif Counting and Frequent Subgraph Mining. Since pattern morphing mainly transforms query patterns before their exploration starts, it can be easily incorporated in existing general-purpose graph mining systems. We evaluate the effectiveness of pattern morphing by incorporating it in Peregrine, a recent state-of-the-art graph mining system, and show that pattern morphing significantly improves the performance of different graph mining applications.\n\n{retrieved_text}\n\nGenerate exactly 52 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 52\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Incremental frequent subgraph mining on large evolving graphs\",\n        \"Scalemine: Scalable parallel frequent subgraph mining in a single large graph\",\n        \"Efficient graphlet counting for large networks\",\n        \"Ceci: Compact embedding cluster index for scalable subgraph matching\",\n        \"Efficient subgraph matching by postponing cartesian products\",\n        \"What is frequent in a single graph?\",\n        \"G-miner: An efficient task-oriented graph mining system\",\n        \"Pangolin: An efficient and flexible graph mining system on cpu and gpu\",\n        \"Statistics and social network of youtube videos\",\n        \"Visual pattern discovery for architecture image classification and product image search\",\n        \"Low-latency graph streaming using compressed purely-functional trees\",\n        \"Fractal: A general-purpose graph pattern mining system\",\n        \"Grami: Frequent subgraph and pattern mining in a single large graph\",\n        \"Frequent subgraph based familial classification of android malware\",\n        \"Powergraph: Distributed graph-parallel computation on natural graphs\",\n        \"GraphX: Graph processing in a distributed dataflow framework\",\n        \"Network motif discovery using subgraph enumeration and symmetry-breaking\",\n        \"The nber patent citation data file: Lessons, insights and methodological tools\",\n        \"Efficient subgraph matching: Harmonizing dynamic programming, adaptive matching order, and failing set together\",\n        \"Turboiso: Towards ultrafast and robust subgraph isomorphism search in large graph databases\",\n        \"A combinatorial approach to graphlet counting\",\n        \"Pgx.d: a fast distributed graph processing engine\",\n        \"ASAP: Fast, approximate graph pattern mining at scale\",\n        \"Peregrine: A pattern-aware graph mining system\",\n        \"Dualsim: Parallel subgraph enumeration in a massive graph on a single machine\",\n        \"Turboflux: A fast continuous subgraph matching system for streaming graph data\",\n        \"Efficient processing of large graphs via input reduction\",\n        \"Pregel: A system for large-scale graph processing\",\n        \"Rage â€“ a rapid graphlet enumerator for large networks\",\n        \"Graphbolt: Dependency-driven synchronous processing of streaming graphs\",\n        \"Automine: Harmonizing high-level abstraction and high performance for graph mining\",\n        \"Approxg: Fast approximate parallel graphlet counting through accuracy control\",\n        \"Network motifs: Simple building blocks of complex networks\",\n        \"Grasping frequent subgraph mining for bioinformatics applications\",\n        \"A lightweight infrastructure for graph analytics\",\n        \"Graft: An efficient graphlet counting method for large graph analysis\",\n        \"Prunejuice: Pruning trillion-edge graphs to a precise pattern-matching solution\",\n        \"Detecting strong ties using network motifs\",\n        \"Chaos: Scale-out graph processing from secondary storage\",\n        \"Gps: A graph processing system\",\n        \"Using network motifs to characterize temporal network evolution leading to diffusion inhibition\",\n        \"Qfrag: Distributed graph search via subgraph isomorphism\",\n        \"Ligra: A lightweight graph processing framework for shared memory\",\n        \"Arabesque: A system for distributed graph mining\",\n        \"KickStarter: Fast and accurate computations on streaming graphs via trimmed approximations\",\n        \"Aspire: Exploiting asynchronous parallelism in iterative algorithms using a relaxed consistency based dsm\",\n        \"Coral: Confined recovery in distributed asynchronous graph processing\",\n        \"Rstream: Marrying relational algebra with streaming for efficient graph mining on a single machine\",\n        \"Identifying functions and prognostic biomarkers of network motifs marked by diverse chromatin states in human cell lines\",\n        \"A maximal clique based multiobjective evolutionary algorithm for overlapping community detection\",\n        \"Defining and evaluating network communities based on ground-truth\",\n        \"Gemini: A computation-centric distributed graph processing system\"\n    ],\n    \"reasoning\": \"Selected these 52 references because they represent foundational work and recent advances in Pattern Morphing for Efficient Graph Mining, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}