{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 50 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Splitwise: Efficient Generative LLM Inference Using Phase Splitting\n\nPaper Abstract: Abstract Recent innovations in generative large language models (LLMs) have made their applications and use-cases ubiquitous. This has led to large-scale deployments of these models, using complex, expensive, and power-hungry AI accelerators, most commonly GPUs. These developments make LLM inference efficiency an important challenge. Based on our extensive characterization, we find that there are two main phases during an LLM inference request: a compute-intensive prompt computation, and a memory-intensive token generation, each with distinct latency, throughput, memory, and power characteristics. Despite state-of-the-art batching and scheduling, the token generation phase underutilizes compute resources. Specifically, unlike compute-intensive prompt computation phases, token generation phases do not require the compute capability of the latest GPUs, and can be run with lower power and cost. With Splitwise, we propose splitting the two phases of a LLM inference request on to separate machines. This allows us to use hardware that is well-suited for each phase, and provision resources independently per phase. However, splitting an inference request across machines requires state transfer from the machine running prompt computation over to the machine generating tokens. We implement and optimize this state transfer using the fast back-plane interconnects available in today’s GPU clusters. We use the Splitwise technique to design LLM inference clusters using the same or different types of machines for the prompt computation and token generation phases. Our clusters are optimized for three key objectives: throughput, cost, and power. In particular, we show that we can achieve 1.4×1.4\\times higher throughput at 20% lower cost than current designs. Alternatively, we can achieve 2.35×2.35\\times more throughput with the same cost and power budgets.\n\n{retrieved_text}\n\nGenerate exactly 50 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 50\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"AMD Instinct™ MI250 Accelerator\",\n        \"Azure InfiniBand HPC VMs\",\n        \"CoreWeave - Specialized Cloud Provider\",\n        \"Google Assistant with Bard\",\n        \"HPC Interconnect on CoreWeave Cloud\",\n        \"Intel BigDL-LLM\",\n        \"Intel Sapphire Rapids with HBM\",\n        \"Microsoft Azure ND A100 v4-series\",\n        \"MSCCL++: A GPU-driven communication stack for scalable AI applications\",\n        \"Numenta Inference on CPUs\",\n        \"NVIDIA Accelerated InfiniBand Solutions\",\n        \"NVIDIA chip shortage\",\n        \"NVIDIA Collective Communications Library (NCCL)\",\n        \"NVIDIA DGX H100\",\n        \"OpenAI ChatGPT APIs\",\n        \"Power availability stymies datacenter growth\",\n        \"The new Bing\",\n        \"TurboMind Inference server\",\n        \"SARATHI: Efficient LLM Inference by Piggybacking Decodes with Chunked Prefills\",\n        \"DeepSpeed-Inference: Enabling Efficient Inference of Transformer Models at Unprecedented Scale\",\n        \"The Datacenter as a Computer: Designing Warehouse-Scale Machines\",\n        \"Language models are few-shot learners\",\n        \"FlashAttention: Fast and Memory-Efficient Exact Attention with IO-Awareness\",\n        \"Bert: Pre-training of deep bidirectional transformers for language understanding\",\n        \"Analysis of join-the-shortest-queue routing for web server farms\",\n        \"Exploiting heterogeneity for tail latency and energy efficiency\",\n        \"Efficient Memory Management for Large Language Model Serving with PagedAttention\",\n        \"AlpaServe: Statistical Multiplexing with Model Parallelism for Deep Learning Serving\",\n        \"RoBERTa: A Robustly Optimized BERT Pretraining Approach\",\n        \"Deja vu: Contextual sparsity for efficient llms at inference time\",\n        \"Introducing the AI Research SuperCluster — Meta’s cutting-edge AI supercomputer for AI research\",\n        \"Azure OpenAI Service\",\n        \"Revisiting network support for RDMA\",\n        \"DGX A100: Universal System for AI Infrastructure\",\n        \"Scaling Kubernetes to 7,500 nodes\",\n        \"POLCA: Power Oversubscription in LLM Cloud Providers\",\n        \"Towards Improved Power Management in Cloud GPUs\",\n        \"Hybrid Computing for Interactive Datacenter Applications\",\n        \"Efficiently scaling transformer inference\",\n        \"Language models are unsupervised multitask learners\",\n        \"BLOOM: A 176B-parameter open-access multilingual language model\",\n        \"Fine-tune FLAN-T5 XL/XXL using DeepSpeed and Hugging Face Transformers\",\n        \"Llama 2 is here - Get it on Hugging Face\",\n        \"FlexGen: High-Throughput Generative Inference of Large Language Models with a Single GPU\",\n        \"Attention is all you need\",\n        \"Transformers: State-of-the-art Natural Language Processing\",\n        \"Fast distributed inference serving for large language models\",\n        \"Orca: A distributed serving system for Transformer-Based generative models\",\n        \"MArk: Exploiting Cloud Services for Cost-Effective, SLO-Aware Machine Learning Inference Serving\",\n        \"Analysis of JSQ policy on soft real-time scheduling in cluster\"\n    ],\n    \"reasoning\": \"Selected these 50 references because they represent foundational work and recent advances in Splitwise: Efficient Generative LLM Inference Using Phase Splitting, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}