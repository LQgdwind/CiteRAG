{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 52 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Sizeless: Predicting the Optimal Size of Serverless Functions\n\nPaper Abstract: Abstract. Serverless functions are a cloud computing paradigm where the provider takes care of resource management tasks such as resource provisioning, deployment, and auto-scaling. The only resource management task that developers are still in charge of is selecting how much resources are allocated to each worker instance. However, selecting the optimal size of serverless functions is quite challenging, so developers often neglect it despite its significant cost and performance benefits. Existing approaches aiming to automate serverless functions resource sizing require dedicated performance tests, which are time-consuming to implement and maintain. In this paper, we introduce an approach to predict the optimal resource size of a serverless function using monitoring data from a single resource size. As our approach does not require dedicated performance tests, it enables cloud providers to implement resource sizing on a platform level and automate the last resource management task associated with serverless functions. We evaluate our approach on four different serverless applications on AWS, where it predicts the execution time of the other memory sizes based on monitoring data for a single memory size with an average prediction error of 15.3%. Based on these predictions, it selects the optimal memory size for 79.0% of the serverless functions and the second-best memory size for 12.3% of the serverless functions, which results in an average speedup of 39.7% while also decreasing average costs by 2.6%.\n\n{retrieved_text}\n\nGenerate exactly 52 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 52\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Conducting Repeatable Experiments in Highly Variable Cloud Computing Environments\",\n        \"Serverless computing: economic and architectural impact\",\n        \"Cost Aware Resource Sizing and Scaling of Microservices\",\n        \"COSE: Configuring Serverless Functions using Statistical Learning\",\n        \"Batch: machine learning inference serving on serverless platforms with adaptive batching\",\n        \"CherryPick: Adaptively Unearthing the Best Cloud Configurations for Big Data Analytics\",\n        \"Using a microbenchmark to compare function as a service solutions\",\n        \"How is Performance Addressed in DevOps?\",\n        \"Reserved, on demand or serverless: Model-based simulations for cloud budget planning\",\n        \"AWS Lambda Power Tuning\",\n        \"Deep dive: finding the optimal resources allocation for your Lambda functions\",\n        \"The rise of serverless computing\",\n        \"Dominance statistics: Ordinal analyses to answer ordinal questions\",\n        \"Cloud Functions Pricing\",\n        \"AWS Lambda Extensions: What are they and why do they matter\",\n        \"Serverless Community Survey 2020\",\n        \"The State of Serverless\",\n        \"Predicting the Costs of Serverless Workflows\",\n        \"Serverless Applications:Why, When, and How?\",\n        \"A Review of Serverless Use Cases and their Characteristics\",\n        \"Be wary of the economics of” Serverless” Cloud Computing\",\n        \"Costless: Optimizing cost of serverless computing through function fusion and placement\",\n        \"Serverless is More: From PaaS to Present Cloud Computing\",\n        \"Performance evaluation of heterogeneous cloud functions\",\n        \"Primer of Applied Regression & Analysis of Variance, ed.\",\n        \"Peeking inside the black box: Visualizing statistical learning with plots of individual conditional expectation\",\n        \"Monitorless: Predicting Performance Degradation in Cloud Applications with Machine Learning\",\n        \"Spock: Exploiting serverless functions for slo and cost aware resource procurement in public cloud\",\n        \"No One (Cluster) Size Fits All: Automatic Cluster Sizing for Data-Intensive Analytics\",\n        \"A survey on load testing of large-scale software systems\",\n        \"Cloud Programming Simplified: A Berkeley View on Serverless Computing\",\n        \"Costradamus: A cost-tracing system for cloud-based software services\",\n        \"Production-grade full-stack apps with AWS Amplify\",\n        \"A preliminary review of enterprise serverless cloud computing (function-as-a-service) platforms\",\n        \"On a Test of Whether one of Two Random Variables is Stochastically Larger than the Other\",\n        \"Serverless Event Sourcing at Nordstrom\",\n        \"Methodological Principles for Reproducible Performance Evaluation in Cloud Computing\",\n        \"Efficient Virtual Machine Sizing for Hosting Containers as a Service (SERVICES 2015)\",\n        \"Engineering optimization: theory and practice\",\n        \"Function-as-a-Service performance evaluation: A multivocal literature review\",\n        \"Build On Serverless - Architect an Airline Booking Application\",\n        \"AWS Compute Optimizer\",\n        \"AWS Lambda Pricing\",\n        \"Serverless in the Wild: Characterizing and Optimizing the Serverless Workload at a Large Cloud Provider\",\n        \"Auto-sizing for Stream Processing Applications at LinkedIn\",\n        \"The largest benchmark of Serverless providers\",\n        \"The SPEC-RG Reference Architecture for FaaS: From Microservices and Containers to Serverless Platforms\",\n        \"Ernest: Efficient Performance Prediction for Large-Scale Advanced Analytics\",\n        \"Peeking behind the curtains of serverless platforms\",\n        \"Introducing AWS Lambda Extensions – In preview\",\n        \"Facing the Unplanned Migration of Serverless Applications: A Study on Portability Problems, Solutions, and Dead Ends\",\n        \"Video processing with serverless computing: a measurement study\"\n    ],\n    \"reasoning\": \"Selected these 52 references because they represent foundational work and recent advances in Sizeless: Predicting the Optimal Size of Serverless Functions, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}