{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 47 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: SQLCheck: Automated Detection and Diagnosis of SQL Anti-Patterns\n\nPaper Abstract: Abstract. The emergence of database-as-a-service platforms has made deploying database applications easier than before. Now, developers can quickly create scalable applications. However, designing performant, maintainable, and accurate applications is challenging. Developers may unknowingly introduce anti-patterns in the application’s SQL statements. These anti-patterns are design decisions that are intended to solve a problem, but often lead to other problems by violating fundamental design principles. In this paper, we present sqlcheck, a holistic toolchain for automatically finding and fixing anti-patterns in database applications. We introduce techniques for automatically (1) detecting anti-patterns with high precision and recall, (2) ranking the anti-patterns based on their impact on performance, maintainability, and accuracy of applications, and (3) suggesting alternative queries and changes to the database design to fix these anti-patterns. We demonstrate the prevalence of these anti-patterns in a large collection of queries and databases collected from open-source repositories. We introduce an anti-pattern detection algorithm that augments query analysis with data analysis. We present a ranking model for characterizing the impact of frequently occurring anti-patterns. We discuss how sqlcheck suggests fixes for high-impact anti-patterns using rule-based query refactoring techniques. Our experiments demonstrate that sqlcheck enables developers to create more performant, maintainable, and accurate applications.\n\n{retrieved_text}\n\nGenerate exactly 47 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 47\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Django\",\n        \"sqlparse: A non-validating SQL parser module for Python\",\n        \"AutoAdmin “what-if” index analysis utility\",\n        \"Improving the quality of large-scale database-centric software systems by analyzing database access code\",\n        \"Detecting performance anti-patterns for applications developed using object-relational mapping\",\n        \"Finding and evaluating the performance impact of redundant data access for applications that are developed using object-relational mapping frameworks\",\n        \"StatusQuo: Making Familiar Abstractions Perform Using Program Analysis\",\n        \"Sloth: Being lazy is a virtue (when issuing database queries)\",\n        \"Using Program Analysis to Improve Database Applications\",\n        \"Optimizing database-backed applications with query synthesis\",\n        \"SQL-92 Standard\",\n        \"Why low cardinality indexes negatively impact performance\",\n        \"Relational cloud: A database-as-a-service for the cloud\",\n        \"Data scientist\",\n        \"Automatic Performance Diagnosis and Tuning in Oracle\",\n        \"Extracting equivalent sql from imperative code in database applications\",\n        \"GlobaLeaks\",\n        \"Query evaluation techniques for large databases\",\n        \"Rewriting procedures for batched bindings\",\n        \"Ieee standard glossary of software engineering terminology\",\n        \"C2 Wiki\",\n        \"ReactJS\",\n        \"GitHub\",\n        \"The State of Data Science\",\n        \"StackOverflow Wiki\",\n        \"Kaggle\",\n        \"SQL antipatterns: avoiding the pitfalls of database programming\",\n        \"Oracle Database 10g: The Self-Managing Database\",\n        \"Automatic Configuration for IBM DB2 Universal Database\",\n        \"Unbundling transaction services in the cloud\",\n        \"Continuous Resource Monitoring for Self-predicting DBMS\",\n        \"Python-Flask\",\n        \"Postgres Query Parsing\",\n        \"Constraints in PostgreSQL\",\n        \"Python\",\n        \"PyPi\",\n        \"Program transformations for asynchronous and batched query submission\",\n        \"Database Management Systems (3 ed.)\",\n        \"Beautiful data: the stories behind elegant data solutions\",\n        \"Database Engine Tuning Advisor\",\n        \"Smelly relations: measuring and understanding database schema quality\",\n        \"SQLAlchemy\",\n        \"Twenty years of object-relational mapping: A survey on patterns, solutions, and their implications on application design\",\n        \"Automatic database management system tuning through large-scale machine learning\",\n        \"Leveraging lock contention to improve OLTP application performance\",\n        \"Understanding Database Performance Inefficiencies in Real-world Web Applications\",\n        \"How not to structure your database-backed web applications: a study of performance bugs in the wild\"\n    ],\n    \"reasoning\": \"Selected these 47 references because they represent foundational work and recent advances in SQLCheck: Automated Detection and Diagnosis of SQL Anti-Patterns, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}