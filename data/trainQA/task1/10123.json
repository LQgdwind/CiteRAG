{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 45 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Spiker+: a framework for the generation of efficient Spiking Neural Networks FPGA accelerators for inference at the edge\n\nPaper Abstract: Abstract Including Artificial Neural Networks (ANNs) in embedded systems at the edge allows applications to exploit Artificial Intelligence (AI) capabilities directly within devices operating at the network periphery, facilitating real-time decision-making. Especially critical in domains such as autonomous vehicles, industrial automation, and healthcare, the use of ANNs can enable these systems to process substantial data volumes locally, thereby reducing latency and power consumption. Moreover, it enhances privacy and security by containing sensitive data within the confines of the edge device. The adoption of Spiking Neural Networks (SNNs) in these environments offers a promising computing paradigm, mimicking the behavior of biological neurons and efficiently handling dynamic, time-sensitive data. However, deploying efficient SNNs in resource-constrained edge environments requires hardware accelerators, such as solutions based on Field Programmable Gate Arrays (FPGAs), that provide high parallelism and reconfigurability. This paper introduces Spiker+, a comprehensive framework for generating efficient, low-power, and low-area customized SNNs accelerators on FPGAs for inference at the edge. Spiker+ presents a configurable multi-layer hardware SNNs, a library of highly efficient neuron architectures, and a design framework, enabling the development of complex neural network accelerators with few lines of Python code. Spiker+ is tested on two benchmark datasets, the MNIST and the Spiking Heidelberg Dataset (SHD). On the MNIST, it demonstrates competitive performance compared to state-of-the-art SNN accelerators. It outperforms them in terms of resource allocation, with a requirement of 7,612 logic cells and 18 Block RAMs (BRAMs), which makes it fit in very small FPGAs, and power consumption, draining only 180mW for a complete inference on an input image. The latency is comparable to the ones observed in the state-of-the-art, with 780Œºùúá\\mus/img. To the authors‚Äô knowledge, Spiker+ is the first SNNs accelerator tested on the SHD. In this case, the accelerator requires 18,268 logic cells and 51 BRAMs, with an overall power consumption of 430mW and a latency of 54 Œºùúá\\mus for a complete inference on input data. This underscores the significance of Spiker+ in the hardware-accelerated SNN landscape, making it an excellent solution to deploy configurable and tunable SNN architectures in resource and power-constrained edge applications.\n\n{retrieved_text}\n\nGenerate exactly 45 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 45\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"A survey of recent advances in edge-computing-powered artificial intelligence of things\",\n        \"Time-space, spiking neural networks and brain-inspired artificial intelligence\",\n        \"Edgemap: An optimized mapping toolchain for spiking neural network in edge computing\",\n        \"Efficient hardware architectures for accelerating deep neural networks: Survey\",\n        \"Spiker: an FPGA-optimized Hardware accelerator for Spiking Neural Networks\",\n        \"Surrogate Gradient Learning in Spiking Neural Networks: Bringing the Power of Gradient-Based Optimization to Spiking Neural Networks\",\n        \"Gradient-based learning applied to document recognition\",\n        \"The Heidelberg Spiking Data Sets for the Systematic Evaluation of Spiking Neural Networks\",\n        \"Accurate and efficient time-domain classification with adaptive spiking recurrent neural networks\",\n        \"A quantitative description of membrane current and its application to conduction and excitation in nerve\",\n        \"Simple model of spiking neurons\",\n        \"Adaptive exponential integrate-and-fire model as an effective description of neuronal activity\",\n        \"A solution to the learning dilemma for recurrent networks of spiking neurons\",\n        \"Brian 2, an intuitive and efficient neural simulator\",\n        \"Exploring neuromorphic computing based on spiking neural networks: Algorithms to hardware\",\n        \"Spiking Neural Network Integrated Circuits: A Review of Trends and Future Directions\",\n        \"Special Session: Neuromorphic hardware design and reliability from traditional CMOS to emerging technologies\",\n        \"SpiNNaker 2: A 10 Million Core Processor System for Brain Simulation and Machine Learning\",\n        \"Next-Level Neuromorphic Computing: Intel Lab‚Äôs Loihi 2 Chip.\",\n        \"TrueNorth: Design and Tool Flow of a 65 mW 1 Million Neuron Programmable Neurosynaptic Chip\",\n        \"Tianjic: A Unified and Scalable Chip Bridging Spike-Based and Continuous Neural Computation\",\n        \"DYNAP-SE2: a scalable multi-core dynamic neuromorphic asynchronous spiking neural network processor\",\n        \"Neurogrid: A Mixed-Analog-Digital Multichip System for Large-Scale Neural Simulations\",\n        \"The BrainScaleS-2 Accelerated Neuromorphic System With Hybrid Plasticity\",\n        \"Welcome to Rockpool ‚Äî Rockpool 2.7 documentation.\",\n        \"Nengo.\",\n        \"SpinalFlow: An Architecture and Dataflow Tailored for Spiking Neural Networks\",\n        \"Darwin: A neuromorphic hardware co-processor based on spiking neural networks\",\n        \"A 65-nm 738k-Synapse/mm2 Quad-Core Binary-Weight Digital Neuromorphic Processor with Stochastic Spike-Driven Online Learning\",\n        \"A 0.086-mm^2 12.7-pJ/SOP 64k-Synapse 256-Neuron Online-Learning Digital Spiking Neuromorphic Processor in 28-nm CMOS\",\n        \"ReckOn: A 28nm Sub-mm2 Task-Agnostic Spiking Recurrent Neural Network Processor Enabling On-Chip Learning over Second-Long Timescales\",\n        \"Minitaur, an Event-Driven FPGA-Based Spiking Network Accelerator\",\n        \"A Low Power and Low Latency FPGA-Based Spiking Neural Network Accelerator\",\n        \"FPGA Implementation of Simplified Spiking Neural Network\",\n        \"FireFly: A High-Throughput Hardware Accelerator for Spiking Neural Networks With Efficient DSP and Memory Optimization\",\n        \"SyncNN: Evaluating and Accelerating Spiking Neural Networks on FPGAs\",\n        \"S2N2: A FPGA Accelerator for Streaming Spiking Neural Networks\",\n        \"Hardware implementation of spiking neural networks on FPGA\",\n        \"A low-cost and high-speed hardware implementation of spiking neural network\",\n        \"Accelerating Spike-by-Spike Neural Networks on FPGA With Hybrid Custom Floating-Point and Logarithmic Dot-Product Approximation\",\n        \"Low-Energy and Fast Spiking Neural Network For Context-Dependent Learning on FPGA\",\n        \"A Fast and Energy-Efficient SNN Processor With Adaptive Clock/Event-Driven Computation Scheme and Online Learning\",\n        \"Design Space Exploration of Hardware Spiking Neurons for Embedded Artificial Intelligence\",\n        \"E3NE: An End-to-End Framework for Accelerating Spiking Neural Networks With Emerging Neural Encoding on FPGAs\",\n        \"Unsupervised learning of digit recognition using spike-timing-dependent plasticity\"\n    ],\n    \"reasoning\": \"Selected these 45 references because they represent foundational work and recent advances in Spiker+: a framework for the generation of efficient Spiking Neural Networks FPGA accelerators for inference at the edge, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}