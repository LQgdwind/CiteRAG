{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 50 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: juSFEM: A Julia-based Open-source Package of Parallel Smoothed Finite Element Method (S-FEM) for Elastic Problems\n\nPaper Abstract: Abstract The Smoothed Finite Element Method (S-FEM) proposed by Liu G.R. can achieve more accurate results than the conventional FEM. Currently, much commercial software and many open-source packages have been developed to analyze various science and engineering problems using the FEM. However, there is little work focusing on designing and developing software or packages for the S-FEM. In this paper, we design and implement an open-source package of the parallel S-FEM for elastic problems by utilizing the Julia language on multi-core CPU. The Julia language is a fast, easy-to-use, and open-source programming language that was originally designed for high-performance computing. We term our package as juSFEM. To the best of the authors’ knowledge, juSFEM is the first package of parallel S-FEM developed with the Julia language. To verify the correctness and evaluate the efficiency of juSFEM, two groups of benchmark tests are conducted. The benchmark results show that (1) juSFEM can achieve accurate results when compared to commercial FEM software ABAQUS, and (2) juSFEM only requires 543 seconds to calculate the displacements of a 3D elastic cantilever beam model which is composed of approximately 2 million tetrahedral elements, while in contrast the commercial FEM software needs 930 seconds for the same calculation model; (3) the parallel juSFEM executed on the 24-core CPU is approximately 20×\\times faster than the corresponding serial version. Moreover, the structure and function of juSFEM are easily modularized, and the code in juSFEM is clear and readable, which is convenient for further development.\n\n{retrieved_text}\n\nGenerate exactly 50 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 50\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Recent advances in engineering design optimisation: Challenges and future trends\",\n        \"The tetrahedral finite cell method for fluids: Immersogeometric analysis of turbulent flow around complex geometries\",\n        \"Finite volume methods for hyperbolic problems\",\n        \"A coupled edge-/face-based smoothed finite element method for structural–acoustic problems\",\n        \"Locking-free adaptive discontinuous Galerkin FEM for linear elasticity problems\",\n        \"Smoothed Finite Element Methods\",\n        \"Stabilized conforming nodal integration in the natural-element method\",\n        \"A face-based smoothed finite element method (FS-FEM) for 3D linear and geometrically non-linear solid mechanics problems using 4-node tetrahedral elements\",\n        \"A parallel finite element procedure for contact-impact problems using edge-based smooth triangular element and GPU\",\n        \"An edge-based smoothed finite element method for analysis of laminated composite plates\",\n        \"Automatic mesh generation for 3D smoothed finite element method (S-FEM) based on the weaken-weak formulation\",\n        \"Python: a programming language for software integration and development\",\n        \"Julia: A fresh approach to numerical computing\",\n        \"Reduced integration technique in general analysis of plates and shells\",\n        \"A smoothed finite element method (s-fem) for large-deformation elastoplastic analysis\",\n        \"A singular edge-based smoothed finite element method (es-fem) for bimaterial interface cracks\",\n        \"A novel variable power singular element in g space with strain smoothing for bi-material fracture analyses\",\n        \"A node-based smoothed finite element method (ns-fem) for upper bound solutions to solid mechanics problems\",\n        \"Analysis of coupled structural-acoustic problems based on the smoothed finite element method (s-fem)\",\n        \"Smoothed finite element method with exact solutions in heat transfer problems\",\n        \"Steady and transient heat transfer analysis using a stable node-based smoothed finite element method\",\n        \"A coupled es-fem/bem method for fluid–structure interaction problems\",\n        \"Smoothed finite element methods (s-fem): an overview and recent developments\",\n        \"An edge-based smoothed finite element method (ES-FEM) for static, free and forced vibration analyses of solids\",\n        \"A smoothed finite element method for mechanics problems\",\n        \"Delaunay Mesh Generation\",\n        \"The julia programming language\",\n        \"Introduction to Python for Science and Engineering\",\n        \"Julia Benchmarks\",\n        \"Juliafem-open source solver for both industrial and academia usage\",\n        \"Thermodynamic property and fluid modeling with modern programming language construct\",\n        \"Cloudarray: Easing huge image processing\",\n        \"Understanding the impact of multi-core architecture in cluster computing: A case study with intel dual-core system\",\n        \"TetGen, a Delaunay-based quality tetrahedral mesh generator\",\n        \"Julia 1.1 Documentation\",\n        \"On parallel implementation of sparse matrix information retrieval engine\",\n        \"Intel® Math Kernel Library\",\n        \"Pardiso.jl\",\n        \"Paraview\",\n        \"Writevtk.jl\",\n        \"Plotlyjs.jl\",\n        \"Intel performance libraries: Multi-core-ready software for numeric-intensive computation.\",\n        \"Solving unsymmetric sparse systems of linear equations with pardiso\",\n        \"Scalable parallel programming\",\n        \"A survey of internet of things (iot) for geo-hazards prevention: Applications, technologies, and challenges\",\n        \"An efficient and accurate iterative method, allowing large incremental steps, to solve elasto-plastic problems\",\n        \"Parallel computing experiences with cuda\",\n        \"Multi-scale continuum-particle simulation on CPU–GPU hybrid supercomputer\",\n        \"Smoothed point interpolation methods: G space theory and weakened weak forms\",\n        \"Ag space theory and a weakened weak (w2) form for a unified formulation of compatible and incompatible methods: Part ii applications to solid mechanics problems\"\n    ],\n    \"reasoning\": \"Selected these 50 references because they represent foundational work and recent advances in juSFEM: A Julia-based Open-source Package of Parallel Smoothed Finite Element Method (S-FEM) for Elastic Problems, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}