{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 50 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Implant Global and Local Hierarchy Information to Sequence based Code Representation Models\n\nPaper Abstract: Abstract Source code representation with deep learning techniques is an important research field. There have been many studies that learn sequential or structural information for code representation. But sequence-based models and non-sequence-models both have their limitations. Researchers attempt to incorporate structural information to sequence-based models, but they only mine part of token-level hierarchical structure information. In this paper, we analyze how the complete hierarchical structure influences the tokens in code sequences and abstract this influence as a property of code tokens called hierarchical embedding. The hierarchical embedding is further divided into statement-level global hierarchy and token-level local hierarchy. Furthermore, we propose the Hierarchy Transformer (HiT), a simple but effective sequence model to incorporate the complete hierarchical embeddings of source code into a Transformer model. We demonstrate the effectiveness of hierarchical embedding on learning code structure with an experiment on variable scope detection task. Further evaluation shows that HiT outperforms SOTA baseline models and show stable training efficiency on three source code-related tasks involving classification and generation tasks across 8 different datasets.\n\n{retrieved_text}\n\nGenerate exactly 50 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 50\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"A Transformer-based Approach for Source Code Summarization\",\n        \"A Survey of Machine Learning for Big Code and Naturalness\",\n        \"Typilus: neural type hints\",\n        \"Learning to Represent Programs with Graphs\",\n        \"A convolutional attention network for extreme summarization of source code\",\n        \"code2seq: Generating Sequences from Structured Representations of Code\",\n        \"Structural Language Models of Code\",\n        \"On the Bottleneck of Graph Neural Networks and its Practical Implications\",\n        \"code2vec: learning distributed representations of code\",\n        \"Neural Code Comprehension: A Learnable Representation of Code Semantics\",\n        \"TreeCaps: Tree-Based Capsule Networks for Source Code Processing\",\n        \"Exploring Software Naturalness through Neural Language Models\",\n        \"TAG : Type Auxiliary Guiding for Code Comment Generation\",\n        \"CodeBERT: A Pre-Trained Model for Programming and Natural Languages\",\n        \"Structured Neural Summarization\",\n        \"GraphCodeBERT: Pre-training Code Representations with Data Flow\",\n        \"Global relational models of source code\",\n        \"On the naturalness of software\",\n        \"Deep code comment generation\",\n        \"CodeSearchNet challenge: Evaluating the state of semantic code search\",\n        \"Summarizing Source Code using a Neural Attention Model\",\n        \"Code Prediction by Feeding Trees to Transformers\",\n        \"A neural model for generating natural language summaries of program subroutines\",\n        \"SkCoder: A Sketch-based Approach for Automatic Code Generation\",\n        \"Gated Graph Sequence Neural Networks\",\n        \"Automating Code Review Activities by Large-Scale Pre-Training\",\n        \"Learning to Recommend Method Names with Global Context\",\n        \"Learning to spot and refactor inconsistent method names\",\n        \"CodeXGLUE: A Machine Learning Benchmark Dataset for Code Understanding and Generation\",\n        \"Aroma: code recommendation via structural code search\",\n        \"Convolutional Neural Networks over Tree Structures for Programming Language Processing\",\n        \"A Metric Learning Reality Check\",\n        \"Suggesting natural method names to check name consistencies\",\n        \"SPT-Code: Sequence-to-Sequence Pre-Training for Learning Source Code Representations\",\n        \"CodeNet: A Large-Scale AI for Code Dataset for Learning a Diversity of Coding Tasks\",\n        \"Modeling Relational Data with Graph Convolutional Networks\",\n        \"Attention is all you need\",\n        \"Pointer networks\",\n        \"Lightweight global and local contexts guided method name recommendation with prior knowledge\",\n        \"Detecting Code Clones with Graph Neural Network and Flow-Augmented Abstract Syntax Tree\",\n        \"Learning Program Representations with a Tree-Structured Transformer\",\n        \"Learning semantic program embeddings with graph interval neural network\",\n        \"Intelligent program synthesis framework and key scientific problems for embedded software\",\n        \"MISIM: An End-to-End Neural Code Similarity System\",\n        \"Learning to Represent Edits\",\n        \"Neural detection of semantic code clones via tree-based convolution\",\n        \"A novel neural source code representation based on abstract syntax tree\",\n        \"Learning to Represent Programs with Heterogeneous Graphs\",\n        \"Language-Agnostic Representation Learning of Source Code from Structure and Context\",\n        \"Tobias Kirschstein\"\n    ],\n    \"reasoning\": \"Selected these 50 references because they represent foundational work and recent advances in Implant Global and Local Hierarchy Information to Sequence based Code Representation Models, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}