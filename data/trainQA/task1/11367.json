{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 59 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Runtime Verification on Abstract Finite State Models\n\nPaper Abstract: Abstract Finite-state models are ubiquitous in the study of concurrent systems, especially controllers and servers that operate in a repetitive cycle. In this paper, we show how to extract finite state models from a run of a multi-threaded Java program and carry out runtime verification of correctness properties. These properties include data-oriented and control-oriented properties; the former express correctness conditions over the data fields of objects, while the latter are concerned with the correct flow of control among the modules of larger software. As the extracted models can become very large for long runs, the focus of this paper is on constructing reduced models with user-defined abstraction functions that map a larger domain space to a smaller one. The abstraction functions should be chosen so that the resulting model is property preserving, i.e., proving a property on the abstract model carries over to the concrete model. The main contribution of this paper is in showing how runtime verification can be made efficient through online property checking on property-preserving abstract models. The property specification language resembles a propositional linear temporal logic augmented with simple datatypes and operators. Classic concurrency examples and larger case studies (Multi-rotor Drone Controller, OAuth Protocol) are presented in order to demonstrate the usefulness of our proposed techniques, which are incorporated in an Eclipse plug-in for runtime visualization and verification of Java programs.\n\n{retrieved_text}\n\nGenerate exactly 59 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 59\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Methodology and Architecture of JIVE\",\n        \"Declarative and Visual Debugging in Eclipse\",\n        \"Runtime Visualization and Verification in JIVE\",\n        \"Compact Visualization of Java Program Execution\",\n        \"Finite-state Model Extraction and Visualization from Java Program Execution\",\n        \"The Unified Software Development Process\",\n        \"Property-Preserving Homomorphisms of Transition Systems\",\n        \"Automatic Verification of Finite-State Concurrent Systems Using Temporal Logic Specifications\",\n        \"Statecharts: A Visual Formalism for Complex Systems\",\n        \"Model Checking\",\n        \"Monitoring Programs using Rewriting\",\n        \"A Brief Account of Runtime Verification\",\n        \"A Tutorial on Runtime Verification\",\n        \"Model Check What You Can, Runtime Verify the Rest\",\n        \"Property Preserving Abstractions for the Verification of Concurrent Systems\",\n        \"JMAVSim\",\n        \"The OAuth 2.0 Authorization Framework\",\n        \"Apache Tomcat 9 Architecture\",\n        \"Model Checking and Abstraction\",\n        \"Automatic Predicate Abstraction of C Programs\",\n        \"A Decade of Software Model Checking with SLAM\",\n        \"Tool-Supported Program Abstraction for Finite-State Verification\",\n        \"Abstract Interpretation: A Unified Lattice Model for Static Analysis of Programs by Construction or Approximation of Fixpoints\",\n        \"Systematic Design of Program Analysis Frameworks\",\n        \"Mining object behavior with adabu\",\n        \"State-Based Testing of Ajax Web Applications\",\n        \"Revolution: Automatic Evolution of Mined Specifications\",\n        \"CBR: Controlled Burst Recording\",\n        \"Object Constraint Language - Version 2.4\",\n        \"OCL Extended with Temporal Logic\",\n        \"Temporal constraint support for OCL\",\n        \"A Monitoring and Checking Framework for Run-time Correctness Assurance\",\n        \"Java-MaC: A Run-Time Assurance Approach for Java Programs\",\n        \"Monitoring Java Programs with Java PathExplorer\",\n        \"An Overview of the Runtime Verification Tool Java PathExplorer\",\n        \"Rule-based Runtime Verification\",\n        \"Event-Based Runtime Verification of Java Programs\",\n        \"Adding Trace Matching With Free Variables to AspectJ\",\n        \"Temporal Assertions Using AspectJ\",\n        \"Towards Monitoring-Oriented Programming: A Paradigm Combining Specification and Implementation\",\n        \"A formal monitoring-based framework for software development and analysis\",\n        \"MOP: An Efficient and Generic Runtime Verification Framework\",\n        \"Parametric Trace Slicing and Monitoring\",\n        \"An Overview of the MOP Runtime Verification Framework\",\n        \"Aspect-oriented programming\",\n        \"Introduction to Dynamic Program Analysis with DiSL\",\n        \"Run-time Control Flow Model Extraction of Java Applications\",\n        \"Linear Temporal Logic and Linear Dynamic Logic on Finite Traces\",\n        \"Hierarchical Ordering of Sequential Processes\",\n        \"Concurrent Control with “Readers” and “Writers”\",\n        \"java.lang.instrument\",\n        \"ASM: A Code Manipulation Tool to Implement Adaptable Systems\",\n        \"Using ASM Framework to Implement Common Bytecode Transformation Patterns\",\n        \"PX4: A Node-Based Multithreaded Open Source Robotics Framework for Deeply Embedded Platforms\",\n        \"Open Source for Drones-PX4 Pro Open Source Autopilot\",\n        \"The VNR Concise Encyclopedia of Mathematics, 2nd edition, chapter 12\",\n        \"Verification of OAuth 2.0 using Uppaal\",\n        \"Synthesizing Monitors for Safety Properties\",\n        \"Dyninst API - University of Maryland and University of Wisconsin\"\n    ],\n    \"reasoning\": \"Selected these 59 references because they represent foundational work and recent advances in Runtime Verification on Abstract Finite State Models, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}