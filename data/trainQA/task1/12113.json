{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 46 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Blindfold: Confidential Memory Management by Untrusted Operating System\n\nPaper Abstract: Abstract Confidential Computing (CC) has received increasing attention in recent years as a mechanism to protect user data from untrusted operating systems (OSes). Existing CC solutions hide confidential memory from the OS and/or encrypt it to achieve confidentiality. In doing so, they render OS memory optimization unusable or complicate the trusted computing base (TCB) required for optimization. This paper presents our results toward overcoming these limitations, synthesized in a CC design named Blindfold. Like many other CC solutions, Blindfold relies on a small trusted software component running at a higher privilege level than the kernel, called Guardian. It features three techniques that can enhance existing CC solutions. First, instead of nesting page tables, Blindfold’s Guardian mediates how the OS accesses memory and handles exceptions by switching page and interrupt tables. Second, Blindfold employs a lightweight capability system to regulate the OS’s semantic access to user memory, unifying case-by-case approaches in previous work. Finally, Blindfold provides carefully designed secure ABI for confidential memory management without encryption. We report an implementation of Blindfold that works on ARMv8-A/Linux. Using Blindfold’s prototype, we are able to evaluate the cost of enabling confidential memory management by the untrusted Linux kernel. We show Blindfold has a smaller runtime TCB than related systems and enjoys competitive performance. More importantly, we show that the Linux kernel, including all of its memory optimizations except memory compression, can function properly for confidential memory. This requires only about 400 lines of kernel modifications.\n\n{retrieved_text}\n\nGenerate exactly 46 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 46\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"“Overshadow: a virtualization-based approach to retrofitting protection in commodity operating systems\",\n        \"Overshadow: a virtualization-based approach to retrofitting protection in commodity operating systems\",\n        \"Inktag: Secure applications on an untrusted operating system\",\n        \"Sego: Pervasive trusted metadata for efficiently verified untrusted system services\",\n        \"TrustShadow: Secure execution of unmodified applications with ARM TrustZone\",\n        \"Protecting cloud virtual machines from hypervisor and host operating system exploits\",\n        \"TwinVisor: Hardware-isolated confidential virtual machines for ARM\",\n        \"BlackBox: A container security monitor for protecting containers on untrusted operating systems\",\n        \"Linux Threat Report 2021 1H: Linux threats in the cloud and security recommendations\",\n        \"Cloudvisor: retrofitting protection of virtual machines in multi-tenant cloud with nested virtualization\",\n        \"(mostly) exitless VM protection from untrusted hypervisor through disaggregated nested virtualization\",\n        \"Page migration — the linux kernel documentation\",\n        \"Transparent hugepage support — the linux kernel documentation\",\n        \"Find the Size of Enclave Page Cache (EPC)\",\n        \"Creating trust by abolishing hierarchies\",\n        \"In-kernel memory compression\",\n        \"Blindfold\",\n        \"MProtect: Operating system memory management without access\",\n        \"Nested kernel: An operating system architecture for intra-kernel privilege separation\",\n        \"SKEE: A lightweight secure kernel-level execution environment for ARM\",\n        \"Ginseng: Keeping secrets in registers when you distrust the operating system\",\n        \"Virtual memory primer — the linux kernel documentation\",\n        \"SANCTUARY: Arming TrustZone with user-space enclaves.\",\n        \"User space memory access from the linux kernel\",\n        \"Investigating kernel user-space access\",\n        \"Freebsd kernel developer’s manual, copy\",\n        \"SCONE: Secure linux containers with Intel SGX\",\n        \"End-to-end arguments in system design\",\n        \"Return-oriented programming: Systems, languages, and applications\",\n        \"Iago attacks: Why the system call API is a bad untrusted RPC interface\",\n        \"ARM trusted firmware\",\n        \"Rustcrypto project\",\n        \"LMbench - Tools for Performance Analysis\",\n        \"Example code of using DNN module in OpenCV\",\n        \"Unnecessary gettimeoftheday / ustime calls or mstime caching\",\n        \"Excessive calls to mstime()\",\n        \"LTP - Linux Test Project\",\n        \"Innovative instructions and software model for isolated execution\",\n        \"Intel® software guard extensions (Intel® SGX) software support for dynamic memory allocation inside an enclave\",\n        \"Exokernel: An operating system architecture for application-level resource management\",\n        \"Introducing Arm confidential compute architecture\",\n        \"Intel trust domain extensions (Intel TDX)\",\n        \"Bareflank\",\n        \"seL4: formal verification of an OS kernel\",\n        \"CertiKOS: An extensible architecture for building certified concurrent OS kernels\",\n        \"Midas: Systematic kernel TOCTTOU protection\"\n    ],\n    \"reasoning\": \"Selected these 46 references because they represent foundational work and recent advances in Blindfold: Confidential Memory Management by Untrusted Operating System, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}