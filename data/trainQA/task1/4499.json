{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 47 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Neural Algorithmic Reasoners are Implicit Planners\n\nPaper Abstract: Abstract Implicit planning has emerged as an elegant technique for combining learned models of the world with end-to-end model-free reinforcement learning. We study the class of implicit planners inspired by value iteration, an algorithm that is guaranteed to yield perfect policies in fully-specified tabular environments. We find that prior approaches either assume that the environment is provided in such a tabular form—which is highly restrictive—or infer “local neighbourhoods” of states to run value iteration over—for which we discover an algorithmic bottleneck effect. This effect is caused by explicitly running the planning algorithm based on scalar predictions in every state, which can be harmful to data efficiency if such scalars are improperly predicted. We propose eXecuted Latent Value Iteration Networks (XLVINs), which alleviate the above limitations. Our method performs all planning computations in a high-dimensional latent space, breaking the algorithmic bottleneck. It maintains alignment with value iteration by carefully leveraging neural graph-algorithmic reasoning and contrastive self-supervised learning. Across eight low-data settings—including classical control, navigation and Atari—XLVINs provide significant improvements to data efficiency against value iteration-based implicit planners, as well as relevant model-free baselines. Lastly, we empirically verify that XLVINs can closely align with value iteration.\n\n{retrieved_text}\n\nGenerate exactly 47 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 47\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Learning dynamic knowledge graphs to generalize on text-based games\",\n        \"Differentiable mpc for end-to-end planning and control\",\n        \"Unsupervised state representation learning in atari\",\n        \"Layer normalization\",\n        \"Neuronlike adaptive elements that can solve difficult learning control problems\",\n        \"The arcade learning environment: An evaluation platform for general agents\",\n        \"Dynamic programming\",\n        \"Translating embeddings for modeling multi-relational data\",\n        \"Openai gym\",\n        \"Combinatorial optimization and reasoning with graph neural networks\",\n        \"Graph neural induction of value iteration\",\n        \"Openai baselines\",\n        \"Treeqn and atreec: Differentiable tree-structured models for deep reinforcement learning\",\n        \"Deepmdp: Learning continuous latent space models for representation learning\",\n        \"Neural message passing for quantum chemistry\",\n        \"An investigation of model-free planning\",\n        \"Learning to search with mctsnets\",\n        \"World models\",\n        \"Recurrent world models facilitate policy evolution\",\n        \"Learning latent dynamics for planning from pixels\",\n        \"On the role of planning in model-based deep reinforcement learning\",\n        \"Model-based reinforcement learning for atari\",\n        \"Contrastive learning of structured world models\",\n        \"Reward propagation using graph convolutional networks\",\n        \"Pytorch implementations of reinforcement learning algorithms\",\n        \"Gated path planning networks\",\n        \"Human-level control through deep reinforcement learning\",\n        \"Efficient memory-based learning for robot control\",\n        \"Generalized value iteration networks: Life beyond lattices\",\n        \"Value prediction network\",\n        \"Pytorch: An imperative style, high-performance deep learning library\",\n        \"Markov decision processes: discrete stochastic dynamic programming\",\n        \"Imagination-augmented agents for deep reinforcement learning\",\n        \"Mastering atari, go, chess and shogi by planning with a learned model\",\n        \"Proximal policy optimization algorithms\",\n        \"Planning to explore via self-supervised world models\",\n        \"The predictron: End-to-end learning and planning\",\n        \"Universal planning networks: Learning generalizable representations for visuomotor control\",\n        \"Generalization in reinforcement learning: Successful examples using sparse coarse coding\",\n        \"Value iteration networks\",\n        \"Discretizing continuous action space for on-policy optimization\",\n        \"Plannable approximations to mdp homomorphisms: Equivariance under actions\",\n        \"Neural algorithmic reasoning\",\n        \"Neural execution of graph algorithms\",\n        \"Nervenet: Learning structured policy with graph neural networks\",\n        \"Simple statistical gradient-following algorithms for connectionist reinforcement learning\",\n        \"What can neural networks reason about?\"\n    ],\n    \"reasoning\": \"Selected these 47 references because they represent foundational work and recent advances in Neural Algorithmic Reasoners are Implicit Planners, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}