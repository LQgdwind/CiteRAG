{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 47 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Foreactor: Exploiting Storage I/O Parallelism with Explicit Speculation\n\nPaper Abstract: Abstract We introduce explicit speculation, a variant of I/O speculation technique where I/O system calls can be parallelized under the guidance of explicit application code knowledge. We propose a formal abstraction – the foreaction graph – which describes the exact pattern of I/O system calls in an application function as well as any necessary computation associated to produce their argument values. I/O system calls can be issued ahead of time if the graph says it is safe and beneficial to do so. With explicit speculation, serial applications can exploit storage I/O parallelism without involving expensive prediction or checkpointing mechanisms. Based on explicit speculation, we implement Foreactor, a library framework that allows application developers to concretize foreaction graphs and enable concurrent I/O with little or no modification to application source code. Experimental results show that Foreactor is able to improve the performance of both synthetic benchmarks and real applications by significant amounts (29%-50%).\n\n{retrieved_text}\n\nGenerate exactly 47 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 47\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Design tradeoffs for ssd performance\",\n        \"Differential raid: Rethinking raid for ssd reliability\",\n        \"Parallel i/o prefetching using mpi file caching and i/o signatures\",\n        \"Automatic i/o hint generation through speculative execution\",\n        \"Exploring parallel i/o concurrency with speculative prefetching\",\n        \"Buffered I/O without page-cache thrashing\",\n        \"Performance and protection in the zofs user-space nvm file system\",\n        \"Operating system I/O speculation: How two invocations are faster than one\",\n        \"Generalized file system dependencies\",\n        \"Leveldb\",\n        \"The unwritten contract of solid state drives\",\n        \"Efficient io with io_uring\",\n        \"Exploiting asynchronous IO using the asynchronous iterator model\",\n        \"Splitfs: Reducing software overhead in file systems for persistent memory\",\n        \"Designing a true Direct-Access file system with DevFS\",\n        \"Fast track: A software system for speculative program optimization\",\n        \"Strata: A cross media file system\",\n        \"Scale and performance in a filesystem semi-microkernel\",\n        \"Don’t let RAID raid the lifetime of your SSD array\",\n        \"Automatic compiler-inserted i/o prefetching for out-of-core applications\",\n        \"Speculative execution in a distributed file system\",\n        \"Parallelizing security checks on commodity hardware\",\n        \"Rethink the sync\",\n        \"Optimizing memory-mapped I/O for fast storage devices\",\n        \"A case for redundant arrays of inexpensive disks (raid)\",\n        \"Informed prefetching and caching\",\n        \"Arrakis: The operating system is the control plane\",\n        \"All file systems are not created equal: On the complexity of crafting Crash-Consistent applications\",\n        \"cassyopia: Compiler assisted system optimization\",\n        \"System call clustering: A profile directed optimization technique\",\n        \"CrossFS: A cross-layered Direct-Access file system\",\n        \"LegoOS: A disseminated, distributed OS for hardware resource disaggregation\",\n        \"Flexsc: Flexible system call scheduling with exception-less system calls\",\n        \"zIO: Accelerating IO-Intensive applications with transparent Zero-Copy IO\",\n        \"Prospect: A compiler framework for speculative parallelization\",\n        \"Enabling transparent asynchronous i/o using background threads\",\n        \"Demystifying asynchronous i/o interference in hpc applications\",\n        \"Aerie: Flexible file-system interfaces to storage-class memory\",\n        \"DAX: Page cache bypass for filesystems on memory storage\",\n        \"Towards an unwritten contract of intel optane SSD\",\n        \"The storage hierarchy is not a hierarchy: Optimizing caching on modern storage devices with orthus\",\n        \"NOVA: A log-structured file system for hybrid Volatile/Non-volatile main memories\",\n        \"Specrpc: A general framework for performing speculative remote procedure calls\",\n        \"The demikernel datapath os architecture for microsecond-scale datacenter systems\",\n        \"FusionFS: Fusing I/O operations using CISCOps in firmware file systems\",\n        \"XRP: In-Kernel storage functions with eBPF\",\n        \"ODINFS: Scaling PM performance with opportunistic delegation\"\n    ],\n    \"reasoning\": \"Selected these 47 references because they represent foundational work and recent advances in Foreactor: Exploiting Storage I/O Parallelism with Explicit Speculation, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}