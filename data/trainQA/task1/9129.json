{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 46 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Augmenting Greybox Fuzzing with Generative AI\n\nPaper Abstract: Abstract Real-world programs expecting structured inputs often has a format-parsing stage gating the deeper program space. Neither a mutation-based approach nor a generative approach can provide a solution that is effective and scalable. Large language models (LLM) pre-trained with an enormous amount of natural language corpus have proved to be effective for understanding the implicit format syntax and generating format-conforming inputs. In this paper, propose ChatFuzz, a greybox fuzzer augmented by generative AI. More specifically, we pick a seed in the fuzzer’s seed pool and prompt ChatGPT generative models to variations, which are more likely to be format-conforming and thus of high quality. We conduct extensive experiments to explore the best practice for harvesting the power of generative LLM models. The experiment results show that our approach improves the edge coverage by 12.77% over the SOTA greybox fuzzer (AFL++) on 12 target programs from three well-tested benchmarks. As for vulnerability detection, ChatFuzz is able to perform similar to or better than AFL++ for programs with explicit syntax rules but not for programs with non-trivial syntax.\n\n{retrieved_text}\n\nGenerate exactly 46 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 46\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Chromium security bugs\",\n        \"Openai platform\",\n        \"Xml syntax rules\",\n        \"Mozilla security - dharma\",\n        \"Fuzzbench: Fuzzer benchmarking as a service\",\n        \"Code generation tools (almost) for free? a study of few-shot, pre-trained language models on code\",\n        \"Directed greybox fuzzing\",\n        \"Coverage-based greybox fuzzing as markov chain\",\n        \"Language models are few-shot learners\",\n        \"Program-adaptive mutational fuzzing\",\n        \"Oss-fuzz: Five months later, and rewarding projects\",\n        \"{{{SYMSAN}}}: Time and space efficient concolic execution via dynamic data-flow analysis\",\n        \"Jcrasher: an automatic robustness tester for java\",\n        \"Large language models are edge-case fuzzers: Testing deep learning libraries via fuzzgpt\",\n        \"Lava: Large-scale automated vulnerability addition\",\n        \"Afl++ combining incremental steps of fuzzing research\",\n        \"Evosuite: Automatic test suite generation for object-oriented software\",\n        \"Grammar-based whitebox fuzzing\",\n        \"Sage: whitebox fuzzing for security testing\",\n        \"Inferring input grammars from dynamic control flow\",\n        \"Building fast fuzzers\",\n        \"Codealchemist: Semantics-aware code generation to find vulnerabilities in javascript engines\",\n        \"Jigsaw: Large language models meet program synthesis\",\n        \"Saffron: Adaptive grammar-based fuzzing for worst-case analysis\",\n        \"Codamosa: Escaping coverage plateaus in test generation with pre-trained large language models\",\n        \"Fairfuzz: a targeted mutation strategy for increasing greybox fuzz testing coverage\",\n        \"Unifuzz: A holistic and pragmatic metrics-driven platform for evaluating fuzzers\",\n        \"Mopt: Optimized mutation scheduling for fuzzers\",\n        \"Software testing: A research travelogue (2000–2014)\",\n        \"Feedback-directed random test generation\",\n        \"Semantic fuzzing with zest\",\n        \"Learning to fuzz: Application-independent fuzz testing with probabilistic, generative models of input data\",\n        \"Introducing jsfunfuzz\",\n        \"Token-Level Fuzzing\",\n        \"Mtfuzz: Fuzzing with a multi-task neural network\",\n        \"Neuzz: Efficient fuzzing with neural program smoothing\",\n        \"Driller: Augmenting fuzzing through selective symbolic execution\",\n        \"Unit test case generation with transformers and focal context\",\n        \"Attention is all you need\",\n        \"Superion: Grammar-aware greybox fuzzing\",\n        \"Evaluating and improving neural program-smoothing-based fuzzing\",\n        \"Chatunitest: a chatgpt-based automated unit test generation tool\",\n        \"Finding and understanding bugs in c compilers\",\n        \"{{{EcoFuzz}}: Adaptive {{{Energy-Saving}}} greybox fuzzing as a variant of the adversarial {{{Multi-Armed}}} bandit\",\n        \"{{{QSYM}}: A practical concolic execution engine tailored for hybrid fuzzing\",\n        \"American fuzzy lop\"\n    ],\n    \"reasoning\": \"Selected these 46 references because they represent foundational work and recent advances in Augmenting Greybox Fuzzing with Generative AI, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}