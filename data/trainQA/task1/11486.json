{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 46 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Easing Maintenance of Academic Static Analyzers\n\nPaper Abstract: Zusammenfassung Academic research in static analysis produces software implementations. These implementations are time-consuming to develop and some need to be maintained in order to enable building further research upon the implementation. While necessary, these processes can be quickly challenging. This article documents the tools and techniques we have come up with to simplify the maintenance of Mopsa since 2017. Mopsa is a static analysis platform that aims at being sound. First, we describe an automated way to measure precision that does not require any baseline of true bugs obtained by manually inspecting the results. Further, it improves transparency of the analysis, and helps discovering regressions during continuous integration. Second, we have taken inspiration from standard tools observing the concrete execution of a program to design custom tools observing the abstract execution of the analyzed program itself, such as abstract debuggers and profilers. Finally, we report on some cases of automated testcase reduction.\n\n{retrieved_text}\n\nGenerate exactly 46 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 46\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Systematic approaches for increasing soundness and precision of static analyzers\",\n        \"Speeding up static analysis with the split operator\",\n        \"Abstract interpretation of Michelson smart-contracts\",\n        \"Pplite: Zero-overhead encoding of NNC polyhedra\",\n        \"Static analysis and verification of aerospace software by abstract interpretation\",\n        \"Juliet 1.3 test suite: Changes from 1.2\",\n        \"Automatically testing implementations of numerical abstract domains\",\n        \"Abstract Interpretation with the EvaEva (Frama-C plug-in) Plug-in\",\n        \"Abstract interpretation: A unified lattice model for static analysis of programs by construction or approximation of fixpoints\",\n        \"cloc: v1.92\",\n        \"Static analysis of endian portability by abstract interpretation\",\n        \"Gcc wiki – a guide to testcase reduction\",\n        \"The flame graph\",\n        \"Abstract interpretation of LLVM with a region-based memory model\",\n        \"The seahorn verification framework\",\n        \"Total recall? how good are static call graphs really?\",\n        \"Abstract debuggers: Exploring program behaviors using static analysis results\",\n        \"Apron: A library of numerical abstract domains for static analysis\",\n        \"A formally-verified C static analyzer\",\n        \"Modular static analysis of string manipulations in C programs\",\n        \"Combinations of reusable abstract domains for a multilingual static analyzer\",\n        \"Differentially testing soundness and precision of program analyzers\",\n        \"In defense of soundiness: a manifesto\",\n        \"Magpiebridge: A general approach to integrating static analyses into ides and editors (tool insights paper)\",\n        \"Debugging Frama-C analyses: Better privacy with C-reduce\",\n        \"Catala: a programming language for the law\",\n        \"Generation of violation witnesses by under-approximating abstract interpretation\",\n        \"Mopsa: Modular open static analysis platform\",\n        \"Cross-level debugging for static analysers\",\n        \"Static type and value analysis by abstract interpretation of python programs with native C libraries. (analyse statique, de type et de valeur, par interprétation abstraite, de programmes python utilisant des librairies C)\",\n        \"Static type analysis by abstract interpretation of python programs\",\n        \"Value and allocation sensitivity in static python analyses\",\n        \"A multilanguage static analysis of python programs with native C extensions\",\n        \"Mopsa-c: Modular domains and relational abstract interpretation for C programs (competition contribution)\",\n        \"Formalizing date arithmetic and statically detecting ambiguities for the law\",\n        \"Mopsa-c: Improved verification for C programs, simple validation of correctness witnesses (competition contribution)\",\n        \"The impact of program transformations on static program analysis\",\n        \"A library modeling language for the static analysis of C programs\",\n        \"Sound abstract nonexploitability analysis\",\n        \"CVise: Super-parallel python port of the C-Reduce\",\n        \"Test-case reduction for C compiler bugs\",\n        \"Goblint\",\n        \"Goblint analyzer documentation on testcase reduction\",\n        \"Pick your contexts well: understanding object-sensitivity\",\n        \"Quantifying the Precision of Numerical Abstract Domains\",\n        \"Testing static analyses for precision and soundness\"\n    ],\n    \"reasoning\": \"Selected these 46 references because they represent foundational work and recent advances in Easing Maintenance of Academic Static Analyzers, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}