{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 51 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: DeepEdgeBench: Benchmarking Deep Neural Networks on Edge Devices* *Note: This the preprint version of the accepted paper at IC2E’21\n\nPaper Abstract: Abstract EdgeAI (Edge computing based Artificial Intelligence) has been most actively researched for the last few years to handle variety of massively distributed AI applications to meet up the strict latency requirements. Meanwhile, many companies have released edge devices with smaller form factors (low power consumption and limited resources) like the popular Raspberry Pi and Nvidia’s Jetson Nano for acting as compute nodes at the edge computing environments. Although the edge devices are limited in terms of computing power and hardware resources, they are powered by accelerators to enhance their performance behavior. Therefore, it is interesting to see how AI-based Deep Neural Networks perform on such devices with limited resources. In this work, we present and compare the performance in terms of inference time and power consumption of the four SoCs: Asus Tinker Edge R, Raspberry Pi 4, Google Coral Dev Board, Nvidia Jetson Nano, and one microcontroller: Arduino Nano 33 BLE, on different deep learning models and frameworks. We also provide a method for measuring power consumption, inference time and accuracy for the devices, which can be easily extended to other devices. Our results showcase that, for Tensorflow based quantized model, the Google Coral Dev Board delivers the best performance, both for inference time and power consumption. For a low fraction of inference computation time, i.e. less than 29.3% of the time for MobileNetV2, the Jetson Nano performs faster than the other devices.\n\n{retrieved_text}\n\nGenerate exactly 51 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 51\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Deep neural networks for acoustic modeling in speech recognition: The shared views of four research groups\",\n        \"A multi-view deep learning approach for cross domain user modeling in recommendation systems\",\n        \"Large-scale video classification with convolutional neural networks\",\n        \"Deep learning in the era of edge computing: Challenges and opportunities\",\n        \"To offload or not to offload? the bandwidth and energy costs of mobile cloud computing\",\n        \"A survey on deep learning empowered IoT applications\",\n        \"Quantifying the impact of edge computing on mobile applications\",\n        \"Edge computing: Vision and challenges\",\n        \"OpenAI Presents GPT-3, a 175 Billion Parameters Language Model\",\n        \"Tensorflow/models\",\n        \"Resource characterisation of personal-scale sensing models on edge accelerators\",\n        \"A survey on edge performance benchmarking\",\n        \"Benchmark analysis of representative deep neural network architectures\",\n        \"Benchmarking gpu-accelerated edge devices\",\n        \"Function delivery network: Extending serverless computing for heterogeneous platforms\",\n        \"Tinker Edge R.\",\n        \"Raspberry Pi 4 Model B specifications.\",\n        \"Dev Board.\",\n        \"Jetson Nano Developer Kit\",\n        \"Arduino Nano 33 BLE.\",\n        \"Jetson Nano Brings AI Computing to Everyone\",\n        \"A platform from google for local ai.\",\n        \"In-datacenter performance analysis of a tensor processing unit\",\n        \"TensorFlow: Large-scale machine learning on heterogeneous systems\",\n        \"Edge TPU performance benchmarks.\",\n        \"TensorFlow models on the Edge TPU.\",\n        \"Asus tinker board series.\",\n        \"Asus tinker edge t.\",\n        \"Raspberry pi products.\",\n        \"Why you should run a 64 bit OS on your Raspberry Pi4\",\n        \"M-Profile Architectures.\",\n        \"Benchmarking TinyML Systems: Challenges and Direction\",\n        \"TensorFlow Lite for Microcontrollers.\",\n        \"Rockchip_Quick_Start_RKNN_Toolkit_V1.2.1_EN.pdf.\",\n        \"TensorRT-Developer-Guide.pdf.\",\n        \"Nvidia tensorrt.\",\n        \"Onnx/tensorflow-onnx\",\n        \"TensorFlow Lite guide.\",\n        \"TensorFlow Lite converter.\",\n        \"Edge TPU Compiler.\",\n        \"Model formats — TensorFlow Hub.\",\n        \"SavedModels from TF Hub in TensorFlow 2 — TensorFlow Hub.\",\n        \"TF1 Hub format — TensorFlow Hub.\",\n        \"Tf.compat.v1.graph_util.convert_variables_to_constants.\",\n        \"Systemd.\",\n        \"The Network Time Protocol (NTP) Distribution.\",\n        \"ImageNet large scale visual recognition challenge\",\n        \"Microsoft COCO: Common objects in context\",\n        \"Mckenm/HanmaTekPSUCmd.\",\n        \"TensorFlow Model Garden GitHub\",\n        \"Distributing Deep Neural Networks with Containerized Partitions at the Edge\"\n    ],\n    \"reasoning\": \"Selected these 51 references because they represent foundational work and recent advances in DeepEdgeBench: Benchmarking Deep Neural Networks on Edge Devices* *Note: This the preprint version of the accepted paper at IC2E’21, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}