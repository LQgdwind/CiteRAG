{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 47 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Scalable Spatiotemporal Graph Neural Networks\n\nPaper Abstract: Abstract Neural forecasting of spatiotemporal time series drives both research and industrial innovation in several relevant application domains. Graph neural networks (GNNs) are often the core component of the forecasting architecture. However, in most spatiotemporal GNNs, the computational complexity scales up to a quadratic factor with the length of the sequence times the number of links in the graph, hence hindering the application of these models to large graphs and long temporal sequences. While methods to improve scalability have been proposed in the context of static graphs, few research efforts have been devoted to the spatiotemporal case. To fill this gap, we propose a scalable architecture that exploits an efficient encoding of both temporal and spatial dynamics. In particular, we use a randomized recurrent neural network to embed the history of the input time series into high-dimensional state representations encompassing multi-scale temporal dynamics. Such representations are then propagated along the spatial dimension using different powers of the graph adjacency matrix to generate node embeddings characterized by a rich pool of spatiotemporal features. The resulting node embeddings can be efficiently pre-computed in an unsupervised manner, before being fed to a feed-forward decoder that learns to map the multi-scale spatiotemporal representations to predictions. The training procedure can then be parallelized node-wise by sampling the node embeddings without breaking any dependency, thus enabling scalability to large networks. Empirical results on relevant datasets show that our approach achieves results competitive with the state of the art, while dramatically reducing the computational burden.\n\n{retrieved_text}\n\nGenerate exactly 47 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 47\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"A gentle introduction to deep learning for graphs\",\n        \"Relational inductive biases, deep learning, and graph networks\",\n        \"Reservoir Computing Approaches for Representation and Classification of Multivariate Time Series\",\n        \"Cluster-gcn: An efficient algorithm for training deep and large graph convolutional networks\",\n        \"Torch Spatiotemporal\",\n        \"Filling the G_ap_s: Multivariate Time Series Imputation by Graph Neural Networks\",\n        \"CER Smart Metering Project - Electricity Customer Behaviour Trial, 2009-2010 [dataset]\",\n        \"PyTorch Lightning\",\n        \"Fast graph representation learning with PyTorch Geometric\",\n        \"SIGN: Scalable Inception Graph Neural Networks\",\n        \"Deep reservoir computing: A critical experimental analysis\",\n        \"Design of deep echo state networks\",\n        \"Spatio-Temporal Multi-graph Networks for Demand Forecasting in Online Marketplaces\",\n        \"On the Equivalence Between Temporal and Static Equivariant Graph Representations\",\n        \"Inductive representation learning on large graphs\",\n        \"Array programming with NumPy\",\n        \"Gaussian error linear units\",\n        \"Long short-term memory\",\n        \"Sub-hour solar data for power system modeling from static spatial variability analysis\",\n        \"The “echo state” approach to analysing and training recurrent neural networks-with an erratum note\",\n        \"Optimization and Applications of Echo State Networks with Leaky-Integrator Neurons\",\n        \"Big data and its technical challenges\",\n        \"Imagenet classification with deep convolutional neural networks\",\n        \"Modeling long-and short-term temporal patterns with deep neural networks\",\n        \"Diffusion Convolutional Recurrent Neural Network: Data-Driven Traffic Forecasting\",\n        \"Correntropy: Properties and applications in non-Gaussian signal processing\",\n        \"A practical guide to applying echo state networks\",\n        \"Reservoir Computing Approaches to Recurrent Neural Network Training\",\n        \"Learning to Reconstruct Missing Data from Spatiotemporal Graphs with Sparse Observations\",\n        \"Discrete-time dynamic graph echo state networks\",\n        \"Neptune: Metadata store for MLOps, built for research and production teams that run a lot of experiments\",\n        \"FC-GAGA: Fully connected gated graph architecture for spatio-temporal traffic forecasting\",\n        \"Pytorch: An imperative style, high-performance deep learning library\",\n        \"Multivariate Time Series Forecasting with Latent Graph Inference\",\n        \"The graph neural network model\",\n        \"Structured sequence modeling with graph convolutional recurrent networks\",\n        \"Dropout: a simple way to prevent neural networks from overfitting\",\n        \"Highway networks\",\n        \"Python 3 Reference Manual\",\n        \"Attention is all you need\",\n        \"Inductive graph neural networks for spatiotemporal kriging\",\n        \"Connecting the Dots: Multivariate Time Series Forecasting with Graph Neural Networks\",\n        \"Graph Wavenet for Deep Spatial-Temporal Graph Modeling\",\n        \"TraverseNet: Unifying Space and Time in Message Passing for Traffic Forecasting\",\n        \"Spatio-temporal graph convolutional networks: a deep learning framework for traffic forecasting\",\n        \"GraphSAINT: Graph Sampling Based Inductive Learning Method\",\n        \"Gman: A graph multi-attention network for traffic prediction\"\n    ],\n    \"reasoning\": \"Selected these 47 references because they represent foundational work and recent advances in Scalable Spatiotemporal Graph Neural Networks, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}