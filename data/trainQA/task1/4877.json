{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 47 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Fast Sparse Decision Tree Optimization via Reference Ensembles\n\nPaper Abstract: Abstract Sparse decision tree optimization has been one of the most fundamental problems in AI since its inception and is a challenge at the core of interpretable machine learning. Sparse decision tree optimization is computationally hard, and despite steady effort since the 1960’s, breakthroughs have been made on the problem only within the past few years, primarily on the problem of finding optimal sparse decision trees. However, current state-of-the-art algorithms often require impractical amounts of computation time and memory to find optimal or near-optimal trees for some real-world datasets, particularly those having several continuous-valued features. Given that the search spaces of these decision tree optimization problems are massive, can we practically hope to find a sparse decision tree that competes in accuracy with a black box machine learning model? We address this problem via smart guessing strategies that can be applied to any optimal branch-and-bound-based decision tree algorithm. The guesses come from knowledge gleaned from black box models. We show that by using these guesses, we can reduce the run time by multiple orders of magnitude while providing bounds on how far the resulting trees can deviate from the black box’s accuracy and expressive power. Our approach enables guesses about how to bin continuous features, the size of the tree, and lower bounds on the error for the optimal decision tree. Our experiments show that in many cases we can rapidly construct sparse decision trees that match the accuracy of black box models. To summarize: when you are having trouble optimizing, just guess.\n\n{retrieved_text}\n\nGenerate exactly 47 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 47\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Strong Optimal Classification Trees\",\n        \"Learning optimal decision trees using caching branch-and-bound search\",\n        \"Turning majority voting classifiers into a single decision tree\",\n        \"Learning Certifiably Optimal Rule Lists for Categorical Data\",\n        \"Rectified decision trees: Towards interpretability, compression and empirical soundness\",\n        \"Optimal decision trees\",\n        \"Optimal classification trees\",\n        \"Classification and Regression Trees\",\n        \"Born again trees\",\n        \"Mathematical optimization in classification and regression trees\",\n        \"Intelligible models for healthcare: Predicting pneumonia risk and hospital 30-day readmission\",\n        \"An optimization approach to learning falling rule lists\",\n        \"Boolean Decision Rules via Column Generation\",\n        \"MurTree: Optimal Classification Trees via Dynamic Programming and Search\",\n        \"Interpreting tree ensembles with intrees\",\n        \"Induction of shallow decision trees\",\n        \"A fast way to produce near-optimal fixed-depth decision trees\",\n        \"Explainable Machine Learning Challenge\",\n        \"A desicion-theoretic generalization of on-line learning and an application to boosting\",\n        \"Greedy function approximation: a gradient boosting machine\",\n        \"Optimal decision trees for categorical data via integer programming\",\n        \"Making tree ensembles interpretable: A bayesian model selection approach\",\n        \"Learning optimal decision trees with MaxSAT and its integration in AdaBoost\",\n        \"Optimal sparse decision trees\",\n        \"How We Analyzed the COMPAS Recidivism Algorithm\",\n        \"Constructing optimal binary decision trees is NP-complete\",\n        \"Generalized and scalable optimal sparse decision trees\",\n        \"Intelligible models for classification and regression\",\n        \"Problems in the analysis of survey data, and a proposal\",\n        \"Learning Optimal Decision Trees with SAT\",\n        \"Mining optimal decision trees from itemset lattices\",\n        \"Optimal constraint-based decision tree induction from itemset lattices\",\n        \"Scikit-learn: Machine Learning in Python\",\n        \"C4.5: Programs for Machine Learning\",\n        \"Learning Customized and Optimized Lists of Rules with Mathematical Programming\",\n        \"Explainable decision forest: Transforming a decision forest into an interpretable tree\",\n        \"Understanding machine learning: From theory to algorithms\",\n        \"Integration of rules from a random forest\",\n        \"Which method predicts recidivism best?: a comparison of statistical, machine learning and data mining predictive models\",\n        \"Seeing the forest through the trees: Learning a comprehensible model from an ensemble\",\n        \"GENESIM: genetic extraction of a single, interpretable model\",\n        \"Learning optimal classification trees using a binary linear program formulation\",\n        \"Born-again tree ensembles\",\n        \"Optimal decision trees for the algorithm selection problem: integer programming based approaches\",\n        \"In Pursuit of Interpretable, Fair and Accurate Machine Learning for Criminal Recidivism Prediction\",\n        \"A Bayesian Framework for Learning Rule Sets for Interpretable Classification\",\n        \"Interpreting models via single tree approximation\"\n    ],\n    \"reasoning\": \"Selected these 47 references because they represent foundational work and recent advances in Fast Sparse Decision Tree Optimization via Reference Ensembles, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}