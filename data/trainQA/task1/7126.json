{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 57 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Towards Accurate Subgraph Similarity Computation via Neural Graph Pruning\n\nPaper Abstract: Abstract Subgraph similarity search, one of the core problems in graph search, concerns whether a target graph approximately contains a query graph. The problem is recently touched by neural methods. However, current neural methods do not consider pruning the target graph, though pruning is critically important in traditional calculations of subgraph similarities. One obstacle to applying pruning in neural methods is the discrete property of pruning. In this work, we convert graph pruning to a problem of node relabeling and then relax it to a differentiable problem. Based on this idea, we further design a novel neural network to approximate a type of subgraph distance: the subgraph edit distance (SED). In particular, we construct the pruning component using a neural structure, and the entire model can be optimized end-to-end. In the design of the model, we propose an attention mechanism to leverage the information about the query graph and guide the pruning of the target graph. Moreover, we develop a multi-head pruning strategy such that the model can better explore multiple ways of pruning the target graph. The proposed model establishes new state-of-the-art results across seven benchmark datasets. Extensive analysis of the model indicates that the proposed model can reasonably prune the target graph for SED computation. The implementation of our algorithm is released at our Github repo: https://github.com/tufts-ml/Prune4SED.\n\n{retrieved_text}\n\nGenerate exactly 57 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 57\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Simgnn: A neural network approach to fast graph similarity computation\",\n        \"Learning-based efficient graph similarity computation via multi-scale convolutional set matching\",\n        \"New techniques for graph edit distance computation\",\n        \"Gedlib: a c++ library for graph edit distance computation\",\n        \"Comparing heuristics for graph edit distance computation\",\n        \"Deep gaussian embedding of graphs: Unsupervised inductive learning via ranking\",\n        \"Graph edit distance as a quadratic assignment problem\",\n        \"How attentive are graph attention networks?\",\n        \"On a relation between graph edit distance and maximum common subgraph\",\n        \"Towards sparse hierarchical graph classifiers\",\n        \"Combinatorial optimization and reasoning with graph neural networks\",\n        \"Can graph neural networks count substructures?\",\n        \"Approximate graph edit distance by several local searches in parallel\",\n        \"Distinguishing enzyme structures from non-enzymes without alignments\",\n        \"Speeding up graph edit distance computation through fast bipartite matching\",\n        \"Fast graph representation learning with pytorch geometric\",\n        \"Graph u-nets\",\n        \"Inductive representation learning on large graphs\",\n        \"Understanding attention and generalization in graph neural networks\",\n        \"A graph matching algorithm using data-driven markov chain monte carlo sampling\",\n        \"A survey of algorithms for dense subgraph discovery\",\n        \"New binary linear programming formulation to compute the graph edit distance\",\n        \"Snap: A general-purpose network analysis and graph-mining library\",\n        \"Graph matching networks for learning the similarity of graph structured objects\",\n        \"Multi-level graph matching networks for deep graph similarity learning\",\n        \"Deep graph matching and searching for semantic code retrieval\",\n        \"Stochastic iterative graph matching\",\n        \"Neural subgraph isomorphism counting\",\n        \"Decoupled weight decay regularization\",\n        \"Neural subgraph matching\",\n        \"Dropgnn: Random dropouts increase the expressiveness of graph neural networks\",\n        \"Authenticated subgraph similarity searchin outsourced graph databases\",\n        \"Similarity searching in medical image databases\",\n        \"A neural framework for learning subgraph and graph similarity measures\",\n        \"Mining statistically significant molecular substructures for efficient molecular classification\",\n        \"Probabilistic substructure mining from small-molecule screens\",\n        \"Structural pattern recognition with graph edit distance\",\n        \"Approximate graph edit distance computation by means of bipartite graph matching\",\n        \"Subgraph similarity search in large graphs\",\n        \"A survey on the expressive power of graph neural networks\",\n        \"Collective classification in network data\",\n        \"Connected substructure similarity search\",\n        \"Cyclical learning rates for training neural networks\",\n        \"Arnetminer: extraction and mining of academic social networks\",\n        \"Attention is all you need\",\n        \"Graph attention networks\",\n        \"Learning combinatorial embedding networks for deep graph matching\",\n        \"Substructure similarity search for engineering service-based systems\",\n        \"A comprehensive survey on graph neural networks\",\n        \"How powerful are graph neural networks?\",\n        \"Substructure similarity search in graph databases\",\n        \"Efficient subgraph similarity search on large probabilistic graph databases\",\n        \"Comparing stars: On approximating graph edit distance\",\n        \"Nested graph neural networks\",\n        \"H2mn: Graph similarity learning with hierarchical hypergraph matching networks\",\n        \"Graph similarity search with edit distance constraint in large graph databases\",\n        \"Finding top-k similar graphs in graph databases\"\n    ],\n    \"reasoning\": \"Selected these 57 references because they represent foundational work and recent advances in Towards Accurate Subgraph Similarity Computation via Neural Graph Pruning, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}