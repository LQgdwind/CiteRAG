{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 59 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: AI-driven Java Performance Testing: Balancing Result Quality with Testing Time\n\nPaper Abstract: Abstract. Performance testing aims at uncovering efficiency issues of software systems. In order to be both effective and practical, the design of a performance test must achieve a reasonable trade-off between result quality and testing time. This becomes particularly challenging in Java context, where the software undergoes a warm-up phase of execution, due to just-in-time compilation. During this phase, performance measurements are subject to severe fluctuations, which may adversely affect quality of performance test results. Both practitioners and researchers have proposed approaches to mitigate this issue. Practitioners typically rely on a fixed number of iterated executions that are used to warm-up the software before starting to collect performance measurements (state-of-practice). Researchers have developed techniques that can dynamically stop warm-up iterations at runtime (state-of-the-art). However, these approaches often provide suboptimal estimates of the warm-up phase, resulting in either insufficient or excessive warm-up iterations, which may degrade result quality or increase testing time. There is still a lack of consensus on how to properly address this problem. Here, we propose and study an AI-based framework to dynamically halt warm-up iterations at runtime. Specifically, our framework leverages recent advances in AI for Time Series Classification (TSC) to predict the end of the warm-up phase during test execution. We conduct experiments by training three different TSC models on half a million of measurement segments obtained from JMH microbenchmark executions. We find that our framework significantly improves the accuracy of the warm-up estimates provided by state-of-practice and state-of-the-art methods. This higher estimation accuracy results in a net improvement in either result quality or testing time for up to +35.3% of the microbenchmarks. Our study highlights that integrating AI to dynamically estimate the end of the warm-up phase can enhance the cost-effectiveness of Java performance testing.\n\n{retrieved_text}\n\nGenerate exactly 59 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 59\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Early Stopping of Non-productive Performance Testing Experiments Using Measurement Mutations\",\n        \"Towards reducing the time needed for load testing\",\n        \"An Automated Approach for Recommending When to Stop Performance Tests\",\n        \"Applications of shapelet transform to time series classification of earthquake, wind and wave data\",\n        \"The great time series classification bake off: a review and experimental evaluation of recent algorithmic advances\",\n        \"Virtual Machine Warmup Blows Hot and Cold\",\n        \"PerfJIT: Test-Level Just-in-Time Prediction for Performance Regression Introducing Commits\",\n        \"Deep Learning for Sensor-based Human Activity Recognition: Overview, Challenges, and Opportunities\",\n        \"Multi-objectivizing software configuration tuning\",\n        \"Analytics-Driven Load Testing: An Industrial Experience Report on Load Testing of Large-Scale Systems\",\n        \"Multi-Scale Convolutional Neural Networks for Time Series Classification\",\n        \"STABILIZER: statistically sound performance evaluation\",\n        \"The UCR Time Series Archive\",\n        \"Bootstrap methods and their application\",\n        \"ROCKET: exceptionally fast and accurate time series classification using random convolutional kernels\",\n        \"Towards the use of the readily available tests from the release pipeline as performance tests: are we there yet?\",\n        \"The Cambridge Dictionary of Statistics\",\n        \"Verdict Machinery: On the Need to Automatically Make Sense of Test Results\",\n        \"Deep Learning for Time Series Classification and Extrinsic Regression: A Current Survey\",\n        \"Visual Feature Extraction by a Multilayered Network of Analog Threshold Elements\",\n        \"Neocognitron: A self-organizing neural network model for a mechanism of pattern recognition unaffected by shift in position\",\n        \"Statistically Rigorous Java Performance Evaluation\",\n        \"A Statistics-Based Performance Testing Methodology for Cloud Applications\",\n        \"What Teachers Should Know About the Bootstrap: Resampling in the Undergraduate Statistics Curriculum\",\n        \"Ridge, a computer program for calculating ridge regression estimates\",\n        \"Batch normalization: accelerating deep network training by reducing internal covariate shift\",\n        \"Deep learning for time series classification: a review\",\n        \"Automated Generation and Evaluation of JMH Microbenchmark Suites From Unit Tests\",\n        \"A Survey on Load Testing of Large-Scale Software Systems\",\n        \"Quantifying Performance Changes with Effect Size Confidence Intervals\",\n        \"Rigorous Benchmarking in Reasonable Time\",\n        \"The Simple Difference Formula: An Approach to Teaching Nonparametric Correlation\",\n        \"Optimal Detection of Changepoints With a Linear Computational Cost\",\n        \"Adam: A Method for Stochastic Optimization\",\n        \"On Information and Sufficiency\",\n        \"Dynamically Reconfiguring Software Microbenchmarks: Reducing Execution Time without Sacrificing Result Quality\",\n        \"Evaluating Search-Based Software Microbenchmark Prioritization\",\n        \"Optimizing Existing Software With Genetic Programming\",\n        \"An Exploratory Study of the State of Practice of Performance Testing in Java-Based Open Source Projects\",\n        \"Network In Network\",\n        \"Time series classification with ensembles of elastic distance measures\",\n        \"Clustering and classification of time series using topological data analysis with applications to finance\",\n        \"Taming Performance Variability\",\n        \"Bake off redux: a review and experimental evaluation of recent time series classification algorithms\",\n        \"Producing wrong data without doing anything obviously wrong!\",\n        \"Genetic Improvement of Software: A Comprehensive Survey\",\n        \"Scalable and accurate deep learning for electronic health records\",\n        \"The BOSS is concerned with time series classification in the presence of noise\",\n        \"MultiRocket: multiple pooling operators and transformations for fast and effective time series classification\",\n        \"Omni-Scale CNNs: a simple and effective kernel size configuration for time series classification\",\n        \"Exploring Performance Assurance Practices and Challenges in Agile Software Development: An Ethnographic Study\",\n        \"Towards effective assessment of steady state performance in Java software: are we there yet?\",\n        \"How Software Refactoring Impacts Execution Time\",\n        \"A Critique and Improvement of the CL Common Language Effect Size Statistics of McGraw and Wong\",\n        \"AgileCtrl: a self-adaptive framework for configuration tuning\",\n        \"Time series classification from scratch with deep neural networks: A strong baseline\",\n        \"Individual Comparisons by Ranking Methods\",\n        \"Index for rating diagnostic tests\",\n        \"Faster or Slower? Performance Mystery of Python Idioms Unveiled with Empirical Evidence\"\n    ],\n    \"reasoning\": \"Selected these 59 references because they represent foundational work and recent advances in AI-driven Java Performance Testing: Balancing Result Quality with Testing Time, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}