{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 64 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Verification Algorithms for Automated Separation Logic Verifiers\n\nPaper Abstract: Abstract Most automated program verifiers for separation logic use either symbolic execution or verification condition generation to extract proof obligations, which are then handed over to an SMT solver. Existing verification algorithms are designed to be sound, but differ in performance and completeness. These characteristics may also depend on the programs and properties to be verified. Consequently, developers and users of program verifiers have to select a verification algorithm carefully for their application domain. Taking an informed decision requires a systematic comparison of the performance and completeness characteristics of the verification algorithms used by modern separation logic verifiers, but such a comparison does not exist. This paper describes five verification algorithms for separation logic, three that are used in existing tools and two novel algorithms that combine characteristics of existing symbolic execution and verification condition generation algorithms. A detailed evaluation of implementations of these five algorithms in the Viper infrastructure assesses their performance and completeness for different classes of input programs. Based on the experimental results, we identify candidate portfolios of algorithms that maximize completeness and performance.\n\n{retrieved_text}\n\nGenerate exactly 64 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 64\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Permission-based verification of red-black trees and their merging\",\n        \"A generic methodology for the modular verification of security protocol implementations\",\n        \"Leveraging Uniqueness for Modular Verification of Heap-Manipulating Programs\",\n        \"Leveraging Rust types for modular specification and verification\",\n        \"CVC5: A versatile and industrial-strength SMT solver\",\n        \"Boogie: A modular reusable verifier for object-oriented programs\",\n        \"Weakest-precondition of unstructured programs\",\n        \"Smallfoot: Modular automatic assertion checking with separation logic\",\n        \"The VerCors tool for verification of concurrent programs\",\n        \"Heaps and data structures: A challenge for automated provers\",\n        \"Permission accounting in separation logic\",\n        \"Checking interference with fractional permissions\",\n        \"Rich specifications for Ethereum smart contract verification\",\n        \"Explicit-state and symbolic model checking of nuclear i&c systems: A comparison\",\n        \"Automated verification of shape, size and bag properties via user-defined predicates in separation logic\",\n        \"Simplify: a theorem prover for program checking\",\n        \"Caper - automatic verification for fine-grained concurrency\",\n        \"VerifyThis 2019: a program verification competition\",\n        \"Translating Pedagogical Exercises to Viperâ€™s Go Front-End\",\n        \"Modular Specification and Verification of Security Properties for Mainstream Languages\",\n        \"Product programs in the wild: Retrofitting program verifiers to check information flow security\",\n        \"Nagini: A static verifier for Python\",\n        \"Modular product programs\",\n        \"SecCSL: Security concurrent separation logic\",\n        \"Why3 - where programs meet provers\",\n        \"Static Verification of the SCION Router Implementation\",\n        \"Translating Pedagogical Verification Exercises to Viper\",\n        \"Steel: proof-oriented programming in a dependently typed concurrent separation logic\",\n        \"Verification condition generation for permission logics with abstract predicates and abstraction functions\",\n        \"VeriFast: A powerful, sound, predictable, fast verifier for C and Java\",\n        \"Iris from the ground up: A modular foundation for higher-order concurrent separation logic\",\n        \"Comparing verification condition generation with symbolic execution: An experience report\",\n        \"Powering the static driver verifier using Corral\",\n        \"This is Boogie 2\",\n        \"Dafny: An automatic program verifier for functional correctness\",\n        \"Program Proofs\",\n        \"Verification of concurrent programs with Chalice\",\n        \"Gillian, part II: real-world verification for JavaScript and C\",\n        \"Z3: an efficient SMT solver\",\n        \"Portfolio solving for Dafny\",\n        \"Automatic verification of iterated separating conjunctions using symbolic execution\",\n        \"Viper: A verification infrastructure for permission-based reasoning\",\n        \"Separation logic and abstraction\",\n        \"The relationship between separation logic and implicit dynamic frames\",\n        \"Protocols to code: Formal verification of a next-generation internet router\",\n        \"Grasshopper - complete heap verification with mixed specifications\",\n        \"Reasoning about interior mutability in Rust using library-defined capabilities\",\n        \"Separation logic: A logic for shared mutable data structures\",\n        \"TaDA: A logic for time and data abstraction\",\n        \"A generic approach to the verification of the permutation property of sequential and parallel swap-based sorting algorithms\",\n        \"Formal verification of parallel prefix sum and stream compaction algorithms in CUDA\",\n        \"RefinedC: automating the foundational verification of C code with refined ownership types\",\n        \"Gillian, part i: a multi-language platform for symbolic execution\",\n        \"JaVerT 2.0: compositional symbolic execution for JavaScript\",\n        \"Advancing Automated, Permission-Based Program Verification Using Symbolic Execution\",\n        \"Lightweight support for magic wands in an automatic verifier\",\n        \"Implicit dynamic frames: Combining dynamic frames and separation logic\",\n        \"Igloo: soundly linking compositional refinement and separation logic for distributed system verification\",\n        \"Automating deductive verification for weak-memory programs\",\n        \"Verifying higher-order programs with the Dijkstra monad\",\n        \"Modular verification of heap reachability properties in separation logic\",\n        \"Relaxed separation logic: a program logic for C11 concurrency\",\n        \"Gobra: Modular specification and verification of Go programs\",\n        \"Concise outlines for a complex logic: A proof outline checker for TaDA\"\n    ],\n    \"reasoning\": \"Selected these 64 references because they represent foundational work and recent advances in Verification Algorithms for Automated Separation Logic Verifiers, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}