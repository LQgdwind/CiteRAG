{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 45 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Exploring Plausible Patches Using Source Code Embeddings in JavaScript\n\nPaper Abstract: Abstract Despite the immense popularity of the Automated Program Repair (APR) field, the question of patch validation is still open. Most of the present-day approaches follow the so-called Generate-and-Validate approach, where first a candidate solution is being generated and after validated against an oracle. The latter, however, might not give a reliable result, because of the imperfections in such oracles; one of which is usually the test suite. Although (re-) running the test suite is right under one’s nose, in real life applications the problem of over- and underfitting often occurs, resulting in inadequate patches. Efforts that have been made to tackle with this problem include patch filtering, test suite expansion, careful patch producing and many more. Most approaches to date use post-filtering relying either on test execution traces or make use of some similarity concept measured on the generated patches. Our goal is to investigate the nature of these similarity-based approaches. To do so, we trained a Doc2Vec model on an open-source JavaScript project and generated 465 patches for 10 bugs in it. These plausible patches alongside with the developer fix are then ranked based on their similarity to the original program. We analyzed these similarity lists and found that plain document embeddings may lead to misclassification - it fails to capture nuanced code semantics. Nevertheless, in some cases it also provided useful information, thus helping to better understand the area of Automated Program Repair.\n\n{retrieved_text}\n\nGenerate exactly 45 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 45\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Automatic Software Repair: a Bibliography\",\n        \"Automated program repair\",\n        \"Writer questions the inevitability of FPs’ declining role in inpatient care.\",\n        \"Deep learning similarities from different representations of source code\",\n        \"Automated Repair of Internationalization Presentation Failures in Web Pages Using Style Similarity Clustering and Search-Based Techniques\",\n        \"Automatic repair of real bugs in java: a large-scale experiment on the defects4j dataset\",\n        \"DeepFix : Fixing Common Programming Errors by Deep Learning\",\n        \"Nopol: Automatic Repair of Conditional Statement Bugs in Java Programs\",\n        \"Overfitting in semantics-based automated program repair\",\n        \"An analysis of patch plausibility and correctness for generate-and-validate patch generation systems\",\n        \"Is the cure worse than the disease? overfitting in automated program repair\",\n        \"Evaluating representation learning of code changes for predicting patch correctness in program repair\",\n        \"Utilizing Source Code Embeddings to Identify Correct Patches\",\n        \"On Reliability of Patch Correctness Assessment\",\n        \"On Learning Meaningful Code Changes Via Neural Machine Translation\",\n        \"How Different Is It between Machine-Generated and Developer-Provided Patches? : An Empirical Study on the Correct Patches Generated by Automated Program Repair Techniques\",\n        \"Identifying patch correctness in test-based program repair\",\n        \"Distributed Representations of Sentences and Documents\",\n        \"BERT: Pre-training of deep bidirectional transformers for language understanding\",\n        \"code2vec: Learning Distributed Representations of Code\",\n        \"Fault localization for automated program repair: effectiveness, performance, repair correctness\",\n        \"Automatic software repair: A survey\",\n        \"Better test cases for better automated program repair\",\n        \"Context-aware patch generation for better automated program repair\",\n        \"DirectFix: Looking for Simple Program Repairs\",\n        \"Understanding free/open source software development processes\",\n        \"BugsJS: A benchmark of javascript bugs\",\n        \"Automatically finding patches using genetic programming\",\n        \"Ir evaluation methods for retrieving highly relevant documents\",\n        \"Linguistic Regularities in Sparse and Explicit Word Representations\",\n        \"Sorting and Transforming Program Repair Ingredients via Deep Learning Code Similarities\",\n        \"History Driven Program Repair\",\n        \"Automatic patch generation learned from human-written patches\",\n        \"A critical review of automatic patch generation learned from human-written patches: essay on the problem statement and the evaluation of automatic software repair\",\n        \"A critical review on the evaluation of automated program repair systems\",\n        \"Automated Patch Correctness Assessment: How Far are We?\",\n        \"Practitioners’ expectations on automated fault localization\",\n        \"Recommendation Systems for Software Engineering\",\n        \"Recommendation Systems in Software Engineering\",\n        \"Exploring the benefits of utilizing conceptual information in test-to-code traceability\",\n        \"Evaluation of Textual Similarity Techniques in Code Level Traceability\",\n        \"Source code level word embeddings in aiding semantic test-to-code traceability\",\n        \"S3: Syntax- and semantic-guided repair synthesis via programming by examples\",\n        \"QLOSE: Program repair with quantitative objectives\",\n        \"Anti-patterns in search-based program repair\"\n    ],\n    \"reasoning\": \"Selected these 45 references because they represent foundational work and recent advances in Exploring Plausible Patches Using Source Code Embeddings in JavaScript, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}