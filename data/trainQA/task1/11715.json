{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 47 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Detection Made Easy: Potentials of Large Language Models for Solidity Vulnerabilities\n\nPaper Abstract: Abstract The large-scale deployment of Solidity smart contracts on the Ethereum mainnet has increasingly attracted financially-motivated attackers in recent years. A few now-infamous attacks in Ethereum’s history includes DAO attack in 2016 (50 million dollars lost), Parity Wallet hack in 2017 (146 million dollars locked), Beautychain’s token BEC in 2018 (900 million dollars market value fell to 0), and NFT gaming blockchain breach in 2022 ($600 million in Ether stolen). This paper presents a comprehensive investigation of the use of large language models (LLMs) and their capabilities in detecting OWASP Top Ten vulnerabilities in Solidity. We introduce a novel, class-balanced, structured, and labeled dataset named VulSmart, which we use to benchmark and compare the performance of open-source LLMs such as CodeLlama, Llama2, CodeT5 and Falcon, alongside closed-source models like GPT-3.5 Turbo and GPT-4o Mini. Our proposed SmartVD framework is rigorously tested against these models through extensive automated and manual evaluations, utilizing BLEU and ROUGE metrics to assess the effectiveness of vulnerability detection in smart contracts. We also explore three distinct prompting strategies—zero-shot, few-shot, and chain-of-thought—to evaluate the multi-class classification and generative capabilities of the SmartVD framework. Our findings reveal that SmartVD outperforms its open-source counterparts and even exceeds the performance of closed-source base models like GPT-3.5 and GPT-4 Mini. After fine-tuning, the closed-source models, GPT-3.5 Turbo and GPT-4o Mini, achieved remarkable performance with 99% accuracy in detecting vulnerabilities, 94% in identifying their types, and 98% in determining severity. Notably, SmartVD performs best with the ‘chain-of-thought’ prompting technique, whereas the fine-tuned closed-source models excel with the ‘zero-shot’ prompting approach.\n\n{retrieved_text}\n\nGenerate exactly 47 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 47\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Blockchain for smart communities: Applications, challenges and opportunities\",\n        \"Survey on blockchain based smart contracts: Applications, opportunities and challenges\",\n        \"A survey on evaluation of large language models\",\n        \"Large language models for code completion: A systematic literature review\",\n        \"A systematic literature review on large language models for automated program repair\",\n        \"Software testing with large language models: Survey, landscape, and vision\",\n        \"A quantitative and qualitative evaluation of llm-based explainable fault localization\",\n        \"When chatgpt meets smart contract vulnerability detection: How far are we?\",\n        \"Evaluating chatgpt for smart contracts vulnerability correction\",\n        \"Vulnhunt-gpt: a smart contract vulnerabilities detector based on openai chatgpt\",\n        \"Auditgpt: Auditing smart contracts with chatgpt\",\n        \"Large language model-powered smart contract vulnerability detection: New perspectives\",\n        \"Gptscan: Detecting logic vulnerabilities in smart contracts by combining gpt with program analysis\",\n        \"Smart contract vulnerability detection: The role of large language model (llm)\",\n        \"Smartbugs: a framework to analyze solidity smart contracts\",\n        \"Do you still need a manual smart contract audit?\",\n        \"Security threat mitigation for smart contracts: A comprehensive survey\",\n        \"A comparative evaluation of automated analysis tools for solidity smart contracts\",\n        \"Making smart contracts smarter\",\n        \"Slither: a static analysis framework for smart contracts\",\n        \"{{{teEther}}}: Gnawing at ethereum to automatically exploit smart contracts\",\n        \"Securify: Practical security analysis of smart contracts\",\n        \"Smartcheck: Static analysis of ethereum smart contracts\",\n        \"Mythril\",\n        \"Manticore: A user-friendly symbolic execution framework for binaries and smart contracts\",\n        \"Efficiently detecting reentrancy vulnerabilities in complex smart contracts\",\n        \"Towards safer smart contracts: A sequence learning approach to detecting security threats\",\n        \"Soliaudit: Smart contract vulnerability assessment based on machine learning and fuzz testing\",\n        \"Multi-class classification of vulnerabilities in smart contracts using awd-lstm, with pre-trained encoder inspired from natural language processing\",\n        \"Combining graph neural networks with expert knowledge for smart contract vulnerability detection\",\n        \"Contractward: Automated vulnerability detection models for ethereum smart contracts\",\n        \"Smart contract vulnerability detection: from pure neural network to interpretable graph feature and expert pattern fusion\",\n        \"Deescvhunter: A deep learning-based framework for smart contract vulnerability detection\",\n        \"Vscl: automating vulnerability detection in smart contracts with deep learning\",\n        \"Vulpedia: Detecting vulnerable ethereum smart contracts via abstracted vulnerability signatures\",\n        \"Soley: Identification and automated detection of logic vulnerabilities in ethereum smart contracts using large language models\",\n        \"Defining smart contract defects on ethereum\",\n        \"How effective are smart contract analysis tools? evaluating smart contract static analysis tools using bug injection\",\n        \"Not so smart contract\",\n        \"Empirical evaluation of smart contract testing: what is the best choice?\",\n        \"Scrawld: A dataset of real world ethereum smart contracts labelled with vulnerabilities\",\n        \"Understanding interobserver agreement: the kappa statistic\",\n        \"Codegeex: A pre-trained model for code generation with multilingual benchmarking on humaneval-x\",\n        \"Code llama: Open foundation models for code\",\n        \"Bleu: a method for automatic evaluation of machine translation\",\n        \"Recall-oriented understudy for gisting evaluation (rouge)\",\n        \"The advantages of the matthews correlation coefficient (mcc) over f1 score and accuracy in binary classification evaluation\"\n    ],\n    \"reasoning\": \"Selected these 47 references because they represent foundational work and recent advances in Detection Made Easy: Potentials of Large Language Models for Solidity Vulnerabilities, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}