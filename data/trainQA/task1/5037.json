{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 68 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: From Procedures, Objects, Actors, Components, Services, to Agents – A Comparative Analysis of the History and Evolution of Programming Abstractions\n\nPaper Abstract: Abstract The objective of this chapter111This preprint has been published as a chapter of a book about the French school of programming, coordinated by Bertrand Meyer [10]. is to propose some retrospective analysis of the evolution of programming abstractions, from procedures, objects, actors, components, services, up to agents, by replacing them within a general historical perspective. Some common referential with three axes/dimensions is chosen: action selection at the level of one entity, coupling flexibility between entities, and abstraction level. We indeed may observe some continuous quest for higher flexibility (through notions such as late binding, or reification of connections) and higher level of abstraction. Concepts of components, services and agents have some common objectives (notably, software modularity and reconfigurability), with multi-agent systems raising further concepts of autonomy and coordination, notably through the notion of auto-organization and the use of knowledge. We hope that this analysis helps to highlight some of the basic forces motivating the progress of programming abstractions and therefore that it may provide some seeds for the reflection about future programming abstractions.\n\n{retrieved_text}\n\nGenerate exactly 68 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 68\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Actors: a Model of Concurrent Computation in Distributed Systems\",\n        \"Formal connectors\",\n        \"Making components contract aware\",\n        \"Able: A toolkit for building multiagent autonomic systems\",\n        \"Composants et systèmes multi-agents\",\n        \"A survey of programming languages and platforms for multi-agent systems\",\n        \"Modélisation et classification de langages de programmation concurrente à objets : l’expérience Actalk\",\n        \"An experiment in classification and specialization of synchronization schemes\",\n        \"Composants et agents : évolution de la programmation et analyse comparative\",\n        \"From procedures, objects, actors, components, services, to agents – a comparative analysis of the history and evolution of programming abstractions\",\n        \"A uniform model for object-oriented languages using the class abstraction\",\n        \"Objets pour la programmation parallèle et répartie : Intérêts, évolutions et tendances\",\n        \"Concurrency and distribution in object-oriented programming\",\n        \"Architectural design of component-based agents: A behavior-based approach\",\n        \"An open component model and its support in Java\",\n        \"Toward a method of object-oriented concurrent programming\",\n        \"Covariance and contravariance: Conflict without a cause\",\n        \"Services Web avec SOAP, WSDL, UDDI, et XML\",\n        \"A survey of context-aware mobile computing research\",\n        \"Metaclasses are first class: The ObjVlisp model\",\n        \"Meta-Level Architectures and Reflection – Second International Conference, Reflection’99 Saint-Malo, France, July 19-21, 1999 Proceedings\",\n        \"Context is key\",\n        \"A classification framework for software component models\",\n        \"Ambient references: Addressing objects in mobile networks\",\n        \"Applying an agent-oriented methodology to the design of artificial organisations: a case study in robotic soccer\",\n        \"Vers l’auto-adaptabilité des architectures logicielles dans les environnements ouverts distribués\",\n        \"The many faces of publish/subscribe\",\n        \"A meta-model for the analysis and design of organizations in multi-agent systems\",\n        \"KQML as an agent communication language\",\n        \"Agent Communication Language Specifications (accessed: 13/08/2021)\",\n        \"Foundation for Intelligent Physical Agents (accessed: 13/08/2021)\",\n        \"Object-based concurrent programming and distributed artificial intelligence\",\n        \"Agents and concurrent objects\",\n        \"Coordination languages and their significance\",\n        \"The belief-desire-intention model of agency\",\n        \"An outlook on software engineering for modern distributed systems\",\n        \"Viewing control structures as patterns of passing messages\",\n        \"Developing organised multiagent systems using the MOISE+ model: programming issues at the system and agent levels\",\n        \"RoboCup (accessed: 13/08/2021)\",\n        \"Dynamic linking and environment initialization in a multi-domain process\",\n        \"Introduction to actors and agents\",\n        \"The Art of the Metaobject Protocol\",\n        \"Software component models\",\n        \"Object-Oriented Software Construction\",\n        \"Applying design by contract\",\n        \"The agent architecture InteRRaP: Concept and application\",\n        \"Open composite services architecture (CSA)\",\n        \"Web services business process execution language (BPEL)\",\n        \"Objects and agents compared\",\n        \"Programming in Scala\",\n        \"Common object request broker architecture (CORBA)\",\n        \"Corba component model (CCM)\",\n        \"Model driven architecture (MDA)\",\n        \"Artifacts in the A&A meta-model for multi-agent systems\",\n        \"Web Services & SOA, Principles and Technology, Second Edition\",\n        \"Web services from an agent perspective\",\n        \"Objets, classes et héritage : Définitions\",\n        \"Software Architectures – Perspective on an Emerging Discipline\",\n        \"Agent oriented programming\",\n        \"Using UML 2.0 activity diagram to model agent plans and actions\",\n        \"The contract net protocol: High-level communication and control in a distributed problem solver\",\n        \"Automated component-based configuration: Promises and fallacies\",\n        \"Javabeans specification\",\n        \"Component software: beyond object-oriented programming\",\n        \"World Wide Web Consortium (accessed: 13/08/2021)\",\n        \"Environments for multiagent systems – state-of-the-art and research challenges\",\n        \"Object-oriented concurrent programming in ABCL/1\",\n        \"From Animals to Animats 12 – 12th International Conference on Simulation of Adaptive Behavior, SAB 2012, Odense, Denmark, August 2012, Proceedings\"\n    ],\n    \"reasoning\": \"Selected these 68 references because they represent foundational work and recent advances in From Procedures, Objects, Actors, Components, Services, to Agents – A Comparative Analysis of the History and Evolution of Programming Abstractions, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}