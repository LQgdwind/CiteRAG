{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 54 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Sample-and-Gather: Fast Ruling Set Algorithms in the Low-Memory MPC Model\n\nPaper Abstract: Abstract Motivated by recent progress on symmetry breaking problems such as maximal independent set (MIS) and maximal matching in the low-memory Massively Parallel Computation (MPC) model (e.g., Behnezhad et al. PODC 2019; Ghaffari-Uitto SODA 2019), we investigate the complexity of ruling set problems in this model. The MPC model has become very popular as a model for large-scale distributed computing and it comes with the constraint that the memory-per-machine is strongly sublinear in the input size. For graph problems, extremely fast MPC algorithms have been designed assuming Ω~​(n)~Ω𝑛\\tilde{\\Omega}(n) memory-per-machine, where n𝑛n is the number of nodes in the graph (e.g., the O​(log⁡log⁡n)𝑂𝑛O(\\log\\log n) MIS algorithm of Ghaffari et al., PODC 2018). However, it has proven much more difficult to design fast MPC algorithms for graph problems in the low-memory MPC model, where the memory-per-machine is restricted to being strongly sublinear in the number of nodes, i.e., O​(nε)𝑂superscript𝑛𝜀O(n^{\\varepsilon}) for 0<ε<10𝜀10<\\varepsilon<1. In this paper, we present an algorithm for the 2-ruling set problem, running in O~​(log1/6⁡Δ)~𝑂superscript16Δ\\tilde{O}(\\log^{1/6}\\Delta) rounds whp, in the low-memory MPC model. We then extend this result to β𝛽\\beta-ruling sets for any integer β>1𝛽1\\beta>1. Specifically, we show that a β𝛽\\beta-ruling set can be computed in the low-memory MPC model with O​(nε)𝑂superscript𝑛𝜀O(n^{\\varepsilon}) memory-per-machine in O~​(β⋅log1/(2β+1−2)⁡Δ)~𝑂⋅𝛽superscript1superscript2𝛽12Δ\\tilde{O}(\\beta\\cdot\\log^{1/(2^{\\beta+1}-2)}\\Delta) rounds, whp. From this it immediately follows that a β𝛽\\beta-ruling set for β=Ω​(log⁡log⁡log⁡Δ)𝛽ΩΔ\\beta=\\Omega(\\log\\log\\log\\Delta)-ruling set can be computed in in just O​(β​log⁡log⁡n)𝑂𝛽𝑛O(\\beta\\log\\log n) rounds whp. The above results assume a total memory of O~​(m+n1+ε)~𝑂𝑚superscript𝑛1𝜀\\tilde{O}(m+n^{1+\\varepsilon}). We also present algorithms for β𝛽\\beta-ruling sets in the low-memory MPC model assuming that the total memory over all machines is restricted to O~​(m)~𝑂𝑚\\tilde{O}(m). These algorithms are all substantially faster than the Ghaffari-Uitto O~​(log⁡Δ)~𝑂Δ\\tilde{O}(\\sqrt{\\log\\Delta})-round MIS algorithm in the low-memory MPC model. All our results follow from a Sample-and-Gather Simulation Theorem that shows how random-sampling-based Congest algorithms can be efficiently simulated in the low-memory MPC model. We expect this simulation theorem to be of independent interest beyond the ruling set algorithms derived here.\n\n{retrieved_text}\n\nGenerate exactly 54 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 54\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Access to data and number of iterations: Dual primal algorithms for maximum matching under resource constraints\",\n        \"A fast and simple randomized parallel algorithm for the maximal independent set problem\",\n        \"Parallel algorithms for geometric graph problems\",\n        \"Parallel graph connectivity in log diameter rounds\",\n        \"Parallel approximate undirected shortest paths via low hop emulators\",\n        \"Simple round compression for parallel vertex cover\",\n        \"Sublinear algorithms for (Δ+1)Δ1(\\\\Delta+1) vertex coloring\",\n        \"Distributed and streaming linear programming in low dimensions\",\n        \"Massively parallel algorithms for finding well-connected components in sparse graphs\",\n        \"The locality of distributed symmetry breaking\",\n        \"Skew in parallel query processing\",\n        \"Communication steps for parallel query processing\",\n        \"Massively parallel computation of matching and mis in sparse graphs\",\n        \"Brief announcement: Semi-mapreduce meets congested clique\",\n        \"Exponentially Faster Massively Parallel Maximal Matching\",\n        \"Brief announcement: Super-fast t-ruling sets\",\n        \"Approximating edit distance in truly subquadratic time: Quantum and mapreduce\",\n        \"The complexity of (δ+1)𝛿1(\\\\delta+1) coloring in congested clique, massively parallel computation, and centralized local computation\",\n        \"Unconditional lower bounds for adaptive massively parallel computation\",\n        \"One trillion edges: Graph processing at facebook-scale\",\n        \"Graph Sparsification for Derandomizing Massively Parallel Computation with Low Space\",\n        \"Round compression for parallel matching algorithms\",\n        \"Mapreduce: Simplified data processing on large clusters\",\n        \"An improved distributed algorithm for maximal independent set\",\n        \"Distributed MIS via all-to-all communication\",\n        \"Improved massively parallel computation algorithms for MIS, matching, and vertex cover\",\n        \"Improved MPC Algorithms for MIS, Matching, and Coloring on Trees and Beyond\",\n        \"A massively parallel algorithm for minimum weight vertex cover\",\n        \"Conditional hardness results for massively parallel computation from distributed lower bounds\",\n        \"Sparsifying distributed algorithms with ramifications in massively parallel computation and centralized local computation\",\n        \"Sorting, searching, and simulation in the MapReduce framework\",\n        \"Greedy and local ratio algorithms in the mapreduce model\",\n        \"Lessons from the congested clique applied to mapreduce\",\n        \"Near-constant-time distributed algorithms on a congested clique\",\n        \"Efficient massively parallel methods for dynamic programming\",\n        \"Large-scale distributed algorithms for facility location with outliers\",\n        \"A Model of Computation for MapReduce\",\n        \"Distributed computation of large-scale graph problems\",\n        \"The complexity of symmetry breaking in massive graphs\",\n        \"Super-fast 3-ruling sets\",\n        \"Worst-case optimal algorithms for parallel query processing\",\n        \"What cannot be computed locally!\",\n        \"Local computation: Lower and upper bounds\",\n        \"Filtering: A method for solving graph problems in mapreduce\",\n        \"Locality in distributed graph algorithms\",\n        \"MST construction in o(log log n) communication rounds\",\n        \"A simple parallel algorithm for the maximal independent set problem\",\n        \"Pregel: A system for large-scale graph processing\",\n        \"Congested clique algorithms for graph spanners\",\n        \"Distributed Computing: A Locality-Sensitive Approach\",\n        \"Shuffles and circuits (on lower bounds for modern parallel computation)\",\n        \"Polylogarithmic-time deterministic network decomposition and distributed derandomization\",\n        \"Parallel Algorithms for Small Subgraph Counting\",\n        \"Massively parallel algorithms and hardness for single-linkage clustering under ℓpsubscriptℓp{\\\\ell}_{\\\\mbox{p}} distances\"\n    ],\n    \"reasoning\": \"Selected these 54 references because they represent foundational work and recent advances in Sample-and-Gather: Fast Ruling Set Algorithms in the Low-Memory MPC Model, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}