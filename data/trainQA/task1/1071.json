{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 50 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: SeMPE: Secure Multi Path Execution Architecture for Removing Conditional Branch Side Channels\n\nPaper Abstract: Abstract One of the most prevalent source of side channel vulnerabilities is the secret-dependent behavior of conditional branches (SDBCB). The state-of-the-art solution relies on Constant-Time Expressions, which require high programming effort and incur high performance overheads. In this paper, we propose SeMPE, an approach that relies on architecture support to eliminate SDBCB without requiring much programming effort while incurring low performance overheads. The key idea is that when a secret-dependent branch is encountered, the SeMPE microarchitecture fetches, executes, and commits both paths of the branch, preventing the adversary from inferring secret values from the branching behavior of the program. To enable that, SeMPE relies on an architecture that is capable of safely executing both branch paths sequentially. Through microbenchmarks and an evaluation of a real-world library, we show that SeMPE incurs near ideal execution time overheads, which is the sum of the execution time of all branch paths of secret-dependent branches. SeMPE outperforms code generated by FaCT, a constant-time expression language, by up to a factor of 18×18\\times.\n\n{retrieved_text}\n\nGenerate exactly 50 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 50\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"868948 - a patch for nss: a constant-time implementation of the ghash function of aes-gcm, for processors that do not have the aes-ni/pclmulqdq\",\n        \"Added more constant-time code / removed biases in the prime number generation routines\",\n        \"Aes timing attack countermeasures\",\n        \"AMD64 Architecture Programmer’s Manual Volume 3: General Purpose and System Instructions\",\n        \"Bearssl\",\n        \"Coding rules\",\n        \"Libjpeg Library\",\n        \"Software Optimization Guide for AMD Family 17h Models 30h and Greater Processors\",\n        \"Why not use ‘¡‘, ‘¿‘ or ‘==‘ in constant time comparison?\",\n        \"X86 Opcode and Instruction Reference\",\n        \"Predicting Secret Keys via Branch Prediction\",\n        \"Verifying constant-time implementations\",\n        \"Dual path instruction processing\",\n        \"A Survey of Known Results and Research Areas for N-queens\",\n        \"Cache-timing attacks on AES\",\n        \"The gem5 simulator\",\n        \"Remote timing attacks are practical\",\n        \"FaCT: A Flexible, Constant-Time Programming Language\",\n        \"Fact: A dsl for timing-sensitive computation\",\n        \"Intel 64 and IA-32 Architectures Software Developer’s Manual\",\n        \"Lucky Thirteen: Breaking the TLS and DTLS Record Protocols\",\n        \"Towards a Theory of Software Protection and Simulation by Oblivious RAMs\",\n        \"Software protection and simulation on oblivious rams\",\n        \"Processor microarchitecture: An implementation perspective\",\n        \"Selective Dual Path Execution\",\n        \"Algorithm 63 partition; algorithm 64 quicksort; algorithm 65 find\",\n        \"Implicit flows: Can’t live with ’em, can’t live without ’em\",\n        \"Spectre attacks: Exploiting speculative execution\",\n        \"Meltdown: Reading Kernel Memory from User Space\",\n        \"GhostRider: A Hardware-Software System for Memory Trace Oblivious Computation\",\n        \"Memory trace oblivious program execution\",\n        \"Side-channel timing attack of rsa on a gpu\",\n        \"Automatic numeric abstractions for heap-manipulating programs\",\n        \"Advanced Compiler Design and Implementation\",\n        \"A decentralized model for information flow control\",\n        \"How to Fake 1000 Registers\",\n        \"Separation logic\",\n        \"Efficient computation on oblivious rams\",\n        \"Cache missing for fun and profit\",\n        \"Oblivious program execution and path-sensitive non-interference\",\n        \"Why Constant-Time Crypto?\",\n        \"Raccoon: Closing Digital Side-Channels through Obfuscated Execution\",\n        \"Sparse representation of implicit flows with applications to side-channel detection\",\n        \"Language-based information-flow security\",\n        \"A new case for the TAGE branch predictor\",\n        \"A 64-Kbytes ITTAGE indirect branch predictor\",\n        \"Principles of secure information flow analysis\",\n        \"Threaded Multiple Path Execution\",\n        \"Implementing fast recovery for register alias table in out-of-order processors\",\n        \"A hardware design language for timing-sensitive information-flow security\"\n    ],\n    \"reasoning\": \"Selected these 50 references because they represent foundational work and recent advances in SeMPE: Secure Multi Path Execution Architecture for Removing Conditional Branch Side Channels, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}