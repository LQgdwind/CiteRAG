{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 57 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Performance bottlenecks detection through microarchitectural sensitivity\n\nPaper Abstract: Abstract. Modern Out-of-Order (OoO) CPUs are complex systems with many components interleaved in non-trivial ways. Pinpointing performance bottlenecks and understanding the underlying causes of program performance issues are critical tasks to make the most of hardware resources. We provide an in-depth overview of performance bottlenecks in recent OoO microarchitectures and describe the difficulties of detecting them. Techniques that measure resources utilization can offer a good understanding of a program’s execution, but, due to the constraints inherent to Performance Monitoring Units (PMU) of CPUs, do not provide the relevant metrics for each use case. Another approach is to rely on a performance model to simulate the CPU behavior. Such a model makes it possible to implement any new microarchitecture-related metric. Within this framework, we advocate for implementing modeled resources as parameters that can be varied at will to reveal performance bottlenecks. This allows a generalization of bottleneck analysis that we call sensitivity analysis. We present Gus, a novel performance analysis tool that combines the advantages of sensitivity analysis and dynamic binary instrumentation within a resource-centric CPU model. We evaluate the impact of sensitivity on bottleneck analysis over a set of high-performance computing kernels.\n\n{retrieved_text}\n\nGenerate exactly 57 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 57\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Performance analysis tools for linux\",\n        \"Intel architecture code analyzer user’s guide\",\n        \"Intel vtune profiler performance analysis cookbook\",\n        \"Intel 64 and ia-32 architectures optimization reference manual, 2023\",\n        \"Llvm machine code analyzer\",\n        \"uops.info: Characterizing latency, throughput, and port usage of instructions on intel microarchitectures\",\n        \"nanobench: A low-overhead tool for running microbenchmarks on x86 systems\",\n        \"Uica: Accurate throughput prediction of basic blocks on recent intel microarchitectures\",\n        \"Facile: Fast, accurate, and interpretable basic-block throughput prediction\",\n        \"Archexplorer: Microarchitecture exploration via bottleneck analysis\",\n        \"Adding virtualization capabilities to the Grid’5000 testbed\",\n        \"Cesasme and staticdeps: static detection of memory-carried dependencies for code analyzers\",\n        \"Qemu, a fast and portable dynamic translator\",\n        \"Pluto: A practical and fully automatic polyhedral parallelizer and locality optimizer\",\n        \"An infrastructure for adaptive dynamic optimization\",\n        \"Chapter 5 - source code transformations and optimizations\",\n        \"An evaluation of high-level mechanistic core models\",\n        \"Cqa: A code quality analyzer tool at binary level\",\n        \"Palmed: Throughput characterization for superscalar architectures\",\n        \"Maqao: Modular assembler quality analyzer and optimizer for itanium 2\",\n        \"Dinero iv trace-driven uniprocessor cache simulator\",\n        \"Dark silicon and the end of multicore scaling\",\n        \"Dinero iv with plru replacement policy support\",\n        \"Program instrumentation with qemu\",\n        \"Exploring performance and power properties of modern multi-core chips via simple machine models\",\n        \"Kerncraft: A tool for analytic performance modeling of loop kernels\",\n        \"On the accuracy and usefulness of analytic energy models for contemporary multicore processors\",\n        \"Gpu code optimization using abstract kernel emulation and sensitivity analysis\",\n        \"Vtune profiler\",\n        \"Efficiently exploring architectural design spaces via predictive modeling\",\n        \"A new measure of rank correlation\",\n        \"pmu tools, intel pmu profiling tools\",\n        \"Quantifying performance bottleneck cost through differential analysis\",\n        \"Core-level performance engineering with the open-source architecture code analyzer (osaca) and the compiler explorer\",\n        \"The gem5 simulator: Version 20.0+\",\n        \"Pin: Building customized program analysis tools with dynamic instrumentation\",\n        \"Differential profiling\",\n        \"Ithemal: Accurate, portable and fast basic block throughput estimation using deep neural networks\",\n        \"The Design and Construction of Flexible and Efficient Interactive Programming Systems\",\n        \"Dynamic Binary Analysis and Instrumentation\",\n        \"Valgrind: A framework for heavyweight dynamic binary instrumentation\",\n        \"PoCC, the polyhedral compiler collection\",\n        \"PolyBench/C: The polyhedral benchmark suite, version 4.2, 2016\",\n        \"Anica: Analyzing inconsistencies in microarchitectural code analyzers\",\n        \"Branch prediction and the performance of interpreters — don’t trust folklore\",\n        \"Zsim: Fast and accurate microarchitectural simulation of thousand-core systems\",\n        \"Full speed ahead: Detailed architectural simulation at near-native speed\",\n        \"The l-tage branch predictor\",\n        \"A 64-kbytes ittage indirect branch predictor\",\n        \"The amd “zen 2” processor\",\n        \"Granite: A graph neural network model for basic block throughput estimation\",\n        \"An efficient algorithm for exploiting multiple arithmetic units\",\n        \"Non-determinism and overcount on modern hardware performance counter implementations\",\n        \"Smarts: accelerating microarchitecture simulation via rigorous statistical sampling\",\n        \"A top-down method for performance analysis and counters architecture\",\n        \"Half&Half: Demystifying Intel’s directional branch predictors for fast, secure partitioned execution\",\n        \"On the precision of precise event based sampling\"\n    ],\n    \"reasoning\": \"Selected these 57 references because they represent foundational work and recent advances in Performance bottlenecks detection through microarchitectural sensitivity, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}