{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 50 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Universal Policies for Software-Defined MDPs\n\nPaper Abstract: Abstract We introduce a new programming paradigm called oracle-guided decision programming in which a program specifies a Markov Decision Process (MDP) and the language provides a universal policy. We prototype a new programming language, Dodona, that manifests this paradigm using a primitive choose representing nondeterministic choice. The Dodona interpreter returns either a value or a choicepoint that includes a lossless encoding of all information necessary in principle to make an optimal decision. Meta-interpreters query Dodona’s (neural) oracle on these choicepoints to get policy and value estimates, which they can use to perform heuristic search on the underlying MDP. We demonstrate Dodona’s potential for zero-shot heuristic guidance by meta-learning over hundreds of synthetic tasks that simulate basic operations over lists, trees, Church datastructures, polynomials, first-order terms and higher-order terms.\n\n{retrieved_text}\n\nGenerate exactly 50 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 50\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Learning to represent programs with graphs\",\n        \"code2seq: Generating sequences from structured representations of code\",\n        \"code2vec: Learning distributed representations of code\",\n        \"State abstraction for programmable reinforcement learning agents\",\n        \"Learning internal representations\",\n        \"Neural code comprehension: A learnable representation of code semantics\",\n        \"Learning to execute programs with instruction pointer attention graph neural networks\",\n        \"Compiler-based graph representations for deep learning models of code\",\n        \"Language models are few-shot learners\",\n        \"Learning many related tasks at the same time with backpropagation\",\n        \"Multitask learning\",\n        \"A literature study of embeddings on source code\",\n        \"Empirical study of transformers for source code\",\n        \"A unified architecture for natural language processing: Deep neural networks with multitask learning\",\n        \"Programl: Graph-based deep learning for program optimization and analysis\",\n        \"Higher-order unification and matching\",\n        \"Pytorch lightning\",\n        \"Church: a language for generative models\",\n        \"Proving equalities in a commutative ring done right in coq\",\n        \"Are deep neural networks the best choice for modeling source code?\",\n        \"Global relational models of source code\",\n        \"Scaling laws for autoregressive generative modeling\",\n        \"Learning distributed representations of concepts\",\n        \"A theory of universal artificial intelligence based on algorithmic complexity\",\n        \"A system of constructor classes: overloading and implicit higher-order polymorphism\",\n        \"Learning and evaluating contextual embedding of source code\",\n        \"Scaling laws for neural language models\",\n        \"Inference compilation and universal probabilistic programming\",\n        \"Machine learning in compilers: Past, present and future\",\n        \"A basis for a mathematical theory of computation\",\n        \"Lisp: a programming system for symbolic manipulations\",\n        \"Machine Learning\",\n        \"Pytorch: An imperative style, high-performance deep learning library\",\n        \"Report on the programming language haskell, a non-strict purely-functional programming language\",\n        \"Neurally-guided procedural models: Amortized inference for procedural graphics programs using neural networks\",\n        \"Representing programs with dependency and function call graphs for learning hierarchical embeddings\",\n        \"Learning a SAT solver from single-bit supervision\",\n        \"Screamer: A portable efficient implementation of nondeterministic common lisp\",\n        \"A formal theory of inductive inference. part i.\",\n        \"A formal theory of inductive inference. part ii.\",\n        \"Scheme: A interpreter for extended lambda calculus\",\n        \"Learning to learn\",\n        \"Attention is all you need\",\n        \"Ir2vec: Llvm ir based scalable program embeddings\",\n        \"Evaluating semantic representations of source code\",\n        \"Dynamic neural program embedding for program repair\",\n        \"A survey of zero-shot learning: Settings, methods, and applications\",\n        \"Modular tree network for source code representation learning\",\n        \"Non-deterministic lisp with dependency-directed backtracking\",\n        \"A survey on multi-task learning\"\n    ],\n    \"reasoning\": \"Selected these 50 references because they represent foundational work and recent advances in Universal Policies for Software-Defined MDPs, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}