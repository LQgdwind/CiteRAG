{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 45 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Recover as It is Designed to Be: Recovering from Compatibility Mobile App Crashes by Reusing User Flows\n\nPaper Abstract: Abstract. Android OS is severely fragmented by API updates and device vendors’ OS customization, creating a market condition where vastly different OS versions coexist. This gives rise to compatibility crash problems where Android apps crash on certain Android versions but not on others. Although well-known, this problem is extremely challenging for app developers to overcome due to the sheer number of Android versions in the market that must be tested. We present RecoFlow, a framework for enabling app developers to automatically recover an app from a crash by programming user flows with our API and visual tools. RecoFlow tracks app feature usage with the user flows on user devices and recovers an app from a crash by replaying UI actions of the app feature disrupted by the crash. To prevent recurring compatibility crashes, RecoFlow executes a previously crashed app in compatibility mode that is enabled by our novel Android OS virtualization technique. Our evaluation with professional Android developers shows that our API and tools are easy to use and effective in recovering from compatibility crashes.\n\n{retrieved_text}\n\nGenerate exactly 45 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 45\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Mozilla case study—lucid.\",\n        \"Number of monthly android app releases worldwide 2023—statista.\",\n        \"Android statistics (2021).\",\n        \"Understanding user journey vs. user flow—adobe xd ideas.\",\n        \"Crash-free session benchmarks for mobile apps—instabug.\",\n        \"Acceptable mobile app crash rate & percentage—qualitrix.\",\n        \"App development cost breakdown 2023—mobiversal.\",\n        \"There are now more than 24,000 different android devices — quartz.\",\n        \"Taming Android fragmentation: characterizing and detecting compatibility issues for Android apps.\",\n        \"F-droid.\",\n        \"Github.\",\n        \"PIVOT: Learning API-Device Correlations to Facilitate Android Compatibility Issue Detection.\",\n        \"CiD: automating the detection of API-related compatibility issues in Android apps.\",\n        \"Criu.\",\n        \"How to identify user search intent using ai and machine learning - algolia blog—algolia blog.\",\n        \"Analytics.\",\n        \"Rum android data collected.\",\n        \"Ui/application exerciser monkey—android developers.\",\n        \"Recdroid: Automatically reproducing android application crashes from bug reports.\",\n        \"Toward automatic generation of novice user test scripts.\",\n        \"X-Droid: A Quick and Easy Android Prototyping Framework with a Single-App Illusion.\",\n        \"Selenium.\",\n        \"SemanticOn: Specifying Content-Based Semantic Conditions for Web Automation Programs.\",\n        \"CoScripter: automating & sharing how-to knowledge in the enterprise.\",\n        \"SUGILITE: Creating Multimodal Smartphone Automation by Demonstration.\",\n        \"Koala: capture, share, automate, personalize business processes on the web.\",\n        \"Gifdroid: Automated replay of visual bug reports for android apps.\",\n        \"Automatically translating bug reports into test cases for mobile apps.\",\n        \"Sunzxyong/recovery: a crash recovery framework.\",\n        \"osama-raddad/firecrasher: Firecrasher is a uncaught exceptions recovery library for android.\",\n        \"Failsafe - fault tolerance and resilience patterns for the jvm.\",\n        \"mmin18/safelooper: Safelooper catches unexpected exceptions in android applications to avoid showing force close dialog.\",\n        \"rerlanggas/exceptionhandler: Simple library for intent to destination activity when apps force close.\",\n        \"Jessyancoding/rxerrorhandler: Error handle of rxjava.\",\n        \"Rx: Treating Bugs As Allergies— A Safe Method to Survive Software Failures.\",\n        \"Understanding shims—microsoft docs.\",\n        \"Firebase crashlytics—a powerful android and ios crash reporting solution.\",\n        \"Qemu.\",\n        \"Kvm.\",\n        \"chroot invocation (gnu coreutils 9.0).\",\n        \"French calendar.\",\n        \"Androidx biometric library bug report #170406186.\",\n        \"Androidx fragment library bug report #186012452.\",\n        \"Android developers blog.\",\n        \"Ramdisk partitions—android open source project.\"\n    ],\n    \"reasoning\": \"Selected these 45 references because they represent foundational work and recent advances in Recover as It is Designed to Be: Recovering from Compatibility Mobile App Crashes by Reusing User Flows, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}