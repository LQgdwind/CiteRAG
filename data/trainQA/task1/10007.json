{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 57 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Co-Optimizing Cache Partitioning and Multi-Core Task Scheduling: Exploit Cache Sensitivity or Not?\n\nPaper Abstract: Abstract Cache partitioning techniques have been successfully adopted to mitigate interference among concurrently executing real-time tasks on multi-core processors. Considering that the execution time of a cache-sensitive task strongly depends on the cache available for it to use, co-optimizing cache partitioning and task allocation improves the systemâ€™s schedulability. In this paper, we propose a hybrid multi-layer design space exploration technique to solve this multi-resource management problem. We explore the interplay between cache partitioning and schedulability by systematically interleaving three optimization layers, viz., (i) in the outer layer, we perform a breadth-first search combined with proactive pruning for cache partitioning; (ii) in the middle layer, we exploit a first-fit heuristic for allocating tasks to cores; and (iii) in the inner layer, we use the well-known recurrence relation for the schedulability analysis of non-preemptive fixed-priority (NP-FP) tasks in a uniprocessor setting. Although our focus is on NP-FP scheduling, we evaluate the flexibility of our framework in supporting different scheduling policies (NP-EDF, P-EDF) by plugging in appropriate analysis methods in the inner layer. Experiments show that, compared to the state-of-the-art techniques, the proposed framework can improve the real-time schedulability of NP-FP task sets by an average of 15.2% with a maximum improvement of 233.6% (when tasks are highly cache-sensitive) and a minimum of 1.6% (when cache sensitivity is low). For such task sets, we found that clustering similar-period (or mutually compatible) tasks often leads to higher schedulability (on average 7.6%) than clustering by cache sensitivity. In our evaluation, the framework also achieves good results for preemptive and dynamic-priority scheduling policies.\n\n{retrieved_text}\n\nGenerate exactly 57 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 57\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Exploring locking & partitioning for predictable shared caches on multi-cores\",\n        \"Making shared caches more predictable on multicore platforms\",\n        \"Real-time cache management framework for multi-core architectures\",\n        \"Deterministic memory hierarchy and virtualization for modern multi-core embedded systems\",\n        \"Holistic resource allocation for multicore real-time systems\",\n        \"Semi-partitioned hard-real-time scheduling under locked cache migration in multicore systems\",\n        \"An empirical comparison of global, partitioned, and clustered multiprocessor EDF schedulers\",\n        \"A real-time scratchpad-centric OS with predictable inter/intra-core communication for multi-core embedded systems\",\n        \"Controller area network (CAN) schedulability analysis: Refuted, revisited and revised\",\n        \"IA3: An interference aware allocation algorithm for multicore hard real-time systems\",\n        \"PDPA: Period driven task and cache partitioning algorithm for multi-core systems\",\n        \"Optimizing tunable WCET with shared resource allocation and arbitration in hard real-time multicore systems\",\n        \"Coordinated bank and cache coloring for temporal protection of memory accesses\",\n        \"Static task partitioning for locked caches in multicore real-time systems\",\n        \"Cache sharing and isolation tradeoffs in multicore mixed-criticality systems\",\n        \"Attacking the one-out-of-m multicore problem by combining hardware management with mixed-criticality provisioning\",\n        \"Simultaneous multithreading in mixed-criticality real-time systems\",\n        \"Automatic cache partitioning and time-triggered scheduling for real-time MPSoCs\",\n        \"Improved cache related pre-emption delay aware response time analysis for fixed priority pre-emptive systems\",\n        \"Impact of cache partitioning on multi-tasking real time embedded systems\",\n        \"On the effectiveness of cache partitioning in hard real-time systems\",\n        \"Minimizing cache usage for real-time systems\",\n        \"A coordinated approach for practical os-level cache management in multi-core real-time systems\",\n        \"Real-time cache management for multi-core virtualization\",\n        \"Cache interference-aware task partitioning for non-preemptive real-time multi-core systems\",\n        \"DNA: Dynamic resource allocation for soft real-time multicore systems\",\n        \"Flexible cache partitioning for multi-mode real-time systems\",\n        \"Multi-mode on multi-core: Making the best of both worlds with omni\",\n        \"ZCU 102 MPSoC TRM\",\n        \"Xavier TRM\",\n        \"Cache Allocation Technology\",\n        \"Arm architecture reference manual supplement. memory system resource partitioning and monitoring (MPAM) for armv8-a\",\n        \"Controller-aware memory coloring for multicore real-time systems\",\n        \"Memory bank partitioning for fixed-priority tasks in a multi-core system\",\n        \"PALLOC: DRAM bank-aware memory allocator for performance isolation on multicore platforms\",\n        \"MemGuard: Memory bandwidth reservation system for efficient performance isolation in multi-core platforms\",\n        \"Run-time control to increase task parallelism in mixed-critical systems\",\n        \"A predictable execution model for COTS-based embedded systems\",\n        \"Predictable execution model: Concept and implementation\",\n        \"Predictable flight management system implementation on a multicore processor\",\n        \"Exact response time analysis for fixed priority memory-processor co-scheduling\",\n        \"Schedulability analysis for 3-phase tasks with partitioned fixed-priority scheduling\",\n        \"The partitioned multiprocessor scheduling of sporadic task systems\",\n        \"borglab/gtsam\",\n        \"VLFeat: An open and portable library of computer vision algorithms\",\n        \"The OpenCV Library\",\n        \"Benchmarking motion planning algorithms: An extensible infrastructure for analysis and visualization\",\n        \"OTAWA: An open toolbox for adaptive WCET analysis\",\n        \"aiT: Worst-case execution time prediction by static program analysis\",\n        \"Chronos: A timing analyzer for embedded software\",\n        \"WCET analysis of probabilistic hard real-time systems\",\n        \"A framework for the evaluation of measurement-based timing analyses\",\n        \"Deterministic memory abstraction and supporting multicore system architecture\",\n        \"The potential of programmable logic in the middle: Cache bleaching\",\n        \"Techniques for the synthesis of multiprocessor tasksets\",\n        \"On non-preemptive scheduling of periodic and sporadic tasks\",\n        \"Scheduling algorithms for multiprogramming in a hard-real-time environment\"\n    ],\n    \"reasoning\": \"Selected these 57 references because they represent foundational work and recent advances in Co-Optimizing Cache Partitioning and Multi-Core Task Scheduling: Exploit Cache Sensitivity or Not?, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}