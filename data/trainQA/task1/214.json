{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 55 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Meuzz: Smart Seed Scheduling for Hybrid Fuzzing\n\nPaper Abstract: Abstract Seed scheduling highly impacts the yields of hybrid fuzzing. Existing hybrid fuzzers schedule seeds based on fixed heuristics that aim to predict input utilities. However, such heuristics are not generalizable as there exists no one-size-fits-all rule applicable to different programs. They may work well on the programs from which they were derived, but not others. To overcome this problem, we design a Machine learning-Enhanced hybrid fUZZing system (Meuzz), which employs supervised machine learning for adaptive and generalizable seed scheduling. Meuzz determines which new seeds are expected to produce better fuzzing yields based on the knowledge learned from past seed scheduling decisions made on the same or similar programs. Meuzz extracts a series of features for learning via code reachability and dynamic analysis, which incurs negligible runtime overhead (in microseconds). Meuzz automatically infers the data labels by evaluating the fuzzing performance of each selected seed. As a result, Meuzz is generally applicable to, and performs well on, various kinds of programs. Our evaluation shows Meuzz significantly outperforms the state-of-the-art grey-box and hybrid fuzzers, achieving 27.1% more code coverage than QSYM. The learned models are reusable and transferable, which boosts fuzzing performance by 7.1% on average and improves 68% of the 56 cross-program fuzzing campaigns. When fuzzing 8 well-tested programs under the same configurations as used in previous work, Meuzz discovered 47 deeply hidden and previously unknown bugs, among which 21 were confirmed and fixed by the developers.\n\n{retrieved_text}\n\nGenerate exactly 55 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 55\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Addresssanitizer\",\n        \"Afl technical details\",\n        \"angr/tracer: Utilities for generating dynamic traces\",\n        \"Announcing oss-fuzz: Continuous fuzzing for open source software\",\n        \"Binutils test cases\",\n        \"Darpa cyber grand challenge\",\n        \"Leaksanitizer\",\n        \"libfuzzer â€“ a library for coverage-guided fuzz testing\",\n        \"Libjpeg test cases\",\n        \"Libtiff test cases\",\n        \"Libxml test cases\",\n        \"Oss-fuzz - continuous fuzzing for open source software\",\n        \"Qsym: A practical concolic execution engine tailored for hybrid fuzzing\",\n        \"Tcpdump test cases\",\n        \"Undefined behavior sanitizer - clang 9 documentation\",\n        \"When does deep learning work better than svms or random forests?\",\n        \"Cyber grand shellphish\",\n        \"Bandit problems: sequential allocation of experiments (monographs on statistics and applied probability)\",\n        \"Coverage-based greybox fuzzing as markov chain\",\n        \"Deep reinforcement fuzzing\",\n        \"Online learning and stochastic approximations\",\n        \"Classification and regression trees\",\n        \"Klee: Unassisted and automatic generation of high-coverage tests for complex systems programs\",\n        \"Angora: Efficient fuzzing by principled search\",\n        \"Savior: Towards bug-driven hybrid testing\",\n        \"Rebucket: A method for clustering duplicate crash reports based on call stack similarity\",\n        \"Lava: Large-scale automated vulnerability addition\",\n        \"Do we need hundreds of classifiers to solve real world classification problems?\",\n        \"Automated whitebox fuzz testing\",\n        \"Learn&#38;fuzz: Machine learning for input fuzzing\",\n        \"The unreasonable effectiveness of data\",\n        \"Evaluating fuzz testing\",\n        \"american fuzzy lop\",\n        \"Fairfuzz: Targeting rare branches to rapidly increase greybox fuzz testing coverage\",\n        \"Vuldeepecker: A deep learning-based system for vulnerability detection\",\n        \"Foundations of Machine Learning\",\n        \"Clever: Combining code metrics with clone detection for just-in-time fault prevention and resolution in large industrial projects\",\n        \"A survey on transfer learning\",\n        \"T-fuzz: fuzzing by program transformation\",\n        \"Not all bytes are equal: Neural byte sieve for fuzzing\",\n        \"Vuzzer: Application-aware evolutionary fuzzing\",\n        \"A review of machine learning applications in fuzzing\",\n        \"A simple neural network module for relational reasoning\",\n        \"All you ever wanted to know about dynamic taint analysis and forward symbolic execution (but might have been afraid to ask)\",\n        \"Addresssanitizer: A fast address sanity checker\",\n        \"Understanding machine learning: From theory to algorithms\",\n        \"Neuzz: Efficient fuzzing with neural program smoothing\",\n        \"Memorysanitizer: fast detector of uninitialized memory use in c++\",\n        \"Driller: Augmenting fuzzing through selective symbolic execution\",\n        \"Svf: interprocedural static value-flow analysis in llvm\",\n        \"Scheduling black-box mutational fuzzing\",\n        \"Exploitmeter: Combining fuzzing with machine learning for automated evaluation of software exploitability\",\n        \"Profuzzer: On-the-fly input type probing for better zero-day vulnerability discovery\",\n        \"QSYM : A practical concolic execution engine tailored for hybrid fuzzing\",\n        \"Send hardest problems my way: Probabilistic path prioritization for hybrid fuzzing\"\n    ],\n    \"reasoning\": \"Selected these 55 references because they represent foundational work and recent advances in Meuzz: Smart Seed Scheduling for Hybrid Fuzzing, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}