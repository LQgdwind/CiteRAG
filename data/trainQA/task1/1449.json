{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 64 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: CORAL: COde RepresentAtion Learning with Weakly-Supervised Transformers for Analyzing Data Analysis\n\nPaper Abstract: Abstract Large scale analysis of source code, and in particular scientific source code, holds the promise of better understanding the data science process, identifying analytical best practices, and providing insights to the builders of scientific toolkits. However, large corpora have remained unanalyzed in depth, as descriptive labels are absent and require expert domain knowledge to generate. We propose a novel weakly supervised transformer-based architecture for computing joint representations of code from both abstract syntax trees and surrounding natural language comments. We then evaluate the model on a new classification task for labeling computational notebook cells as stages in the data analysis process from data import to wrangling, exploration, modeling, and evaluation. We show that our model, leveraging only easily-available weak supervision, achieves a 38% increase in accuracy over expert-supplied heuristics and outperforms a suite of baselines. Our model enables us to examine a set of 118,000 Jupyter Notebooks to uncover common data analysis patterns. Focusing on notebooks with relationships to academic articles, we conduct the largest ever study of scientific code and find that notebook composition correlates with the citation count of corresponding papers.\n\n{retrieved_text}\n\nGenerate exactly 64 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 64\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Jupyter notebooks-a publishing format for reproducible computational workflows.\",\n        \"Open Science Framework (OSF)\",\n        \"LibGuides: Citing & publishing software: Publishing research software\",\n        \"Publishing scientific software matters\",\n        \"Paths explored, paths omitted, paths obscured: Decision points & selective reporting in end-to-end data analysis\",\n        \"Exploration and explanation in computational notebooks\",\n        \"Towards understanding data analysis workflows using a large notebook corpus\",\n        \"Better code, better sharing: On the need of analyzing Jupyter notebooks\",\n        \"Better code, better sharing:on the need of analyzing jupyter notebooks\",\n        \"The story in the notebook: Exploratory data science using a literate programming tool\",\n        \"Enterprise data analysis and visualization: An interview study\",\n        \"Goals, process, and challenges of exploratory data analysis: An interview study\",\n        \"Futzing and moseying: Interviews with professional data analysts on exploration practices\",\n        \"Software engineering for computational science: Past, present, future\",\n        \"Variolite: Supporting exploratory programming by data scientists\",\n        \"Trials and tribulations of developers of intelligent systems: A field study\",\n        \"Attention is all you need\",\n        \"On the naturalness of software\",\n        \"On the localness of software\",\n        \"A statistical semantic language model for source code\",\n        \"Mining source code repositories at massive scale using language modeling\",\n        \"Code completion with statistical language models\",\n        \"Modeling high-level behavior patterns for precise similarity analysis of software\",\n        \"Natural language models for predicting programming comments\",\n        \"Phog: probabilistic model for code\",\n        \"A general path-based representation for predicting program properties\",\n        \"Code completion with neural attention and pointer networks\",\n        \"Learning to represent programs with graphs\",\n        \"Higitclass: Keyword-driven hierarchical classification of github repositories\",\n        \"code2vec: Learning distributed representations of code\",\n        \"Learning natural coding conventions\",\n        \"Mining api patterns as partial orders from source code: from usage scenarios to specifications\",\n        \"Exploring api embedding for api usages and applications\",\n        \"Snorkel: Rapid training data creation with weak supervision\",\n        \"Inductive representation learning on large graphs\",\n        \"Semi-supervised classification with graph convolutional networks\",\n        \"Domain-adversarial graph neural networks for text classification\",\n        \"Modeling relational data with graph convolutional networks\",\n        \"Link prediction based on graph neural networks\",\n        \"Convolutional neural networks on graphs with fast localized spectral filtering\",\n        \"Hierarchical graph representation learning with differentiable pooling\",\n        \"Discriminative embeddings of latent variable models for structured data\",\n        \"Convolutional networks on graphs for learning molecular fingerprints\",\n        \"The graph neural network model\",\n        \"Relational inductive biases, deep learning, and graph networks\",\n        \"Structured neural summarization\",\n        \"Generative code modeling with graphs\",\n        \"Graph attention networks\",\n        \"Characterizing architecturally significant requirements\",\n        \"Jetbrains data science in 2018.\",\n        \"Jupyter frontends: From the classic jupyter notebook to jupyterlab, nteract, and beyond.\",\n        \"The measurement of observer agreement for categorical data\",\n        \"Neural message passing for quantum chemistry\",\n        \"BERT: Pre-training of deep bidirectional transformers for language understanding\",\n        \"Layer normalization\",\n        \"Wsabie: Scaling up to large vocabulary image annotation\",\n        \"Grounded compositional semantics for finding and describing images with sentences\",\n        \"Feuding families and former friends: Unsupervised learning for dynamic fictional relationships\",\n        \"An unsupervised neural attention model for aspect extraction\",\n        \"Latent dirichlet allocation\",\n        \"Distributed representations of words and phrases and their compositionality\",\n        \"Codebert: A pre-trained model for programming and natural languages\",\n        \"Pre-trained contextual embedding of source code\",\n        \"S2ORC: The Semantic Scholar Open Research Corpus\"\n    ],\n    \"reasoning\": \"Selected these 64 references because they represent foundational work and recent advances in CORAL: COde RepresentAtion Learning with Weakly-Supervised Transformers for Analyzing Data Analysis, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}