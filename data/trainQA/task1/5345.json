{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 50 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: RoPGen: Towards Robust Code Authorship Attribution via Automatic Coding Style Transformation\n\nPaper Abstract: Abstract. Source code authorship attribution is an important problem often encountered in applications such as software forensics, bug fixing, and software quality analysis. Recent studies show that current source code authorship attribution methods can be compromised by attackers exploiting adversarial examples and coding style manipulation. This calls for robust solutions to the problem of code authorship attribution. In this paper, we initiate the study on making Deep Learning (DL)-based code authorship attribution robust. We propose an innovative framework called Robust coding style Patterns Generation (RoPGen), which essentially learns authors‚Äô unique coding style patterns that are hard for attackers to manipulate or imitate. The key idea is to combine data augmentation and gradient augmentation at the adversarial training phase. This effectively increases the diversity of training examples, generates meaningful perturbations to gradients of deep neural networks, and learns diversified representations of coding styles. We evaluate the effectiveness of RoPGen using four datasets of programs written in C, C++, and Java. Experimental results show that RoPGen can significantly improve the robustness of DL-based code authorship attribution, by respectively reducing 22.8% and 41.0% of the success rate of targeted and untargeted attacks on average.\n\n{retrieved_text}\n\nGenerate exactly 50 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 50\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Large-Scale and Language-Oblivious Code Authorship Identification\",\n        \"Large-scale and Robust Code Authorship Identification with Deep Feature Learning\",\n        \"Multi-œáùúí\\\\chi: Identifying Multiple Authors from Source Code Files\",\n        \"Code Authorship Identification Using Convolutional Neural Networks\",\n        \"Adversarial Deep Learning for Robust Detection of Binary Encoded Malware\",\n        \"code2vec: Learning Distributed Representations of Code\",\n        \"Source Code Authorship Attribution Using Long Short-Term Memory Based Networks\",\n        \"Who Should Fix This Bug?\",\n        \"Recent Advances in Adversarial Training for Adversarial Robustness\",\n        \"Adversarial Robustness for Code\",\n        \"Authorship Attribution of Source Code: A Language-Agnostic Approach and Applicability in Software Engineering\",\n        \"Source Code Authorship Attribution Using n-grams\",\n        \"Efficient Plagiarism Detection for Large Code Repositories\",\n        \"Comparing Techniques for Authorship Attribution of Source Code\",\n        \"On Training Robust PDF Malware Classifiers\",\n        \"Git Blame Who?: Stylistic Authorship Attribution of Small, Incomplete Source Code Fragments\",\n        \"Extraction of Java program fingerprints for software authorship identification\",\n        \"Benchmarking Adversarial Robustness on Image Classification\",\n        \"Effective Identification of Source Code Authors Using Byte-level Information\",\n        \"Fuzz Testing Based Data Augmentation to Improve Robustness of Deep Neural Networks\",\n        \"De-anonymizing Programmers via Code Stylometry\",\n        \"Code Authorship Attribution: Methods and Challenges\",\n        \"Authorship Analysis: Identifying the Author of a Program\",\n        \"Using Code Metric Histograms and Genetic Algorithms to Perform Author Identification for Software Forensics\",\n        \"SoK: Arms Race in Adversarial Malware Detection\",\n        \"A Framework for Enhancing Deep Neural Networks Against Adversarial Malware\",\n        \"TextBugger: Generating Adversarial Text Against Real-world Applications\",\n        \"A Practical Black-box Attack on Source Code Authorship Identification Classifiers\",\n        \"Towards Deep Learning Models Resistant to Adversarial Attacks\",\n        \"Adversarial Robustness against the Union of Multiple Perturbation Models\",\n        \"Adversarial Authorship Attribution in Open-Source Projects\",\n        \"Style Counsel: Seeing the (Random) Forest for the Trees in Adversarial Code Stylometry\",\n        \"Using Classification Techniques to Determine Source Code Authorship\",\n        \"Misleading Authorship Attribution of Source Code using Adversarial Learning\",\n        \"Ownership, Experience and Defects: A Fine-grained Study of Authorship\",\n        \"Semantic Robustness of Models of Source Code\",\n        \"Towards the First Adversarially Robust Neural Network Model on MNIST\",\n        \"Adversarial Training for Free!\",\n        \"Recognizing and Imitating Programmer Style: Adversaries in Program Authorship Attribution\",\n        \"STRATA: Building Robustness with a Simple Method for Generating Black-box Adversarial Attacks for Models of Code\",\n        \"Generating Adversarial Computer Programs Using Optimized Obfuscations\",\n        \"Revisiting Code Ownership and Its Relationship with Software Quality in the Scope of Modern Code Review\",\n        \"Source Code Authorship Attribution Using Hybrid Approach of Program Dependence Graph and Deep Learning Model\",\n        \"Towards a Robust Deep Neural Network in Texts: A Survey\",\n        \"Fast is Better than Free: Revisiting Adversarial Training\",\n        \"GradAug: A New Regularization Method for Deep Neural Networks\",\n        \"Authorship Attribution of Source Code by Using Back Propagation Neural Network Based on Particle Swarm Optimization\",\n        \"Adversarial Examples for Models of Code\",\n        \"Generating Adversarial Examples for Holding Robustness of Source Code Processing Models\",\n        \"Robustness to Programmable String Transformations via Augmented Abstract Training\"\n    ],\n    \"reasoning\": \"Selected these 50 references because they represent foundational work and recent advances in RoPGen: Towards Robust Code Authorship Attribution via Automatic Coding Style Transformation, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}