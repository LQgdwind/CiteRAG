{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 60 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Embedding API Dependency Graph for Neural Code Generation\n\nPaper Abstract: Abstract The problem of code generation from textual program descriptions has long been viewed as a grand challenge in software engineering. In recent years, many deep learning based approaches have been proposed, which can generate a sequence of code from a sequence of textual program description. However, the existing approaches ignore the global relationships among API methods, which are important for understanding the usage of APIs. In this paper, we propose to model the dependencies among API methods as an API dependency graph (ADG) and incorporate the graph embedding into a sequence-to-sequence (Seq2Seq) model. In addition to the existing encoder-decoder structure, a new module named “embedder” is introduced. In this way, the decoder can utilize both global structural dependencies and textual program description to predict the target code. We conduct extensive code generation experiments on three public datasets and in two programming languages (Python and Java). Our proposed approach, called ADG-Seq2Seq, yields significant improvements over existing state-of-the-art methods and maintains its performance as the length of the target code increases. Extensive ablation tests show that the proposed ADG embedding is effective and outperforms the baselines.\n\n{retrieved_text}\n\nGenerate exactly 60 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 60\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Latent predictor networks for code generation\",\n        \"Retrieval-based neural code generation\",\n        \"A syntactic neural model for general-purpose code generation\",\n        \"A grammar-based structural cnn decoder for code generation\",\n        \"Treegen: A tree-based transformer architecture for code generation\",\n        \"Abstract syntax networks for code generation and semantic parsing\",\n        \"On end-to-end program generation from user intention by deep neural networks\",\n        \"Convolutional neural networks over tree structures for programming language processing\",\n        \"Language to code: Learning semantic parsers for if-this-then-that recipes\",\n        \"Language to logical form with neural attention\",\n        \"Sequence to sequence learning with neural networks\",\n        \"Convolutional sequence to sequence learning\",\n        \"Multi-task sequence to sequence learning\",\n        \"Learning phrase representations using rnn encoder–decoder for statistical machine translation\",\n        \"Attention-based multimodal neural machine translation\",\n        \"Incorporating word reordering knowledge into attention-based neural machine translation\",\n        \"Neural machine translation by jointly learning to align and translate\",\n        \"Character-based neural machine translation\",\n        \"Summarizing source code with transferred api knowledge\",\n        \"The graph neural network model\",\n        \"Deepwalk: Online learning of social representations\",\n        \"node2vec: Scalable feature learning for networks\",\n        \"Semi-supervised classification with graph convolutional networks\",\n        \"Inductive representation learning on large graphs\",\n        \"Graph attention networks\",\n        \"Codekernel: A graph kernel based approach to the selection of api usage examples\",\n        \"Gated graph sequence neural networks\",\n        \"Learning to represent programs with graphs\",\n        \"Convolutional neural networks over control flow graphs for software defect prediction\",\n        \"Graph matching networks for learning the similarity of graph structured objects\",\n        \"Detecting code clones with graph neural network and flow-augmented abstract syntax tree\",\n        \"Generative code modeling with graphs\",\n        \"A learning algorithm for continually running fully recurrent neural networks\",\n        \"Grid long short-term memory\",\n        \"Show, attend and tell: Neural image caption generation with visual attention\",\n        \"Recurrent models of visual attention\",\n        \"Effective approaches to attention-based neural machine translation\",\n        \"Attention is all you need\",\n        \"Code generation using tree matching and dynamic programming\",\n        \"Neural sketch learning for conditional program generation\",\n        \"Adam: A method for stochastic optimization\",\n        \"Deep code comment generation\",\n        \"Bleu: a method for automatic evaluation of machine translation\",\n        \"Cider: Consensus-based image description evaluation\",\n        \"An information-theoretic approach to automatic evaluation of summaries\",\n        \"Automatic evaluation of translation quality for distant language pairs\",\n        \"Dynamic neural program embedding for program repair\",\n        \"Deep code comment generation with hybrid lexical and syntactical information\",\n        \"Dropout: a simple way to prevent neural networks from overfitting\",\n        \"Understanding the difficulty of training deep feedforward neural networks\",\n        \"lamtram: A toolkit for language and translation modeling using neural networks\",\n        \"Code generation as a dual task of code summarization\",\n        \"Effective training strategies for deep graph neural networks\",\n        \"Automatic generation of pull request descriptions\",\n        \"The kappa statistic in reliability studies: use, interpretation, and sample size requirements\",\n        \"Multi-modal attention network learning for semantic source code retrieval\",\n        \"Novel positional encodings to enable tree-based transformers\",\n        \"A novel neural source code representation based on abstract syntax tree\",\n        \"A similarity-based method retrieval technique to improve effectiveness in code search\",\n        \"Retrieval-based neural source code summarization\"\n    ],\n    \"reasoning\": \"Selected these 60 references because they represent foundational work and recent advances in Embedding API Dependency Graph for Neural Code Generation, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}