{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 55 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Wukong: A Scalable and Locality-Enhanced Framework for Serverless Parallel Computing\n\nPaper Abstract: Abstract. Executing complex, burst-parallel, directed acyclic graph (DAG) jobs poses a major challenge for serverless execution frameworks, which will need to rapidly scale and schedule tasks at high throughput, while minimizing data movement across tasks. We demonstrate that, for serverless parallel computations, decentralized scheduling enables scheduling to be distributed across Lambda executors that can schedule tasks in parallel, and brings multiple benefits, including enhanced data locality, reduced network I/Os, automatic resource elasticity, and improved cost effectiveness. We describe the implementation and deployment of our new serverless parallel framework, called Wukong, on AWS Lambda. We show that Wukong achieves near-ideal scalability, executes parallel computation jobs up to 68.17Ã—68.17\\times faster, reduces network I/O by multiple orders of magnitude, and achieves 92.96%percent92.9692.96\\% tenant-side cost savings compared to numpywren.\n\n{retrieved_text}\n\nGenerate exactly 55 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 55\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"2018 Serverless Community Survey: huge growth in serverless usage\",\n        \"Alibaba Cluster Trace Program (New 2018 Version\",\n        \"Apache Hadoop\",\n        \"Apache OpenWhisk: Open Source Serverless Cloud Platform\",\n        \"AWS Fargate: Serverless compute for containers\",\n        \"AWS Step Functions\",\n        \"Azure Durable Functions Overview\",\n        \"Azure Functions\",\n        \"Dask: Scalable Analytics in Python\",\n        \"Dask: Scalable Machine Learning in Python\",\n        \"Dask Task Graphs\",\n        \"Dask User Interfaces\",\n        \"Developing Convex Optimization Algorithms in Dask parallel: math is fun\",\n        \"Fission Workflows\",\n        \"Google Cloud Functions\",\n        \"HyperFlow: a scientific workflow execution engine\",\n        \"kubernetes: Production-Grade Container Orchestration\",\n        \"MPI Forum\",\n        \"OpenFaaS: Serverless Functions, Made Simple\",\n        \"Scikit-learn Support Vector Machines\",\n        \"Serverless: Build and run applications without thinking about servers\",\n        \"Serverless: Cold Start War\",\n        \"TensorFlow: A System for Large-Scale Machine Learning\",\n        \"{SAND}: Towards High-Performance Serverless Computing\",\n        \"Sprocket: A Serverless Video Processing Framework\",\n        \"The Landscape of Parallel Computing Research: A View from Berkeley\",\n        \"Parsl: Pervasive Parallel Programming in Python\",\n        \"On the FaaS Track: Building Stateful Distributed Applications with Serverless Architectures\",\n        \"DAGuE: A Generic Distributed DAG Engine for High Performance Computing\",\n        \"Cirrus: A Serverless Framework for End-to-end ML Workflows\",\n        \"In Search of a Fast and Efficient Serverless DAG Engine\",\n        \"FuncX: A Federated Function Serving Fabric for Science\",\n        \"Support-Vector Networks\",\n        \"MapReduce: Simplified Data Processing on Large Clusters\",\n        \"Serverless Functions for Kubernetes\",\n        \"From Laptop to Lambda: Outsourcing Everyday Jobs to Thousands of Transient Functional Containers\",\n        \"Encoding, Fast and Slow: Low-Latency Video Processing Using Thousands of Tiny Threads\",\n        \"Why Do Computers Stop And What Can Be Done About It?\",\n        \"Who Limits the Resource Efficiency of My Datacenter: An Analysis of Alibaba Datacenter Traces\",\n        \"Finding structure with randomness: Probabilistic algorithms for constructing approximate matrix decompositions\",\n        \"Serving Deep Learning Models in a Serverless Platform\",\n        \"Occupy the Cloud: Distributed Computing for the 99%\",\n        \"Cloud Programming Simplified: A Berkeley View on Serverless Computing\",\n        \"Pocket: Elastic Ephemeral Storage for Serverless Analytics\",\n        \"Static Scheduling Algorithms for Allocating Directed Task Graphs to Multiprocessors\",\n        \"Comparison of FaaS Orchestration Systems\",\n        \"Serverless execution of scientific workflows: Experiments with HyperFlow, AWS Lambda and Google Cloud Functions\",\n        \"Ray: A Distributed Framework for Emerging AI Applications\",\n        \"Sparrow: Distributed, Low Latency Scheduling\",\n        \"Shuffling, Fast and Slow: Scalable Analytics on Serverless Infrastructure\",\n        \"Omega: Flexible, Scalable Schedulers for Large Compute Clusters\",\n        \"numpywren: serverless linear algebra\",\n        \"InfiniCache: Exploiting Ephemeral Serverless Functions to Build a Cost-Effective Memory Cache\",\n        \"Resilient Distributed Datasets: A Fault-Tolerant Abstraction for In-Memory Cluster Computing\",\n        \"Parallelizing Support Vector Machines on Distributed Computers\"\n    ],\n    \"reasoning\": \"Selected these 55 references because they represent foundational work and recent advances in Wukong: A Scalable and Locality-Enhanced Framework for Serverless Parallel Computing, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}