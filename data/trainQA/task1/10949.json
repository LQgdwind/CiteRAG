{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 51 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: VeriEQL: Bounded Equivalence Verification for Complex SQL Queries with Integrity Constraints\n\nPaper Abstract: Abstract. The task of SQL query equivalence checking is important in various real-world applications (including query rewriting and automated grading) that involve complex queries with integrity constraints; yet, state-of-the-art techniques are very limited in their capability of reasoning about complex features (e.g., those that involve sorting, case statement, rich integrity constraints, etc.) in real-life queries. To the best of our knowledge, we propose the first SMT-based approach and its implementation, VeriEQL, capable of proving and disproving bounded equivalence of complex SQL queries. VeriEQL is based on a new logical encoding that models query semantics over symbolic tuples using the theory of integers with uninterpreted functions. It is simple yet highly practical — our comprehensive evaluation on over 20,000 benchmarks shows that VeriEQL outperforms all state-of-the-art techniques by more than one order of magnitude in terms of the number of benchmarks that can be proved or disproved. VeriEQL can also generate counterexamples that facilitate many downstream tasks (such as finding serious bugs in systems like MySQL and Apache Calcite).\n\n{retrieved_text}\n\nGenerate exactly 51 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 51\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Equivalences among Relational Expressions\",\n        \"Relational Verification Using Product Programs\",\n        \"Simple relational correctness proofs for static analyses and program transformations\",\n        \"A Coq mechanised formal semantics for realistic SQL queries: formally reconciling SQL and bag relational algebra\",\n        \"Calcite Optimization Rules Test Suite\",\n        \"Search-based test data generation for SQL queries\",\n        \"Optimal Implementation of Conjunctive Queries in Relational Data Bases\",\n        \"Automated grading of sql queries\",\n        \"Data generation for testing and grading SQL queries\",\n        \"Comprehending nulls\",\n        \"Optimizing database-backed applications with query synthesis\",\n        \"Demonstration of the cosette automated sql prover\",\n        \"Axiomatic Foundations and Algorithms for Deciding Semantic Equivalences of SQL Queries\",\n        \"Cosette: An Automated Prover for SQL.\",\n        \"HoTTSQL: Proving query rewrites with univalent SQL semantics\",\n        \"A tool for checking ANSI-C programs\",\n        \"DataFiller – generate random data from database schema\",\n        \"JBMC: A bounded model checking tool for verifying Java bytecode\",\n        \"Cosette website\",\n        \"Z3: An Efficient SMT Solver\",\n        \"Fiat: Deductive Synthesis of Abstract Data Types in a Proof Assistant\",\n        \"A Verifier for Interactive, Data-Driven Web Applications\",\n        \"Specification and verification of data-driven Web applications\",\n        \"Deductive optimization of relational data storage\",\n        \"Model checking database applications\",\n        \"The cascades framework for query optimization\",\n        \"Containment of Conjunctive Queries on Annotated Relations\",\n        \"A Formal Semantics of SQL Queries, Its Validation, and Applications\",\n        \"Artifact Evaluation VeriEQL: Bounded Equivalence Verification for Complex SQL Queries with Integrity Constraints\",\n        \"A solver for reachability modulo theories\",\n        \"LeetCode website\",\n        \"Explaining wrong queries using small examples\",\n        \"Translation validation for an optimizing compiler\",\n        \"Formal semantics of SQL queries\",\n        \"Translation Validation\",\n        \"Mixing set and bag semantics\",\n        \"A Formalization of SQL with Nulls\",\n        \"Complex query decorrelation\",\n        \"Generating test data for killing SQL mutants: A constraint-based approach\",\n        \"Cartesian hoare logic for verifying k-safety properties\",\n        \"Equality-Based Translation Validator for LLVM\",\n        \"A lightweight symbolic virtual machine for solver-aided host languages\",\n        \"Full predicate coverage for testing SQL database queries\",\n        \"Qex: Symbolic SQL query explorer\",\n        \"Speeding up symbolic reasoning for relational queries\",\n        \"Verifying Equivalence of Database-Driven Applications\",\n        \"Synthesizing database programs for schema refactoring\",\n        \"Data Migration using Datalog Program Synthesis\",\n        \"CoVaC: Compiler Validation by Program Analysis of the Cross-Product\",\n        \"Automated verification of query equivalence using satisfiability modulo theories\",\n        \"SPES: A Symbolic Approach to Proving Query Equivalence Under Bag Semantics\"\n    ],\n    \"reasoning\": \"Selected these 51 references because they represent foundational work and recent advances in VeriEQL: Bounded Equivalence Verification for Complex SQL Queries with Integrity Constraints, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}