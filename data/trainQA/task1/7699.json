{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 45 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Extending Source Code Pre-Trained Language Models to Summarise Decompiled Binaries\n\nPaper Abstract: Abstract Binary reverse engineering is used to understand and analyse programs for which the source code is unavailable. Decompilers can help, transforming opaque binaries into a more readable source code-like representation. Still, reverse engineering is difficult and costly, involving considering effort in labelling code with helpful summaries. While the automated summarisation of decompiled code can help reverse engineers understand and analyse binaries, current work mainly focuses on summarising source code, and no suitable dataset exists for this task. In this work, we extend large pre-trained language models of source code to summarise de-compiled binary functions. Furthermore, we investigate the impact of input and data properties on the performance of such models. Our approach consists of two main components; the data and the model. We first build CAPYBARA, a dataset of 214K decompiled function-documentation pairs across various compiler optimisations. We extend CAPYBARA further by removing identifiers, and deduplicating the data. Next, we fine-tune the CodeT5 base model with CAPYBARA to create BinT5. BinT5 achieves the state-of-the-art BLEU-4 score of 60.83, 58.82 and, 44.21 for summarising source, decompiled, and obfuscated decompiled code, respectively. This indicates that these models can be extended to decompiled binaries successfully. Finally, we found that the performance of BinT5 is not heavily dependent on the dataset size and compiler optimisation level. We recommend future research to further investigate transferring knowledge when working with less expressive input formats such as stripped binaries.\n\n{retrieved_text}\n\nGenerate exactly 45 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 45\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"An observational investigation of reverse engineersâ€™ process and mental models\",\n        \"Neural reverse engineering of stripped binaries using augmented control flow graphs\",\n        \"Type inference on executables\",\n        \"Cati: Context-assisted type inference from stripped binaries\",\n        \"Debin: Predicting debug information in stripped binaries\",\n        \"Dire: A neural approach to decompiled identifier naming\",\n        \"Learning to find usage of library functions in optimized binaries\",\n        \"Symlm: Predicting function names in stripped binaries via context-sensitive execution-aware code embeddings\",\n        \"Finding the dwarf: Recovering precise types from webassembly binaries\",\n        \"Neutron: an attention-based neural decompiler\",\n        \"A survey of automatic source code summarization\",\n        \"Towards automatically generating summary comments for java methods\",\n        \"On the evaluation of neural code summarization.\",\n        \"Codet5: Identifier-aware unified pre-trained encoder-decoder models for code understanding and generation\",\n        \"Codebert: A pre-trained model for programming and natural languages\",\n        \"Multilingual training for software engineering\",\n        \"A theory of dual channel constraints\",\n        \"On the naturalness of software\",\n        \"Recommendations for datasets for source code summarization\",\n        \"CodeSearchNet challenge: Evaluating the state of semantic code search\",\n        \"Cole: compiler optimization level exploration\",\n        \"Optimization in gcc\",\n        \"Measuring the robustness of source program obfuscation: Studying the impact of compiler optimizations on the obfuscation of c programs\",\n        \"Stochfuzz: Sound and cost-effective fuzzing of stripped binaries by incremental and stochastic rewriting\",\n        \"Attention is all you need\",\n        \"Learning Representations by Back-Propagating Errors\",\n        \"Long short-term memory\",\n        \"Backpropagation applied to handwritten zip code recognition\",\n        \"A robustly optimized BERT pre-training approach with post-training\",\n        \"Bert: Pre-training of deep bidirectional transformers for language understanding\",\n        \"Codexglue: A machine learning benchmark dataset for code understanding and generation\",\n        \"Fasttext.zip: Compressing text classification models\",\n        \"The adverse effects of code duplication in machine learning models of code\",\n        \"Exploring the limits of transfer learning with a unified text-to-text transformer\",\n        \"Bleu: a method for automatic evaluation of machine translation\",\n        \"ROUGE: A package for automatic evaluation of summaries\",\n        \"The meteor metric for automatic evaluation of machine translation\",\n        \"A systematic comparison of smoothing techniques for sentence-level BLEU\",\n        \"Design of the moses decoder for statistical machine translation\",\n        \"Graphcodebert: Pre-training code representations with data flow\",\n        \"Function boundary detection in stripped binaries\",\n        \"A convolutional attention network for extreme summarization of source code\",\n        \"Reassessing Automatic Evaluation Metrics for Code Summarization Tasks\",\n        \"Semantic similarity metrics for evaluating source code summarization\",\n        \"Variable name recovery in decompiled binary code using constrained masked language modeling\"\n    ],\n    \"reasoning\": \"Selected these 45 references because they represent foundational work and recent advances in Extending Source Code Pre-Trained Language Models to Summarise Decompiled Binaries, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}