{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 62 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Automated Software Verification of Hyperliveness\n\nPaper Abstract: Abstract Hyperproperties relate multiple executions of a program and are commonly used to specify security and information-flow policies. Most existing work has focused on the verification of kùëòk-safety properties, i.e., properties that state that all kùëòk-tuples of execution traces satisfy a given property. In this paper, we study the automated verification of richer properties that combine universal and existential quantification over executions. Concretely, we consider ‚àÄk‚àÉlsuperscriptfor-allùëòsuperscriptùëô\\forall^{k}\\exists^{l} properties, which state that for all kùëòk executions, there exist lùëôl executions that, together, satisfy a property. This captures important non-kùëòk-safety requirements, including hyperliveness properties such as generalized non-interference, opacity, refinement, and robustness. We design an automated constraint-based algorithm for the verification of ‚àÄk‚àÉlsuperscriptfor-allùëòsuperscriptùëô\\forall^{k}\\exists^{l} properties. Our algorithm leverages a sound-and-complete program logic and a (parameterized) strongest postcondition computation. We implement our algorithm in a tool called ForEx and report on encouraging experimental results.\n\n{retrieved_text}\n\nGenerate exactly 62 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 62\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"The KeY tool\",\n        \"Defining liveness\",\n        \"An algebra of alignment for relational verification\",\n        \"Ten years of hoare‚Äôs logic: A survey - part 1\",\n        \"Hypercollecting semantics and its application to static analysis of information flow\",\n        \"Beyond 2-safety: Asymmetric product programs for relational program verification\",\n        \"Secure information flow by self-composition\",\n        \"Simple relational correctness proofs for static analyses and program transformations\",\n        \"Relational decomposition\",\n        \"ForEx: Automated Software Verification of Hyperliveness\",\n        \"Prophecy variables for hyperproperty verification\",\n        \"Software verification of hyperproperties beyond k-safety\",\n        \"AutoHyper: Explicit-state model checking for HyperLTL\",\n        \"Model checking omega-regular hyperproperties with AutoHyperQ\",\n        \"Second-order hyperproperties\",\n        \"Conformance relations and hyperproperties for doping detection in time and space\",\n        \"A correctness and incorrectness program logic\",\n        \"Continuity and robustness of programs\",\n        \"Precise detection of side-channel vulnerabilities using quantitative cartesian hoare logic\",\n        \"Temporal logics for hyperproperties\",\n        \"Hyperproperties\",\n        \"Verifying hyperliveness\",\n        \"Soundness and completeness of an axiom system for program verification\",\n        \"Calculational design of [in]correctness transformational program logics by abstract interpretation\",\n        \"Hyper hoare logic: (dis-)proving program hyperproperties\",\n        \"RHLE: modular deductive verification of relational ‚àÄfor-all\\\\forall‚àÉ\\\\exists properties\",\n        \"Predicate Calculus and Program Semantics\",\n        \"Proving hypersafety compositionally\",\n        \"Modular product programs\",\n        \"Relational symbolic execution\",\n        \"Automated hypersafety verification\",\n        \"Reductions for safety proofs\",\n        \"Algorithms for model checking HyperLTL and HyperCTL‚àó\",\n        \"Houdini, an annotation assistant for ESC/Java\",\n        \"Assigning meanings to programs\",\n        \"Abstractions from proofs\",\n        \"An axiomatic basis for computer programming\",\n        \"Bounded model checking for hyperproperties\",\n        \"Hyperproperty verification as CHC satisfiability\",\n        \"Symbolic execution and program testing\",\n        \"Relational abstract interpretation for the verification of 2-hypersafety properties\",\n        \"Exact separation logic: Towards bridging the gap between verification and bug-finding\",\n        \"Verifying bounded subset-closed hyperproperties\",\n        \"Statically analyzing information flows: an abstract interpretation-based hyperanalysis for non-interference\",\n        \"Noninterference and the composability of security properties\",\n        \"A general theory of composition for trace sets closed under selective interleaving functions\",\n        \"On algebra of program correctness and incorrectness\",\n        \"Z3: an efficient SMT solver\",\n        \"Alignment completeness for relational hoare logics\",\n        \"Incorrectness logic\",\n        \"Verification of Java programs using symbolic execution and invariant generation\",\n        \"Local reasoning about the presence of bugs: Incorrectness separation logic\",\n        \"From invariant checking to invariant inference using randomized search\",\n        \"A data driven approach for algebraic loop invariants\",\n        \"Property directed self composition\",\n        \"Cartesian hoare logic for verifying k-safety properties\",\n        \"Constraint-based relational verification\",\n        \"Reverse hoare logic\",\n        \"Program development by stepwise refinement\",\n        \"Relational separation logic\",\n        \"Opacity of nondeterministic transition systems: A (bi)simulation relation approach\",\n        \"Outcome logic: A unifying foundation for correctness and incorrectness reasoning\"\n    ],\n    \"reasoning\": \"Selected these 62 references because they represent foundational work and recent advances in Automated Software Verification of Hyperliveness, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}