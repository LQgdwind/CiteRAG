{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 45 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Syntax-Aware On-the-Fly Code Completion\n\nPaper Abstract: Abstract Code completion aims to help improve developers’ productivity by suggesting the next code tokens from a given context. Various approaches have been proposed to incorporate abstract syntax tree (AST) information for model training, ensuring that code completion is aware of the syntax of the programming languages. However, existing syntax-aware code completion approaches are not on-the-fly, as we found that for every two-thirds of characters that developers type, AST fails to be extracted because it requires the syntactically correct source code, limiting its practicality in real-world scenarios. On the other hand, existing on-the-fly code completion does not consider syntactic information yet. In this paper, we propose PyCoder to leverage token types, a kind of lightweight syntactic information, which is readily available and aligns with the natural order of source code. Our PyCoder is trained in a multi-task training manner so that by learning the supporting task of predicting token types during the training phase, the models achieve better performance on predicting tokens and lines of code without the need for token types in the inference phase. Comprehensive experiments show that PyCoder achieves the first rank on the CodeXGLUE leaderboard with an accuracy of 77.12% for the token-level predictions, which is 0.43%-24.25% more accurate than baselines. In addition, PyCoder achieves an exact match of 43.37% for the line-level predictions, which is 3.63%-84.73% more accurate than baselines. These results lead us to conclude that token type information (an alternative to syntactic information) that is rarely used in the past can greatly improve the performance of code completion approaches, without requiring the syntactically correct source code like AST-based approaches do. Our PyCoder is publicly available on HuggingFace and GitHub.\n\n{retrieved_text}\n\nGenerate exactly 45 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 45\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Intellisense in visual studio code\",\n        \"Ml-enhanced code completion improves developer productivity\",\n        \"CodeXGLUE: A machine learning benchmark dataset for code understanding and generation\",\n        \"Language models are unsupervised multitask learners\",\n        \"Intellicode compose: Code generation using transformer\",\n        \"Code prediction by feeding trees to transformers\",\n        \"Codefill: Multi-token code completion by jointly learning from structure and naming sequences\",\n        \"Generative code modeling with graphs\",\n        \"Code completion with neural attention and pointer networks\",\n        \"Pythia: Ai-assisted code completion system\",\n        \"A self-attentional neural architecture for code completion with multi-task learning\",\n        \"A unified multi-task learning model for ast-level and token-level code completion\",\n        \"Unixcoder: Unified cross-modal pre-training for code representation\",\n        \"Probabilistic model for code with decision trees\",\n        \"Towards a better code completion system by api grouping, filtering, and popularity-based ranking\",\n        \"How program history can improve code completion\",\n        \"Learning from examples to improve code completion systems\",\n        \"On the naturalness of software\",\n        \"Code completion by modeling flattened abstract syntax trees as graphs\",\n        \"Neural machine translation of rare words with subword units\",\n        \"Gpt2sp: A transformer-based agile story point estimation approach\",\n        \"Big code!= big vocabulary: Open-vocabulary models for source code\",\n        \"Autotransform: Automated code transformation to support modern code review process\",\n        \"Sentence encoders on stilts: Supplementary training on intermediate labeled-data tasks\",\n        \"An overview of multi-task learning in deep neural networks\",\n        \"Matrix computations\",\n        \"Attention is all you need\",\n        \"Codesearchnet challenge: Evaluating the state of semantic code search\",\n        \"The curious case of neural text degeneration\",\n        \"Deep reinforcement learning for dialogue generation\",\n        \"Challenges in data-to-document generation\",\n        \"A learning algorithm for boltzmann machines\",\n        \"Multi-task learning for dense prediction tasks: A survey\",\n        \"Multi-task learning as multi-objective optimization\",\n        \"Towards full-line code completion with neural language models\",\n        \"Pytorch: An imperative style, high-performance deep learning library\",\n        \"Huggingface’s transformers: State-of-the-art natural language processing\",\n        \"Adam: A method for stochastic optimization\",\n        \"Binary Codes Capable of Correcting Deletions, Insertions and Reversals\",\n        \"Bleu: a method for automatic evaluation of machine translation\",\n        \"Meteor: An automatic metric for mt evaluation with improved correlation with human judgments\",\n        \"Rouge: A package for automatic evaluation of summaries\",\n        \"Automatic evaluation of machine translation quality using longest common subsequence and skip-bigram statistics\",\n        \"Exploring the limits of transfer learning with a unified text-to-text transformer.\",\n        \"Multi-task learning based pre-trained language model for code completion\"\n    ],\n    \"reasoning\": \"Selected these 45 references because they represent foundational work and recent advances in Syntax-Aware On-the-Fly Code Completion, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}