{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 50 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: A Framework for Generating Informative Benchmark Instances\n\nPaper Abstract: Abstract Benchmarking is an important tool for assessing the relative performance of alternative solving approaches. However, the utility of benchmarking is limited by the quantity and quality of the available problem instances. Modern constraint programming languages typically allow the specification of a class-level model that is parameterised over instance data. This separation presents an opportunity for automated approaches to generate instance data that define instances that are graded (solvable at a certain difficulty level for a solver) or can discriminate between two solving approaches. In this paper, we introduce a framework that combines these two properties to generate a large number of benchmark instances, purposely generated for effective and informative benchmarking. We use five problems that were used in the MiniZinc competition to demonstrate the usage of our framework. In addition to producing a ranking among solvers, our framework gives a broader understanding of the behaviour of each solver for the whole instance space; for example by finding subsets of instances where the solver performance significantly varies from its average performance.\n\n{retrieved_text}\n\nGenerate exactly 50 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 50\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"essence modelling pipeline:.\",\n        \"Google OR-Tools\",\n        \"Discriminating instance generation from abstract specifications: A case study with CP and MIP\",\n        \"Instance generation via generator instances\",\n        \"Breaking conditional symmetry in automated constraint modelling with Conjure\",\n        \"Extensible Automated Constraint Modelling\",\n        \"An enhanced features extractor for a portfolio of constraint solvers\",\n        \"SUNNY-CP: a sequential CP portfolio solver\",\n        \"Satisfiability modulo theories\",\n        \"Benchmarking in optimization: Best practice and open issues\",\n        \"Best practices for comparing optimization algorithms\",\n        \"CaDiCaL, Kissat, Paracooba entering the SAT competition 2021\",\n        \"Handbook of satisfiability, volume 185\",\n        \"Generating instances with performance differences for more than just two algorithms\",\n        \"Chuffed\",\n        \"Algorithm selection and instance space analysis for curriculum-based course timetabling\",\n        \"Towards understanding clustering problems and algorithms: an instance space analysis\",\n        \"SAT competition 2020\",\n        \"Minion: A fast scalable constraint solver\",\n        \"A modularity-based random SAT instances generator\",\n        \"The stockingcost constraint\",\n        \"Sequential model-based optimization for general algorithm configuration\",\n        \"Instance space analysis for a personnel scheduling problem\",\n        \"Mixed-integer linear programming and constraint programming formulations for solving resource availability cost problems\",\n        \"Exact approaches to the multi-agent collective construction problem\",\n        \"Using Instance Space Analysis to Study the Bin Packing Problem\",\n        \"sunny-as2: Enhancing SUNNY for algorithm selection\",\n        \"The irace package: Iterated racing for automatic algorithm configuration\",\n        \"The racing algorithm: Model selection for lazy learners\",\n        \"Yuck\",\n        \"Instance spaces for machine learning classification\",\n        \"An instance space analysis of regression problems\",\n        \"Minizinc: Towards a standard CP modelling language\",\n        \"Automatically improving constraint models in Savile Row\",\n        \"Using case-based reasoning in an algorithm portfolio for constraint solving\",\n        \"Where are the hard knapsack problems?\",\n        \"Controlling a solver execution with the runsolver tool\",\n        \"Quantifying homogeneity of instance sets for algorithm configuration\",\n        \"Optimal carpet cutting\",\n        \"Generating hard satisfiability problems\",\n        \"Revisiting where are the hard knapsack problems? via instance space analysis\",\n        \"Discovering the suitability of optimisation algorithms by learning from evolved instances\",\n        \"Philosophy of the MiniZinc challenge\",\n        \"Automatic instance generation for classical planning\",\n        \"A literature review on inventory lot sizing problems\",\n        \"What you always wanted to know about the deterministic part of the international planning competition (IPC) 2014 (but were too afraid to ask)\",\n        \"On the characterization and generation of nurse scheduling problem instances\",\n        \"SATzilla: portfolio-based algorithm selection for sat\",\n        \"SATzilla2012: Improved algorithm selection based on cost-sensitive classification models\",\n        \"Optimizing SAT encodings for arithmetic constraints\"\n    ],\n    \"reasoning\": \"Selected these 50 references because they represent foundational work and recent advances in A Framework for Generating Informative Benchmark Instances, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}