{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 55 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Wavefront Threading Enables Effective High-Level Synthesis\n\nPaper Abstract: Abstract. Digital systems are growing in importance and computing hardware is growing more heterogeneous. Hardware design, however, remains laborious and expensive, in part due to the limitations of conventional hardware description languages (HDLs) like VHDL and Verilog. A longstanding research goal has been programming hardware like software, with high-level languages that can generate efficient hardware designs. This paper describes Kanagawa, a language that takes a new approach to combine the programmer productivity benefits of traditional High-Level Synthesis (HLS) approaches with the expressibility and hardware efficiency of Register-Transfer Level (RTL) design. The language’s concise syntax, matched with a hardware design-friendly execution model, permits a relatively simple toolchain to map high-level code into efficient hardware implementations.\n\n{retrieved_text}\n\nGenerate exactly 55 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 55\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"A Program Data Flow Analysis Procedure\",\n        \"Chisel: Constructing hardware in a Scala embedded language\",\n        \"PQC Cloudization: Rapid Prototyping of Scalable NTT /INTT Architecture to Accelerate Kyber\",\n        \"The Essence of Bluespec: A Core Language for Rule-Based Hardware Design\",\n        \"Stratus High-Level Synthesis\",\n        \"LegUp: An Open-Source High-Level Synthesis Tool for FPGA-Based Processor/Accelerator Systems\",\n        \"Array language support for wavefront and pipelined computations\",\n        \"Dynamic Inter-Block Scheduling for HLS\",\n        \"Exploiting the Correlation between Dependence Distance and Latency in Loop Pipelining for HLS\",\n        \"Dynamic C-Slow Pipelining for HLS\",\n        \"From software threads to parallel hardware in high-level synthesis for FPGAs\",\n        \"An efficient and versatile scheduling algorithm based on SDC formulation\",\n        \"Nios® V Processor Reference Manual - Updated for Intel® Quartus® Prime Design Suite: 23.3\",\n        \"OpenCL for FPGAs: Prototyping a compiler\",\n        \"Dynamic Hazard Resolution for Pipelining Irregular Loops in High-Level Synthesis\",\n        \"Toward Speculative Loop Pipelining for High-Level Synthesis\",\n        \"The Program Dependence Graph and Its Use in Optimization\",\n        \"SpecHLS: Speculative Accelerator Design Using High-Level Synthesis\",\n        \"Structure and Interpretation of Computer Programs\",\n        \"Communicating Sequential Processes\",\n        \"Intel High Level Synthesis Compiler\",\n        \"An Out-of-Order Load-Store Queue for Spatial Computing\",\n        \"Dynamically Scheduled High-Level Synthesis\",\n        \"Speculative Dataflow Circuits\",\n        \"LAMBDA: The Ultimate Declarative\",\n        \"The semantics of a simple language for parallel programming, IFIP 74\",\n        \"Spatial: A Language and Compiler for Application Accelerators\",\n        \"Wavefront Array Processor: Language, Architecture, and Applications\",\n        \"How to make a correct multiprocess program execute correctly on a multiprocessor\",\n        \"Reference Manual for the ADA Programming Language\",\n        \"Architecture and Synthesis for Area-Efficient Pipelining of Irregular Loop Nests\",\n        \"Loop Splitting for Efficient Pipelining in High-Level Synthesis\",\n        \"HL5: A 32-bit RISC-V Processor Designed with High-Level Synthesis\",\n        \"Resolve: Generation of High-Performance Sorting Architectures from High-Level Synthesis\",\n        \"Peephole Optimization\",\n        \"Algorithms for Scalable Synchronization on Shared-Memory Multiprocessors\",\n        \"Efficient nested loop pipelining in high level synthesis using polyhedral bubble insertion\",\n        \"A Primer on Memory Consistency and Cache Coherence (2nd ed.)\",\n        \"Scalable Parallel Programming with CUDA: Is CUDA the Parallel Programming Model That Application Developers Have Been Waiting For?\",\n        \"Predictable accelerator design with time-sensitive affine types\",\n        \"Modular Hardware Design with Timeline Types\",\n        \"A compiler infrastructure for accelerator generators\",\n        \"Bluespec System Verilog: efficient, correct RTL from high level specifications\",\n        \"Concurrency-Aware Thread Scheduling for High-Level Synthesis\",\n        \"Hardware Synthesis of Weakly Consistent C Concurrency\",\n        \"Some Scheduling Techniques and an Easily Schedulable Horizontal Architecture for High Performance Scientific Computing\",\n        \"HEAX: An Architecture for Computing on Encrypted Data\",\n        \"Catapult High-Level Synthesis and Verification\",\n        \"Lambda: The Ultimate Imperative\",\n        \"The Design and Evolution of C++\",\n        \"Loop Skewing: The Wavefront Method Revisited\",\n        \"Abstract Parallel Programming Model for HLS\",\n        \"Vitis HLS\",\n        \"PDL: A High-Level Hardware Design Language for Pipelined Processors\",\n        \"SDC-based modulo scheduling for pipeline synthesis\"\n    ],\n    \"reasoning\": \"Selected these 55 references because they represent foundational work and recent advances in Wavefront Threading Enables Effective High-Level Synthesis, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}