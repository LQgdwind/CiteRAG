{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 51 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Compressed Key Sort and Fast Index Reconstruction\n\nPaper Abstract: Abstract In this paper we propose an index key compression scheme based on the notion of distinction bits by proving that the distinction bits of index keys are sufficient information to determine the sorted order of the index keys correctly. While the actual compression ratio may vary depending on the characteristics of datasets (an average of 2.76 to one compression ratio was observed in our experiments), the index key compression scheme leads to significant performance improvements during the reconstruction of large-scale indexes. Our index key compression can be effectively used in database replication and index recovery of modern main-memory database systems.\n\n{retrieved_text}\n\nGenerate exactly 51 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 51\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Reducing the Storage Overhead of Main-Memory OLTP Databases with Hybrid Indexes\",\n        \"SQL Server Documentation\",\n        \"Hekaton: Sql serverâ€™s memory-optimized oltp engine\",\n        \"Main memory database systems\",\n        \"Rethinking Main Memory OLTP Recovery\",\n        \"Prefix B-trees\",\n        \"A study of index structures for main memory database management systems\",\n        \"Bit-tree: A data structure for fast file processing\",\n        \"Main-memory index structures with fixed-size partial keys\",\n        \"Cache conscious indexing for decision-support in main memory\",\n        \"Making B+- trees cache conscious in main memory\",\n        \"Improving index performance through prefetching\",\n        \"Fractal prefetching B+-trees: Optimizing both cache and disk performance\",\n        \"K-ary search on modern processors\",\n        \"Efficient in-memory indexing with generalized prefix trees\",\n        \"KISS-tree: Smart latch-free in-memory indexing on modern architectures\",\n        \"FAST: Fast architecture sensitive tree search on modern CPUs and GPUs\",\n        \"VAST-tree: A vector-advanced and compressed structure for massive data tree traversal\",\n        \"The Bw-tree: A B-tree for new hardware platforms\",\n        \"The adaptive radix tree: ARTful indexing for main-memory databases\",\n        \"SuRF: practical range query filtering with fast succinct tries\",\n        \"HOT: A height optimized trie index for main-memory database systems\",\n        \"B-tree indexes and CPU caches\",\n        \"Modern B-tree techniques\",\n        \"Apache ORC\",\n        \"Apache Parquet\",\n        \"Order preserving string compression\",\n        \"Dictionary-based order-preserving string compression\",\n        \"Query optimization in compressed database systems\",\n        \"Dictionary-based order-preserving string compression for main memory column stores\",\n        \"Order-preserving key compression for in-memory search trees\",\n        \"AA-sort: A new parallel sorting algorithm for multi-core SIMD processors\",\n        \"Efficient implementation of sorting on multi-core SIMD CPU architecture\",\n        \"Fast sort on CPUs and GPUs: A case for bandwidth oblivious SIMD sort\",\n        \"The GNU C++ library manual\",\n        \"Optimal sort key compression and index rebuilding\",\n        \"Database Systems Concepts, 4th Edition\",\n        \"FAST source\",\n        \"CSB+ tree source\",\n        \"Advanced Vector Extensions Programming Reference\",\n        \"Introduction to Algorithms, 3rd Edition\",\n        \"Genome datasets of Human Chromosome 14\",\n        \"Wikipedia titles dump\",\n        \"DBpedia: A nucleus for a web of open data\",\n        \"New TPC benchmarks for decision support and web commerce\",\n        \"A First Course in Probability, 6th Edition\",\n        \"Merging multiple lists on hierarchical-memory multiprocessors\",\n        \"A fast, simple algorithm to balance a parallel multiway merge\",\n        \"Engineering a sort function\",\n        \"The influence of caches on the performance of sorting\",\n        \"The Art of Computer Programming, Volume 3: Sorting and Searching, 2nd Edition\"\n    ],\n    \"reasoning\": \"Selected these 51 references because they represent foundational work and recent advances in Compressed Key Sort and Fast Index Reconstruction, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}