{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 47 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Search-Based Regular Expression Inference on a GPU\n\nPaper Abstract: Abstract. Regular expression inference (REI) is a supervised machine learning and program synthesis problem that takes a cost metric for regular expressions, and positive and negative examples of strings as input. It outputs a regular expression that is precise (i.e., accepts all positive and rejects all negative examples), and minimal w.r.t. to the cost metric. We present a novel algorithm for REI over arbitrary alphabets that is enumerative and trades off time for space. Our main algorithmic idea is to implement the search space of regular expressions succinctly as a contiguous matrix of bitvectors. Collectively, the bitvectors represent, as characteristic sequences, all sub-languages of the infix-closure of the union of positive and negative examples. Mathematically, this is a semiring of (a variant of) formal power series. Infix-closure enables bottom-up compositional construction of larger from smaller regular expressions using the operations of our semiring. This minimises data movement and data-dependent branching, hence maximises data-parallelism. In addition, the infix-closure remains unchanged during the search, hence search can be staged: first pre-compute various expensive operations, and then run the compute intensive search process. We provide two C++ implementations, one for general purpose CPUs and one for Nvidia GPUs (using CUDA). We benchmark both on Google Colab Pro: the GPU implementation is on average over 1000x faster than the CPU implementation on the hardest benchmarks.\n\n{retrieved_text}\n\nGenerate exactly 47 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 47\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Learning Regular Sets from Queries and Counterexamples\",\n        \"Automatic Generation of Peephole Superoptimizers\",\n        \"Virtual Machine Warmup Blows Hot and Cold\",\n        \"Automatic Synthesis of Regular Expressions from Examples\",\n        \"Inference of Regular Expressions for Text Extraction from Examples\",\n        \"Rational Series and Their Languages\",\n        \"Inference of Concise Regular Expressions and DTDs\",\n        \"C++ Standard Library: std::unordered_set\",\n        \"INFAnt: NFA Pattern Matching on GPGPU Devices\",\n        \"Domain-Specific Hardware Accelerators\",\n        \"The Benchmark Lottery\",\n        \"Semirings and Formal Power Series\",\n        \"Synthesizing Data Structure Transformations from Input-Output Examples\",\n        \"A Data-Centric Introduction to Computing\",\n        \"Semirings and their applications\",\n        \"Language identification in the limit\",\n        \"Google Colaboratory\",\n        \"Evaluating the Evaluation: A Benchmarking Checklist\",\n        \"Automating String Processing in Spreadsheets Using Input-Output Examples\",\n        \"Computer Architecture: A Quantitative Approach\",\n        \"Testing Heuristics: We Have It All Wrong\",\n        \"WARPCORE: Hashing at the speed of light on modern CUDA-accelerators\",\n        \"WarpCore: A Library for fast Hash Tables on GPUs\",\n        \"Synthesizing Regular Expressions from Examples for Introductory Automata Assignments\",\n        \"Code and benchmarks for (Lee et al., 2016a)\",\n        \"Regular Expression Learning for Information Extraction\",\n        \"TransRegex: Multi-Modal Regular Expression Synthesis by Generate-and-Repair\",\n        \"FlashRegex: Deducing Anti-ReDoS Regexes from Examples\",\n        \"Why GPUs Are Slow at Executing NFAs and How to Make Them Faster\",\n        \"Neural Generation of Regular Expressions from Natural Language with Minimal Domain Knowledge\",\n        \"Rewrite Rule Inference Using Equality Saturation\",\n        \"Automatic Repair of Regular Expressions\",\n        \"SoftRegex: Generating Regex from Natural Language Descriptions using Softened Regex Equivalence\",\n        \"Scalable FSM Parallelization via Path Fusion and Higher-Order Speculation\",\n        \"Automata-Theoretic Aspects of Formal Power Series\",\n        \"The ARM Scalable Vector Extension\",\n        \"TRANSIT: specifying protocols with concolic snippets\",\n        \"Code and data for the PLDI 2023 paper: Search-Based Regular Expression Inference on a GPU\",\n        \"Attention is All You Need\",\n        \"FIDEX: Filtering Spreadsheet Data Using Examples\",\n        \"One-hot — Wikipedia, The Free Encyclopedia\",\n        \"Grammar induction — Wikipedia, The Free Encyclopedia\",\n        \"ReDoS — Wikipedia, The Free Encyclopedia\",\n        \"Streaming SIMD Extensions — Wikipedia, The Free Encyclopedia\",\n        \"Understanding the Visualization of Overhead and Latency in NVIDIA Nsight Systems\",\n        \"SemRegex: A Semantics-Based Approach for Generating Regular Expressions from Natural Language Specifications\",\n        \"GPU-Based NFA Implementation for Memory Efficient High Speed Regular Expression Matching\"\n    ],\n    \"reasoning\": \"Selected these 47 references because they represent foundational work and recent advances in Search-Based Regular Expression Inference on a GPU, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}