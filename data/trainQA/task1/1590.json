{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 47 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: TreeCaps: Tree-Based Capsule Networks for Source Code Processing\n\nPaper Abstract: Abstract Recently program learning techniques have been proposed to process source code based on syntactical structures (e.g., Abstract Syntax Trees) and/or semantic information (e.g., Dependency Graphs). While graphs may be better at capturing various viewpoints of code semantics than trees, constructing graph inputs from code need static code semantic analysis that may not be accurate and introduces noise during learning. On the other hand, syntax trees are precisely defined according to the language grammar and easier to construct and process than graphs. We propose a new tree-based learning technique, named TreeCaps, by fusing capsule networks with tree-based convolutional neural networks, to achieve learning accuracy higher than existing graph-based techniques while it is based only on trees. TreeCaps introduces novel variable-to-static routing algorithms into the capsule networks to compensate for the loss of previous routing algorithms. Aside from accuracy, we also find that TreeCaps is the most robust to withstand those semantic-preserving program transformations that change code syntax without modifying the semantics. Evaluated on a large number of Java and C/C++ programs, TreeCaps models outperform prior deep learning models of program source code, in terms of both accuracy and robustness for program comprehension tasks such as code functionality classification and function name prediction. The implementation of TreeCaps is publicly available at https://github.com/bdqnghi/treecaps.\n\n{retrieved_text}\n\nGenerate exactly 47 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 47\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Learning to Represent Programs with Graphs\",\n        \"code2seq: Generating Sequences from Structured Representations of Code\",\n        \"Code2Vec: Learning Distributed Representations of Code\",\n        \"Neural code comprehension: A learnable representation of code semantics\",\n        \"Adversarial Robustness for Code\",\n        \"Quantify the time and cost saved using reversible debuggers\",\n        \"Gnn-film: Graph neural networks with feature-wise linear modulation\",\n        \"Generative Code Modeling with Graphs\",\n        \"Cross-Language Learning for Program Classification Using Bilateral Tree-Based Convolutional Neural Networks\",\n        \"SAR: learning cross-language API mappings with little knowledge\",\n        \"Tree-to-tree neural networks for program translation\",\n        \"srcML: An Infrastructure for the Exploration, Analysis, and Manipulation of Source Code: A Tool Demonstration\",\n        \"Large-scale malware classification using random projections and neural networks\",\n        \"Global Developer Population and Demographic Study\",\n        \"Structured Neural Summarization\",\n        \"DeepAM: Migrate APIs with Multi-modal Sequence to Sequence Learning\",\n        \"Neural Attribution for Semantic Bug-Localization in Student Programs\",\n        \"Global relational models of source code\",\n        \"Matrix capsules with EM routing\",\n        \"Deep code comment generation\",\n        \"TextCaps: Handwritten Character Recognition With Very Small Datasets\",\n        \"A capsule network for recommendation and explaining what you like and dislike\",\n        \"Software defect prediction via convolutional neural network\",\n        \"Gated Graph Sequence Neural Networks\",\n        \"VulDeePecker: A deep learning-based system for vulnerability detection\",\n        \"On the variance of the adaptive learning rate and beyond\",\n        \"Convolutional neural networks over tree structures for programming language processing\",\n        \"Discriminative Neural Sentence Modeling by Tree-Based Convolution\",\n        \"Bilateral Dependency Neural Networks for Cross-Language Algorithm Classification\",\n        \"Principles of Program Analysis\",\n        \"Classification of Android apps and malware using deep neural networks\",\n        \"Malware classification with recurrent networks\",\n        \"DeepBugs: A learning approach to name-based bug detection\",\n        \"On the Generalizability of Neural Program Analyzers with respect to Semantic-Preserving Program Transformations\",\n        \"DeepCaps: Going Deeper with Capsule Networks\",\n        \"Semantic Robustness of Models of Source Code\",\n        \"Catch me if you can: Evaluating android anti-malware against transformation attacks\",\n        \"Dynamic routing between capsules\",\n        \"Learning blended, precise semantic program embeddings\",\n        \"Measuring Program Comprehension: A Large-Scale Field Study with Professionals\",\n        \"Investigating Capsule Networks with Dynamic Routing for Text Classification\",\n        \"Deep Learning for Just-in-Time Defect Prediction\",\n        \"fAST: flattening abstract syntax trees for efficiency\",\n        \"Generating Adversarial Examples for Holding Robustness of Source Code Processing Models\",\n        \"A novel neural source code representation based on abstract syntax tree\",\n        \"Capsule Graph Neural Network\",\n        \"Devign: Effective Vulnerability Identification by Learning Comprehensive Program Semantics via Graph Neural Networks\"\n    ],\n    \"reasoning\": \"Selected these 47 references because they represent foundational work and recent advances in TreeCaps: Tree-Based Capsule Networks for Source Code Processing, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}