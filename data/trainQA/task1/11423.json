{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 43 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: WizardMerge - Save Us From Merging Without Any Clues\n\nPaper Abstract: Abstract. Modern software development necessitates efficient version-oriented collaboration among developers. While Git is the most popular version control system, it generates unsatisfactory version merging results due to textual-based workflow, leading to potentially unexpected results in the merged version of the project. Although numerous merging tools have been proposed for improving merge results, developers remain struggling to resolve the conflicts and fix incorrectly modified code without clues. We present WizardMerge, an auxiliary tool that leverages merging results from Git to retrieve code block dependency on text and LLVM-IR level and provide suggestions for developers to resolve errors introduced by textual merging. Through the evaluation, we subjected WizardMerge to testing on 227 conflicts within five large-scale projects. The outcomes demonstrate that WizardMerge diminishes conflict merging time costs, achieving a 23.85% reduction. Beyond addressing conflicts, WizardMerge provides merging suggestions for over 70% of the code blocks potentially affected by the conflicts. Notably, WizardMerge exhibits the capability to identify conflict-unrelated code blocks that require manual intervention yet are harmfully applied by Git during the merging.\n\n{retrieved_text}\n\nGenerate exactly 43 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 43\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Understanding semi-structured merge conflict characteristics in open-source java projects\",\n        \"An empirical examination of the relationship between code smells and merge conflicts\",\n        \"Automatic prediction of developers’ resolutions for software merge conflicts\",\n        \"Structured merge with auto-tuning: balancing precision and performance\",\n        \"Semistructured merge: rethinking merge in revision control systems\",\n        \"Use LLVM by JavaScript/TypeScript\",\n        \"Git Merge\",\n        \"Evaluating and improving semistructured merge\",\n        \"TIPMerge: recommending experts for integrating changes across branches\",\n        \"Segment Tree\",\n        \"Deepmerge: Learning to merge programs\",\n        \"Merge Conflict Resolution: Classification or Generation?\",\n        \"kernel hacking: GCC optimization for better debug experience (-Og)\",\n        \"Towards accurate recommendations of merge conflicts resolution strategies\",\n        \"GPT-3: Its nature, scope, limits, and consequences\",\n        \"Git\",\n        \"TypeSan: Practical Type Confusion Detection\",\n        \"The Biggest Codebases in History, as Measured by Lines of Code\",\n        \"HexType: Efficient Detection of Type Confusion Errors for C++\",\n        \"GIT merge successfully but introduce a compilation error\",\n        \"Spork: Structured Merge for Java with Formatting Preservation\",\n        \"LLVM and Clang: Next generation compiler technology\",\n        \"Programming by demonstration using version space algebra\",\n        \"A three-way merge for XML documents\",\n        \"LLVM’s Analysis and Transform Passes\",\n        \"The LLVM Compiler Infrastructure\",\n        \"Mercurial Gecko Repositories\",\n        \"Gecko-dev: nsCOMPtr.h\",\n        \"MySQL\",\n        \"Supporting merge conflict resolution by using fine-grained code change history\",\n        \"SoManyConflicts: Resolve many merge conflicts interactively and systematically\",\n        \"IntelliMerge: a refactoring-aware software merging technique\",\n        \"Verified three-way program merge\",\n        \"When a Clean Merge is Wrong\",\n        \"What’s the difference between Kotlin/Native and Java bytecode with compile through LLVM frontend?\",\n        \"Program merge conflict resolution via neural transformers\",\n        \"Depth-first search and linear graph algorithms\",\n        \"Linux Kernel Official Repository\",\n        \"C++ templates: The complete guide, portable documents\",\n        \"The Magic of 3-Way Merge\",\n        \"Using pre-trained language models to resolve textual and semantic merge conflicts (experience paper)\",\n        \"Conflict resolution for structured merge via version space algebra\",\n        \"Mastery: Shifted-Code-Aware Structured Merging\"\n    ],\n    \"reasoning\": \"Selected these 43 references because they represent foundational work and recent advances in WizardMerge - Save Us From Merging Without Any Clues, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}