{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 45 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: FeatGraph: A Flexible and Efficient Backend for Graph Neural Network Systems\n\nPaper Abstract: Abstract Graph neural networks (GNNs) are gaining popularity as a promising approach to machine learning on graphs. Unlike traditional graph workloads where each vertex/edge is associated with a scalar, GNNs attach a feature tensor to each vertex/edge. This additional feature dimension, along with consequently more complex vertex- and edge-wise computations, has enormous implications on locality and parallelism, which existing graph processing systems fail to exploit. This paper proposes FeatGraph to accelerate GNN workloads by co-optimizing graph traversal and feature dimension computation. FeatGraph provides a flexible programming interface to express diverse GNN models by composing coarse-grained sparse templates with fine-grained user-defined functions (UDFs) on each vertex/edge. FeatGraph incorporates optimizations for graph traversal into the sparse templates and allows users to specify optimizations for UDFs with a feature dimension schedule (FDS). FeatGraph speeds up end-to-end GNN training and inference by up to 32×\\times on CPU and 7×\\times on GPU.\n\n{retrieved_text}\n\nGenerate exactly 45 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 45\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Deep representation learning for social network analysis\",\n        \"Graph convolutional neural networks for web-scale recommender systems\",\n        \"Neural message passing for quantum chemistry\",\n        \"Combinatorial optimization with graph convolutional networks and guided tree search\",\n        \"Neugraph: Parallel deep neural network computation on large graphs\",\n        \"Tensorflow: A system for large-scale machine learning\",\n        \"Fast graph representation learning with pytorch geometric\",\n        \"Pytorch: An imperative style, high-performance deep learning library\",\n        \"Deep graph library: Towards efficient and scalable deep learning on graphs\",\n        \"Intel math kernel library\",\n        \"Cusparse library\",\n        \"Pregel: A system for large-scale graph processing\",\n        \"X-stream: Edge-centric graph processing using streaming partitions\",\n        \"Powergraph: Distributed graph-parallel computation on natural graphs\",\n        \"Ligra: A lightweight graph processing framework for shared memory\",\n        \"Gunrock: A high-performance graph processing library on the gpu\",\n        \"Flashgraph: Processing billion-node graphs on an array of commodity ssds\",\n        \"Making caches work for graph analytics\",\n        \"Gridgraph: Large-scale graph processing on a single machine using 2-level hierarchical partitioning\",\n        \"Scalable simd-efficient graph processing on gpus\",\n        \"Cusha: Vertex-centric graph processing on gpus\",\n        \"A simple neural network module for relational reasoning\",\n        \"Recurrent relational networks\",\n        \"TVM: An automated end-to-end optimizing compiler for deep learning\",\n        \"Relational inductive biases, deep learning, and graph networks\",\n        \"Semi-supervised classification with graph convolutional networks\",\n        \"Graph attention networks\",\n        \"Attention-based graph neural network for semi-supervised learning\",\n        \"Attention is all you need\",\n        \"High performance machine learning through codesign and rooflining\",\n        \"Halide: A language and compiler for optimizing parallelism, locality, and recomputation in image processing pipelines\",\n        \"Scalability! but at what cost?\",\n        \"Design principles for sparse matrix multiplication on the gpu\",\n        \"Optimizing parallel reduction in cuda\",\n        \"Optimizing cnn model inference on cpus\",\n        \"A unified optimization approach for cnn model inference on integrated gpus\",\n        \"Opentuner: An extensible framework for program autotuning\",\n        \"Learning to optimize tensor programs\",\n        \"Minigun: Light-weight gpu kernel interface for graph operations\",\n        \"Inductive representation learning on large graphs\",\n        \"Mathematical foundations of the graphblas\",\n        \"Graphmat: High performance graph analytics made productive\",\n        \"Graph algorithms in the language of linear algebra\",\n        \"Semi-external memory sparse matrix multiplication for billion-node graphs\",\n        \"The tensor algebra compiler\"\n    ],\n    \"reasoning\": \"Selected these 45 references because they represent foundational work and recent advances in FeatGraph: A Flexible and Efficient Backend for Graph Neural Network Systems, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}