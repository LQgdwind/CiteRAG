{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 54 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Variable Name Recovery in Decompiled Binary Code using Constrained Masked Language Modeling\n\nPaper Abstract: Abstract. Decompilation is the procedure of transforming binary programs into a high-level representation, such as source code, for human analysts to examine. While modern decompilers can reconstruct and recover much information that is discarded during compilation, inferring variable names is still extremely difficult. Inspired by recent advances in natural language processing, we propose a novel solution to infer variable names in decompiled code based on Masked Language Modeling, Byte-Pair Encoding, and neural architectures such as Transformers and BERT. Our solution takes raw decompiler output, the less semantically meaningful code, as input, and enriches it using our proposed finetuning technique, Constrained Masked Language Modeling. Using Constrained Masked Language Modeling introduces the challenge of predicting the number of masked tokens for the original variable name. We address this count of token prediction challenge with our post-processing algorithm. Compared to the state-of-the-art approaches, our trained VarBERT model is simpler and of much better performance. We evaluated our model on an existing large-scale data set with 164,632 binaries and showed that it can predict variable names identical to the ones present in the original source code up to 84.15% of the time.\n\n{retrieved_text}\n\nGenerate exactly 54 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 54\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Learning natural coding conventions\",\n        \"A survey of machine learning for big code and naturalness\",\n        \"Function Naming in Stripped Binaries Using Neural Networks\",\n        \"Context2Name: A deep learning-based approach to infer natural variable names from usage contexts\",\n        \"pix2code: Generating code from a graphical user interface screenshot\",\n        \"Automated correction for syntax errors in programming assignments using recurrent neural networks\",\n        \"Learning from examples to improve code completion systems\",\n        \"Type Inference on Executables\",\n        \"Syntax errors just aren’t natural: improving error reporting with language models\",\n        \"A hidden markov model to detect coded information islands in free text\",\n        \"IDA-Decompiler\",\n        \"Neural reverse engineering of stripped binaries\",\n        \"New initiative: the naturalness of software\",\n        \"Bert: Pre-training of deep bidirectional transformers for language understanding\",\n        \"The ghidra decompiler\",\n        \"Deep reinforcement learning for programming language correction\",\n        \"Deepfix: Fixing common c language errors by deep learning\",\n        \"Synthesizing Java expressions from free-form queries\",\n        \"Debin: Predicting debug information in stripped binaries\",\n        \"Gaussian error linear units (gelus)\",\n        \"Hex-Rays Decompiler\",\n        \"On the naturalness of software\",\n        \"Long short-term memory\",\n        \"CodeSum: Translate program language to natural language\",\n        \"Summarizing source code using a neural attention model\",\n        \"Meaningful variable names for decompiled code: A machine translation approach\",\n        \"Adam: A method for stochastic optimization\",\n        \"Sentencepiece: A simple and language independent subword tokenizer and detokenizer for neural text processing\",\n        \"Using semantic unification to generate regular expressions from natural language\",\n        \"Dire: A neural approach to decompiled identifier naming\",\n        \"Gated graph sequence neural networks\",\n        \"Latent predictor networks for code generation\",\n        \"Towards better program obfuscation: optimization via language models\",\n        \"Roberta: A robustly optimized bert pretraining approach\",\n        \"Structured statistical syntax tree prediction\",\n        \"Intelligent code completion with Bayesian networks\",\n        \"sk_p: a neural program corrector for MOOCs\",\n        \"Abstract syntax networks for code generation and semantic parsing\",\n        \"Language models are unsupervised multitask learners\",\n        \"On the” naturalness” of buggy code\",\n        \"Predicting program properties from” big code”\",\n        \"Neural machine translation of rare words with subword units\",\n        \"NIRMAL: Automatic identification of software relevant tweets leveraging language model\",\n        \"Lxmert: Learning cross-modality encoder representations from transformers\",\n        \"Recovering clear, natural identifiers from obfuscated JS names\",\n        \"Attention is all you need\",\n        \"Bugram: bug detection with n-gram language models\",\n        \"Character: Translation edit rate on character level\",\n        \"Deep learning code fragments for code clone detection\",\n        \"Google’s neural machine translation system: Bridging the gap between human and machine translation\",\n        \"Extracting code from programming tutorial videos\",\n        \"No More Gotos: Decompilation Using Pattern-Independent Control-Flow Structuring and Semantics-Preserving Transformations\",\n        \"Xlnet: Generalized autoregressive pretraining for language understanding\",\n        \"A syntactic neural model for general-purpose code generation\"\n    ],\n    \"reasoning\": \"Selected these 54 references because they represent foundational work and recent advances in Variable Name Recovery in Decompiled Binary Code using Constrained Masked Language Modeling, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}