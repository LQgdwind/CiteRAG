{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 37 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Integrating ytopt and libEnsemble to Autotune OpenMC\n\nPaper Abstract: Abstract ytopt is a Python machine-learning-based autotuning software package developed within the ECP PROTEAS-TUNE project. The ytopt software adopts an asynchronous search framework that consists of sampling a small number of input parameter configurations and progressively fitting a surrogate model over the input-output space until exhausting the user-defined maximum number of evaluations or the wall-clock time. libEnsemble is a Python toolkit for coordinating workflows of asynchronous and dynamic ensembles of calculations across massively parallel resources developed within the ECP PETSc/TAO project. libEnsemble helps users take advantage of massively parallel resources to solve design, decision, and inference problems and expands the class of problems that can benefit from increased parallelism. In this paper we present our methodology and framework to integrate ytopt and libEnsemble to take advantage of massively parallel resources to accelerate the autotuning process. Specifically, we focus on using the proposed framework to autotune the ECP ExaSMR application OpenMC, an open source Monte Carlo particle transport code. OpenMC has seven tunable parameters some of which have large ranges such as the number of particles in-flight, which is in the range of 100,000 to 8 million, with its default setting of 1 million. Setting the proper combination of these parameter values to achieve the best performance is extremely time-consuming. Therefore, we apply the proposed framework to autotune the MPI/OpenMP offload version of OpenMC based on a user-defined metric such as the figure of merit (FoM) (particles/s) or energy efficiency energy-delay product (EDF) on the OLCF Frontier TDS system Crusher. The experimental results show that we achieve improvement up to 29.49% in FoM and up to 30.44% in EDP.\n\n{retrieved_text}\n\nGenerate exactly 37 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 37\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"ytopt: Autotuning scientific applications for energy efficiency at large scales\",\n        \"Autotuning PolyBench benchmarks with LLVM Clang/Polly Loop Optimization Pragmas Using Bayesian Optimization\",\n        \"ytopt: a machine-learning-based autotuning software package.\",\n        \"Autotuning Apache TVM-based scientific applications using Bayesian optimization\",\n        \"Frontier TDS system\",\n        \"APEX: Autonomic Performance Environment for eXascale.\",\n        \"Toward an end-to-end auto-tuning framework in HPC PowerStack\",\n        \"Toward portable GPU acceleration of the OpenMC Monte Carlo particle transport code\",\n        \"OpenMC: A state-of-the-art Monte Carlo code for research and development\",\n        \"The Monte Carlo performance benchmark testâ€”aims, specifications, and first results\",\n        \"libEnsemble: A complete Python toolkit for dynamic ensembles of calculations.\",\n        \"libEnsemble: A library to coordinate the concurrent evaluation of dynamic ensembles of calculations.\",\n        \"libEnsemble Users Manual.\",\n        \"Managing computationally expensive blackbox multiobjective optimization problems with libEnsemble.\",\n        \"Comparison of model-based and heuristic optimization algorithms applied to photoinjectors using libEnsemble.\",\n        \"Multitask optimization of laser-plasma accelerators using simulation codes with different fidelities.\",\n        \"Automatically tuned linear algebra software\",\n        \"Active Harmony: Towards automated performance tuning\",\n        \"A case study using automatic performance tuning for large-scale scientific programs\",\n        \"Automatic performance analysis with Periscope\",\n        \"Combining models and guided empirical search to optimize for multiple levels of the memory hierarchy\",\n        \"Online adaptive code generation and tuning\",\n        \"Active-learning-based surrogate models for empirical performance running\",\n        \"Machine learning-based auto-tuning for enhanced performance portability of OpenCL applications\",\n        \"A Survey on Compiler Autotuning Using Machine Learning\",\n        \"Minimizing the cost of iterative compilation with active learning\",\n        \"A scalable auto-tuning framework for compiler optimization\",\n        \"Nitro: A framework for adaptive code variant tuning\",\n        \"A framework for enabling OpenMP autotuning\",\n        \"Towards autotuning of OpenMP applications on multicore architectures\",\n        \"Performance analysis and tuning of automatically parallelized OpenMP applications\",\n        \"Effective source-to-source outlining to support whole program empirical optimization\",\n        \"GPTune: Multitask learning for autotuning exascale aApplications\",\n        \"Bliss: Auto-tuning complex applications using a pool of diverse lightweight learning models\",\n        \"Bayesian optimization of HPC systems for energy efficiency\",\n        \"Bayesian optimization for auto-tuning GPU kernels\",\n        \"Slurm workload manager\"\n    ],\n    \"reasoning\": \"Selected these 37 references because they represent foundational work and recent advances in Integrating ytopt and libEnsemble to Autotune OpenMC, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}