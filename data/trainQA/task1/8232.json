{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 56 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: xASTNN: Improved Code Representations for Industrial Practice\n\nPaper Abstract: Abstract. The application of deep learning techniques in software engineering becomes increasingly popular. One key problem is developing high-quality and easy-to-use source code representations for code-related tasks. The research community has acquired impressive results in recent years. However, due to the deployment difficulties and performance bottlenecks, seldom these approaches are applied to the industry. In this paper, we present xASTNN, an eXtreme Abstract Syntax Tree (AST)-based Neural Network for source code representation, aiming to push this technique to industrial practice. The proposed xASTNN has three advantages. First, xASTNN is completely based on widely-used ASTs and does not require complicated data pre-processing, making it applicable to various programming languages and practical scenarios. Second, three closely-related designs are proposed to guarantee the effectiveness of xASTNN, including statement subtree sequence for code naturalness, gated recursive unit for syntactical information, and gated recurrent unit for sequential information. Third, a dynamic batching algorithm is introduced to significantly reduce the time complexity of xASTNN. Two code comprehension downstream tasks, code classification and code clone detection, are adopted for evaluation. The results demonstrate that our xASTNN can improve the state-of-the-art while being faster than the baselines.\n\n{retrieved_text}\n\nGenerate exactly 56 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 56\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"T.J. Watson libraries for analysis (WALA)\",\n        \"javalang\",\n        \"pycparser\",\n        \"Suggesting accurate method and class names\",\n        \"A survey of machine learning for big code and naturalness\",\n        \"Learning to represent programs with graphs\",\n        \"Mining source code repositories at massive scale using language modeling\",\n        \"code2seq: Generating sequences from structured representations of code\",\n        \"code2vec: Learning distributed representations of code\",\n        \"Neural code comprehension: A learnable representation of code semantics\",\n        \"Compiler-based graph representations for deep learning models of code\",\n        \"InferCode: Self-supervised learning of code representations by predicting subtrees\",\n        \"When deep learning met code search\",\n        \"Improved neural machine translation with a syntax-aware encoder and decoder\",\n        \"Gated recursive neural network for Chinese word segmentation\",\n        \"Sentence modeling with gated recursive neural network\",\n        \"On the properties of neural machine translation: Encoder-decoder approaches\",\n        \"Counterfactual Explanations for Models of Code\",\n        \"Support-vector networks\",\n        \"BERT: Pre-training of deep bidirectional transformers for language understanding\",\n        \"Functional code clone detection with syntax and semantics fusion learning\",\n        \"CodeBERT: A pre-trained model for programming and natural languages\",\n        \"Deep code search\",\n        \"GraphCodeBERT: Pre-training code representations with data flow\",\n        \"A Comparison of Code Embeddings and Beyond\",\n        \"Long short-term memory\",\n        \"Deep transfer bug localization\",\n        \"Summarizing source code using a neural attention model\",\n        \"Deckard: Scalable and accurate tree-based detection of code clones\",\n        \"Assessing the generalizability of code2vec token embeddings\",\n        \"What do pre-trained code models know about code?\",\n        \"Structural attention neural networks for improved sentiment analysis\",\n        \"BigCloneBench Considered Harmful for Machine Learning\",\n        \"LLVM: A compilation framework for lifelong program analysis & transformation\",\n        \"Gated graph sequence neural networks\",\n        \"Studying the usage of text-to-text transfer transformer to support code-related tasks\",\n        \"Distributed representations of words and phrases and their compositionality\",\n        \"Convolutional neural networks over tree structures for programming language processing\",\n        \"SPT-code: sequence-to-sequence pre-training for learning source code representations\",\n        \"Code completion with statistical language models\",\n        \"SourcererCC: Scaling code clone detection to big-code\",\n        \"On the effectiveness of transfer learning for code search\",\n        \"Learning Program Semantics with Code Representations: An Empirical Study\",\n        \"Flow2vec: Value-flow-based precise code embedding\",\n        \"Towards a big data curated benchmark of inter-project code clones\",\n        \"Improved Semantic Representations From Tree-Structured Long Short-Term Memory Networks\",\n        \"Attention is all you need\",\n        \"Supervised Deep Features for Software Functional Clone Detection by Exploiting Lexical and Syntactical Information in Source Code.\",\n        \"Deep learning code fragments for code clone detection\",\n        \"SCDetector: software functional clone detection based on semantic tokens analysis\",\n        \"Generating adversarial examples for holding robustness of source code processing models\",\n        \"A novel neural source code representation based on abstract syntax tree\",\n        \"Learning to represent programs with heterogeneous graphs\",\n        \"Deepsim: deep learning code functional similarity\",\n        \"Improving Code Autocompletion with Transfer Learning\",\n        \"Exploring and Evaluating Personalized Models for Code Generation\"\n    ],\n    \"reasoning\": \"Selected these 56 references because they represent foundational work and recent advances in xASTNN: Improved Code Representations for Industrial Practice, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}