{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 46 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: ATHEENA: A Toolflow for Hardware Early-Exit Network Automation\n\nPaper Abstract: Abstract The continued need for improvements in accuracy, throughput, and efficiency of Deep Neural Networks has resulted in a multitude of methods that make the most of custom architectures on FPGAs. These include the creation of hand-crafted networks and the use of quantization and pruning to reduce extraneous network parameters. However, with the potential of static solutions already well exploited, we propose to shift the focus to using the varying difficulty of individual data samples to further improve efficiency and reduce average compute for classification. Input-dependent computation allows for the network to make runtime decisions to finish a task early if the result meets a confidence threshold. Early-Exit network architectures have become an increasingly popular way to implement such behaviour in software. We create A Toolflow for Hardware Early-Exit Network Automation (ATHEENA), an automated FPGA toolflow that leverages the probability of samples exiting early from such networks to scale the resources allocated to different sections of the network. The toolflow uses the data-flow model of fpgaConvNet, extended to support Early-Exit networks as well as Design Space Exploration to optimize the generated streaming architecture hardware with the goal of increasing throughput/reducing area while maintaining accuracy. Experimental results on three different networks demonstrate a throughput increase of 2.00×2.00\\times to 2.78×2.78\\times compared to an optimized baseline network implementation with no early exits. Additionally, the toolflow can achieve a throughput matching the same baseline with as low as 46%percent4646\\% of the resources the baseline requires.\n\n{retrieved_text}\n\nGenerate exactly 46 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 46\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Imagenet classification with deep convolutional neural networks\",\n        \"Open neural network exchange\",\n        \"Deep neural network approximation for custom hardware: Where we’ve been, where we’re going\",\n        \"Pruning convolutional neural networks for resource efficient inference\",\n        \"ESE: efficient speech recognition engine with compressed LSTM on FPGA\",\n        \"Bayesian bits: Unifying quantization and pruning\",\n        \"Low precision networks for efficient inference on fpgas\",\n        \"Flexor: Trainable fractional quantisation\",\n        \"Finn\",\n        \"Neural networks with few multiplications\",\n        \"LogNet: Energy-Efficient Neural Networks Using Logarithmic Computation\",\n        \"Do deep nets really need to be deep?\",\n        \"Mobilenetv2: Inverted residuals and linear bottlenecks\",\n        \"Efficientnet: Rethinking model scaling for convolutional neural networks\",\n        \"Mcunet: Tiny deep learning on iot devices\",\n        \"Branchynet: Fast inference via early exiting from deep neural networks\",\n        \"Multi-scale dense networks for resource efficient image classification\",\n        \"Dynamically throttleable neural networks\",\n        \"Dynamic deep neural networks: Optimizing accuracy-efficiency trade-offs by selective execution\",\n        \"Split computing and early exiting for deep learning applications: Survey and research challenges\",\n        \"Neurosurgeon: Collaborative intelligence between the cloud and mobile edge\",\n        \"A dynamic deep neural network design for efficient workload allocation in edge computing\",\n        \"Adaptive inference through early-exit networks: Design, challenges and directions\",\n        \"Deep Learning\",\n        \"Multi-exit semantic segmentation networks\",\n        \"Learning to stop while learning to predict\",\n        \"Triple wins: Boosting accuracy, robustness and efficiency together by enabling input-adaptive inference\",\n        \"Toolflows for mapping convolutional neural networks on fpgas: A survey and future directions\",\n        \"Angel-eye: A complete design flow for mapping cnn onto embedded fpga\",\n        \"Specializing for efficiency: Customizing ai inference processors on fpgas\",\n        \"From tensorflow graphs to luts and wires: Automated sparse and physically aware cnn hardware generation\",\n        \"fpgaconvnet: Mapping regular and irregular convolutional neural networks on fpgas\",\n        \"Synchronous data flow\",\n        \"High-level synthesis for accelerating the fpga implementation of computationally demanding control algorithms for power converters\",\n        \"SAMO: optimised mapping of convolutional neural networks to streaming architectures\",\n        \"Streamsvd: Low-rank approximation and streaming accelerator co-design\",\n        \"Power-aware fpga mapping of convolutional neural networks\",\n        \"Compressing deep neural networks on fpgas to binary and ternary precision with hls4ml\",\n        \"FINN: A framework for fast, scalable binarized neural network inference\",\n        \"Cascadecnn: Pushing the performance limits of quantisation in convolutional neural networks\",\n        \"A throughput-latency co-optimised cascade of convolutional neural network classifiers\",\n        \"Dynexit: A dynamic early-exit strategy for deep residual networks\",\n        \"A novel design of adaptive and hierarchical convolutional neural networks using partial reconfiguration on fpga\",\n        \"Hardware-software co-design approach for deep learning inference\",\n        \"TorchScript Language Reference\",\n        \"ZC706 Evaluation Board\"\n    ],\n    \"reasoning\": \"Selected these 46 references because they represent foundational work and recent advances in ATHEENA: A Toolflow for Hardware Early-Exit Network Automation, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}