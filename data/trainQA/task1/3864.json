{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 48 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: giotto-ph: A Python Library for High-Performance Computation of Persistent Homology of Vietoris–Rips Filtrations\n\nPaper Abstract: Abstract We introduce giotto-ph, a high-performance, open-source software package for the computation of Vietoris–Rips barcodes. giotto-ph is based on Morozov and Nigmetov’s lockfree (multicore) implementation of Ulrich Bauer’s Ripser package. It also contains a re-working of the GUDHI library’s implementation of Boissonnat and Pritam’s Edge Collapser, which can be used as a pre-processing step to dramatically reduce overall run-times in certain scenarios. Our contribution is twofold: on the one hand, we integrate existing state-of-the-art ideas coherently in a single library and provide Python bindings to the C++ code. On the other hand, we increase parallelization opportunities and improve overall performance by adopting more efficient data structures. Our persistent homology backend establishes a new state of the art, surpassing even GPU-accelerated implementations such as Ripser++ when using as few as 5–10 CPU cores. Furthermore, our implementation of Edge Collapser has fewer software dependencies and improved run-times relative to GUDHI’s original implementation.\n\n{retrieved_text}\n\nGenerate exactly 48 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 48\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Boost C++ Libraries.\",\n        \"Dory: Overcoming Barriers to Computing Persistent Homology.\",\n        \"DTM-based Filtrations.\",\n        \"The framed Morse complex and its invariants.\",\n        \"Ripser: efficient computation of Vietoris–Rips persistence barcodes.\",\n        \"Geometric and Topological Inference.\",\n        \"Edge Collapse and Persistence of Flag Complexes.\",\n        \"Topology and data.\",\n        \"Persistent homology and applied homotopy theory.\",\n        \"Proximity of persistence modules and their diagrams.\",\n        \"The Structure and Stability of Persistence Modules.\",\n        \"An introduction to Topological Data Analysis: fundamental and practical aspects for data scientists.\",\n        \"Persistent homology computation with a twist.\",\n        \"Stability of persistence diagrams.\",\n        \"Vines and vineyards by updating persistence in linear time.\",\n        \"Dualities in persistent (co)homology.\",\n        \"Optimal matching between reduced size functions.\",\n        \"A Short Course in Computational Geometry and Topology.\",\n        \"Persistent homology—a survey.\",\n        \"Topological persistence and simplification.\",\n        \"Persistent Homology: Theory and Practice.\",\n        \"A distance for similarity classes of submanifolds of a Euclidean space.\",\n        \"Measuring shapes by size functions.\",\n        \"Barcodes: The persistent topology of data.\",\n        \"Eigen v3.\",\n        \"A Survey of Topological Machine Learning Methods.\",\n        \"Matroids and canonical forms: Theory and applications, 2020.\",\n        \"Matroid Filtrations and Computational Persistent Homology.\",\n        \"Lock-Free Ripser.\",\n        \"Towards Lockfree Persistent Homology.\",\n        \"Computational Algebraic Topology.\",\n        \"Oineus.\",\n        \"A roadmap for the computation of persistent homology.\",\n        \"Persistence Theory: From Quiver Representations to Data Analysis, vol. 209 of Mathematical Surveys and Monographs.\",\n        \"A brief history of persistence.\",\n        \"Sliding windows and persistence: An application of topological methods to signal analysis.\",\n        \"Topological Persistence in Geometry and Analysis.\",\n        \"Edge collapse, 3.4.1 ed.\",\n        \"Towards computing homology from finite approximations.\",\n        \"Topological Signal Processing.\",\n        \"giotto-tda: A Topological Data Analysis Toolkit for Machine Learning and Data Exploration.\",\n        \"GUDHI User and Reference Manual, 3.4.1 ed.\",\n        \"Topological Data Analysis for Scientific Visualization.\",\n        \"Ripser.py: A lean persistent homology library for Python.\",\n        \"Fast Computing of Persistence Diagram of Flag Complexes.\",\n        \"Computing persistent homology in parallel with a functional language.\",\n        \"GPU-accelerated computation of Vietoris–Rips persistence barcodes.\",\n        \"Computing persistent homology.\"\n    ],\n    \"reasoning\": \"Selected these 48 references because they represent foundational work and recent advances in giotto-ph: A Python Library for High-Performance Computation of Persistent Homology of Vietoris–Rips Filtrations, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}