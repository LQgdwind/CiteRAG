{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 51 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Advancing BDD Software Testing: Dynamic Scenario Re-Usability And Step Auto-Complete For Cucumber Framework\n\nPaper Abstract: Abstract This paper presents and implements the re-usability of scenarios within scenarios for behavior-driven development (BDD) Gherkin test scripts in the Cucumber Java framework. Though the focus of the presented work is on scenario re-usability through an implementation within the Cucumber BDD Java framework, the paper also dives a little into the limitations of Cucumber’s single-threaded scenario execution model. This implementation increases the modularity and efficiency of the test suite. The paper also discusses VSCode’s step definition auto-completion integration, simplifying the test script writing process. This functionality is handy to Quality Assurance(QA) test writers, allowing instant access to relevant step definitions. In addition, the use of these methods in a popular continuous integration and delivery platform Jenkins as a Maven Java project is discussed. This integration with Jenkins, facilitates for more efficient test automation for continuous deployment scenarios. Empirical research and practical applications reveal significant improvements in the speed and efficiency of test writing, which is especially valuable for large and complex software projects. Integrating these methods into traditional sequential BDD practices paves the way towards more effective, efficient, and sustainable test automation strategies.\n\n{retrieved_text}\n\nGenerate exactly 51 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 51\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"BDD in Action: Behavior-driven development for the whole software lifecycle\",\n        \"The implementation of atdd and bdd from testing perspectives\",\n        \"Facilitating test-driven development via domain-specific languages in computational science software engineering\",\n        \"Cucumber (Gherkin) Full Support\",\n        \"IntelliJ IDEA\",\n        \"Visual studio code\",\n        \"Comparative study of robot framework and cucumber as bdd automated testing tools\",\n        \"Automated driver testing for small footprint embedded systems\",\n        \"A study of the characteristics of behaviour driven development\",\n        \"On the applicability of bdd in a business intelligence project: experience report\",\n        \"On requirements for acceptance testing automation tools in behavior driven software development\",\n        \"Tool for generating behavior-driven development test-cases\",\n        \"Gobeat: Towards a methodology to support mas test case definition\",\n        \"Automated testing framework development based on social interaction and communication principles\",\n        \"Legislation-driven development of a gift aid system using event-b\",\n        \"Behaviour-driven requirements engineering for agile product line engineering\",\n        \"Towards a taxonomy for applying behavior-driven development (bdd)\",\n        \"Documentation by example\",\n        \"Toward leveraging gherkin controlled natural language and machine translation for global product information development\",\n        \"Augmented system verification using automated testing\",\n        \"Behavior driven testing in alma telescope calibration software\",\n        \"A framework to diminish the gap between the business specialist and the software designer\",\n        \"A model-driven approach for behavior-driven gui testing\",\n        \"Leveraging semi-formal approaches for depdevops\",\n        \"Towards behavior-driven graphical user interface testing\",\n        \"Behavior-driven quality first agile testing for cloud service\",\n        \"Gherkin syntax extension for parameterization of network switch configurations in test specification\",\n        \"Behavior-driven re-engineering for testing the cloud\",\n        \"Behavior-driven development of software product lines\",\n        \"Towards accountability driven development for machine learning systems\",\n        \"Ontological syntax highlighting\",\n        \"bdd assemble!: A paper-based game proposal for behavior driven development design learning\",\n        \"Combining stpa and bdd for safety analysis and verification in agile development: A controlled experiment\",\n        \"Ss-bdd: Automated acceptance testing for spreadsheets\",\n        \"Integrating behavior driven development and programming by contract\",\n        \"Orchestration of domain specific test languages with a behavior driven development approach\",\n        \"Using behaviour-driven requirements engineering for establishing and managing agile product lines\",\n        \"Using behaviour-driven development with hardware-software co-design for autonomous load management\",\n        \"Using executable specification and regression testing for broadcast mechanism of visual programming language on smartphones\",\n        \"Reengineering legacy systems with transaction model\",\n        \"Behaviour driven development for hardware design\",\n        \"Modelling gherkin scenarios using uml\",\n        \"Evaluation of behavior-driven development\",\n        \"Applying problem frames in behavior-driven development for smart cone system\",\n        \"Intuitive design: framing a software test system as a status reporting tool for business\",\n        \"Enterprise ontology-driven development\",\n        \"Acceptance tests over microservices architecture using behaviour-driven development\",\n        \"Reusable test cases for automated gui testing on prototype and implementation using an image-based capture and replay tool\",\n        \"Challenges & opportunities in low-code testing\",\n        \"Assessing Reusability in Automated Acceptance Tests\",\n        \"A reusable automated acceptance testing architecture for microservices in behavior-driven development\"\n    ],\n    \"reasoning\": \"Selected these 51 references because they represent foundational work and recent advances in Advancing BDD Software Testing: Dynamic Scenario Re-Usability And Step Auto-Complete For Cucumber Framework, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}