{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 57 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Holistic Combination of Structural and Textual Code Information for Context based API Recommendation\n\nPaper Abstract: Abstract Context based API recommendation is an important way to help developers find the needed APIs effectively and efficiently. For effective API recommendation, we need not only a joint view of both structural and textual code information, but also a holistic view of correlated API usage in control and data flow graph as a whole. Unfortunately, existing API recommendation methods exploit structural or textual code information separately. In this work, we propose a novel API recommendation approach called APIRec-CST (API Recommendation by Combining Structural and Textual code information). APIRec-CST is a deep learning model that combines the API usage with the text information in the source code based on an API Context Graph Network and a Code Token Network that simultaneously learn structural and textual features for API recommendation. We apply APIRec-CST to train a model for JDK library based on 1,914 open-source Java projects and evaluate the accuracy and MRR (Mean Reciprocal Rank) of API recommendation with another 6 open-source projects. The results show that our approach achieves respectively a top-1, top-5, top-10 accuracy and MRR of 60.3%, 81.5%, 87.7% and 69.4%, and significantly outperforms an existing graph-based statistical approach and a tree-based deep learning approach for API recommendation. A further analysis shows that textual code information makes sense and improves the accuracy and MRR. We also conduct a user study in which two groups of students are asked to finish 6 programming tasks with or without our APIRec-CST plugin. The results show that APIRec-CST can help the students to finish the tasks faster and more accurately and the feedback on the usability is overwhelmingly positive.\n\n{retrieved_text}\n\nGenerate exactly 57 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 57\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"On the naturalness of software\",\n        \"Mining source code repositories at massive scale using language modeling\",\n        \"A statistical semantic language model for source code\",\n        \"On the localness of software\",\n        \"Code completion with statistical language models\",\n        \"A deep language model for software code\",\n        \"A deep neural network language model with contexts for source code\",\n        \"Graph-based statistical language model for code\",\n        \"Effective API recommendation without historical software repositories\",\n        \"Gated graph sequence neural networks\",\n        \"The graph neural network model\",\n        \"A learning rule for asynchronous perceptrons with feedback in a combinatorial environment.\",\n        \"Generalization of back-propagation to recurrent neural networks\",\n        \"Learning phrase representations using RNN encoder-decoder for statistical machine translation\",\n        \"Camel case\",\n        \"Glove\",\n        \"Javaparser\",\n        \"Stanford corenlp\",\n        \"Tensorflow\",\n        \"gg-nns reference implementation\",\n        \"Replication package\",\n        \"Generative API usage code recommendation with parameter concretization\",\n        \"Graph-based mining of multiple object usage patterns\",\n        \"Galaxy\",\n        \"Log4j\",\n        \"Jgit\",\n        \"Froyo-email\",\n        \"Grid-sphere\",\n        \"Itext\",\n        \"API code recommendation using statistical learning from fine-grained changes\",\n        \"When code completion fails: a case study on real-world completions\",\n        \"Stack overflow question\",\n        \"BCC: enhancing code completion for better API usability\",\n        \"Towards a better code completion system by API grouping, filtering, and popularity-based ranking\",\n        \"An evaluation of the strategies of sorting, filtering, and grouping API methods for code completion\",\n        \"Identifier-based context-dependent API method recommendation\",\n        \"Learning from examples to improve code completion systems\",\n        \"A simple, efficient, context-sensitive approach for code completion\",\n        \"Parameter-free probabilistic API mining at github scale\",\n        \"Mining succinct and high-coverage API usage patterns from source code\",\n        \"MAPO: mining and recommending API usage patterns\",\n        \"Graph-based pattern-oriented, context-sensitive source code completion\",\n        \"A convolutional attention network for extreme summarization of source code\",\n        \"A syntactic neural model for general-purpose code generation\",\n        \"A grammar-based structural CNN decoder for code generation\",\n        \"Latent predictor networks for code generation\",\n        \"Abstract syntax networks for code generation and semantic parsing\",\n        \"On end-to-end program generation from user intention by deep neural networks\",\n        \"Deep API learning\",\n        \"Deep code search\",\n        \"Deep code comment generation\",\n        \"Summarizing source code with transferred API knowledge\",\n        \"Automatic generation of text descriptive comments for code blocks\",\n        \"Improving automatic source code summarization via deep reinforcement learning\",\n        \"Summarizing source code using a neural attention model\",\n        \"Deep learning for just-in-time defect prediction\",\n        \"Automatically learning semantic features for defect prediction\"\n    ],\n    \"reasoning\": \"Selected these 57 references because they represent foundational work and recent advances in Holistic Combination of Structural and Textual Code Information for Context based API Recommendation, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}