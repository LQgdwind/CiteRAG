{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 47 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: NSNet: A General Neural Probabilistic Framework for Satisfiability Problems\n\nPaper Abstract: Abstract We present the Neural Satisfiability Network (NSNet), a general neural framework that models satisfiability problems as probabilistic inference and meanwhile exhibits proper explainability. Inspired by the Belief Propagation (BP), NSNet uses a novel graph neural network (GNN) to parameterize BP in the latent space, where its hidden representations maintain the same probabilistic interpretation as BP. NSNet can be flexibly configured to solve both SAT and #SAT problems by applying different learning objectives. For SAT, instead of directly predicting a satisfying assignment, NSNet performs marginal inference among all satisfying solutions, which we empirically find is more feasible for neural networks to learn. With the estimated marginals, a satisfying assignment can be efficiently generated by rounding and executing a stochastic local search. For #SAT, NSNet performs approximate model counting by learning the Bethe approximation of the partition function. Our evaluations show that NSNet achieves competitive results in terms of inference accuracy and time efficiency on multiple SAT and #SAT datasets 111Code is available at https://github.com/zhaoyu-li/NSNet..\n\n{retrieved_text}\n\nGenerate exactly 47 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 47\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Fast and flexible probabilistic model counting\",\n        \"Learning to solve circuit-sat: An unsupervised differentiable approach\",\n        \"PDP: A general neural framework for learning constraint satisfaction solvers\",\n        \"The community structure of sat formulas\",\n        \"On the glucose sat solver\",\n        \"Improving stochastic local search for SAT with a new probability distribution\",\n        \"Statistical theory of superlattices\",\n        \"Handbook of satisfiability, volume 185\",\n        \"Survey propagation: An algorithm for satisfiability\",\n        \"Predicting propositional satisfiability via end-to-end learning\",\n        \"A scalable approximate model counter\",\n        \"Bounded model checking using satisfiability solving\",\n        \"Experimental results on the crossover point in random 3-sat\",\n        \"Fast probabilistic planning through weighted model counting\",\n        \"Probabilistic planning via heuristic forward search and weighted model counting\",\n        \"Fast graph representation learning with pytorch geometric\",\n        \"A modularity-based random sat instances generator\",\n        \"Machine learning methods in solving the boolean satisfiability problem\",\n        \"Efficient sat-based bounded model checking for software verification\",\n        \"On computing minimal independent support and its applications to sampling and counting\",\n        \"Neural heuristics for SAT solving\",\n        \"Adam: A method for stochastic optimization\",\n        \"Belief propagation neural networks\",\n        \"Can q-learning with graph networks learn a generalizable branching heuristic for a SAT solver?\",\n        \"Cnfgen: A generator of crafted benchmarks\",\n        \"Gated graph sequence neural networks\",\n        \"Boolean satisfiability in electronic design automation\",\n        \"Analytic and algorithmic solution of random satisfiability problems\",\n        \"Dsharp: Fast d-dnnf compilation with sharpsat\",\n        \"Goal-aware neural SAT solver\",\n        \"Pytorch: An imperative style, high-performance deep learning library\",\n        \"Neural enhanced belief propagation on factor graphs\",\n        \"Guiding high-performance SAT solvers with unsat-core predictions\",\n        \"Learning a SAT solver from single-bit supervision\",\n        \"Checking safety properties using induction and a sat-solver\",\n        \"BIRD: engineering an efficient CNF-XOR SAT solver and its applications to approximate model counting\",\n        \"Extending sat solvers to cryptographic problems\",\n        \"The complexity of approximate counting\",\n        \"Equivariant neural network for factor graphs\",\n        \"Implementing efficient all solutions sat solvers\",\n        \"Learning branching heuristics for propositional model counting\",\n        \"The complexity of enumeration and reliability problems\",\n        \"A new approach to model counting\",\n        \"Learning local search heuristics for boolean satisfiability\",\n        \"Inference in probabilistic graphical models by graph neural networks\",\n        \"Nlocalsat: Boosting local search with solution prediction\",\n        \"Factor graph neural networks\"\n    ],\n    \"reasoning\": \"Selected these 47 references because they represent foundational work and recent advances in NSNet: A General Neural Probabilistic Framework for Satisfiability Problems, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}