{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 53 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Rooting Formal Methods within Higher Education Curricula for Computer Science and Software Engineering — A White Paper —\n\nPaper Abstract: Abstract This white paper argues that formal methods need to be better rooted in higher education curricula for computer science and software engineering programmes of study. To this end, it advocates • improved teaching of formal methods; • systematic highlighting of formal methods within existing, ‘classical’ computer science courses; and • the inclusion of a compulsory formal methods course in computer science and software engineering curricula. These recommendations are based on the observations that • formal methods are an essential and cost-effective means to increase software quality; however • computer science and software engineering programmes typically fail to provide adequate training in formal methods; and thus • there is a lack of computer science graduates who are qualified to apply formal methods in industry. This white paper is the result of a collective effort by authors and participants of the 1st International Workshop on Formal Methods – Fun for Everybody which was held in Bergen, Norway, 2-3 December 2019. As such, it represents insights based on learning and teaching computer science and software engineering (with or without formal methods) at various universities across Europe.\n\n{retrieved_text}\n\nGenerate exactly 53 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 53\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Computer science curricula 2013: Curriculum guidelines for undergraduate degree programs in computer science\",\n        \"Software engineering 2014: Curriculum guidelines for undergraduate degree programs in computer science\",\n        \"ML + FV = ♡♡\\\\heartsuit? A survey on the application of machine learning to formal verification\",\n        \"Experiences in the industrial use of formal methods\",\n        \"One-click formal methods\",\n        \"Supporting formal method teaching with real-life protocols\",\n        \"An introductory course on programming based on formal specification and program calculation\",\n        \"Teaching and practicing computer science at the university level\",\n        \"A lightweight technique for distributed and incremental program verification\",\n        \"Formal verification problems in a big data world: towards a mighty synergy\",\n        \"Oh! Pascal\",\n        \"Continuous formal verification of Amazon s2n\",\n        \"Compositional shape analysis by means of bi-abduction\",\n        \"Human-oriented formal modelling of human-computer interaction\",\n        \"From stories to concurrency: How children can play with formal methods\",\n        \"Adapting to different types of target audience in teaching formal methods\",\n        \"Teaching formal methods for software engineering – ten principles\",\n        \"Java – How to program\",\n        \"Scaling static analyses at facebook\",\n        \"Computer science education: Where are the software engineers of tomorrow?\",\n        \"Assigning meaning to programs\",\n        \"When the student becomes the teacher\",\n        \"Formal Methods for Safe and Secure Computers Systems\",\n        \"Formal methods: Never too young to start\",\n        \"The Java language specification – Java SE 14 Edition\",\n        \"Prob and jupyter for logic, set theory, theoretical computer science and formal methods\",\n        \"A new answer to “how important is mathematics to the software practitioner?”\",\n        \"Some Trends in Formal Methods Applications to Railway Signaling, pages 61–84\",\n        \"The science of brute force\",\n        \"Safety verification of deep neural networks\",\n        \"An axiomatic definition of the programming language PASCAL\",\n        \"ISO 7185:1990 Information technology – Programming languages – Pascal\",\n        \"Techniques for modelling and verifying railway interlockings\",\n        \"Experience report on an inquiry-based course on model checking\",\n        \"Are you sure your software will not kill anyone?\",\n        \"Building High Integrity Applications with SPARK\",\n        \"Dynamic models for the formal verification of big data applications via stochastic model checking\",\n        \"Teaching them early: Formal methods in school\",\n        \"How Amazon web services uses formal methods\",\n        \"Teaching formal methods for fun using Maude\",\n        \"Teaching EBNF first in CS 1\",\n        \"Writing a model checker in 80 days: Reusable libraries and custom implementation\",\n        \"Formal Methods for Software Engineering\",\n        \"Railway modelling in CSP||||||B: the double junction case study\",\n        \"Teaching the mathematics of software design\",\n        \"Formal verification of neural network controlled autonomous systems\",\n        \"Tricorder: Building a program analysis ecosystem\",\n        \"Engaging students with theory through ACM collegiate programming contests\",\n        \"Process Mining — Data Science in Action\",\n        \"The Python Language Reference – Release 3.8.3\",\n        \"A specifier’s introduction to formal methods\",\n        \"Formal security analysis of neural networks using symbolic intervals\",\n        \"Teaching formal methods in academia: a systematic literature review\"\n    ],\n    \"reasoning\": \"Selected these 53 references because they represent foundational work and recent advances in Rooting Formal Methods within Higher Education Curricula for Computer Science and Software Engineering — A White Paper —, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}