{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 49 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Vulcan: Solving the Steiner Tree Problem with Graph Neural Networks and Deep Reinforcement Learning\n\nPaper Abstract: Abstract Steiner Tree Problem (STP) in graphs aims to find a tree of minimum weight in the graph that connects a given set of vertices. It is a classic NP-hard combinatorial optimization problem and has many real-world applications (e.g., VLSI chip design, transportation network planning and wireless sensor networks). Many exact and approximate algorithms have been developed for STP, but they suffer from high computational complexity and weak worst-case solution guarantees, respectively. Heuristic algorithms are also developed. However, each of them requires application domain knowledge to design and is only suitable for specific scenarios. Motivated by the recently reported observation that instances of the same NP-hard combinatorial problem may maintain the same or similar combinatorial structure but mainly differ in their data, we investigate the feasibility and benefits of applying machine learning techniques to solving STP. To this end, we design a novel model Vulcan based on novel graph neural networks and deep reinforcement learning. The core of Vulcan is a novel, compact graph embedding that transforms high-dimensional graph structure data (i.e., path-changed information) into a low-dimensional vector representation. Given an STP instance, Vulcan uses this embedding to encode its path-related information and sends the encoded graph to a deep reinforcement learning component based on a double deep Q network (DDQN) to find solutions. In addition to STP, Vulcan can also find solutions to a wide range of NP-hard problems (e.g., SAT, MVC and X3C) by reducing them to STP. We implement a prototype of Vulcan and demonstrate its efficacy and efficiency with extensive experiments using real-world and synthetic datasets.\n\n{retrieved_text}\n\nGenerate exactly 49 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 49\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Fast Detection of Maximum Common Subgraph via Deep Q-Learning\",\n        \"Exploratory combinatorial optimization with reinforcement learning\",\n        \"Neural combinatorial optimization with reinforcement learning\",\n        \"NETWORK DESIGN PROBLEMS: STEINER TREES AND SPANNING K-TREES\",\n        \"Improving optimization bounds using machine learning: Decision diagrams meet deep reinforcement learning\",\n        \"Combining Reinforcement Learning and Constraint Programming for Combinatorial Optimization\",\n        \"Solving the Steiner Tree Problem on a Graph Using Branch and Cut\",\n        \"Discriminative embeddings of latent variable models for structured data\",\n        \"Convolutional neural networks on graphs with fast localized spectral filtering\",\n        \"The Steiner problem in graphs\",\n        \"On the evolution of random graphs\",\n        \"Computing near-optimal solutions to the Steiner problem in a graph using a genetic algorithm\",\n        \"The Steiner tree packing problem in VLSI design\",\n        \"Representation learning on graphs: Methods and applications\",\n        \"Computers and intractability: a guide to the theory of NP-completeness (michael r. garey and david s. johnson)\",\n        \"SATLIB: An online resource for research on SAT\",\n        \"Separator-Based Pruned Dynamic Programming for Steiner Tree\",\n        \"Using neural networks to solve Steiner Tree Problem\",\n        \"Reducibility among combinatorial problems\",\n        \"Star: Steiner-tree approximation in relationship graphs\",\n        \"Learning combinatorial optimization algorithms over graphs\",\n        \"Semi-supervised classification with graph convolutional networks\",\n        \"Solving Steiner tree problems in graphs to optimality\",\n        \"SteinLib: An updated library on Steiner tree problems in graphs\",\n        \"A fast algorithm for Steiner trees\",\n        \"Combinatorial optimization with graph convolutional networks and guided tree search\",\n        \"Learning entity and relation embeddings for knowledge resolution\",\n        \"Aligning Users across Social Networks Using Network Embedding\",\n        \"An Ant Algorithm for the Steiner Tree Problem in Graphs\",\n        \"Predict anchor links across social networks via an embedding approach\",\n        \"Learning Heuristics over Large Graphs via Deep Reinforcement Learning\",\n        \"Human-level control through deep reinforcement learning\",\n        \"A critical point for random graphs with a given degree sequence\",\n        \"Graph Embedding for Combinatorial Optimization: A Survey\",\n        \"Neural Network for Optimal Steiner Tree Computation\",\n        \"The Steiner tree problem: a tour through graphs, algorithms, and complexity\",\n        \"struc2vec: Learning node representations from structural identity\",\n        \"Steiner tree NP-completeness proof\",\n        \"Mastering the game of go without human knowledge\",\n        \"Co-training for policy learning\",\n        \"Reinforcement learning: An introduction\",\n        \"Deep reinforcement learning with double q-learning\",\n        \"Design of multimodal transport networks: A hierarchical approach\",\n        \"Graph Attention Networks\",\n        \"Neural Execution of Graph Algorithms\",\n        \"Knowledge graph embedding by translating on hyperplanes\",\n        \"Collective dynamics of ‘small-world’networks\",\n        \"Graph convolutional neural networks for web-scale recommender systems\",\n        \"Scalable graph embedding for asymmetric proximity\"\n    ],\n    \"reasoning\": \"Selected these 49 references because they represent foundational work and recent advances in Vulcan: Solving the Steiner Tree Problem with Graph Neural Networks and Deep Reinforcement Learning, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}