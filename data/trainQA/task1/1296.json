{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 57 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Data Oblivious Algorithms for MulticoresThis work was supported in part by NSF grant CCF-2008241, CNS-2128519, and CNS-2044679. The extended abstract of this paper appears in Proc. ACM Symp. on Parallelism in Algorithms and Architectures (SPAA), 2021.\n\nPaper Abstract: A data-oblivious algorithm is an algorithm whose memory access pattern is independent of the input values. As secure processors such as Intel SGX (with hyperthreading) become widely adopted, there is a growing appetite for private analytics on big data. Most prior works on data-oblivious algorithms adopt the classical PRAM model to capture parallelism. However, it is widely understood that PRAM does not best capture realistic multicore processors, nor does it reflect parallel programming models adopted in practice. We initiate the study of parallel data oblivious algorithms on realistic multicores, best captured by the binary fork-join model of computation. We present a data-oblivious CREW binary fork-join sorting algorithm with optimal total work and optimal (cache-oblivious) cache complexity, and in O‚Äã(log‚Å°n‚Äãlog‚Å°log‚Å°n)ùëÇùëõùëõO(\\log n\\log\\log n) span (i.e., parallel time); these bounds match the best-known bounds for binary fork-join cache-efficient insecure algorithms. Using our sorting algorithm as a core primitive, we show how to data-obliviously simulate general PRAM algorithms in the binary fork-join model with non-trivial efficiency, and we present data-oblivious algorithms for several applications including list ranking, Euler tour, tree contraction, connected components, and minimum spanning forest. All of our data oblivious algorithms have bounds that either match or improve over the best known bounds for insecure algorithms. Complementing these asymptotically efficient results, we present a practical variant of our sorting algorithm that is self-contained and potentially implementable. It has optimal caching cost, and it is only a log‚Å°log‚Å°nùëõ\\log\\log n factor off from optimal work and about a log‚Å°nùëõ\\log n factor off in terms of span; moreover, it achieves small constant factors in its bounds. We also present an EREW variant with optimal work and caching cost, and with the same asymptotic span.\n\n{retrieved_text}\n\nGenerate exactly 57 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 57\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"The data locality of work stealing\",\n        \"Thread scheduling for multiprogrammed multiprocessors\",\n        \"Low-depth parallel algorithms for the binary-forking model without atomics\",\n        \"Bucket oblivious sort: An extremely simple oblivious sort\",\n        \"Fundamental parallel algorithms for private-chip multiprocessors\",\n        \"OptORAMa: Optimal Oblivious RAM\",\n        \"Oblivious parallel tight compaction\",\n        \"Optimal Oblivious parallel RAM\",\n        \"An O(n log n) sorting network\",\n        \"The Input/Output Complexity of Sorting and Related Problems\",\n        \"Sorting Networks and Their Applications\",\n        \"Provably good multicore cache performance for divide-and-conquer algorithms\",\n        \"Oblivious parallel ram\",\n        \"The design and implementation of the habanero-java parallel programming language\",\n        \"Scheduling irregular parallel computations on hierarchical caches\",\n        \"Optimal parallel algorithms in the binary-forking model\",\n        \"Effectively sharing a cache among threads\",\n        \"Provably efficient scheduling for languages with fine-grained parallelism\",\n        \"Low depth cache-oblivious algorithms\",\n        \"Space-efficient scheduling of multithreaded computations\",\n        \"Scheduling multithreaded computations by work stealing\",\n        \"Data-oblivious graph algorithms for secure computation and outsourcing\",\n        \"On the depth of oblivious parallel ram\",\n        \"External-memory graph algorithms\",\n        \"Cache-oblivious and data-oblivious sorting and applications\",\n        \"X10: An object-oriented approach to non-uniform cluster computing\",\n        \"Introduction to Algorithms, Third Edition\",\n        \"Cache-efficient dynamic programming algorithms for multicores\",\n        \"The cache-oblivious gaussian elimination paradigm: Theoretical framework, parallelization and experimental evaluation\",\n        \"Resource oblivious sorting on multicores\",\n        \"Efficient resource oblivious algorithms for multicores with false sharing\",\n        \"Revisiting the cache miss analysis of multithreaded algorithms\",\n        \"Analysis of randomized work-stealing with false sharing\",\n        \"Bounding cache miss costs of multithreaded computations under general schedulers\",\n        \"Oblivious algorithms for multicores and networks of processors\",\n        \"Circuit OPRAM: unifying statistically and computationally secure orams and oprams\",\n        \"Cache-oblivious algorithms\",\n        \"The implementation of the cilk-5 multithreaded language\",\n        \"The cache complexity of multithreaded cache-oblivious algorithms\",\n        \"Software protection and simulation on oblivious RAMs\",\n        \"Towards a theory of software protection and simulation by oblivious RAMs\",\n        \"Data-oblivious external-memory algorithms for the compaction, selection, and sorting of outsourced data\",\n        \"Zig-zag sort: A simple deterministic data-oblivious sorting algorithm running in O(N Log N) time\",\n        \"Graph drawing in the cloud: Privately visualizing relational data using small working storage\",\n        \"Data-oblivious graph algorithms in outsourced external memory\",\n        \"Access pattern disclosure on searchable encryption: Ramification, attack and mitigation\",\n        \"An Introduction to Parallel Algorithms\",\n        \"Optimal oblivious priority queues and offline oblivious RAM\",\n        \"Optimal parallel evaluation of tree-structured computations by raking\",\n        \"Parallel algorithms for shared-memory machines\",\n        \"Oblivm: A programming framework for secure computation\",\n        \"Graphsc: Parallel secure computation made easy\",\n        \"A randomized time-work optimal parallel algorithm for finding a minimum spanning forest\",\n        \"Oblivious RAM with O‚Äã((log‚Å°N)3)ùëÇsuperscriptùëÅ3O((\\\\log N)^{3}) worst-case cost\",\n        \"Path oblivious heap: Optimal and practical oblivious priority queue\",\n        \"An O(log n) parallel connectivity algorithm\",\n        \"Controlled-channel attacks: Deterministic side channels for untrusted operating systems\"\n    ],\n    \"reasoning\": \"Selected these 57 references because they represent foundational work and recent advances in Data Oblivious Algorithms for MulticoresThis work was supported in part by NSF grant CCF-2008241, CNS-2128519, and CNS-2044679. The extended abstract of this paper appears in Proc. ACM Symp. on Parallelism in Algorithms and Architectures (SPAA), 2021., providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}