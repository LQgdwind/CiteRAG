{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 47 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Pattern-Based Peephole Optimizations with Java JIT Tests\n\nPaper Abstract: Abstract. We present JOG, a framework that facilitates developing Java JIT peephole optimizations alongside JIT tests. JOG enables developers to write a pattern, in Java itself, that specifies desired code transformations by writing code before and after the optimization, as well as any necessary preconditions. Such patterns can be written in the same way that tests of the optimization are already written in OpenJDK. JOG translates each pattern into C/C++ code that can be integrated as a JIT optimization pass. JOG also generates Java tests for optimizations from patterns. Furthermore, JOG can automatically detect possible shadow relation between a pair of optimizations where the effect of the shadowed optimization is overridden by another. Our evaluation shows that JOG makes it easier to write readable JIT optimizations alongside tests without decreasing the effectiveness of JIT optimizations. We wrote 162 patterns, including 68 existing optimizations in OpenJDK, 92 new optimizations adapted from LLVM, and \\numberstringnum2 new optimizations that we proposed. We opened eight pull requests (PRs) for OpenJDK, including six for new optimizations, one on removing shadowed optimizations, and one for newly generated JIT tests; seven PRs have already been integrated into the master branch of OpenJDK.\n\n{retrieved_text}\n\nGenerate exactly 47 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 47\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Finding Missed Compiler Optimizations by Differential Testing\",\n        \"Formal Verification of an SSA-Based Middle-End for CompCert\",\n        \"gcc/match.pd at master - gcc-mirror/gcc\",\n        \"The DaCapo Benchmarks: Java Benchmarking Development and Analysis\",\n        \"Optgen: A Generator for Local Optimizations\",\n        \"Learning a Metric for Code Readability\",\n        \"Verified Code Generation for the Polyhedral Model\",\n        \"Z3: An Efficient SMT Solver\",\n        \"An Introduction to the Bootstrap\",\n        \"CAnDL: A Domain Specific Language for Compiler Analysis\",\n        \"The Java® Language Specification\",\n        \"CTOS: Compiler Testing for Optimization Sequences of LLVM\",\n        \"Proving Optimizations Correct Using Parameterized Program Equivalence\",\n        \"Automatically Proving the Correctness of Compiler Optimizations\",\n        \"Automated Soundness Proofs for Dataflow Analyses and Transformations via Local Rules\",\n        \"Formal Verification of a Realistic Compiler\",\n        \"llvm-project/llvm/lib/Transforms/InstCombine at main - llvm/llvm-project\",\n        \"llvm/llvm-project: The LLVM Project is a collection of modular and reusable compiler and toolchain technologies. Note: the repository does not accept github pull requests at this moment. Please submit your patches at http://reviews.llvm.org.\",\n        \"Provably Correct Peephole Optimizations with Alive\",\n        \"Future Directions for Optimizing Compilers\",\n        \"Peephole Optimization\",\n        \"Termination-Checking for LLVM Peephole Optimizations\",\n        \"Alive-FP: Automated Verification of Floating Point Based Peephole Optimizations in LLVM\",\n        \"Advanced Compiler Design and Implementation\",\n        \"Verified Peephole Optimizations for CompCert\",\n        \"Loop Detection by Logically Constrained Term Rewriting\",\n        \"LifeJacket: Verifying Precise Floating-Point Optimizations in LLVM\",\n        \"jdk/AddINodeIdealizationTests.java at master - openjdk/jdk - GitHub\",\n        \"jdk/subnode.cpp at b334d96 - openjdk/jdk - GitHub\",\n        \"jdk/test/hotspot/jtreg/compiler/lib/ir_framework at master - openjdk/jdk - GitHub\",\n        \"8277882: New subnode ideal optimization: converting ”c0 - (x + c1)” into ”(c0 - c1) - x” - Pull Request #6441 - openjdk/jdk\",\n        \"8278114: New addnode ideal optimization: converting ”x + x” into ”x ¡¡ 1” - Pull Request #6675 - openjdk/jdk\",\n        \"8278471: Remove unreached rules in AddNode::IdealIL - Pull Request #6752 - openjdk/jdk\",\n        \"8279607: Existing optimization ”~x+1” -¿ ”-x” can be generalized to ”~x+c” -¿ ”(c-1)-x”. - Pull Request #6858 - openjdk/jdk\",\n        \"8281453: New optimization: convert ~x into -1-x when ~x is used in an arithmetic expression - Pull Request #7376 - openjdk/jdk\",\n        \"8281518: New optimization: convert ”(x—y)-(x^y)” into ”x&y” - Pull Request #7395 - openjdk/jdk\",\n        \"8283094: Add Ideal transformation: x + (con - y) -¿ (x - y) + con - Pull Request #7795 - openjdk/jdk\",\n        \"8297384: Add IR tests for existing idealizations of arithmetic nodes by CptGit - Pull Request #11049 - openjdk/jdk\",\n        \"jdk/addnode.cpp at b334d96 - openjdk/jdk - GitHub\",\n        \"JDK Bug System\",\n        \"openjdk/jdk: JDK main-line development\",\n        \"Renaissance: Benchmarking Suite for Parallel Applications on the JVM\",\n        \"SPECjvm2008\",\n        \"Match and Simplify\",\n        \"Finding Missed Optimizations through the Lens of Dead Code Elimination\",\n        \"COpt: A High Level Domain-Specific Language to Generate Compiler Optimizers\",\n        \"An Approach for Exploring Code Improving Transformations\"\n    ],\n    \"reasoning\": \"Selected these 47 references because they represent foundational work and recent advances in Pattern-Based Peephole Optimizations with Java JIT Tests, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}