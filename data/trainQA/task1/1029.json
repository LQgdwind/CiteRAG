{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 48 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Tsunami: A Learned Multi-dimensional Index for Correlated Data and Skewed Workloads\n\nPaper Abstract: Abstract. Filtering data based on predicates is one of the most fundamental operations for any modern data warehouse. Techniques to accelerate the execution of filter expressions include clustered indexes, specialized sort orders (e.g., Z-order), multi-dimensional indexes, and, for high selectivity queries, secondary indexes. However, these schemes are hard to tune and their performance is inconsistent. Recent work on learned multi-dimensional indexes has introduced the idea of automatically optimizing an index for a particular dataset and workload. However, the performance of that work suffers in the presence of correlated data and skewed query workloads, both of which are common in real applications. In this paper, we introduce Tsunami, which addresses these limitations to achieve up to 6×\\times faster query performance and up to 8×\\times smaller index size than existing learned multi-dimensional indexes, in addition to up to 11×\\times faster query performance and 170×\\times smaller index size than optimally-tuned traditional indexes.\n\n{retrieved_text}\n\nGenerate exactly 48 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 48\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Amazon Redshift Engineering’s Advanced Table Design Playbook: Compound and Interleaved Sort Keys\",\n        \"Workload Analysis of a Large-Scale Key-Value Store\",\n        \"The R*-Tree: An Efficient and Robust Access Method for Points and Rectangles\",\n        \"Multidimensional Binary Search Trees Used for Associative Searching\",\n        \"BHUNT: Automatic Discovery of Fuzzy Algebraic Constraints in Relational Data\",\n        \"An Efficient, Cost-Driven Index Selection Tool for Microsoft SQL Server\",\n        \"Benchmarking Cloud Serving Systems with YCSB\",\n        \"Processing Petabytes of Data in Seconds with Databricks Delta\",\n        \"The ML-Index: A Multidimensional, Learned Index for Point, Range, and Nearest-Neighbor Queries\",\n        \"ALEX: An Updatable Adaptive Learned Index\",\n        \"C-Store: A Column-oriented DBMS\",\n        \"Daily Historical Stock Prices (1970 - 2018)\",\n        \"The PGM-index: a fully-dynamic compressed learned index with provable worst-case bounds\",\n        \"Multidimensional access methods\",\n        \"FITing-Tree: A Data-Aware Index Structure\",\n        \"The Spatial Index\",\n        \"CORDS: Automatic Discovery of Correlations and Soft Functional Dependencies\",\n        \"IDistance: An Adaptive B+-Tree Based Indexing Method for Nearest Neighbor Search\",\n        \"Falling RAM prices drive in-memory database surge\",\n        \"Correlation Maps: A Compressed Access Method for Exploiting Soft Functional Dependencies\",\n        \"CORADD: Correlation Aware Database Designer for Materialized Views and Indexes\",\n        \"RadixSpline: A Single-Pass Learned Index\",\n        \"The Case for Learned Index Structures\",\n        \"Efficient Discovery of Approximate Dependencies\",\n        \"LISA: A Learned Index Structure for Spatial Data\",\n        \"Query-based Workload Forecasting for Self-Driving Database Management Systems\",\n        \"Octree Encoding: A New Technique for the Representation, Manipulation and Display of Arbitrary 3-D Objects by Computer\",\n        \"Spatial Indexes Overview\",\n        \"A computer Oriented Geodetic Data Base; and a New Technique in File Sequencing (PDF)\",\n        \"Learning Multi-dimensional Indexes\",\n        \"The Grid File: An Adaptable, Symmetric Multikey File Structure\",\n        \"TLC Trip Record Data\",\n        \"Indexing in Spatial Databases\",\n        \"Attribute Clustering\",\n        \"Oracle Database In-Memory\",\n        \"Integrating the UB-Tree into a Database System Kernel\",\n        \"RocksDB\",\n        \"scipy.optimize.basinhopping\",\n        \"Differential Files: Their Application to the Maintenance of Large Databases\",\n        \"A Survey of Traditional and MapReduceBased Spatial Query Processing Approaches\",\n        \"XIndex: A Scalable Learned Index for Multicore Data Storage\",\n        \"TPC-H\",\n        \"DB2 Advisor: An Optimizer Smart Enough to Recommend its own Indexes\",\n        \"Learned Index for Spatial Queries\",\n        \"Designing Succinct Secondary Indexing Mechanism by Exploiting Column Correlations\",\n        \"Qd-tree: Learning Data Layouts for Big Data Analytics\",\n        \"Z-Order Indexing for Multifaceted Queries in Amazon DynamoDB\",\n        \"Characterizing, Modeling, and Benchmarking RocksDB Key-Value Workloads at Facebook\"\n    ],\n    \"reasoning\": \"Selected these 48 references because they represent foundational work and recent advances in Tsunami: A Learned Multi-dimensional Index for Correlated Data and Skewed Workloads, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}