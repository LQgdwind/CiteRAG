{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 53 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Order-Preserving Key Compression for In-Memory Search Trees\n\nPaper Abstract: Abstract. We present the High-speed Order-Preserving Encoder (HOPE) for in-memory search trees. HOPE is a fast dictionary-based compressor that encodes arbitrary keys while preserving their order. HOPE’s approach is to identify common key patterns at a fine granularity and exploit the entropy to achieve high compression rates with a small dictionary. We first develop a theoretical model to reason about order-preserving dictionary designs. We then select six representative compression schemes using this model and implement them in HOPE. These schemes make different trade-offs between compression rate and encoding speed. We evaluate HOPE on five data structures used in databases: SuRF, ART, HOT, B+tree, and Prefix B+tree. Our experiments show that using HOPE allows the search trees to achieve lower query latency (up to 40% lower) and better memory efficiency (up to 30% smaller) simultaneously for most string key workloads.\n\n{retrieved_text}\n\nGenerate exactly 53 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 53\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"My explanation of the Hu-Tucker Algorithm\",\n        \"URL Dataset\",\n        \"OLC B+tree\",\n        \"Zlib\",\n        \"LZ77 and LZ78\",\n        \"Cachegrind\",\n        \"English Wikipedia Article Title\",\n        \"LZ4\",\n        \"Memory Prices\",\n        \"Snappy\",\n        \"TLX B+tree (formerly STX B+tree)\",\n        \"Integrating compression and execution in column-oriented database systems\",\n        \"Dictionary-based order-preserving string compression\",\n        \"Order preserving string compression\",\n        \"HAT-trie: a cache-conscious trie-based data structure for strings\",\n        \"Prefix B-trees\",\n        \"Efficient index compression in DB2 LUW\",\n        \"HOT: A Height Optimized Trie Index for Main-Memory Database Systems\",\n        \"Dictionary-based order-preserving string compression for main memory column stores\",\n        \"Efficient in-memory indexing with generalized prefix trees\",\n        \"Query optimization in compressed database systems\",\n        \"Benchmarking cloud serving systems with YCSB\",\n        \"personal communication\",\n        \"Trie memory\",\n        \"Modern B-tree techniques\",\n        \"Burst tries: a fast, efficient data structure for string keys\",\n        \"Optimal computer search trees and variable-length alphabetical codes\",\n        \"A method for the construction of minimum-redundancy codes\",\n        \"HyPer: A hybrid OLTP&OLAP main memory database system based on virtual memory snapshots\",\n        \"KISS-Tree: smart latch-free in-memory indexing on modern architectures\",\n        \"Fast & Strong: The Case of Compressed String Dictionaries on Modern CPUs\",\n        \"A study of index structures for main memory database management systems\",\n        \"Optimistic Lock Coupling: A Scalable and Efficient General-Purpose Synchronization Method\",\n        \"The adaptive radix tree: ARTful indexing for main-memory databases\",\n        \"The ART of practical synchronization\",\n        \"The Bw-Tree: A B-tree for new hardware platforms\",\n        \"A padded encoding scheme to accelerate scans by leveraging skew\",\n        \"Mostly Order Preserving Dictionaries\",\n        \"Cache craftiness for fast multicore key-value storage\",\n        \"Range encoding: an algorithm for removing redundancy from a digitised message\",\n        \"Hyperion: Building the Largest In-memory Search Tree\",\n        \"PATRICIA—practical algorithm to retrieve information coded in alphanumeric\",\n        \"Adaptive String Dictionary Compression in In-Memory Column-Store Database Systems\",\n        \"DB2 with BLU acceleration: So much more than just a column store\",\n        \"How to wring a table dry: Entropy compression of relations and querying of compressed relations\",\n        \"Making B+-trees cache conscious in main memory\",\n        \"The end of an architectural era:(it’s time for a complete rewrite)\",\n        \"Building a bw-tree takes more than just buzz words\",\n        \"Arithmetic coding for data compression\",\n        \"Hu-Tucker Minimum Redundancy Alphabetic Coding Method [Z] (Algorithm 428)\",\n        \"Reducing the storage overhead of main-memory OLTP databases with hybrid indexes\",\n        \"SuRF: practical range query filtering with fast succinct tries\",\n        \"David G Andersen\"\n    ],\n    \"reasoning\": \"Selected these 53 references because they represent foundational work and recent advances in Order-Preserving Key Compression for In-Memory Search Trees, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}