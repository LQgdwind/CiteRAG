{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 61 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: LLM4PLC: Harnessing Large Language Models for Verifiable Programming of PLCs in Industrial Control Systems\n\nPaper Abstract: Abstract. Although Large Language Models (LLMs) have established predominance in automated code generation, they are not devoid of shortcomings. The pertinent issues primarily relate to the absence of execution guarantees for generated code, a lack of explainability, and suboptimal support for essential but niche programming languages. State-of-the-art LLMs such as GPT-4 and LLaMa2 fail to produce valid programs for Industrial Control Systems (ICS) operated by Programmable Logic Controllers (PLCs). We propose LLM4PLC, a user-guided iterative pipeline leveraging user feedback and external verification tools – including grammar checkers, compilers and SMV verifiers – to guide the LLM’s generation. We further enhance the generation potential of LLM by employing Prompt Engineering and model fine-tuning through the creation and usage of LoRAs. We validate this system using a FischerTechnik Manufacturing TestBed (MFTB), illustrating how LLMs can evolve from generating structurally-flawed code to producing verifiably correct programs for industrial applications. We run a complete test suite on GPT-3.5, GPT-4, Code Llama-7B, a fine-tuned Code Llama-7B model, Code Llama-34B, and a fine-tuned Code Llama-34B model. The proposed pipeline improved the generation success rate from 47% to 72%, and the Survey-of-Experts code quality from 2.25/10 to 7.75/10. To promote open research, we share the complete experimental setup, the LLM Fine-Tuning Weights, and the video demonstrations of the different programs on our dedicated webpage111https://sites.google.com/uci.edu/llm4plc/home.\n\n{retrieved_text}\n\nGenerate exactly 61 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 61\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"SynShine: Improved Fixing of Syntax Errors\",\n        \"Model-Based Design of Complex Aeronautical Systems Through Digital Twin and Thread Concepts\",\n        \"On Formal Reasoning on the Semantics of PLC using Coq\",\n        \"Automated generation of PLC code for implementing mode-based control algorithms in buildings\",\n        \"Towards parallel execution of IEC 61131 industrial cyber-physical systems applications\",\n        \"The nuXmv symbolic model checker\",\n        \"Evaluating large language models trained on code.(2021)\",\n        \"Mitigation of catastrophic forgetting in recurrent neural networks using a Fixed Expansion Layer\",\n        \"AI-Based Assistance System for Manufacturing\",\n        \"Evaluating software engineering methods in the context of automation applications\",\n        \"Diversity-Driven Automated Formal Verification\",\n        \"Factory Simulation 24V Product description and specifications\",\n        \"Unixcoder: Unified cross-modal pre-training for code representation\",\n        \"Automated Test Generation for IEC 61131-3 ST Programs via Dynamic Symbolic Execution\",\n        \"Lora: Low-rank adaptation of large language models\",\n        \"Industrial automation global market report\",\n        \"Programmable Controllers – Part 3: Programming Languages\",\n        \"A model-based design methodology for cyber-physical systems\",\n        \"Construction and verification of PLC programs by LTL specification\",\n        \"CodeRL: Mastering Code Generation through Pretrained Models and Deep Reinforcement Learning\",\n        \"Few-Shot Parameter-Efficient Fine-Tuning is Better and Cheaper than In-Context Learning\",\n        \"Ro{BERT}a: A Robustly Optimized {BERT} Pretraining Approach\",\n        \"Network as automation platform for collaborative E-car charging at the residential premises US Patent 8,957,634, Google Patents\",\n        \"LLaMA-Reviewer: Advancing Code Review Automation with Large Language Models through Parameter-Efficient Fine-Tuning (Practical Experience Report)\",\n        \"Codexglue: A machine learning benchmark dataset for code understanding and generation\",\n        \"Bringing Semantics to Web Services: the OWL-S approach\",\n        \"Model-Based Design of Embedded Systems\",\n        \"Model Based Design in Automotive Open System Architecture\",\n        \"A Comprehensive Overview of Large Language Models\",\n        \"MATIEC Source code repository\",\n        \"GPT-4 Technical Report\",\n        \"OSCAT BASIC Product description and specifications\",\n        \"An overview of model checking practices on verification of PLC software\",\n        \"Examining Zero-Shot Vulnerability Repair with Large Language Models\",\n        \"Opportunities and challenges of static code analysis of IEC 61131-3 programs\",\n        \"Static code analysis of IEC 61131-3 programs: Comprehensive tool support and experiences from large-scale industrial application\",\n        \"Semantics-based composition of factory automation processes encapsulated by web services\",\n        \"Language models are unsupervised multitask learners\",\n        \"A PLC-SCADA Pipeline for Managing Oil Refineries\",\n        \"Code llama: Open foundation models for code\",\n        \"Understanding the Effectiveness of Early Weight Averaging for Training Large Language Models\",\n        \"Tool support for an automatic transformation of GRAFCET specifications into IEC 61131-3 control code\",\n        \"A Lightweight Framework for High-Quality Code Generation\",\n        \"Using ChatGPT Standard Prompt Engineering Techniques in Lesson Preparation: Role, Instructions and Seed-Word Prompts\",\n        \"Model-Based Design Automation of Hardware/Software Co-Designs for Xilinx Zynq PSoCs\",\n        \"Interactive and Visual Prompt Engineering for Ad-hoc Task Adaptation with Large Language Models\",\n        \"Domain Adaptive Code Completion via Language Models and Decoupled Domain Databases\",\n        \"The potential of LLMs for coding with low-resource and domain-specific programming languages\",\n        \"VeriGen: A Large Language Model for Verilog Code Generation\",\n        \"AutoML in the Age of Large Language Models: Current Challenges, Future Opportunities and Risks\",\n        \"Llama 2: Open Foundation and Fine-Tuned Chat Models\",\n        \"LLaMA: open and efficient foundation language models\",\n        \"Attention is all you need\",\n        \"Automatic code generation from a UML model to IEC 61131-3 and system configuration tools\",\n        \"Chain of Thought Prompting Elicits Reasoning in Large Language Models\",\n        \"Finetuned Language Models Are Zero-Shot Learners\",\n        \"Supporting troubleshooting in machine and plant manufacturing by backstepping of PLC-control software\",\n        \"DoctorGLM: Fine-tuning your Chinese Doctor is not a Herculean Task\",\n        \"Parameter-Efficient Tuning Makes a Good Classification Head\",\n        \"A Comprehensive Capability Analysis of GPT-3 and GPT-3.5 Series Models\",\n        \"CFG2VEC: Hierarchical Graph Neural Network for Cross-Architectural Software Reverse Engineering\"\n    ],\n    \"reasoning\": \"Selected these 61 references because they represent foundational work and recent advances in LLM4PLC: Harnessing Large Language Models for Verifiable Programming of PLCs in Industrial Control Systems, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}