{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 46 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Large Language Models Should Ask Clarifying Questions to Increase Confidence in Generated Code\n\nPaper Abstract: Abstract. Large language models (LLMs) have significantly improved the ability to perform tasks in the field of code generation. However, there is still a gap between LLMs being capable coders and being top-tier software engineers. Based on the observation that top-level software engineers often ask clarifying questions to reduce ambiguity in both requirements and coding solutions, I argue that the same should be applied to LLMs for code generation tasks. By asking probing questions in various topics before generating the final code, the challenges of programming with LLMs, such as unclear intent specification, lack of computational thinking, and undesired code quality, may be alleviated. This, in turn, increases confidence in the generated code. In this work, I explore how to leverage better communication skills to achieve greater confidence in generated code. I propose a communication-centered process that uses an LLM-generated communicator to identify issues with high ambiguity or low confidence in problem descriptions and generated code. I then ask clarifying questions to obtain responses from users for refining the code.\n\n{retrieved_text}\n\nGenerate exactly 46 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 46\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Code2Vec: Learning Distributed Representations of Code\",\n        \"Program synthesis with large language models\",\n        \"Constitutional AI: Harmlessness from AI Feedback\",\n        \"A categorical archive of chatgpt failures\",\n        \"Language models are few-shot learners\",\n        \"InferCode: Self-supervised Learning of Code Representations by Predicting Subtrees\",\n        \"Evaluating large language models trained on code\",\n        \"Codeparrot\",\n        \"CodeBERT: A Pre-trained Model for Programming and Natural Languages\",\n        \"Bridging the Gap: A Survey on Integrating (Human) Feedback for Natural Language Generation\",\n        \"Improving Alignment of Dialogue Agents via Targeted Human Judgements\",\n        \"Rethinking with Retrieval: Faithful Large Language Model Inference\",\n        \"Large Language Models Can Self-Improve\",\n        \"The education of a software engineer\",\n        \"SelfEvolve: A Code Evolution Framework via Large Language Models\",\n        \"Can Neural Machine Translation Be Improved with User Feedback?\",\n        \"Competition-level code generation with alphacode\",\n        \"Understanding the Usability of AI Programming Assistants\",\n        \"Refining ChatGPT-Generated Code: Characterizing and Mitigating Code Quality Issues\",\n        \"No Need to Lift a Finger Anymore? Assessing the Quality of Code Generation by ChatGPT\",\n        \"Communication and co-ordination practices in software engineering projects\",\n        \"Collaborative software engineering: challenges and prospects\",\n        \"An Empirical Evaluation of GitHub Copilot’s Code Suggestions\",\n        \"Codegen: An open large language model for code with multi-turn program synthesis\",\n        \"Training Language Models to Follow Instructions with Human Feedback\",\n        \"Automatically Correcting Large Language Models: Surveying the landscape of diverse self-correction strategies\",\n        \"Software engineering: a practitioner’s approach\",\n        \"Abstract Syntax Networks for Code Generation and Semantic Parsing\",\n        \"What is it like to program with artificial intelligence?\",\n        \"Training Language Models with Language Feedback at Scale\",\n        \"An Empirical Study of Code Smells in Transformer-Based Code Generation Techniques\",\n        \"Choose Your Programming Copilot: A Comparison of the Program Synthesis Performance of GitHub Copilot and Genetic Programming\",\n        \"Intellicode Compose: Code Generation Using Transformer\",\n        \"Unit Test Case Generation with Transformers and Focal Context\",\n        \"Expectation vs. Experience: Evaluating the Usability of Code Generation Tools Powered by Large Language Models\",\n        \"Attention is All You Need\",\n        \"GPT-J-6B: A 6 billion parameter autoregressive language model\",\n        \"CodeT5: Identifier-Aware Unified Pre-trained Encoder-Decoder Models for Code Understanding and Generation\",\n        \"Large Language Models Are Better Reasoners with Self-Verification\",\n        \"Collaboration in software engineering: A roadmap\",\n        \"Decomposition Enhances Reasoning via Self-Evaluation Guided Decoding\",\n        \"A systematic evaluation of large language models of code\",\n        \"Generating Natural Language Proofs with Verifier-Guided Search\",\n        \"Leveraging Code Generation to Improve Code Retrieval and Summarization via Dual Learning\",\n        \"Self-Edit: Fault-Aware Code Editor for Code Generation\",\n        \"Productivity assessment of neural code completion\"\n    ],\n    \"reasoning\": \"Selected these 46 references because they represent foundational work and recent advances in Large Language Models Should Ask Clarifying Questions to Increase Confidence in Generated Code, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}