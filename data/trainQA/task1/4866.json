{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 54 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: ZCSD: a Computational Storage Device over Zoned Namespaces (ZNS) SSDs\n\nPaper Abstract: Abstract The Big Data trend is putting strain on modern storage systems, which have to support high-performance I/O accesses for the large quantities of data. With the prevalent Von Neumann computing architecture, this data is constantly moved back and forth between the computing (i.e., CPU) and storage entities (DRAM, Non-Volatile Memory NVM storage). Hence, as the data volume grows, this constant data movement between the CPU and storage devices has emerged as a key performance bottleneck. To improve the situation, researchers have advocated to leverage computational storage devices (CSDs), which offer a programmable interface to run user-defined data processing operations close to the storage without excessive data movement, thus offering performance improvements. However, despite its potential, building CSD-aware applications remains a challenging task due to the lack of exploration and experimentations with the right API and abstraction. This is due to the limited accessibility to latest CSD/NVM devices, emerging device interfaces, and closed-source software internals of the devices. To remedy the situation, in this work we present an open-source CSD prototype over emerging NVMe Zoned Namespaces (ZNS) SSDs and an interface that can be used to explore application designs for CSD/NVM storage devices. In this paper we summarize the current state of the practice with CSD devices, make a case for designing a CSD prototype with the ZNS interface and eBPF (ZCSD), and present our initial findings. The prototype is available at https://github.com/Dantali0n/qemu-csd.\n\n{retrieved_text}\n\nGenerate exactly 54 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 54\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Zoned Storage\",\n        \"Userspace ebpf vm\",\n        \"BPF Compiler Collection (BCC).\",\n        \"The openssd project.\",\n        \"Active disks: Programming model, algorithms and evaluation\",\n        \"Near-data processing: Insights from a micro-46 workshop\",\n        \"Blockndp: Block-storage near data processing\",\n        \"Computational storage: Where are we today?\",\n        \"Extos: Data-centric extensible os\",\n        \"Qemu, a fast and portable dynamic translator\",\n        \"Extension framework for file systems in user space\",\n        \"Lightnvm: The linux open-channel SSD subsystem\",\n        \"hxdp: Efficient software packet processing on FPGA nics\",\n        \"Active disk meets flash: A case for intelligent ssds\",\n        \"Cilium\",\n        \"Cost-effective, energy-efficient, and scalable storage computing for large-scale ai applications\",\n        \"Query processing on smart ssds: Opportunities and challenges\",\n        \"Programmable solid-state storage in future cloud datacenters\",\n        \"Eideticom\",\n        \"BPF Tales Or: Why Did I Recompile the Kernel Just to Average Numbers?\",\n        \"Simple and precise static analysis of untrusted linux kernel extensions\",\n        \"File server scaling with network-attached secure disks\",\n        \"Linux Enhanced BPF (eBPF) Tracing Tools\",\n        \"Biscuit: A framework for near-data processing of big data workloads\",\n        \"The digitization of the world from edge to core\",\n        \"uBPF ubpf_vm.c line 162\",\n        \"Caribou: Intelligent distributed storage\",\n        \"Yoursql: A high-performance database system leveraging in-storage computing\",\n        \"The multi-streamed solid-state drive\",\n        \"Enabling cost-effective data processing with smart ssd\",\n        \"A case for intelligent disks (idisks)\",\n        \"Using seccomp to limit the kernel attack surface\",\n        \"Using ebpf as a heterogeneous processing abi\",\n        \"Summarizer: Trading communication with computing near storage\",\n        \"Safe and efficient remote application code execution on disaggregated NVM storage with ebpf\",\n        \"F2fs: A new file system for flash storage\",\n        \"Cognitive SSD: A deep learning engine for in-storage data retrieval\",\n        \"The bsd packet filter: A new architecture for user-level packet capture\",\n        \"NGD Systems\",\n        \"Sdf: Software-defined flash for web-scale internet storage systems\",\n        \"Registor: A platform for unstructured data processing inside ssd storage\",\n        \"The von neumann bottleneck revisited\",\n        \"Active storage for large-scale data mining and multimedia\",\n        \"Insider: Designing in-storage computing system for emerging high-performance drive\",\n        \"Samsung SmartSSD Computational Storage\",\n        \"Willow: A user-programmable ssd\",\n        \"Computational Storage Architecture and Programming Model Version 0.5, Revision 1\",\n        \"Donâ€™t be a blockhead: Zoned namespaces make work on conventional ssds obsolete\",\n        \"Kernel analysis using ebpf\",\n        \"Active flash: Towards energy-efficient, in-situ data analytics on extreme-scale machines\",\n        \"Ibex: An intelligent storage engine with support for advanced sql offloading\",\n        \"BPF for storage: an exokernel-inspired approach\",\n        \"XDP: eXpress Data Path\",\n        \"Bluecache: A scalable distributed flash-based key-value store\"\n    ],\n    \"reasoning\": \"Selected these 54 references because they represent foundational work and recent advances in ZCSD: a Computational Storage Device over Zoned Namespaces (ZNS) SSDs, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}