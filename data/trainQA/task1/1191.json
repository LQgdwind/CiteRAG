{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 61 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Detecting Optimization Bugs in Database Engines via Non-Optimizing Reference Engine Construction\n\nPaper Abstract: Abstract. Database Management Systems (DBMS) are used ubiquitously. To efficiently access data, they apply sophisticated optimizations. Incorrect optimizations can result in logic bugs, which cause a query to compute an incorrect result set. We propose Non-Optimizing Reference Engine Construction (NoREC), a fully-automatic approach to detect optimization bugs in DBMS. Conceptually, this approach aims to evaluate a query by an optimizing and a non-optimizing version of a DBMS, to then detect differences in their returned result set, which would indicate a bug in the DBMS. Obtaining a non-optimizing version of a DBMS is challenging, because DBMS typically provide limited control over optimizations. Our core insight is that a given, potentially randomly-generated optimized query can be rewritten to one that the DBMS cannot optimize. Evaluating this unoptimized query effectively corresponds to a non-optimizing reference engine executing the original query. We evaluated NoREC in an extensive testing campaign on four widely-used DBMS, namely PostgreSQL, MariaDB, SQLite, and CockroachDB. We found \\nrTruePositives previously unknown bugs in the latest versions of these systems, \\fixed of which have been fixed by the developers. Of these, \\sumnorec were optimization bugs, while the remaining were error and crash bugs. Our results suggest that NoREC is effective, general and requires little implementation effort, which makes the technique widely applicable in practice.\n\n{retrieved_text}\n\nGenerate exactly 61 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 61\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Automated SQL Query Generation for Systematic Testing of Database Engines\",\n        \"A Genetic Approach for Random Testing of Database Systems\",\n        \"Reverse Query Processing\",\n        \"QAGen: Generating Query-Aware Test Databases\",\n        \"Making an Embedded DBMS JIT-friendly\",\n        \"Fuzzing and Delta-Debugging SMT Solvers\",\n        \"Flexible Database Generators\",\n        \"Power Hints for Query Optimization\",\n        \"Generating Queries with Cardinality Constraints for DBMS Testing\",\n        \"SEQUEL: A Structured English Query Language\",\n        \"Metamorphic testing: a new approach for generating next test cases\",\n        \"Metamorphic Testing: A Review of Challenges and Opportunities\",\n        \"Bug submission: left join filter on negated expression including NOTNULL\",\n        \"A Relational Model of Data for Large Shared Data Banks\",\n        \"Relational Completeness of Data Base Sublanguages\",\n        \"Testing Static Analyzers with Randomly Generated Programs\",\n        \"DB-Engines Ranking (July 2019)\",\n        \"Plan Stitch: Harnessing the Best of Many Plans\",\n        \"Fundamentals of database systems. Vol. 7\",\n        \"Testing SQL Server’s Query Optimizer: Challenges, Techniques and Experiences\",\n        \"Testing Challenges for Extending SQL Server’s Query Processor: A Case Study\",\n        \"Query evaluation techniques for large databases\",\n        \"Quickly Generating Billion-Record Synthetic Databases\",\n        \"Testing the Accuracy of Query Optimizers\",\n        \"R-Trees: A Dynamic Index Structure for Spatial Searching\",\n        \"Simple and Realistic Data Generation\",\n        \"Theoretical and Empirical Studies of Program Testing\",\n        \"Testing Random, Valid SQL in CockroachDB\",\n        \"SQLsmith: Randomized SQL Testing in CockroachDB\",\n        \"APOLLO: Automatic Detection and Diagnosis of Performance Regressions in Database Systems\",\n        \"Automatic Testing of Symbolic Execution Engines via Program Generation and Differential Testing\",\n        \"Query-Aware Test Generation Using a Relational Constraint Solver\",\n        \"Compiler Validation via Equivalence Modulo Inputs\",\n        \"A framework for testing DBMS features\",\n        \"Neo: A Learned Query Optimizer\",\n        \"Differential testing for software\",\n        \"Generating Targeted Queries for Database Testing\",\n        \"Generating Consistent Test Data: Restricting the Search Space by a Generator Formula\",\n        \"Adaptive Optimization of Very Large Join Queries\",\n        \"Developer Survey Results 2019\",\n        \"What’s Really New with NewSQL?\",\n        \"Generating Thousand Benchmark Queries in Seconds\",\n        \"Test-Case Reduction for C Compiler Bugs\",\n        \"LEFT JOIN in view malfunctions with NOTNULL\",\n        \"ESEC/FSE 20 Artifact for ”Detecting Optimization Bugs in Database Engines via Non-Optimizing Reference Engine Construction”\",\n        \"Testing Database Engines via Pivoted Query Synthesis\",\n        \"Metamorphic Testing 20 Years Later: A Hands-on Introduction\",\n        \"Access Path Selection in a Relational Database Management System\",\n        \"SQLSmith\",\n        \"Massive stochastic testing of SQL\",\n        \"Generated Columns\",\n        \"How SQLite Is Tested\",\n        \"Most Widely Deployed and Used Database Engine\",\n        \"The SQLite Query Optimizer Overview\",\n        \"The Use Of assert() In SQLite\",\n        \"CockroachDB: The Resilient Geo-Distributed SQL Database\",\n        \"Magellan 2.0\",\n        \"QRelX: Generating Meaningful Queries That Provide Cardinality Assurance\",\n        \"Richard Hipp Speaks Out on SQLite\",\n        \"Towards a Learning Optimizer for Shared Clouds\",\n        \"Finding and Understanding Bugs in C Compilers\"\n    ],\n    \"reasoning\": \"Selected these 61 references because they represent foundational work and recent advances in Detecting Optimization Bugs in Database Engines via Non-Optimizing Reference Engine Construction, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}