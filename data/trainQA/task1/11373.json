{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 46 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Optimizing Speculative Decoding for Serving Large Language Models Using Goodput\n\nPaper Abstract: Abstract. Reducing the inference latency of large language models (LLMs) is crucial, and speculative decoding (SD) stands out as one of the most effective techniques. Rather than letting the LLM generate all tokens directly, speculative decoding employs effective proxies to predict potential outputs, which the LLM then verifies without compromising the generation quality. Yet, deploying SD in real online LLM serving systems (with continuous batching) does not always yield improvement – under higher request rates or low speculation accuracy, it paradoxically increases latency. Furthermore, there is no best speculation length work for all workloads under different system loads. Based on the observations, we develop a dynamic framework SmartSpec. SmartSpec dynamically determines the best speculation length for each request (from 0, i.e., no speculation, to many tokens) – hence the associated speculative execution costs – based on a new metric called goodput, which characterizes the current observed load of the entire system and the speculation accuracy. We show that SmartSpec consistently reduces average request latency by up to 3.2×\\times compared to non-speculative decoding baselines across different sizes of target models, draft models, request rates, and datasets. Moreover, SmartSpec can be applied to different styles of speculative decoding, including traditional, model-based approaches as well as model-free methods like prompt lookup and tree-style decoding.\n\n{retrieved_text}\n\nGenerate exactly 46 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 46\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Gpt-4 technical report\",\n        \"ShareGPT dataset\",\n        \"A neural probabilistic language model\",\n        \"Medusa: Simple llm inference acceleration framework with multiple decoding heads\",\n        \"Accelerating large language model decoding with speculative sampling\",\n        \"Sequoia: Scalable, Robust, and Hardware-aware Speculative Decoding\",\n        \"LLM.int8(): 8-bit Matrix Multiplication for Transformers at Scale\",\n        \"Marlin: a fast 4-bit inference kernel for medium batchsizes\",\n        \"GPTQ: Accurate Post-Training Quantization for Generative Pre-trained Transformers\",\n        \"Break the sequential dependency of llm inference using lookahead decoding\",\n        \"Low latency rnn inference with cellular batching\",\n        \"Teaching Machines to Read and Comprehend\",\n        \"Mistral 7B\",\n        \"Mixtral of experts\",\n        \"Hydragen: High-Throughput LLM Inference with Shared Prefixes\",\n        \"HAGRID: A Human-LLM Collaborative Dataset for Generative Information-Seeking with Attribution\",\n        \"SqueezeLLM: Dense-and-Sparse Quantization\",\n        \"Speculative decoding with big little decoder\",\n        \"Efficient memory management for large language model serving with pagedattention\",\n        \"Fast inference from transformers via speculative decoding\",\n        \"Eagle: Speculative sampling requires rethinking feature uncertainty\",\n        \"BiTA: Bi-Directional Tuning for Lossless Acceleration in Large Language Models\",\n        \"AWQ: Activation-aware Weight Quantization for LLM Compression and Acceleration\",\n        \"Online speculative decoding\",\n        \"Reinventing search with a new AI-powered Microsoft Bing and Edge, your copilot for the web\",\n        \"Specinfer: Accelerating generative llm serving with speculative inference and token tree verification\",\n        \"Copilot\",\n        \"A100 GPU Spec\",\n        \"TensorRT-LLM\",\n        \"ChatGPT\",\n        \"Efficiently scaling transformer inference\",\n        \"Supercharging Search with generative AI\",\n        \"Prompt Lookup Decoding\",\n        \"Get To The Point: Summarization with Pointer-Generator Networks\",\n        \"The synergy of speculative decoding and batching in serving large language models\",\n        \"Llama 2: Open foundation and fine-tuned chat models\",\n        \"Minions: Accelerating Large Language Model Inference with Adaptive and Collective Speculative Decoding\",\n        \"AutoGen: Enabling Next-Gen LLM Applications via Multi-Agent Conversation\",\n        \"An Empirical Study on Challenging Math Problem Solving with GPT-4\",\n        \"Cascade Inference: Memory Bandwidth Efficient Shared Prefix Batch Decoding\",\n        \"Orca: A distributed serving system for {{\\\\{Transformer-Based}}} generative models\",\n        \"Spider: A large-scale human-labeled dataset for complex and cross-domain semantic parsing and text-to-sql task\",\n        \"Draft & verify: Lossless large language model acceleration via self-speculative decoding\",\n        \"Judging llm-as-a-judge with mt-bench and chatbot arena\",\n        \"Efficiently Programming Large Language Models using SGLang\",\n        \"Distillspec: Improving speculative decoding via knowledge distillation\"\n    ],\n    \"reasoning\": \"Selected these 46 references because they represent foundational work and recent advances in Optimizing Speculative Decoding for Serving Large Language Models Using Goodput, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}