{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 51 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Strix: An End-to-End Streaming Architecture with Two-Level Ciphertext Batching for Fully Homomorphic Encryption with Programmable Bootstrapping\n\nPaper Abstract: Abstract Homomorphic encryption (HE) is a type of cryptography that allows computations to be performed on encrypted data. The technique relies on learning with errors problem, where data is hidden under noise for security. To avoid accumulating too much noise, the process of bootstrapping is needed to reset the noise level in the ciphertext, but it requires a large bootstrapping key and is computationally expensive. The fully homomorphic encryption over the torus (TFHE) scheme offers a faster and programmable bootstrapping (PBS) algorithm, which is crucial for security-focused applications like machine learning. Nonetheless, the current TFHE scheme does not support ciphertext packing, resulting in low-throughput performance. To the best of our knowledge, this is the first work that thoroughly analyzes TFHE bootstrapping, identifies the TFHE acceleration bottleneck in GPUs, and proposes a hardware TFHE accelerator to solve the bottleneck. We begin by identifying the TFHE acceleration bottleneck in GPUs, which is caused by the blind rotation fragmentation problem. This issue can be significantly improved by increasing the batch size in PBS. We propose a two-level batching approach to substantially enhance the batch size in PBS. In order to efficiently implement this solution, we propose Strix, which utilizes streaming and fully pipelined architecture with specialized functional units to accelerate the sequential ciphertext processing in TFHE. In particular, we propose a novel microarchitecture for decomposition in TFHE, suitable for processing streaming data at high throughput. We also utilize a fully-pipelined FFT microarchitecture to eliminate the complex memory access bottleneck and enhance its performance through a folding scheme, resulting in 2×2\\times throughput improvement and 1.7×1.7\\times area reduction. Strix achieves over 1,067×1,067\\times and 37×37\\times higher throughput in running TFHE with PBS than the state-of-the-art implementation on CPU and GPU, respectively, outperforming the state of the art TFHE accelerator by 7.4×7.4\\times.\n\n{retrieved_text}\n\nGenerate exactly 51 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 51\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"On data banks and privacy homomorphisms\",\n        \"Fully homomorphic encryption using ideal lattices\",\n        \"Privacy-preserving machine learning with fully homomorphic encryption for deep neural network\",\n        \"Over 100x faster bootstrapping in fully homomorphic encryption through memory-centric optimization with gpus\",\n        \"Accelerating polynomial multiplication for homomorphic encryption on gpus\",\n        \"cuhe: A homomorphic encryption accelerator library\",\n        \"Nufhe, a gpu-powered torus fhe implementation\",\n        \"Heax: An architecture for computing on encrypted data\",\n        \"Fab: An fpga-based accelerator for bootstrappable fully homomorphic encryption\",\n        \"Poseidon: Practical homomorphic encryption accelerator\",\n        \"An fpga-based programmable vector engine for fast fully homomorphic encryption over the torus\",\n        \"F1: A fast and programmable accelerator for fully homomorphic encryption\",\n        \"Craterlake: a hardware accelerator for efficient unbounded computation on encrypted data.\",\n        \"Bts: An accelerator for bootstrappable fully homomorphic encryption\",\n        \"Ark: Fully homomorphic encryption accelerator with runtime data generation and inter-operation key reuse\",\n        \"Homomorphic encryption for arithmetic of approximate numbers\",\n        \"Tfhe: fast fully homomorphic encryption over the torus\",\n        \"Matcha: A fast and energy-efficient accelerator for fully homomorphic encryption over the torus\",\n        \"Fpga acceleration of fully homomorphic encryption over the torus\",\n        \"Accelerating n-bit operations over tfhe on commodity cpu-fpga\",\n        \"On lattices, learning with errors, random linear codes, and cryptography\",\n        \"Introduction to post-quantum cryptography\",\n        \"Hardness of approximating the shortest vector problem in lattices\",\n        \"A fully homomorphic encryption scheme\",\n        \"Implementing gentry’s fully-homomorphic encryption scheme\",\n        \"(leveled) fully homomorphic encryption without bootstrapping\",\n        \"Somewhat practical fully homomorphic encryption\",\n        \"Homomorphic encryption from learning with errors: Conceptually-simpler, asymptotically-faster, attribute-based\",\n        \"Fhew: bootstrapping homomorphic encryption in less than a second\",\n        \"Faster fully homomorphic encryption: Bootstrapping in less than 0.1 seconds\",\n        \"Privacy-preserving deep learning with homomorphic encryption: An introduction\",\n        \"A survey of deep learning architectures for privacy-preserving machine learning with fully homomorphic encryption\",\n        \"Survey on fully homomorphic encryption, theory, and applications\",\n        \"Programmable bootstrapping enables efficient homomorphic inference of deep neural networks\",\n        \"A homomorphic lwe based e-voting scheme\",\n        \"Faster packed homomorphic operations and efficient circuit bootstrapping for tfhe\",\n        \"Improved programmable bootstrapping with larger precision and efficient arithmetic circuits for tfhe\",\n        \"Scooby: Improved multi-party homomorphic secret sharing based on fhe\",\n        \"She: A fast and accurate privacy-preserving deep neural network via leveled tfhe and logarithmic data representation\",\n        \"Deep neural networks for encrypted inference with tfhe\",\n        \"Privacy-preserving tree-based inference with fully homomorphic encryption\",\n        \"Virtual secure platform: A {{Five-Stage}} pipeline processor over {{TFHE}}\",\n        \"Sok: Fully homomorphic encryption over the [discretized] torus\",\n        \"Concrete: Concrete operates on ciphertexts rapidly by extending tfhe\",\n        \"A survey on pipelined fft hardware architectures\",\n        \"On the use of symmetry in fft computation\",\n        \"The quick fourier transform: an fft based on symmetries\",\n        \"Fast and error-free negacyclic integer convolution using extended fourier transform\",\n        \"JEDEC Standard: HBM DRAM\",\n        \"Does fully homomorphic encryption need compute acceleration?\",\n        \"Fast homomorphic evaluation of deep discretized neural networks\"\n    ],\n    \"reasoning\": \"Selected these 51 references because they represent foundational work and recent advances in Strix: An End-to-End Streaming Architecture with Two-Level Ciphertext Batching for Fully Homomorphic Encryption with Programmable Bootstrapping, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}