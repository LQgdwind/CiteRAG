{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 49 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: HDLdebugger: Streamlining HDL debugging with Large Language Models\n\nPaper Abstract: Abstract. In the domain of chip design, Hardware Description Languages (HDLs) play a pivotal role. However, due to the complex syntax of HDLs and the limited availability of online resources, debugging HDL codes remains a difficult and time-intensive task, even for seasoned engineers. Consequently, there is a pressing need to develop automated HDL code debugging models, which can alleviate the burden on hardware engineers. Despite the strong capabilities of Large Language Models (LLMs) in generating, completing, and debugging software code, their utilization in the specialized field of HDL debugging has been limited and, to date, has not yielded satisfactory results. In this paper, we propose an LLM-assisted HDL debugging framework, namely HDLdebugger, which consists of HDL debugging data generation via a reverse engineering approach, a search engine for retrieval-augmented generation, and a retrieval-augmented LLM fine-tuning approach. Through the integration of these components, HDLdebugger can automate and streamline HDL debugging for chip design. Our comprehensive experiments, conducted on an HDL code dataset sourced from Huawei, reveal that HDLdebugger outperforms 13 cutting-edge LLM baselines, displaying exceptional effectiveness in HDL code debugging.\n\n{retrieved_text}\n\nGenerate exactly 49 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 49\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Gpt-4 technical report\",\n        \"An information-theoretic perspective of tf–idf measures\",\n        \"DeepSeek LLM: Scaling Open-Source Language Models with Longtermism\",\n        \"Language models are few-shot learners\",\n        \"Evaluating large language models trained on code\",\n        \"Xgboost: A scalable tree boosting system\",\n        \"Teaching large language models to self-debug\",\n        \"Neural transfer learning for repairing security vulnerabilities in c code\",\n        \"High-level synthesis for FPGAs: From prototyping to deployment\",\n        \"Flashattention: Fast and memory-efficient exact attention with io-awareness\",\n        \"VulRepair: a T5-based automated software vulnerability repair\",\n        \"Retrieval-augmented generation for large language models: A survey\",\n        \"The semantic challenge of Verilog HDL\",\n        \"Approximating covering and packing problems: set cover, vertex cover, independent set, and related problems\",\n        \"A Survey on Automated Program Repair Techniques\",\n        \"Mistral 7B\",\n        \"Shaping program repair space with existing patches and similar code\",\n        \"StarCoder: may the source be with you!\",\n        \"Competition-level code generation with alphacode\",\n        \"TBar: Revisiting template-based automated program repair\",\n        \"Chipnemo: Domain-adapted llms for chip design\",\n        \"Rtlcoder: Outperforming gpt-3.5 in design rtl generation with our open-source dataset and lightweight solution\",\n        \"WizardCoder: Empowering Code Large Language Models with Evol-Instruct\",\n        \"Orca 2: Teaching small language models how to reason\",\n        \"Automatic software repair: A bibliography\",\n        \"A guided tour to approximate string matching\",\n        \"Pytorch: An imperative style, high-performance deep learning library\",\n        \"Deepspeed: System optimizations enable training deep learning models with over 100 billion parameters\",\n        \"Random forest\",\n        \"Simple BM25 extension to multiple weighted fields\",\n        \"High-resolution image synthesis with latent diffusion models\",\n        \"Code llama: Open foundation models for code\",\n        \"Stanford Alpaca: An Instruction-following LLaMA model\",\n        \"Verigen: A large language model for verilog code generation\",\n        \"RTLFixer: Automatically Fixing RTL Syntax Errors with Large Language Models\",\n        \"The k-clique densest subgraph problem\",\n        \"Openchat: Advancing open-source language models with mixed-quality data\",\n        \"Software testing with large language model: Survey, landscape, and vision\",\n        \"Self-instruct: Aligning language model with self generated instructions\",\n        \"Chain-of-thought prompting elicits reasoning in large language models\",\n        \"Context-aware patch generation for better automated program repair\",\n        \"Huggingface’s transformers: State-of-the-art natural language processing\",\n        \"Precise condition synthesis for program repair\",\n        \"Nopol: Automatic repair of conditional statement bugs in java programs\",\n        \"Tree of thoughts: Deliberate problem solving with large language models\",\n        \"React: Synergizing reasoning and acting in language models\",\n        \"Arja: Automated repair of java programs via multi-objective genetic programming\",\n        \"Optimizing FPGA-based accelerator design for deep convolutional neural networks\",\n        \"Autotrainer: An automatic dnn training problem detection and repair system\"\n    ],\n    \"reasoning\": \"Selected these 49 references because they represent foundational work and recent advances in HDLdebugger: Streamlining HDL debugging with Large Language Models, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}