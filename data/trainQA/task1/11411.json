{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 53 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Learning Branching-Time Properties in CTL and ATL via Constraint Solving\n\nPaper Abstract: Abstract We address the problem of learning temporal properties from the branching-time behavior of systems. Existing research in this field has mostly focused on learning linear temporal properties specified using popular logics, such as Linear Temporal Logic (LTL) and Signal Temporal Logic (STL). Branching-time logics such as Computation Tree Logic (CTL) and Alternating-time Temporal Logic (ATL), despite being extensively used in specifying and verifying distributed and multi-agent systems, have not received adequate attention. Thus, in this paper, we investigate the problem of learning CTL and ATL formulas from examples of system behavior. As input to the learning problems, we rely on the typical representations of branching behavior as Kripke structures and concurrent game structures, respectively. Given a sample of structures, we learn concise formulas by encoding the learning problem into a satisfiability problem, most notably by symbolically encoding both the search for prospective formulas and their fixed-point based model checking algorithms. We also study the decision problem of checking the existence of prospective ATL formulas for a given sample. We implement our algorithms in an Python prototype and have evaluated them to extract several common CTL and ATL formulas used in practical applications.\n\n{retrieved_text}\n\nGenerate exactly 53 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 53\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Alternating-time temporal logic\",\n        \"MOCHA: modularity in model checking\",\n        \"Mining specifications\",\n        \"Learning regular sets from queries and counterexamples\",\n        \"SYSLITE: syntax-guided synthesis of PLTL formulas from finite traces\",\n        \"Parametric identification of temporal properties\",\n        \"On the glucose SAT solver\",\n        \"Inferring DFA without negative examples\",\n        \"Principles of model checking\",\n        \"cvc5: A versatile and industrial-strength SMT solver\",\n        \"UPPAAL - a tool suite for automatic verification of real-time systems\",\n        \"Bounded satisfiability for PCTL\",\n        \"On the synthesis of finite-state machines from samples of their behavior\",\n        \"40 years of formal methods - some obstacles and some possibilities?\",\n        \"A decision tree approach to data classification using signal temporal logic\",\n        \"Characterizing finite kripke structures in propositional temporal logic\",\n        \"Boolector: An efficient SMT solver for bit-vectors and arrays\",\n        \"Learning interpretable models expressed in linear temporal logic\",\n        \"Temporal-logic queries\",\n        \"Probabilistic alternating-time temporal logic and model checking algorithm\",\n        \"NUSMV: A new symbolic model verifier\",\n        \"The mathsat5 SMT solver\",\n        \"Design and synthesis of synchronization skeletons using branching-time temporal logic\",\n        \"The complexity of learning linear temporal formulas from examples\",\n        \"Pysmt: a solver-agnostic library for fast prototyping of smt-based algorithms\",\n        \"Complexity of automaton identification from given data\",\n        \"A logic for reasoning about time and reliability\",\n        \"Cooperation, knowledge, and time: Alternating-time temporal epistemic logic and its applications\",\n        \"The model checker SPIN\",\n        \"Bayesian inference of linear temporal logic specifications for contrastive explanations\",\n        \"Temporal logics for learning and detection of anomalous behavior\",\n        \"Temporal logic inference for classification and prediction from data\",\n        \"Languages with decidable learning: A meta-theorem\",\n        \"Mining assumptions for synthesis\",\n        \"MCMAS: A model checker for multi-agent systems\",\n        \"Bridging ltlf inference to GNN inference for learning ltlf formulae\",\n        \"Reasoning about strategies: On the model-checking problem\",\n        \"Interpretable classification of time-series data using efficient enumerative techniques\",\n        \"Z3: an efficient SMT solver\",\n        \"Learning linear temporal properties\",\n        \"A robust genetic algorithm for learning temporal specifications from data\",\n        \"Sat-based learning of computation tree logic\",\n        \"Scalable anytime algorithms for learning fragments of linear temporal logic\",\n        \"Synthesizing efficiently monitorable formulas in metric temporal logic\",\n        \"Exact synthesis of LTL properties from traces\",\n        \"Learning interpretable models in the property specification language\",\n        \"Learning interpretable temporal properties from positive examples only\",\n        \"Inferring properties in computation tree logic\",\n        \"Specification: The biggest bottleneck in formal methods and autonomy\",\n        \"Bayesian inference of temporal task specifications from demonstrations\",\n        \"LTL learning on gpus\",\n        \"End-to-end learning of ltlf formulae by faithful ltlf encoding\",\n        \"Mining temporal specifications from object usage\"\n    ],\n    \"reasoning\": \"Selected these 53 references because they represent foundational work and recent advances in Learning Branching-Time Properties in CTL and ATL via Constraint Solving, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}