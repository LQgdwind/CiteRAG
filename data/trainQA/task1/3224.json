{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 45 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Neko: a Library for Exploring Neuromorphic Learning Rules\n\nPaper Abstract: Abstract. The field of neuromorphic computing is in a period of active exploration. While many tools have been developed to simulate neuronal dynamics or convert deep networks to spiking models, general software libraries for learning rules remain underexplored. This is partly due to the diverse, challenging nature of efforts to design new learning rules, which range from encoding methods to gradient approximations, from population approaches that mimic the Bayesian brain to constrained learning algorithms deployed on memristor crossbars. To address this gap, we present Neko, a modular, extensible library with a focus on aiding the design of new learning algorithms. We demonstrate the utility of Neko in three exemplar cases: online local learning, probabilistic learning, and analog on-device learning. Our results show that Neko can replicate the state-of-the-art algorithms and, in one case, lead to significant outperformance in accuracy and speed. Further, it offers tools including gradient comparison that can help develop new algorithmic variants. Neko is an open source Python library that supports PyTorch and TensorFlow backends.\n\n{retrieved_text}\n\nGenerate exactly 45 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 45\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Tensorflow: A system for large-scale machine learning\",\n        \"Synaptic plasticity as Bayesian inference\",\n        \"Deep learning without weight transport\",\n        \"High precision tuning of state for memristive devices by adaptable variation-tolerant algorithm\",\n        \"A tutorial on adaptive MCMC\",\n        \"Nengo: a Python tool for building large-scale functional brain models\",\n        \"A solution to the learning dilemma for recurrent networks of spiking neurons\",\n        \"The NEURON book\",\n        \"Keras\",\n        \"A distributional code for value in dopamine-based reinforcement learning\",\n        \"PyNN: a common interface for neuronal network simulators\",\n        \"A toolbox for neuromorphic sensing in robotics\",\n        \"Parallel programming of an ionic floating-gate memory array for scalable neuromorphic computing\",\n        \"Dropout as a Bayesian Approximation: Representing Model Uncertainty in Deep Learning\",\n        \"TIMIT Acoustic-phonetic Continuous Speech Corpus\",\n        \"Nest (neural simulation tool)\",\n        \"Practical Variational Inference for Neural Networks\",\n        \"Scaling down Deep Learning\",\n        \"A First Course in Bayesian Statistical Methods (1st ed.)\",\n        \"Memristor crossbar-based neuromorphic computing system: A case study\",\n        \"Ecg heartbeat classification: A deep transferable representation\",\n        \"The Bayesian brain: the role of uncertainty in neural coding and computation\",\n        \"The MNIST database of handwritten digits\",\n        \"Training deep spiking neural networks using backpropagation\",\n        \"Efficient and self-adaptive in-situ learning in multilayer memristor neural networks\",\n        \"Random synaptic feedback weights support error backpropagation for deep learning\",\n        \"Backpropagation and the brain\",\n        \"Programming spiking neural networks on Intelâ€™s Loihi\",\n        \"A unified framework of online learning algorithms for training recurrent neural networks\",\n        \"MCMC Using Hamiltonian Dynamics\",\n        \"Surrogate gradient learning in spiking neural networks: Bringing the power of gradient-based optimization to spiking neural networks\",\n        \"PyTorch: An imperative style, high-performance deep learning library\",\n        \"Selection and Optimization of Temporal Spike Encoding Methods for Spiking Neural Networks\",\n        \"Brownian dynamics as smart Monte Carlo simulation\",\n        \"NxTF: An API and Compiler for Deep Spiking Neural Networks on Intel Loihi\",\n        \"Conversion of analog to spiking neural networks using sparse temporal coding\",\n        \"Conversion of continuous-valued deep networks to efficient event-driven networks for image classification\",\n        \"Dendritic cortical microcircuits approximate the backpropagation algorithm\",\n        \"Truenorth ecosystem for brain-inspired computing: scalable systems, software, and applications\",\n        \"A pulse-gated, neural implementation of the backpropagation algorithm\",\n        \"Brian 2, an intuitive and efficient neural simulator\",\n        \"Memristor-based neural networks\",\n        \"Fully hardware-implemented memristor convolutional neural network\",\n        \"Manhattan rule training for memristive crossbar circuit pattern classifiers\",\n        \"Superspike: Supervised learning in multilayer spiking neural networks\"\n    ],\n    \"reasoning\": \"Selected these 45 references because they represent foundational work and recent advances in Neko: a Library for Exploring Neuromorphic Learning Rules, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}