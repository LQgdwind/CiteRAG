{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 53 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Near-Linear -Emulators for Planar Graphs1footnote 1footnoteFootnotefootnotesFootnotes1footnote 1This is the full version of the paper “Almost-Linear -Emulators for Planar Graphs” that appears in STOC 2022. As indicated in the title change, the main difference is that the emulator size’s dependence on 𝑘 is improved here from 𝑘^{1+𝑜⁢(1)} to 𝑘⁢log^{𝑂⁢(1)}𝑘.\n\nPaper Abstract: We study vertex sparsification for distances, in the setting of planar graphs with distortion: Given a planar graph G𝐺G (with edge weights) and a subset of k𝑘k terminal vertices, the goal is to construct an -emulator, which is a small planar graph G′superscript𝐺′G^{\\prime} that contains the terminals and preserves the distances between the terminals up to factor 1+limit-from11+\\varepsilon. We construct the first -emulators for planar graphs of near-linear size O~(k/)O​(1)\\tilde{O}(k/{}^{O(1)}). In terms of k𝑘k, this is a dramatic improvement over the previous quadratic upper bound of Cheung, Goranci and Henzinger, and breaks below known quadratic lower bounds for exact emulators (the case when =0absent0\\varepsilon=0). Moreover, our emulators can be computed in (near-)linear time, which lead to fast (1+)limit-from1(1+\\varepsilon)-approximation algorithms for basic optimization problems on planar graphs, including multiple-source shortest paths, minimum (s,t)𝑠𝑡(s,t)-cut, graph diameter, and offline dynamic distace oracle.\n\n{retrieved_text}\n\nGenerate exactly 53 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 53\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Graph spanners: A tutorial review\",\n        \"Popular conjectures as a barrier for dynamic planar graph algorithms\",\n        \"Towards (𝟏+)limit-from1(1+\\\\varepsilon)-approximate flow sparsifiers\",\n        \"Geometric applications of a matrix-searching algorithm\",\n        \"Steiner point removal in graph metrics\",\n        \"A linear time approximation scheme for Euclidean TSP\",\n        \"Many distances in planar graphs\",\n        \"Near-linear time approximations schemes for clustering in doubling metrics\",\n        \"Graph minors for preserving terminal distances approximately – lower and upper bounds\",\n        \"Fast dynamic cuts, distances and effective resistances via vertex sparsifiers\",\n        \"Near-Optimal Distance Emulator for Planar Graphs\",\n        \"Optimality and degeneracy in linear programming\",\n        \"Steiner point removal: Distant terminals don’t (really) bother\",\n        \"On vertex sparsifiers with Steiner nodes\",\n        \"Vertex sparsifiers and abstract rounding algorithms\",\n        \"Planar emulators for Monge matrices\",\n        \"Faster approximate diameter and distance oracles in planar graphs\",\n        \"Computing mimicking networks\",\n        \"A tight lower bound for the Steiner point removal problem on trees\",\n        \"The generalized simplex method for minimizing a linear form under linear inequality restraints\",\n        \"Holiest minimum-cost paths and flows in surface graphs\",\n        \"Vertex sparsifiers: New results from old techniques\",\n        \"Linear-time algorithms for max flow and multiple-source shortest paths in unit-weight planar graphs\",\n        \"Steiner point removal with distortion 𝑶​(𝐥𝐨𝐠⁡𝒌)𝑶𝒌O(\\\\log k)\",\n        \"Relaxed Voronoi: A simple framework for terminal-clustering problems\",\n        \"Planar graphs, negative weight edges, shortest paths, and near linear time\",\n        \"Fast algorithms for shortest paths in planar graphs, with applications\",\n        \"Improved guarantees for vertex sparsification in planar graphs\",\n        \"Vertex sparsification in trees\",\n        \"The expander hierarchy and its applications to dynamic graph algorithms\",\n        \"Steiner points in tree metrics don’t (really) help\",\n        \"Characterizing multiterminal flow networks and computing flows in networks of small treewidth\",\n        \"Faster shortest-path algorithms for planar graphs\",\n        \"The all-pairs min cut problem and the minimum cycle basis problem on planar graphs\",\n        \"Improved algorithms for min cut and max flow in undirected planar graphs\",\n        \"Maximum flow in planar networks\",\n        \"Cutting corners cheaply, or how to remove Steiner points\",\n        \"Multiple-source shortest paths in planar graphs\",\n        \"Structured recursive separator decompositions for planar graphs in linear time\",\n        \"Preserving terminal distances using minors\",\n        \"An exponential lower bound for cut sparsifiers in planar graphs\",\n        \"Mimicking networks and succinct representations of terminal cuts\",\n        \"On mimicking networks representing minimum terminal cuts\",\n        \"Refined vertex sparsifiers of planar graphs\",\n        \"A fully dynamic approximation scheme for shortest paths in planar graphs\",\n        \"Metric extension operators, vertex sparsifiers and Lipschitz extendability\",\n        \"Minimum cut of directed planar graphs in 𝑶​(𝒏​𝐥𝐨𝐠⁡𝐥𝐨𝐠⁡𝒏)𝑶𝒏𝒏O(n\\\\log\\\\log n) time\",\n        \"Approximation algorithms for multicommodity-type problems with guarantees independent of the graph size\",\n        \"Matching is as easy as matrix inversion\",\n        \"Minimum s-t cut of a planar undirected network in 𝑶​(𝒏​𝐥𝐨𝐠𝟐⁡(𝒏))𝑶𝒏superscript2𝒏O(n\\\\log^{2}(n)) time\",\n        \"Algorithms for the transportation problem in geometric settings\",\n        \"Compact oracles for reachability and approximate distances in planar digraphs\",\n        \"Approximating the diameter of planar graphs in near linear time\"\n    ],\n    \"reasoning\": \"Selected these 53 references because they represent foundational work and recent advances in Near-Linear -Emulators for Planar Graphs1footnote 1footnoteFootnotefootnotesFootnotes1footnote 1This is the full version of the paper “Almost-Linear -Emulators for Planar Graphs” that appears in STOC 2022. As indicated in the title change, the main difference is that the emulator size’s dependence on 𝑘 is improved here from 𝑘^{1+𝑜⁢(1)} to 𝑘⁢log^{𝑂⁢(1)}𝑘., providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}