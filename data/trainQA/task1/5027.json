{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 49 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: GCoD: Graph Convolutional Network Acceleration via Dedicated Algorithm and Accelerator Co-Design\n\nPaper Abstract: Abstract Graph Convolutional Networks (GCNs) have emerged as the state-of-the-art graph learning model. However, it can be notoriously challenging to inference GCNs over large graph datasets, limiting their application to large real-world graphs and hindering the exploration of deeper and more sophisticated GCN graphs. This is because real-world graphs can be extremely large and sparse. Furthermore, the node degree of GCNs tends to follow the power-law distribution and therefore have highly irregular adjacency matrices, resulting in prohibitive inefficiencies in both data processing and movement and thus substantially limiting the achievable GCN acceleration efficiency. To this end, this paper proposes a GCN algorithm and accelerator Co-Design framework dubbed GCoD which can largely alleviate the aforementioned GCN irregularity and boost GCNs’ inference efficiency. Specifically, on the algorithm level, GCoD integrates a split and conquer GCN training strategy that polarizes the graphs to be either denser or sparser in local neighborhoods without compromising the model accuracy, resulting in graph adjacency matrices that (mostly) have merely two levels of workload and enjoys largely enhanced regularity and thus ease of acceleration. On the hardware level, we further develop a dedicated two-pronged accelerator with a separated engine to process each of the aforementioned denser and sparser workloads, further boosting the overall utilization and acceleration efficiency. Extensive experiments and ablation studies validate that our GCoD consistently reduces the number of off-chip accesses, leading to speedups 15286×\\times, 294×\\times, 7.8×\\times, and 2.5×\\times as compared to CPUs, GPUs, and prior-art GCN accelerators including HyGCN and AWB-GCN, respectively, while maintaining or even improving the task accuracy. Additionally, we visualize GCoD trained graph adjacency matrices for a better understanding of its advantages. Codes are available at https://github.com/RICE-EIC/GCoD.\n\n{retrieved_text}\n\nGenerate exactly 49 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 49\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Rabbit order: Just-in-time parallel reordering for fast graph analysis\",\n        \"Hardware acceleration of graph neural networks\",\n        \"An in-depth performance characterization of cpu- and gpu-based dnn training on modern architectures\",\n        \"The reverse cuthill-mckee algorithm in distributed-memory\",\n        \"An analysis of deep neural network models for practical applications\",\n        \"Toward an architecture for never-ending language learning\",\n        \"Rubik: A hierarchical architecture for efficient graph learning\",\n        \"Training with quantization noise for extreme model compression\",\n        \"Fast graph representation learning with PyTorch Geometric\",\n        \"The lottery ticket hypothesis: Finding sparse, trainable neural networks\",\n        \"Graphnas: Graph neural architecture search with reinforcement learning\",\n        \"A taxonomy for classification and comparison of dataflows for gnn accelerators\",\n        \"Awb-gcn: A graph convolutional network accelerator with runtime workload rebalancing\",\n        \"Inductive representation learning on large graphs\",\n        \"Learning both weights and connections for efficient neural network\",\n        \"Open graph benchmark: Datasets for machine learning on graphs\",\n        \"A fast and high quality multilevel scheme for partitioning irregular graphs\",\n        \"Benchmark data sets for graph kernels\",\n        \"Adam: A method for stochastic optimization\",\n        \"Grip: A graph neural network acceleratorarchitecture\",\n        \"Semi-supervised classification with graph convolutional networks\",\n        \"Deepergcn: All you need to train deeper gcns\",\n        \"Sgcn: A graph sparsifier based on graph convolutional networks\",\n        \"Deepburning-gl: an automated framework for generating graph neural network accelerators\",\n        \"Engn: A high-throughput and energy-efficient accelerator for large graph neural networks\",\n        \"Predictivenet: An energy-efficient convolutional neural network via zero prediction\",\n        \"On-demand deep model compression for mobile devices: A usage-driven model selection framework\",\n        \"Guiding cascading failure search with interpretable graph convolutional network\",\n        \"Learning graph convolutional network for skeleton-based human action recognition by neural searching.\",\n        \"Collective classification in network data\",\n        \"Maximizing cnn accelerator efficiency through resource partitioning\",\n        \"Dynamic edge-conditioned filters in convolutional neural networks on graphs\",\n        \"Degree-quant: Quantization-aware training for graph neural networks\",\n        \"Graph attention networks\",\n        \"Deep graph library: A graph-centric, highly-performant package for graph neural networks\",\n        \"A comprehensive survey on graph neural networks\",\n        \"Virtex ultrascale+ hbm vcu128 fpga evaluation kit\",\n        \"Vivado Design Suite - HLx Editions\",\n        \"How powerful are graph neural networks?\",\n        \"Hygcn: A gcn accelerator with hybrid architecture\",\n        \"Aligraph: A comprehensive graph neural network platform\",\n        \"Hierarchical graph representation learning with differentiable pooling\",\n        \"Drawing early-bird tickets: Toward more efficient training of deep networks\",\n        \"GEBT: Drawing early-bird tickets in graph convolutional network training\",\n        \"Graphact: Accelerating gcn training on cpu-fpga heterogeneous platforms\",\n        \"Accurate, efficient and scalable graph embedding\",\n        \"An end-to-end deep learning architecture for graph classification\",\n        \"G-CoS: Gnn-accelerator co-search towards both better accuracy and efficiency\",\n        \"Robust graph representation learning via neural sparsification.\"\n    ],\n    \"reasoning\": \"Selected these 49 references because they represent foundational work and recent advances in GCoD: Graph Convolutional Network Acceleration via Dedicated Algorithm and Accelerator Co-Design, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}