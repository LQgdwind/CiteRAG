{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 54 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Grammar-compressed Self-index with Lyndon Words\n\nPaper Abstract: Abstract We introduce a new class of straight-line programs (SLPs), named the Lyndon SLP, inspired by the Lyndon trees (Barcelo, 1990). Based on this SLP, we propose a self-index data structure of 𝒪​(g)𝒪𝑔\\mathop{}\\mathopen{}\\mathcal{O}\\mathopen{}(g) words of space that can be built from a string T𝑇T in 𝒪​(n​lg⁡n)𝒪𝑛lg𝑛\\mathop{}\\mathopen{}\\mathcal{O}\\mathopen{}(n\\lg n) expected time, retrieving the starting positions of all occurrences of a pattern P𝑃P of length m𝑚m in 𝒪​(m+lg⁡m​lg⁡n+occ​lg⁡g)𝒪𝑚lg𝑚lg𝑛occlg𝑔\\mathop{}\\mathopen{}\\mathcal{O}\\mathopen{}(m+\\lg m\\lg n+\\mathrm{occ}\\lg g) time, where n𝑛n is the length of T𝑇T, g𝑔g is the size of the Lyndon SLP for T𝑇T, and occocc\\mathrm{occ} is the number of occurrences of P𝑃P in T𝑇T.\n\n{retrieved_text}\n\nGenerate exactly 54 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 54\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Replacing suffix trees with enhanced suffix arrays\",\n        \"Space-efficient construction of Lempel-Ziv compressed text indexes\",\n        \"The “runs” theorem\",\n        \"On the action of the symmetric group on the free Lie algebra and the partition lattice\",\n        \"The standard factorization of Lyndon words: an average point of view\",\n        \"Fast prefix search in little space, with applications\",\n        \"Fingerprints in compressed strings\",\n        \"Random access to grammar-compressed strings and trees\",\n        \"The smallest grammar problem\",\n        \"Free differential calculus, IV. the quotient groups of the lower central series\",\n        \"Optimal-time dictionary-compressed indexes\",\n        \"Self-indexed grammar-based compression\",\n        \"Improved grammar-based compressed indexes\",\n        \"The string edit distance matching problem with moves\",\n        \"Factorizing words over an ordered alphabet\",\n        \"Compressed text indexes: From theory to practice\",\n        \"Opportunistic data structures with applications\",\n        \"A faster grammar-based self-index\",\n        \"LZ77-based self-indexing with faster pattern matching\",\n        \"Optimal-time text indexing in BWT-runs bounded space\",\n        \"Compressed suffix arrays and suffix trees with applications to text indexing and string matching (extended abstract)\",\n        \"Constructing compressed suffix arrays with large alphabets\",\n        \"Faster Lyndon factorization algorithms for SLP and LZ78 compressed text\",\n        \"Approximation of grammar-based compression via recompression\",\n        \"Rapid identification of repeated patterns in strings, trees and arrays\",\n        \"Efficient randomized pattern-matching algorithms\",\n        \"At the roots of dictionary compression: string attractors\",\n        \"Universal lossless compression via multilevel pattern matching\",\n        \"Grammar-based codes: A new class of universal lossless source codes\",\n        \"On compressing and indexing repetitive sequences\",\n        \"A space and time efficient algorithm for constructing compressed suffix arrays\",\n        \"Offline dictionary-based compression\",\n        \"Combinatorics on Words\",\n        \"On Burnside’s problem\",\n        \"Compressed compact suffix arrays\",\n        \"Suffix arrays: A new method for on-line string searches\",\n        \"An online algorithm for lightweight grammar-based compression\",\n        \"Fully-online grammar compression\",\n        \"Maintaining dynamic sequences under equality tests in polylogarithmic time\",\n        \"Compressed full-text indexes\",\n        \"Universal compressed text indexing\",\n        \"Compression by induction of hierarchical grammars\",\n        \"Dynamic index and lz factorization in compressed space\",\n        \"Application of Lempel-Ziv factorization to the approximation of grammar-based compression\",\n        \"Data compression using locally consistent parsing\",\n        \"A fully linear-time approximation algorithm for grammar-based compression\",\n        \"A space-saving linear-time algorithm for grammar-based compression\",\n        \"A space-saving approximation algorithm for arammar-based compression\",\n        \"NP-completeness results concerning data compression\",\n        \"siEDM: an efficient string index and search algorithm for edit distance with moves\",\n        \"Improved ESP-index: A practical self-index for highly repetitive texts\",\n        \"A technique for high performance data compression\",\n        \"A universal algorithm for sequential data compression\",\n        \"Compression of individual sequences via variable-rate coding\"\n    ],\n    \"reasoning\": \"Selected these 54 references because they represent foundational work and recent advances in Grammar-compressed Self-index with Lyndon Words, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}