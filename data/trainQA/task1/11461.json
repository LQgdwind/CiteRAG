{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 63 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Programming Language Case Studies Can Be Deep\n\nPaper Abstract: Abstract In the pedagogy of programming languages, one well-known course structure is to tour multiple languages as a means of touring paradigms. This tour-of-paradigms approach has long received criticism as lacking depth, distracting students from foundational issues in language theory and implementation. This paper argues for disentangling the idea of a tour-of-languages from the tour-of-paradigms. We make this argument by presenting, in depth, a series of case studies included in the Human-Centered Programming Languages curriculum. In this curriculum, case studies become deep, serving to tour the different intellectual foundations through which a scholar can approach programming languages, which one could call the tour-of-humans. In particular, the design aspect of programming languages has much to learn from the social sciences and humanities, yet these intellectual foundations would yield far fewer deep contributions if we did not permit them to employ case studies.\n\n{retrieved_text}\n\nGenerate exactly 63 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 63\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Adding interactive visual syntax to textual code\",\n        \"Plato’s method of dialectic\",\n        \"Imagining Introductory Rust\",\n        \"Centering Humans in the Programming Languages Classroom: Building a Text for the Next Generation\",\n        \"Human Centered Programming Languages\",\n        \"Thematic analysis\",\n        \"Mezangelle\",\n        \"GenderMag: A Method for Evaluating Software’s Gender Inclusiveness\",\n        \"femme Disturbance library\",\n        \"User-Centered Programming Language Design: A Course-Based Case Study\",\n        \"PLIERS: A Process that Integrates User-Centered Methods into Programming Language Design\",\n        \"A New Model for Weaving Responsible Computing Into Courses Across the CS Curriculum\",\n        \"Socratic method as an approach to teaching\",\n        \"Autoethnography: an overview\",\n        \"How to design programs: an introduction to programming and computing\",\n        \"Ungrading, supporting our students through a pedagogy of care\",\n        \"A Data-Centric Introduction to Computing\",\n        \"C Plus Equality\",\n        \"Twine 2.7.0\",\n        \"Essentials of programming languages\",\n        \"Learning and the reflective journal in computer science\",\n        \"Identifying features of effective open education\",\n        \"Practical foundations for programming languages\",\n        \"The Programmer’s Brain: What every programmer needs to know about cognition\",\n        \"Automatic programming: present status and future trends\",\n        \"Open educational resources: Opportunities and challenges\",\n        \"The Rust programming language\",\n        \"What is a programming language, really?\",\n        \"Designing the Whyline: a debugging interface for asking questions about program behavior\",\n        \"Ungrading: Why rating students undermines learning (and what to do instead)\",\n        \"Project-based learning: A review of the literature\",\n        \"Programming languages - application and interpretation\",\n        \"Teaching programming languages in a post-linnaean age\",\n        \"Subfield prestige and gender inequality among US computing faculty\",\n        \"Proofs and refutations\",\n        \"C Plus Equality C+=\",\n        \"Codework: Phenomenology of an anti-genre\",\n        \"Foundations for programming languages\",\n        \"Programmer eXperience: A Systematic Literature Review\",\n        \"Torino: A Tangible Programming Language Inclusive of Children with Visual Disabilities\",\n        \"Programmers Are Users Too: Human-Centered Methods for Improving Programming Tools\",\n        \"Natural programming languages and environments\",\n        \"The Inform Designer’s Manual\",\n        \"Personas - User Focused Design\",\n        \"Crafting interpreters\",\n        \"Types and programming languages\",\n        \"Advanced topics in types and programming languages\",\n        \"Processing: programming for the media arts\",\n        \"Theories of programming languages\",\n        \"Schleiermacher: hermeneutics and criticism: and other writings\",\n        \"A Feminist Programming Language\",\n        \"Open education, the long tail, and learning 2.0\",\n        \"Hermeneutic inquiry: The hermeneutic imagination and the pedagogic text\",\n        \"Nothing about us without us: Investigating the role of critical disability studies in HCI\",\n        \"Ergonomics of human-system interaction, Part 11: Usability: Definitions and concepts\",\n        \"How to ungrade\",\n        \"A Framework for the Localization of Programming Languages\",\n        \"FLOW-MATIC PROGRAMMING SYSTEM\",\n        \"Why I’m not laughing at C Plus Equality\",\n        \"Open educational resources: A review of the literature\",\n        \"Penrose: from mathematical notation to beautiful diagrams\",\n        \"Becoming a self-regulated learner: An overview\",\n        \"Barry J Zimmerman (2002): Becoming a self-regulated learner: An overview\"\n    ],\n    \"reasoning\": \"Selected these 63 references because they represent foundational work and recent advances in Programming Language Case Studies Can Be Deep, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}