{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 52 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Exploring Representation of Horn Clauses using GNNs (Extended Technical Report)\n\nPaper Abstract: Abstract In recent years, the application of machine learning in program verification, and the embedding of programs to capture semantic information, has been recognised as an important tool by many research groups. Learning program semantics from raw source code is challenging due to the complexity of real-world programming language syntax and due to the difficulty of reconstructing long-distance relational information implicitly represented in programs using identifiers. Addressing the first point, we consider Constrained Horn Clauses (CHCs) as a standard representation of program verification problems, providing a simple and programming language-independent syntax. For the second challenge, we explore graph representations of CHCs, and propose a new Relational Hypergraph Neural Network (R-HyGNN) architecture to learn program features. We introduce two different graph representations of CHCs. One is called constraint graph (CG), and emphasizes syntactic information of CHCs by translating the symbols and their relations in CHCs as typed nodes and binary edges, respectively, and constructing the constraints as abstract syntax trees. The second one is called control- and data-flow hypergraph (CDHG), and emphasizes semantic information of CHCs by representing the control and data flow through ternary hyperedges. We then propose a new GNN architecture, R-HyGNN, extending Relational Graph Convolutional Networks, to handle hypergraphs. To evaluate the ability of R-HyGNN to extract semantic information from programs, we use R-HyGNNs to train models on the two graph representations, and on five proxy tasks with increasing difficulty, using benchmarks from CHC-COMP 2021 as training data. The most difficult proxy task requires the model to predict the occurrence of clauses in counter-examples, which subsumes satisfiability of CHCs. CDHG achieves 90.59% accuracy in this task. Furthermore, R-HyGNN has perfect predictions on one of the graphs consisting of more than 290 clauses. Overall, our experiments indicate that R-HyGNN can capture intricate program features for guiding verification problems.\n\n{retrieved_text}\n\nGenerate exactly 52 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 52\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Guiding Craig interpolation with domain-specific abstractions\",\n        \"Systematic predicate abstraction using variable roles\",\n        \"Counterexample-guided abstraction refinement\",\n        \"MUX: Algorithm selection for software model checkers\",\n        \"Empirical software metrics for benchmarking of verification tools\",\n        \"Algorithm selection for software validation based on graph kernels\",\n        \"Attend and represent: A novel view on algorithm selection for software verification\",\n        \"Auto-encoding variational Bayes\",\n        \"Syntax-directed variational autoencoder for structured data\",\n        \"Code2inv: A deep learning framework for program verification\",\n        \"Relational inductive biases, deep learning, and graph networks\",\n        \"Neural code comprehension: A learnable representation of code semantics\",\n        \"LLVM: a compilation framework for lifelong program analysis amp; transformation\",\n        \"Recurrent neural network based language model\",\n        \"On sentences which are true of direct unions of algebras\",\n        \"Property invariant embedding for automated reasoning\",\n        \"Modeling relational data with graph convolutional networks\",\n        \"LambdaNet: Probabilistic type inference using graph neural networks\",\n        \"Depth-first search and linear graph algorithms\",\n        \"Competition report: CHC-COMP-21\",\n        \"Disjunctive interpolants for Horn-clause verification (extended technical report)\",\n        \"Assigning meanings to programs\",\n        \"An axiomatic basis for computer programming\",\n        \"Horn clause solvers for program verification\",\n        \"The ELDARICA Horn solver\",\n        \"Neural message passing for quantum chemistry\",\n        \"How powerful are graph neural networks?\",\n        \"Attention is all you need\",\n        \"BERT: pre-training of deep bidirectional transformers for language understanding\",\n        \"Improving language understanding by generative pre-training\",\n        \"CodeBERT: A pre-trained model for programming and natural languages\",\n        \"Pre-trained contextual embedding of source code\",\n        \"CodeSearchNet challenge: Evaluating the state of semantic code search\",\n        \"CodeXGLUE: A machine learning benchmark dataset for code understanding and generation\",\n        \"A convolutional attention network for extreme summarization of source code\",\n        \"Code2vec: Learning distributed representations of code\",\n        \"TBCNN: A tree-based convolutional neural network for programming language processing\",\n        \"DeepMath - deep sequence models for premise selection\",\n        \"Premise selection for theorem proving by deep graph embedding\",\n        \"Graph representations for higher-order logic and theorem proving\",\n        \"A neurally-guided, parallel theorem prover\",\n        \"ImageNet classification with deep convolutional neural networks\",\n        \"Neurocore: Guiding high-performance SAT solvers with unsat-core predictions\",\n        \"Learning a SAT solver from single-bit supervision\",\n        \"The graph neural network model\",\n        \"Gated graph sequence neural networks\",\n        \"Graph attention networks\",\n        \"Large-scale embedding learning in heterogeneous event data\",\n        \"Structural deep embedding for hyper-networks\",\n        \"Hypergraph neural networks\",\n        \"Semi-supervised classification with graph convolutional networks\",\n        \"Hypergraph convolution and hypergraph attention\"\n    ],\n    \"reasoning\": \"Selected these 52 references because they represent foundational work and recent advances in Exploring Representation of Horn Clauses using GNNs (Extended Technical Report), providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}