{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 51 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Graph3S: A Simple, Speedy and Scalable Distributed Graph Processing System\n\nPaper Abstract: Abstract Graph is a ubiquitous structure in many domains. The rapidly increasing data volume calls for efficient and scalable graph data processing. In recent years, designing distributed graph processing systems has been an increasingly important area to fulfil the demands of processing big graphs in a distributed environment. Though a variety of distributed graph processing systems have been developed, very little attention has been paid to achieving a good combinational system performance in terms of usage simplicity, efficiency and scalability. To contribute to the study of distributed graph processing system, this work tries to fill this gap by designing a simple, speedy and scalable system. Our observation is that enforcing the communication flexibility of a system leads to the gains of both system efficiency and scalability as well as simple usage. We realize our idea in a system ùñ¶ùóãùñ∫ùóâùóÅùü•ùñ≤ùñ¶ùóãùñ∫ùóâùóÅùü•ùñ≤\\mathsf{Graph3S} and conduct extensive experiments with diverse algorithms over big graphs from different domains to test its performance. The results show that, besides simple usage, our system has outstanding performance over various graph algorithms and can even reach up to two orders of magnitude speedup over existing in-memory systems when applying to some algorithms. Also, its scalability is competitive to disk-based systems and even better when less machines are used.\n\n{retrieved_text}\n\nGenerate exactly 51 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 51\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Pregelix: Big (ger) graph analytics on a dataflow engine\",\n        \"Haloop: efficient iterative data processing on large clusters\",\n        \"Efficient distributed memory management with rdma and caching\",\n        \"G-miner: an efficient task-oriented graph mining system\",\n        \"Venus: Vertex-centric streamlined graph computation on a single pc\",\n        \"Nxgraph: An efficient graph processing system on a single machine\",\n        \"Flashgraph: Processing billion-node graphs on an array of commodity ssds\",\n        \"Gluon: A communication-optimizing substrate for distributed heterogeneous graph analytics\",\n        \"Mapreduce: simplified data processing on large clusters\",\n        \"Parallelizing sequential graph computations\",\n        \"Giraph\",\n        \"Powergraph: Distributed graph-parallel computation on natural graphs\",\n        \"Giraph unchained: Barrierless asynchronous parallel execution in pregel-like graph processing systems\",\n        \"Turbograph: a fast parallel graph engine handling billion-scale graphs in a single pc\",\n        \"High-level programming abstractions for distributed graph processing\",\n        \"Turbograph++: A scalable and fast graph analytics system\",\n        \"Graphchi: Large-scale graph computation on just a pc\",\n        \"The laboratory for web algorithmics\",\n        \"Locality in distributed graph algorithms\",\n        \"Graphene: Fine-grained io management for graph computing\",\n        \"Distributed graphlab: a framework for machine learning and data mining in the cloud\",\n        \"Powergraph\",\n        \"A simple parallel algorithm for the maximal independent set problem\",\n        \"Pregel: a system for large-scale graph processing\",\n        \"Distributed k-core decomposition\",\n        \"A lightweight infrastructure for graph analytics\",\n        \"Nscale: neighborhood-centric large-scale graph analytics in the cloud\",\n        \"X-stream: Edge-centric graph processing using streaming partitions\",\n        \"Gps: a graph processing system\",\n        \"Optimizing graph algorithms on pregel-like systems\",\n        \"Ligra: a lightweight graph processing framework for shared memory\",\n        \"Start late or finish early: A distributed graph processing system with redundancy reduction\",\n        \"Arabesque: a system for distributed graph mining\",\n        \"From think like a vertex to think like a graph\",\n        \"A bridging model for parallel computation\",\n        \"Load the edges you need: A generic i/o optimization for disk-based graph processing\",\n        \"Asynchronous large-scale graph processing made easy\",\n        \"Hybrid pulling/pushing for i/o-efficient distributed and iterative graph computing\",\n        \"Graph coloring - wikipedia\",\n        \"tokei\",\n        \"Big graph analytics platforms\",\n        \"Blogel\",\n        \"Blogel: A block-centric framework for distributed computation on real-world graphs\",\n        \"Effective techniques for message reduction and load balancing in distributed graph computation\",\n        \"Pregel+\",\n        \"Graphd\",\n        \"Graphd: distributed vertex-centric graph processing beyond the memory limit\",\n        \"Fast iterative graph computation: A path centric approach\",\n        \"Optimizing declarative graph queries at large scale\",\n        \"Medusa: Simplified graph processing on gpus\",\n        \"Gemini: A computation-centric distributed graph processing system\"\n    ],\n    \"reasoning\": \"Selected these 51 references because they represent foundational work and recent advances in Graph3S: A Simple, Speedy and Scalable Distributed Graph Processing System, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}