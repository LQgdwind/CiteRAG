{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 48 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Leveraging Architectural Support of Three Page Sizes with Trident\n\nPaper Abstract: Abstract Large pages are commonly deployed to reduce address translation overheads for big-memory workloads. Modern x86-64 processors from Intel and AMD support two large page sizes – 1GB and 2MB. However, previous works on large pages have primarily focused on 2MB pages, partly due to lack of substantial evidence on the profitability of 1GB pages to real-world applications. We argue that in fact, inadequate system software support is responsible for a decade of underutilized hardware support for 1GB pages. Through extensive experimentation on a real system, we demonstrate that 1GB pages can improve performance over 2MB pages, and when used in tandem with 2MB pages for an important set of applications; the support for the latter is crucial but missing in current systems. Our design and implementation of Trident in Linux fully exploits hardware supported large pages by dynamically and transparently allocating 1GB, 2MB, and 4KB pages as deemed suitable. Trident speeds up eight memory-intensive applications by 18%percent1818\\%, on average, over Linux’s use of 2MB pages. We also propose Tridentpv, an extension to Trident that effectively virtualizes 1GB pages via copy-less promotion and compaction in the guest OS. Overall, this paper shows that adequate software enablement can bring practical relevance to even GB-sized pages, in turn motivating architects to continue investing/innovating in large pages.\n\n{retrieved_text}\n\nGenerate exactly 48 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 48\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Clearing pages in idle loop.\",\n        \"Graph500.\",\n        \"GUPS: HPCC RandomAccess benchmark.\",\n        \"Hugepages.\",\n        \"Libsvm data: Classification (binary class).\",\n        \"Linux perf.\",\n        \"Page frame allocation via buddy in linux.\",\n        \"Wikichip: Intel coffee lake architecture.\",\n        \"Wikichip: Intel sandy bridge microarchitecture.\",\n        \"Mitosis: Transparently self-replicating page-tables for large-memory machines\",\n        \"Do-it-yourself virtual memory translation.\",\n        \"The ice lake benchmark preview: Inside intel’s 10nm, 2019.\",\n        \"The nas parallel benchmarks;summary and preliminary results.\",\n        \"Translation caching: Skip, don’t walk (the page table).\",\n        \"Spectlb: A mechanism for speculative address translation.\",\n        \"Efficient virtual memory for big memory servers.\",\n        \"The GAP benchmark suite.\",\n        \"Accelerating two-dimensional page walks for virtualized systems.\",\n        \"Large-reach memory management unit caches.\",\n        \"Benchmarking Modern Multiprocessors.\",\n        \"Redis in Action.\",\n        \"Efficient address translation for architectures with multiple page sizes.\",\n        \"Intel’s Enterprise Extravaganza 2019: Launching Cascade Lake, Optane DCPMM, Agilex FPGAs, 100G Ethernet, and Xeon D-1600.\",\n        \"Supporting superpages in non-contiguous physical memory.\",\n        \"Distributed caching with memcached.\",\n        \"Large pages may be harmful on numa systems.\",\n        \"Performance characteristics of explicit superpage support.\",\n        \"How netflix tunes ec2 instances for performance, 2017.\",\n        \"Tailored page sizes.\",\n        \"Coordinated and efficient huge page management with ingens.\",\n        \"A case for compiler-driven superpage allocation.\",\n        \"Five use cases of intel optane dc persistent memory at work in the data center, 2019.\",\n        \"Prefetched address translation.\",\n        \"Practical, transparent operating system support for superpages.\",\n        \"Hawkeye: Efficient fine-grained os support for huge pages.\",\n        \"Making huge pages actually useful.\",\n        \"Perforated page: Supporting fragmented memory allocation for large pages.\",\n        \"Increasing tlb reach by exploiting clustering in page translations.\",\n        \"Colt: Coalesced large-reach tlbs.\",\n        \"Large pages and lightweight memory management in virtualized environments: Can you have it both ways?\",\n        \"Thermal analysis of a 3d die-stacked high-performance microprocessor.\",\n        \"Rethinking tlb designs in virtualized environments: A very large part-of-memory tlb.\",\n        \"Micro keynote: Race to exascale, 2011.\",\n        \"XSBench - The Development and Verification of a Performance Abstraction for Monte Carlo Reactor Analysis.\",\n        \"Generating physically contiguous memory after page allocation, 2019.\",\n        \"1gb pud thp support on x86_64.\",\n        \"Translation ranger: Operating system support for contiguity-aware tlbs.\",\n        \"A comprehensive analysis of superpage management mechanisms and policies.\"\n    ],\n    \"reasoning\": \"Selected these 48 references because they represent foundational work and recent advances in Leveraging Architectural Support of Three Page Sizes with Trident, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}