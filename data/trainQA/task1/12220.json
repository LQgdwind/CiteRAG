{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 46 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Performance Debugging through Microarchitectural Sensitivity and Causality Analysis\n\nPaper Abstract: Abstract. Modern Out-of-Order (OoO) CPUs are complex systems with many components interleaved in non-trivial ways. Pinpointing performance bottlenecks and understanding the underlying causes of program performance issues are critical tasks to fully exploit the performance offered by hardware resources. Current performance debugging approaches rely either on measuring resource utilization, in order to estimate which parts of a CPU induce performance limitations, or on code-based analysis deriving bottleneck information from capacity/throughput models. These approaches are limited by instrumental and methodological precision, present portability constraints across different microarchitectures, and often offer factual information about resource constraints, but not causal hints about how to solve them. This paper presents a novel performance debugging and analysis tool that implements a resource-centric CPU model driven by dynamic binary instrumentation that is capable of detecting complex bottlenecks caused by an interplay of hardware and software factors. Bottlenecks are detected through sensitivity-based analysis, a sort of model parameterization that uses differential analysis to reveal constrained resources. It also implements a new technique we developed that we call causality analysis, that propagates constraints to pinpoint how each instruction contribute to the overall execution time. To evaluate our analysis tool, we considered the set of high-performance computing kernels obtained by applying a wide range of transformations from the Polybench benchmark suite (polybench, ) and measured the precision on a few Intel CPU and Arm micro-architectures. We also took one of the benchmarks (correlation) as an illustrative example to illustrate how our tool’s bottleneck analysis can be used to optimize a code.\n\n{retrieved_text}\n\nGenerate exactly 46 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 46\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Performance analysis tools for linux.\",\n        \"Intel architecture code analyzer user’s guide.\",\n        \"Intel 64 and ia-32 architectures optimization reference manual, 2023.\",\n        \"Llvm machine code analyzer.\",\n        \"uops.info: Characterizing latency, throughput, and port usage of instructions on intel microarchitectures.\",\n        \"nanobench: A low-overhead tool for running microbenchmarks on x86 systems.\",\n        \"Uica: Accurate throughput prediction of basic blocks on recent intel microarchitectures.\",\n        \"Facile: Fast, accurate, and interpretable basic-block throughput prediction.\",\n        \"Archexplorer: Microarchitecture exploration via bottleneck analysis.\",\n        \"SystemC: From the Ground Up, Second Edition.\",\n        \"Pluto: A practical and fully automatic polyhedral parallelizer and locality optimizer.\",\n        \"A portable programming interface for performance evaluation on modern processors.\",\n        \"Sniper: Exploring the level of abstraction for scalable and accurate parallel multi-core simulation.\",\n        \"An evaluation of high-level mechanistic core models.\",\n        \"Cqa: A code quality analyzer tool at binary level.\",\n        \"Perfmon metrics.\",\n        \"Coz: finding code that counts with causal profiling.\",\n        \"The new linux ’ perf ’ tools.\",\n        \"Palmed: Throughput characterization for superscalar architectures.\",\n        \"Maqao: Modular assembler quality analyzer and optimizer for itanium 2.\",\n        \"Dinero iv trace-driven uniprocessor cache simulator.\",\n        \"Dark silicon and the end of multicore scaling.\",\n        \"Interval simulation: Raising the level of abstraction in architectural simulation.\",\n        \"Dinero iv with plru replacement policy support.\",\n        \"Kerncraft: A tool for analytic performance modeling of loop kernels.\",\n        \"Gpu code optimization using abstract kernel emulation and sensitivity analysis.\",\n        \"Vtune profiler.\",\n        \"Efficiently exploring architectural design spaces via predictive modeling.\",\n        \"A new measure of rank correlation.\",\n        \"Quantifying performance bottleneck cost through differential analysis.\",\n        \"Core-level performance engineering with the open-source architecture code analyzer (osaca) and the compiler explorer.\",\n        \"The gem5 simulator: Version 20.0+, 2020.\",\n        \"Differential profiling.\",\n        \"Ithemal: Accurate, portable and fast basic block throughput estimation using deep neural networks.\",\n        \"Marss: A full system simulator for multicore x86 cpus.\",\n        \"PoCC, the polyhedral compiler collection.\",\n        \"PolyBench/C: The polyhedral benchmark suite, version 4.2, 2016.\",\n        \"Pmevo: portable inference of port mappings for out-of-order processors by evolutionary optimization.\",\n        \"Anica: Analyzing inconsistencies in microarchitectural code analyzers.\",\n        \"Zsim: Fast and accurate microarchitectural simulation of thousand-core systems.\",\n        \"Full speed ahead: Detailed architectural simulation at near-native speed.\",\n        \"Granite: A graph neural network model for basic block throughput estimation.\",\n        \"Non-determinism and overcount on modern hardware performance counter implementations.\",\n        \"Roofline: an insightful visual performance model for multicore architectures.\",\n        \"A top-down method for performance analysis and counters architecture.\",\n        \"On the precision of precise event based sampling.\"\n    ],\n    \"reasoning\": \"Selected these 46 references because they represent foundational work and recent advances in Performance Debugging through Microarchitectural Sensitivity and Causality Analysis, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}