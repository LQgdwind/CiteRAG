{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 52 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Automatic Configuration for Optimal Communication Scheduling in DNN Training\n\nPaper Abstract: Abstract ByteScheduler partitions and rearranges tensor transmissions to improve the communication efficiency of distributed Deep Neural Network (DNN) training. The configuration of hyper-parameters (i.e., the partition size and the credit size) is critical to the effectiveness of partitioning and rearrangement. Currently, ByteScheduler adopts Bayesian Optimization (BO) to find the optimal configuration for the hyper-parameters beforehand. In practice, however, various runtime factors (e.g., worker node status and network conditions) change over time, making the statically-determined one-shot configuration result suboptimal for real-world DNN training. To address this problem, we present a real-time configuration method (called AutoByte) that automatically and timely searches the optimal hyper-parameters as the training systems dynamically change. AutoByte extends the ByteScheduler framework with a meta-network, which takes the systemâ€™s runtime statistics as its input and outputs predictions for speedups under specific configurations. Evaluation results on various DNN models show that AutoByte can dynamically tune the hyper-parameters with low resource usage, and deliver up to 33.2% higher performance than the best static configuration in ByteScheduler.\n\n{retrieved_text}\n\nGenerate exactly 52 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 52\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Tensorflow: A system for large-scale machine learning\",\n        \"Cherrypick: Adaptively unearthing the best cloud configurations for big data analytics\",\n        \"Qsgd: Communication-efficient sgd via gradient quantization and encoding\",\n        \"Data center tcp (dctcp)\",\n        \"Information-agnostic flow scheduling for commodity data centers\",\n        \"A Tutorial on Bayesian Optimization of Expensive Cost Functions, with Application to Active User Modeling and Hierarchical Reinforcement Learning\",\n        \"Programmable switch as a parallel computing device\",\n        \"Towards minimal-delay deadline-driven data center tcp\",\n        \"Auto: Scaling deep reinforcement learning for datacenter-scale automatic traffic optimization\",\n        \"MXNet: A Flexible and Efficient Machine Learning Library for Heterogeneous Distributed Systems\",\n        \"Sgd: Saccharomyces genome database\",\n        \"Natural language processing\",\n        \"Efficient coflow scheduling with varys\",\n        \"PCC: Re-architecting congestion control for consistent high performance\",\n        \"Tuning database configuration parameters with ituned\",\n        \"Gpt-3: Its nature, scope, limits, and consequences\",\n        \"Accurate, large minibatch sgd: Training imagenet in 1 hour\",\n        \"Rdma over commodity ethernet at scale\",\n        \"Tictac: Accelerating distributed deep learning with communication scheduling\",\n        \"Deep residual learning for image recognition\",\n        \"Automl: A survey of the state-of-the-art\",\n        \"ZeroMQ: messaging for many applications\",\n        \"More effective distributed ml via a stale synchronous parallel parameter server\",\n        \"Gaia: Geo-distributed machine learning approaching LAN speeds\",\n        \"Densenet: Implementing efficient convnet descriptor pyramids\",\n        \"Priority-based Parameter Propagation for Distributed DNN Training\",\n        \"Nccl 2.0\",\n        \"A Unified Architecture for Accelerating Distributed DNN Training in Heterogeneous GPU/CPU Clusters\",\n        \"Tensorexpress: In-network communication scheduling for distributed deep learning\",\n        \"ImageNet classification with deep convolutional neural networks\",\n        \"ATP: In-network aggregation for multi-tenant learning\",\n        \"Automating system configuration of distributed machine learning\",\n        \"Scaling distributed machine learning with the parameter server\",\n        \"Rate-aware flow scheduling for commodity data center networks\",\n        \"Deep gradient compression: Reducing the communication bandwidth for distributed training\",\n        \"Pipedream: generalized pipeline parallelism for dnn training\",\n        \"PyTorch: An Imperative Style, High-Performance Deep Learning Library\",\n        \"Bandwidth optimal all-reduce algorithms for clusters of workstations\",\n        \"A generic communication scheduler for distributed DNN training acceleration\",\n        \"Scaling distributed machine learning with in-network aggregation\",\n        \"Very Deep Convolutional Networks for Large-Scale Image Recognition\",\n        \"Practical bayesian optimization of machine learning algorithms\",\n        \"Local sgd converges fast and communicates little\",\n        \"Stream: Decentralized opportunistic inter-coflow scheduling for datacenter networks\",\n        \"Rat-resilient allreduce tree for distributed machine learning\",\n        \"Domain-specific communication optimization for distributed dnn training\",\n        \"Divide-and-shuffle synchronization for distributed machine learning\",\n        \"Rethinking transport layer design for distributed machine learning\",\n        \"Towards zero copy dataflows using rdma\",\n        \"Poseidon: An efficient communication architecture for distributed deep learning on GPU clusters\",\n        \"Coda: Toward automatically identifying and scheduling coflows in the dark\",\n        \"Rapier: Integrating routing and scheduling for coflow-aware data center networks\"\n    ],\n    \"reasoning\": \"Selected these 52 references because they represent foundational work and recent advances in Automatic Configuration for Optimal Communication Scheduling in DNN Training, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}