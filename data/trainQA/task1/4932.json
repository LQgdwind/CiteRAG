{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 54 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Shrub Ensembles for Online Classification\n\nPaper Abstract: Abstract Online learning algorithms have become a ubiquitous tool in the machine learning toolbox and are frequently used in small, resource-constraint environments. Among the most successful online learning methods are Decision Tree (DT) ensembles. DT ensembles provide excellent performance while adapting to changes in the data, but they are not resource efficient. Incremental tree learners keep adding new nodes to the tree but never remove old ones increasing the memory consumption over time. Gradient-based tree learning, on the other hand, requires the computation of gradients over the entire tree which is costly for even moderately sized trees. In this paper, we propose a novel memory-efficient online classification ensemble called shrub ensembles for resource-constraint systems. Our algorithm trains small to medium-sized decision trees on small windows and uses stochastic proximal gradient descent to learn the ensemble weights of these ‘shrubs’. We provide a theoretical analysis of our algorithm and include an extensive discussion on the behavior of our approach in the online setting. In a series of 2 959 experiments on 12 different datasets, we compare our method against 8 state-of-the-art methods. Our Shrub Ensembles retain an excellent performance even when only little memory is available. We show that SE offers a better accuracy-memory trade-off in 7 of 12 cases, while having a statistically significant better performance than most other methods. Our implementation is available under https://github.com/sbuschjaeger/se-online.\n\n{retrieved_text}\n\nGenerate exactly 54 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 54\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Classifying evolving data streams using dynamic streaming random forests\",\n        \"Convolutional Soft Decision Trees\",\n        \"Random search for hyper-parameter optimization\",\n        \"Online gradient boosting\",\n        \"Neural Random Forests\",\n        \"Learning from time-changing data with adaptive windowing\",\n        \"Adaptive learning from evolving data streams\",\n        \"MOA: Massive Online Analysis\",\n        \"Leveraging Bagging for Evolving Data Streams\",\n        \"An Online Boosting Algorithm with Theoretical Justifications\",\n        \"Xgboost: A scalable tree boosting system\",\n        \"Internet of things in industries: A survey\",\n        \"Statistical comparisons of classifiers over multiple data sets\",\n        \"Mining high-speed data streams\",\n        \"Distilling a neural network into a soft decision tree\",\n        \"Extremely randomized trees\",\n        \"A survey on ensemble learning for data stream classification\",\n        \"Adaptive random forests for evolving data stream classification\",\n        \"Streaming random patches for evolving data stream classification\",\n        \"The vanishing gradient problem during learning recurrent neural nets and problem solutions\",\n        \"Heuristic updatable weighted random subspaces for non-stationary environments\",\n        \"Stress-testing hoeffding trees\",\n        \"Mining time-changing data streams\",\n        \"Dropout regularization in hierarchical mixture of experts\",\n        \"Soft decision trees\",\n        \"Lightgbm: A highly efficient gradient boosting decision tree\",\n        \"Using additive expert ensembles to cope with concept drift\",\n        \"Deep neural decision forests\",\n        \"Ensemble learning for data stream analysis: A survey\",\n        \"Floating approximation in time-varying knowledge bases\",\n        \"Resource-efficient machine learning in 2 KB RAM for the Internet of Things\",\n        \"Sparse projections onto the simplex\",\n        \"Faster hoeffding racing: Bernstein races via jackknife estimates\",\n        \"Extremely fast decision tree\",\n        \"Hoeffding races: Accelerating model selection search for classification and function approximation\",\n        \"The racing algorithm: Model selection for lazy learners\",\n        \"Analytical Split Value Calculation for Numerical Attributes in Hoeffding Trees with Misclassification-Based Impurity\",\n        \"Online bagging and boosting\",\n        \"PyTorch: An Imperative Style, High-Performance Deep Learning Library\",\n        \"Rough sets\",\n        \"Online coordinate boosting\",\n        \"New Options for Hoeffding Trees\",\n        \"Handling Numeric Attributes in Hoeffding Trees\",\n        \"CatBoost: unbiased boosting with categorical features\",\n        \"Online parallel boosting\",\n        \"Decision trees for mining data streams based on the mcdiarmid’s bound\",\n        \"An ensemble classifier for drifting concepts\",\n        \"Disjunctive normal random forests\",\n        \"Deep Regression Forests for Age Estimation\",\n        \"A streaming ensemble algorithm (SEA) for large-scale classification\",\n        \"Adaptive neural trees\",\n        \"Projection onto the probability simplex: An efficient algorithm with a smple proof and an application\",\n        \"Learning in the presence of concept drift and hidden contexts\",\n        \"Regularizing soft decision trees\"\n    ],\n    \"reasoning\": \"Selected these 54 references because they represent foundational work and recent advances in Shrub Ensembles for Online Classification, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}