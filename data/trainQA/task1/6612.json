{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 44 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: CSSAM: Code Search via Attention Matching of Code Semantics and Structures\n\nPaper Abstract: Abstract Code search greatly improves developers’ coding efficiency by retrieving reusable code segments from open source repositories with natural language queries. Despite the continuous efforts in improving both the effectiveness and efficiency of code search, two issues remained unsolved. First, programming languages have inherent strong structural linkages, and feature mining of code as text form would omit the structural information contained inside it. Second, there is a potential semantic relationship between code and query, it is challenging to align code and text across sequences so that vectors are spatially consistent during similarity matching. To tackle both issues, in this paper, a code search model named CSSAM (Code Semantics and Structures Attention Matching) is proposed. By introducing semantic and structural matching mechanisms, CSSAM effectively extracts and fuses multi-dimensional code features. Specifically, the cross and residual layer was developed to facilitate high-latitude spatial alignment of code and query at the token level. By leveraging the residual interaction, a matching module is designed to preserve more code semantics and descriptive features, that enhances the adhesion between the code and its corresponding query text. Besides, to improve the model’s comprehension of the code’s inherent structure, a code representation structure named CSRG (Code Semantic Representation Graph) is proposed for jointly representing abstract syntax tree nodes and the data flow of the codes. According to the experimental results on two publicly available datasets containing 540k and 330k code segments, CSSAM significantly outperforms the baselines in terms of achieving the highest SR@1/5/10, MRR, and NDCG@50 on both datasets respectively. Moreover, the ablation study is conducted to quantitatively measure the impact of each key component of CSSAM on the efficiency and effectiveness of code search, which offers the insights into the improvement of advanced code search solutions.\n\n{retrieved_text}\n\nGenerate exactly 44 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 44\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Portfolio: finding relevant functions and their usage\",\n        \"Codehow: Effective code search based on api understanding and extended boolean model (e)\",\n        \"Deep code search\",\n        \"code2vec: learning distributed representations of code\",\n        \"Deep code comment generation\",\n        \"Multi-modal attention network learning for semantic source code retrieval\",\n        \"Gated graph sequence neural networks\",\n        \"Codebert: A pre-trained model for programming and natural languages\",\n        \"Codet5: Identifier-aware unified pre-trained encoder-decoder models for code understanding and generation\",\n        \"Learning-based recursive aggregation of abstract syntax trees for code clone detection\",\n        \"Aroma: code recommendation via structural code search\",\n        \"Deep graph matching and searching for semantic code retrieval\",\n        \"Language-agnostic representation learning of source code from structure and context\",\n        \"Using prior knowledge to guide bert’s attention in semantic textual matching tasks\",\n        \"Rationalizing text matching: Learning sparse alignments via optimal transport\",\n        \"Multi-level head-wise match and aggregation in transformer for textual sequence matching\",\n        \"Distributed representations of sentences and documents\",\n        \"A neural probabilistic language model\",\n        \"Efficient estimation of word representations in vector space\",\n        \"On the construction of effective vocabularies for information retrieval\",\n        \"Some simple effective approximations to the 2-poisson model for probabilistic weighted retrieval\",\n        \"Indexing by latent semantic analysis\",\n        \"Probabilistic latent semantic analysis\",\n        \"Latent dirichlet allocation\",\n        \"Neural machine translation by jointly learning to align and translate\",\n        \"Image captioning with semantic attention\",\n        \"MAM-RNN: multi-level attention model based RNN for video captioning\",\n        \"A neural attention model for abstractive sentence summarization\",\n        \"Improving automatic source code summarization via deep reinforcement learning\",\n        \"Geometric deep learning: Going beyond euclidean data\",\n        \"Representation learning on graphs: Methods and applications\",\n        \"Improved semantic representations from tree-structured long short-term memory networks\",\n        \"A multi-perspective architecture for semantic code search\",\n        \"Fasttext.zip: Compressing text classification models\",\n        \"Enriching word vectors with subword information\",\n        \"Deepwalk: online learning of social representations\",\n        \"LSTM can solve hard long time lag problems\",\n        \"Semi-supervised classification with graph convolutional networks\",\n        \"Graph attention networks\",\n        \"DCN V2: improved deep & cross network and practical lessons for web-scale learning to rank systems\",\n        \"Adam: A method for stochastic optimization\",\n        \"Two-stage attention-based model for code search with textual and structural features\",\n        \"Deep code comment generation with hybrid lexical and syntactical information\",\n        \"Codesearchnet challenge: Evaluating the state of semantic code search\"\n    ],\n    \"reasoning\": \"Selected these 44 references because they represent foundational work and recent advances in CSSAM: Code Search via Attention Matching of Code Semantics and Structures, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}