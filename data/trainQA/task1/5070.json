{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 49 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Freeway to Memory Level Parallelism in Slice-Out-of-Order Cores\n\nPaper Abstract: Abstract. Exploiting memory level parallelism (MLP) is crucial to hide long memory and last level cache access latencies. While out-of-order (OoO) cores, and techniques building on them, are effective at exploiting MLP, they deliver poor energy efficiency due to their complex and energy-hungry hardware. This work revisits slice-out-of-order (sOoO) cores as an energy efficient alternative for MLP exploitation. sOoO cores achieve energy efficiency by constructing and executing slices of MLP generating instructions out-of-order only with respect to the rest of instructions; the slices and the remaining instructions, by themselves, execute in-order. However, we observe that existing sOoO cores miss significant MLP opportunities due to their dependence-oblivious in-order slice execution, which causes dependent slices to frequently block MLP generation. To boost MLP generation, we introduce Freeway, a sOoO core based on a new dependence-aware slice execution policy that tracks dependent slices and keeps them from blocking subsequent independent slices and MLP extraction. The proposed core incurs minimal area and power overheads, yet approaches the MLP benefits of fully OoO cores. Our evaluation shows that Freeway delivers 12% better performance than the state-of-the-art sOoO core and is within 7% of the MLP limits of full OoO execution.\n\n{retrieved_text}\n\nGenerate exactly 49 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 49\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Delay and Bypass: Ready and Criticality Aware Instruction Scheduling in Out-of-Order Processors\",\n        \"FIFOrder MicroArchitecture: Ready-Aware Instruction Scheduling for OoO Processors\",\n        \"Data Prefetching by Dependence Graph Precomputation\",\n        \"ARM Cortex-A7 processor\",\n        \"An Evaluation of High-Level Mechanistic Core Models\",\n        \"The Load Slice Core Microarchitecture\",\n        \"Sniper: Exploring the Level of Abstraction for Scalable and Accurate Parallel Multi-core Simulation\",\n        \"Dynamic Speculative Precomputation\",\n        \"Speculative Precomputation: Long-range Prefetching of Delinquent Loads\",\n        \"Improving Data Cache Performance by Pre-Executing Instructions under a Cache Miss\",\n        \"Virtual-physical registers\",\n        \"Continuous Runahead: Transparent Hardware Acceleration for Memory Intensive Workloads\",\n        \"Filtered Runahead Execution with a Runahead Buffer\",\n        \"STRAIGHT: Hazardless Processor Architecture without Register Renaming\",\n        \"CASINO Core Microarchitecture: Generating Out-of-Order Schedules Using Cascaded In-Order Scheduling Windows\",\n        \"Prefetching Using Markov Predictors\",\n        \"Improving Direct-mapped Cache Performance by the Addition of a Small Fully-associative Cache and Prefetch Buffers\",\n        \"Inter-core Prefetching for Multicore Processors Using Migrating Helper Threads\",\n        \"Design and Evaluation of Compiler Algorithms for Pre-execution\",\n        \"A Study of Source-level Compiler Algorithms for Automatic Construction of Pre-execution Code\",\n        \"Kill the Program Counter: Reconstructing Program Behavior in the Processor Cache Hierarchy\",\n        \"Towards More Efficient Execution: A Decoupled Access-execute Approach\",\n        \"Freeway: Maximizing MLP for Slice-Out-of-Order Execution\",\n        \"Dead-block Prediction &Amp; Dead-block Correlating Prefetchers\",\n        \"The Forward Slice Core Microarchitecture\",\n        \"A Large, Fast Instruction Window for Tolerating Cache Misses\",\n        \"CACTI-P: Architecture-level Modeling for SRAM-based Structures with Advanced Leakage Reduction Techniques\",\n        \"Dynamic Helper Threaded Prefetching on the Sun UltraSPARC CMP Processor\",\n        \"Tolerating Memory Latency Through Software-controlled Pre-execution in Simultaneous Multithreading Processors\",\n        \"Pin: Building Customized Program Analysis Tools with Dynamic Instrumentation\",\n        \"Slice-processors: An Implementation of Operation-based Prediction\",\n        \"Runahead Execution: An Alternative to Very Large Instruction Windows for Out-of-Order Processors\",\n        \"Precise Runahead Execution\",\n        \"Complexity-effective Superscalar Processors\",\n        \"Evaluating Stream Buffers As a Secondary Cache Replacement\",\n        \"Dependence Based Prefetching for Linked Data Structures\",\n        \"Long Term Parking (LTP): Criticality-aware Resource Allocation in OOO Processors\",\n        \"Automatically Characterizing Large Scale Program Behavior\",\n        \"A Front-End Execution Architecture for High Energy Efficiency\",\n        \"Spatial Memory Streaming\",\n        \"Spatio-temporal Memory Streaming\",\n        \"SPEC CPU2006\",\n        \"A Novel Register Renaming Technique for Out-of-Order Processors\",\n        \"Experiment flows and microbenchmarks for reverse engineering of branch predictor structures\",\n        \"Temporal Streaming of Shared Memory\",\n        \"PACMan: Prefetch-aware Cache Management for High Performance Caching\",\n        \"Hitting the Memory Wall: Implications of the Obvious\",\n        \"Accelerating and Adapting Precomputation Threads for Effcient Prefetching\",\n        \"Execution-based Prediction Using Speculative Slices\"\n    ],\n    \"reasoning\": \"Selected these 49 references because they represent foundational work and recent advances in Freeway to Memory Level Parallelism in Slice-Out-of-Order Cores, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}