{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 47 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: WAX-ML: A Python library for machine learning and feedback loops on streaming data\n\nPaper Abstract: Abstract Wax is what you put on a surfboard to avoid slipping. It is an essential tool to go surfing …We introduce WAX-ML a research-oriented Python library providing tools to design powerful machine learning algorithms and feedback loops working on streaming data. It strives to complement JAX with tools dedicated to time series. WAX-ML makes JAX-based programs easy to use for end-users working with pandas and xarray for data manipulation. It provides a simple mechanism for implementing feedback loops, allows the implementation of online learning and reinforcement learning algorithms with functions, and makes them easy to integrate by end-users working with the object-oriented reinforcement learning framework from the Gym library. It is released with an Apache open-source license on GitHub at https://github.com/eserie/wax-ml.\n\n{retrieved_text}\n\nGenerate exactly 47 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 47\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Python Control Systems Library\",\n        \"XLA: Accelerated Linear Algebra\",\n        \"MLPerf, 2020\",\n        \"Google Princeton AI and Hazan Lab @ Princeton University, 2021\",\n        \"TensorFlow: Large-Scale Machine Learning on Heterogeneous Systems\",\n        \"Differentiable Convex Optimization Layers\",\n        \"Online Learning for Time Series Prediction\",\n        \"Astropy: A community Python package for astronomy\",\n        \"SLICOT—A Subroutine Library in Systems and Control Theory\",\n        \"Julia: A fresh approach to numerical computing\",\n        \"Efficient and Modular Implicit Differentiation\",\n        \"Large dimension forecasting models and random singular value spectra\",\n        \"ml-numpy, 2021\",\n        \"Distributed Optimization and Statistical Learning via the Alternating Direction Method of Multipliers\",\n        \"JAX: composable transformations of Python+NumPy programs\",\n        \"OpenAI Gym\",\n        \"RLax: Reinforcement Learning in JAX\",\n        \"API design for machine learning software: experiences from the Scikit-learn project\",\n        \"A novel dynamic PCA algorithm for dynamic data modeling and process monitoring\",\n        \"Feedback\",\n        \"Fortran\",\n        \"COSMO: A conic operator splitting method for large convex problems\",\n        \"Array programming with NumPy\",\n        \"Introduction to Online Convex Optimization\",\n        \"The Nonstochastic Control Problem\",\n        \"Flax: A neural network library and ecosystem for JAX\",\n        \"Haiku: Sonnet for JAX\",\n        \"Optax: composable gradient transformation and optimisation, in JAX!\",\n        \"xarray: N-D labeled arrays and datasets in Python\",\n        \"A New Approach to Linear Filtering and Prediction Problems\",\n        \"Machine learning accelerated computational fluid dynamics\",\n        \"FNet: Mixing Tokens with Fourier Transforms\",\n        \"Performant, differentiable reinforcement learning\",\n        \"Proximal Minimization\",\n        \"River: machine learning for streaming data in Python\",\n        \"PyTorch: An Imperative Style, High-Performance Deep Learning Library\",\n        \"https://towardsdatascience.com/how-to-use-deep-learning-for-time-series-forecasting-3f8a399cf205\",\n        \"EagerPy: Writing Code That Works Natively with PyTorch, TensorFlow, JAX, and NumPy\",\n        \"statsmodels: Econometric and statistical modeling with python\",\n        \"ProximalOperators.jl\",\n        \"Einstein synchronisation\",\n        \"WAX-ML: A Python library for machine-learning and feedback loops on streaming data\",\n        \"Forecasting at Scale\",\n        \"Nx is a multi-dimensional tensors library for Elixir with multi-staged compilation to the CPU/GPU\",\n        \"Python 3 Reference Manual\",\n        \"SciPy 1.0: Fundamental Algorithms for Scientific Computing in Python\",\n        \"Data Structures for Statistical Computing in Python\"\n    ],\n    \"reasoning\": \"Selected these 47 references because they represent foundational work and recent advances in WAX-ML: A Python library for machine learning and feedback loops on streaming data, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}