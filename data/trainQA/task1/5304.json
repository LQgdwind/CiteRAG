{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 43 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: FL_PyTorch : Optimization Research Simulator for Federated Learning\n\nPaper Abstract: Abstract. Federated Learning (FL) has emerged as a promising technique for edge devices to collaboratively learn a shared machine learning model while keeping training data locally on the device, thereby removing the need to store and access the full data in the cloud. However, FL is difficult to implement, test and deploy in practice considering heterogeneity in common edge device settings, making it fundamentally hard for researchers to efficiently prototype and test their optimization algorithms. In this work, our aim is to alleviate this problem by introducing FL_PyTorch : a suite of open-source software written in python that builds on top of one the most popular research Deep Learning (DL) framework PyTorch. We built FL_PyTorch as a research simulator for FL to enable fast development, prototyping and experimenting with new and existing FL optimization algorithms. Our system supports abstractions that provide researchers with a sufficient level of flexibility to experiment with existing and novel approaches to advance the state-of-the-art. Furthermore, FL_PyTorch is a simple to use console system, allows to run several clients simultaneously using local CPUs or GPU(s), and even remote compute devices without the need for any distributed implementation provided by the user. FL_PyTorch also offers a Graphical User Interface. For new methods, researchers only provide the centralized implementation of their algorithm. To showcase the possibilities and usefulness of our system, we experiment with several well-known state-of-the-art FL algorithms and a few of the most common FL datasets.\n\n{retrieved_text}\n\nGenerate exactly 43 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 43\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"QSGD: Communication-efficient SGD via gradient quantization and encoding\",\n        \"Learning with Privacy at Scale\",\n        \"Designing for Privacy (video and slide deck)\",\n        \"Secure Single-Server Aggregation with (Poly)Logarithmic Overhead\",\n        \"Flower: A Friendly Federated Learning Research Framework\",\n        \"On biased compression for distributed learning\",\n        \"Leaf: A benchmark for federated settings\",\n        \"Convergence and Accuracy Trade-Offs in Federated Learning and Meta-Learning\",\n        \"Differential privacy: A survey of results\",\n        \"GDPR: 2018 Reform of EU Data Protection Rules\",\n        \"EF21 with bells & whistles: Practical algorithmic extensions of modern error feedback\",\n        \"Your voice and audio data stays private while Google Assistant improves\",\n        \"MARINA: Faster Non-Convex Distributed Learning with Compression\",\n        \"Federated Learning for Mobile Keyboard Prediction\",\n        \"FedML: A Research Library and Benchmark for Federated Machine Learning\",\n        \"Deep Residual Learning for Image Recognition\",\n        \"Natural compression for distributed deep learning\",\n        \"FjORD: Fair and Accurate Federated Learning under heterogeneous targets with Ordered Dropout\",\n        \"TensorFlow Federated\",\n        \"Intel® Open Federated Learning\",\n        \"Intel and Consilient Join Forces to Fight Financial Fraud with AI\",\n        \"SCAFFOLD: Stochastic controlled averaging for federated learning\",\n        \"Distributed learning with compressed gradients\",\n        \"Federated optimization in heterogeneous networks\",\n        \"PaddlePaddle: An Open-Source Deep Learning Platform from Industrial Practice\",\n        \"Communication-Efficient Learning of Deep Networks from Decentralized Data\",\n        \"MELLODDY Project Meets Its Year One Objective: Deployment Of The World’s First Secure Platform For Multi-Task Federated Learning In Drug Discovery Among 10 Pharmaceutical Companies\",\n        \"Distributed Learning with Compressed Gradient Differences\",\n        \"NVIDIA Clara\",\n        \"Triaging COVID-19 Patients: 20 Hospitals in 20 Days Build AI Model that Predicts Oxygen Needs\",\n        \"Story of the 1st Federated Learning Model at Owkin\",\n        \"PyTorch: An Imperative Style, High-Performance Deep Learning Library\",\n        \"Federated Learning for Emoji Prediction in a Mobile Keyboard\",\n        \"Adaptive federated optimization\",\n        \"EF21: A new, simpler, theoretically better, and practically faster error feedback\",\n        \"A generic framework for privacy preserving deep learning\",\n        \"FedNL: Making Newton-type methods applicable to federated learning\",\n        \"Very deep convolutional networks for large-scale image recognition\",\n        \"Utilization of FATE in Anti Money Laundering Through Multiple Banks\",\n        \"Terngrad: Ternary gradients to reduce communication in distributed deep learning\",\n        \"Federated machine learning: Concept and applications\",\n        \"Wide residual networks\",\n        \"Faster Rates for Compressed Federated Learning with Client-Variance Reduction\"\n    ],\n    \"reasoning\": \"Selected these 43 references because they represent foundational work and recent advances in FL_PyTorch : Optimization Research Simulator for Federated Learning, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}