{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 48 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: RDFFrames: Knowledge Graph Access for Machine Learning Tools\n\nPaper Abstract: Abstract. Knowledge graphs represented as RDF datasets are integral to many machine learning applications. RDF is supported by a rich ecosystem of data management systems and tools, most notably RDF database systems that provide a SPARQL query interface. Surprisingly, machine learning tools for knowledge graphs do not use SPARQL, despite the obvious advantages of using a database system. This is due to the mismatch between SPARQL and machine learning tools in terms of data model and programming style. Machine learning tools work on data in tabular format and process it using an imperative programming style, while SPARQL is declarative and has as its basic operation matching graph patterns to RDF triples. We posit that a good interface to knowledge graphs from a machine learning software stack should use an imperative, navigational programming paradigm based on graph traversal rather than the SPARQL query paradigm based on graph patterns. In this paper, we present RDFFrames, a framework that provides such an interface. RDFFrames provides an imperative Python API that gets internally translated to SPARQL, and it is integrated with the PyData machine learning software stack. RDFFrames enables the user to make a sequence of Python calls to define the data to be extracted from a knowledge graph stored in an RDF database system, and it translates these calls into a compact SPQARL query, executes it on the database system, and returns the results in a standard tabular format. Thus, RDFFrames is a useful tool for data preparation that combines the usability of PyData with the flexibility and performance of RDF database systems.\n\n{retrieved_text}\n\nGenerate exactly 48 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 48\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"The Seattle Report on Database Research\",\n        \"Data Platform for Machine Learning\",\n        \"PyKEEN 1.0: A Python Library for Training and Evaluating Knowledge Graph Emebddings\",\n        \"G-CORE: A Core for Future Graph Query Languages\",\n        \"TFX: A TensorFlow-Based Production-Scale Machine Learning Platform\",\n        \"Bio2RDF: Towards a Mashup to Build Bioinformatics Knowledge Systems\",\n        \"Translating Embeddings for Modeling Multi-relational Data\",\n        \"AmpliGraph: A Library for Representation Learning on Knowledge Graphs\",\n        \"Exploratory Data Mining and Data Cleaning\",\n        \"What is a knowledge representation?\",\n        \"Convolutional 2d Knowledge Graph Embeddings\",\n        \"Human-in-the-Loop Data Analysis: A Personal Perspective\",\n        \"Challenges and Innovations in Building a Product Knowledge Graph\",\n        \"AIDA - Abstraction for Advanced In-Database Analytics\",\n        \"Database Systems: The Complete Book (second ed.)\",\n        \"CiteSeer: An Automatic Citation Indexing System\",\n        \"Entity Matching Meets Data Science: A Progress Report from the Magellan Project\",\n        \"A Comparison of RDF Query Languages\",\n        \"Putting Pandas in a Box\",\n        \"OpenKE: An Open Toolkit for Knowledge Embedding\",\n        \"A Latent Factor Model for Highly Multi-relational Data\",\n        \"Magpie: Python at Speed and Scale using Cloud Backends\",\n        \"Semantics and expressive power of subqueries and aggregates in SPARQL 1.1\",\n        \"SPARQLeR: Extended SPARQL for Semantic Association Discovery\",\n        \"DBpedia - A large-scale, multilingual knowledge base extracted from Wikipedia\",\n        \"Mapping RDF Graphs to Property Graphs\",\n        \"Automating the construction of Internet portals with machine learning\",\n        \"RDFFrames: Knowledge Graph Access for Machine Learning Tools\",\n        \"BabelNet: The Automatic Construction, Evaluation and Application of a Wide-coverage Multilingual Semantic Network\",\n        \"An Overview of Embedding Models of Entities and Relationships for Knowledge Base Completion\",\n        \"A Review of Relational Machine Learning for Knowledge Graphs\",\n        \"Holographic Embeddings of Knowledge Graphs\",\n        \"A Three-way Model for Collective Learning on Multi-relational Data\",\n        \"nSPARQL: A Navigational Language for RDF\",\n        \"Towards Scalable Dataframe Systems\",\n        \"Extensible/Rule Based Query Rewrite Optimization in Starburst\",\n        \"Sparsity and Noise: Where Knowledge Graph Embeddings Fall Short\",\n        \"YAGO: A Multilingual Knowledge Base from Wikipedia, Wordnet, and Geonames\",\n        \"FedX: Optimization Techniques for Federated Query Processing on Linked Data\",\n        \"Hidden Technical Debt in Machine Learning Systems\",\n        \"YAGO: A Core of Semantic Knowledge\",\n        \"Wikidata: A New Platform for Collaborative Data Collection\",\n        \"Knowledge Graph Embedding: A Survey of Approaches and Applications\",\n        \"On Multi-relational Link Prediction with Bilinear Models\",\n        \"Knowledge Base Completion via Search-based Question Answering\",\n        \"The Split-Apply-Combine Strategy for Data Analysis\",\n        \"Apache Spark: A Unified Engine for Big Data Processing\",\n        \"Accelerating the Machine Learning Lifecycle with MLflow\"\n    ],\n    \"reasoning\": \"Selected these 48 references because they represent foundational work and recent advances in RDFFrames: Knowledge Graph Access for Machine Learning Tools, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}