{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 48 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Improve Agents without Retraining: Parallel Tree Search with Off-Policy Correction\n\nPaper Abstract: Abstract Tree Search (TS) is crucial to some of the most influential successes in reinforcement learning. Here, we tackle two major challenges with TS that limit its usability: distribution shift and scalability. We first discover and analyze a counter-intuitive phenomenon: action selection through TS and a pre-trained value function often leads to lower performance compared to the original pre-trained agent, even when having access to the exact state and reward in future steps. We show this is due to a distribution shift to areas where value estimates are highly inaccurate and analyze this effect using Extreme Value theory. To overcome this problem, we introduce a novel off-policy correction term that accounts for the mismatch between the pre-trained value and its corresponding TS policy by penalizing under-sampled trajectories. We prove that our correction eliminates the above mismatch and bound the probability of sub-optimal action selection. Our correction significantly improves pre-trained Rainbow agents without any further training, often more than doubling their scores on Atari games. Next, we address the scalability issue given by the computational complexity of exhaustive TS that scales exponentially with the tree depth. We introduce Batch-BFS: a GPU breadth-first search that advances all nodes in each depth of the tree simultaneously. Batch-BFS reduces runtime by two orders of magnitude and, beyond inference, enables also training with TS of depths that were not feasible before. We train DQN agents from scratch using TS and show improvement in several Atari games compared to both the original DQN and the more advanced Rainbow. The code for BCTS can be found in https://github.com/NVlabs/bcts.\n\n{retrieved_text}\n\nGenerate exactly 48 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 48\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"How much did alphago zero cost?\",\n        \"Model predictive control\",\n        \"Rational chebyshev approximations for the inverse of the error function\",\n        \"Openai gym\",\n        \"A survey of monte carlo tree search methods\",\n        \"Sample-efficient reinforcement learning with stochastic ensemble value expansion\",\n        \"Sui confini della probabilita\",\n        \"cudnn: Efficient primitives for deep learning\",\n        \"An introduction to statistical modeling of extreme values, volume 208\",\n        \"Efficient selectivity and backup operators in monte-carlo tree search\",\n        \"Accelerating reinforcement learning through gpu atari emulation\",\n        \"Beyond the one-step greedy approach in reinforcement learning\",\n        \"Multiple-step greedy policies in approximate and online reinforcement learning\",\n        \"How to combine tree-search methods in reinforcement learning\",\n        \"Impala: Scalable distributed deep-rl with importance weighted actor-learner architectures\",\n        \"Generalization and regularization in dqn\",\n        \"Model-based value estimation for efficient model-free reinforcement learning\",\n        \"Addressing function approximation error in actor-critic methods\",\n        \"World models\",\n        \"A formal basis for the heuristic determination of minimum cost paths\",\n        \"Double q-learning\",\n        \"Rainbow: Combining improvements in deep reinforcement learning\",\n        \"Model-based reinforcement learning for atari\",\n        \"Rainbow Pre-trained Agents v1.3\",\n        \"Uncertainty-driven imagination for continuous deep reinforcement learning\",\n        \"Learning to simulate dynamic environments with gamegan\",\n        \"Deep kalman filters\",\n        \"Rapidly-exploring random trees: A new tool for path planning\",\n        \"Optidice: Offline policy optimization via stationary distribution correction estimation\",\n        \"Gpu-accelerated robotic simulation for distributed reinforcement learning\",\n        \"Revisiting the arcade learning environment: Evaluation protocols and open problems for general agents\",\n        \"Human-level control through deep reinforcement learning\",\n        \"Playing atari with deep reinforcement learning\",\n        \"Think too fast nor too slow: The computational trade-off between planning and reinforcement learning\",\n        \"Safe and efficient off-policy reinforcement learning\",\n        \"Neural network dynamics for model-based deep reinforcement learning with model-free fine-tuning\",\n        \"Isaac Gym preview release\",\n        \"Action-conditional video prediction using deep networks in atari games\",\n        \"Markov decision processes: discrete stochastic dynamic programming\",\n        \"DQN Zoo: Reference implementations of DQN-based agents\",\n        \"Imagination-augmented agents for deep reinforcement learning\",\n        \"Mastering atari, go, chess and shogi by planning with a learned model\",\n        \"Online and offline reinforcement learning by planning with a learned model\",\n        \"Mastering the game of go with deep neural networks and tree search\",\n        \"Mastering chess and shogi by self-play with a general reinforcement learning algorithm\",\n        \"Reinforcement learning: An introduction\",\n        \"Information theoretic mpc for model-based reinforcement learning\",\n        \"Safe reinforcement learning using robust mpc\"\n    ],\n    \"reasoning\": \"Selected these 48 references because they represent foundational work and recent advances in Improve Agents without Retraining: Parallel Tree Search with Off-Policy Correction, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}