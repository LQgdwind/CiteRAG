{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 48 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: A Study of the Fundamental Performance Characteristics of GPUs and CPUs for Database Analytics (Extended Version)\n\nPaper Abstract: Abstract. There has been significant amount of excitement and recent work on GPU-based database systems. Previous work has claimed that these systems can perform orders of magnitude better than CPU-based database systems on analytical workloads such as those found in decision support and business intelligence applications. A hardware expert would view these claims with suspicion. Given the general notion that database operators are memory-bandwidth bound, one would expect the maximum gain to be roughly equal to the ratio of the memory bandwidth of GPU to that of CPU. In this paper, we adopt a model-based approach to understand when and why the performance gains of running queries on GPUs vs on CPUs vary from the bandwidth ratio (which is roughly 16×\\times on modern hardware). We propose Crystal, a library of parallel routines that can be combined together to run full SQL queries on a GPU with minimal materialization overhead. We implement individual query operators to show that while the speedups for selection, projection, and sorts are near the bandwidth ratio, joins achieve less speedup due to differences in hardware capabilities. Interestingly, we show on a popular analytical workload that full query performance gain from running on GPU exceeds the bandwidth ratio despite individual operators having speedup less than bandwidth ratio, as a result of limitations of vectorizing chained operators on CPUs, resulting in a 25×\\times speedup for GPUs over CPUs on the benchmark.\n\n{retrieved_text}\n\nGenerate exactly 48 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 48\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"1000X faster data exploration with GPUs.\",\n        \"BlazingDB.\",\n        \"CUDA C Programming Guide.\",\n        \"GPU-Accelerated Supercomputers Change the Balance of Power on the TOP500.\",\n        \"Kinetica.\",\n        \"OmniSci.\",\n        \"Opencl.\",\n        \"Thrust.\",\n        \"Multi-core, main-memory joins: Sort vs. hash revisited.\",\n        \"Main-memory hash joins on multi-core cpus: Tuning to the underlying hardware.\",\n        \"Design and evaluation of main memory hash join algorithms for multi-core cpus.\",\n        \"Monet: A next-generation DBMS kernel for query-intensive applications.\",\n        \"Monetdb/x100: Hyper-pipelining query execution.\",\n        \"Improving hash join performance through prefetching.\",\n        \"Pipelined query processing in coprocessor environments.\",\n        \"Gputerasort: high performance graphics co-processor sorting for large database management.\",\n        \"Parallel prefix sum (scan) with cuda.\",\n        \"Relational joins on graphics processors.\",\n        \"Revisiting co-processing for hash joins on the coupled cpu-gpu architecture.\",\n        \"Hardware-oblivious parallelism for in-memory column-stores.\",\n        \"High-performance code generation for stencil computations on gpu architectures.\",\n        \"Gpu join processing revisited.\",\n        \"Massively parallel numa-aware hash joins.\",\n        \"Hippogriffdb: Balancing i/o and gpu bandwidth in big data analytics.\",\n        \"Optimizing database architecture for the new bottleneck: memory access.\",\n        \"Dissecting gpu memory hierarchy through microbenchmarking.\",\n        \"Relaxed operator fusion for in-memory databases: Making compilation, vectorization, and prefetching work together at last.\",\n        \"High performance and scalable radix sorting: A case study of implementing dynamic parallelism for gpu computing.\",\n        \"Efficiently compiling efficient query plans for modern hardware.\",\n        \"The star schema benchmark and augmented fact table indexing.\",\n        \"Rethinking simd vectorization for in-memory databases.\",\n        \"A comprehensive study of main-memory partitioning and its application to large-scale comparison-and radix-sort.\",\n        \"Db2 with blu acceleration: So much more than just a column store.\",\n        \"Selection conditions in main memory.\",\n        \"Fast equi-join algorithms on gpus: Design and implementation.\",\n        \"Fast sort on cpus and gpus: a case for bandwidth oblivious simd sort.\",\n        \"An experimental comparison of thirteen relational equi-joins in main memory.\",\n        \"Hardware-conscious hash-joins on gpus.\",\n        \"Ameliorating memory contention of olap operators on gpu processors.\",\n        \"Optimizing select conditions on gpus.\",\n        \"Vectorization vs. compilation in query execution.\",\n        \"A memory bandwidth-efficient hybrid radix sort on gpus.\",\n        \"C-store: a column-oriented dbms.\",\n        \"Concurrent analytical query processing with gpus.\",\n        \"Engineering a multi-core radix sort.\",\n        \"Kernel weaver: Automatically fusing database primitives for efficient gpu computation.\",\n        \"Relational joins on gpus: A closer look.\",\n        \"The yin and yang of processing data warehousing queries on gpu devices.\"\n    ],\n    \"reasoning\": \"Selected these 48 references because they represent foundational work and recent advances in A Study of the Fundamental Performance Characteristics of GPUs and CPUs for Database Analytics (Extended Version), providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}