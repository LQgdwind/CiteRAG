{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 50 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Improving Test Case Generation for REST APIs Through Hierarchical Clustering\n\nPaper Abstract: Abstract With the ever-increasing use of web APIs in modern-day applications, it is becoming more important to test the system as a whole. In the last decade, tools and approaches have been proposed to automate the creation of system-level test cases for these APIs using evolutionary algorithms (EAs). One of the limiting factors of EAs is that the genetic operators (crossover and mutation) are fully randomized, potentially breaking promising patterns in the sequences of API requests discovered during the search. Breaking these patterns has a negative impact on the effectiveness of the test case generation process. To address this limitation, this paper proposes a new approach that uses Agglomerative Hierarchical Clustering (AHC) to infer a linkage tree model, which captures, replicates, and preserves these patterns in new test cases. We evaluate our approach, called LT-MOSA, by performing an empirical study on 7 real-world benchmark applications w.r.t. branch coverage and real-fault detection capability. We also compare LT-MOSA with the two existing state-of-the-art white-box techniques (MIO, MOSA) for REST API testing. Our results show that LT-MOSA achieves a statistically significant increase in test target coverage (i.e., lines and branches) compared to MIO and MOSA in 4 and 5 out of 7 applications, respectively. Furthermore, LT-MOSA discovers 27 and 18 unique real-faults that are left undetected by MIO and MOSA, respectively.\n\n{retrieved_text}\n\nGenerate exactly 50 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 50\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Unraveling the web services web: an introduction to soap, wsdl, and uddi\",\n        \"Architectural styles and the design of network-based software architectures\",\n        \"Serverless testing: Tool vendors’ and experts’ points of view\",\n        \"Toward a technical debt conceptualization for serverless computing\",\n        \"An empirical evaluation of evolutionary algorithms for unit test suite generation\",\n        \"Java unit testing tool competition-fifth round\",\n        \"1600 faults in 100 projects: automatically finding faults while achieving high coverage with evosuite\",\n        \"Do automatically generated unit tests find real faults? an empirical study of effectiveness and challenges (t)\",\n        \"Handling sql databases in automated system test generation\",\n        \"Evolutionary testing of classes\",\n        \"Restful api automated test case generation with evomaster\",\n        \"Resource-based test case generation for restful web services\",\n        \"Test suite generation with the many independent objective (mio) algorithm\",\n        \"A building-block royal road where crossover is provably essential\",\n        \"Replication package of Improving Test Case Generation for REST APIs Through Hierarchical Clustering\",\n        \"Search-based software test data generation: a survey\",\n        \"An orchestrated survey of methodologies for automated software test case generation\",\n        \"Search-based crash reproduction and its impact on debugging\",\n        \"Generating test data from ocl constraints with search techniques\",\n        \"Deploying search based software engineering with sapienz at facebook\",\n        \"Evosuite: automatic test suite generation for object-oriented software\",\n        \"Sapienz: Multi-objective automated testing for android applications\",\n        \"Resttestgen: automated black-box testing of restful apis\",\n        \"Reformulating branch coverage as a many-objective optimization problem\",\n        \"A fast and elitist multiobjective genetic algorithm: Nsga-ii\",\n        \"Automated test case generation as a many-objective optimisation problem with dynamic selection of the targets\",\n        \"Modeling building-block interdependency\",\n        \"Escaping hierarchical traps with competent genetic algorithms\",\n        \"Boa: The bayesian optimization algorithm\",\n        \"Dependency structure matrix, genetic algorithms, and effective recombination\",\n        \"Empirical linkage learning\",\n        \"The linkage tree genetic algorithm\",\n        \"Optimal mixing evolutionary algorithms\",\n        \"Exploiting linkage information in real-valued optimization with the real-valued gene-pool optimal mixing evolutionary algorithm\",\n        \"Expanding from discrete cartesian to permutation gene-pool optimal mixing evolutionary algorithms\",\n        \"Multi-objective test case selection through linkage learning-based crossover\",\n        \"A large scale empirical comparison of state-of-the-art search-based test case generators\",\n        \"Automatic test suite generation for key-points detection dnns using many-objective search\",\n        \"Automated software test data generation\",\n        \"A statistical method for evaluating systematic relationships\",\n        \"A mathematical theory of communication\",\n        \"Genetic algorithms\",\n        \"A study of control parameters affecting online performance of genetic algorithms for function optimization\",\n        \"Adaptively parameterised evolutionary systems: Self adaptive recombination and mutation in a genetic algorithm\",\n        \"Testability transformations for existing apis\",\n        \"Parameter tuning or default values? an empirical investigation in search-based software engineering\",\n        \"Many independent objective (mio) algorithm for test suite generation\",\n        \"Practical nonparametric statistics\",\n        \"A critique and improvement of the cl common language effect size statistics of mcgraw and wong\",\n        \"A hitchhiker’s guide to statistical tests for assessing randomized algorithms in software engineering\"\n    ],\n    \"reasoning\": \"Selected these 50 references because they represent foundational work and recent advances in Improving Test Case Generation for REST APIs Through Hierarchical Clustering, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}