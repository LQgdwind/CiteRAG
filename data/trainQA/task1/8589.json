{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 47 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: ICE-Score: Instructing Large Language Models to Evaluate Code\n\nPaper Abstract: Abstract Recent advancements in the field of natural language generation have facilitated the use of large language models to assess the quality of generated text. Although these models have shown promising results in tasks such as machine translation and summarization, their applicability in code intelligence tasks remains limited without human involvement. The complexity of programming concepts required for such tasks makes it difficult to develop evaluation metrics that align with human judgment. Token-matching-based metrics, such as BLEU, have demonstrated weak correlations with human practitioners in code intelligence tasks. Moreover, utilizing human-written test suites to evaluate functional correctness can be challenging in domains with low resources. To overcome these obstacles, we propose ICE-Score, a new evaluation metric via instructing large language models (LLMs) for code assessments. Our metric addresses the limitations of existing approaches by achieving superior correlations with functional correctness and human preferences, without the need for test oracles or references. We evaluate the efficacy of our metric on two different aspects (human preference and execution success) and four programming languages. Our results demonstrate that our metric surpasses state-of-the-art metrics for code generation, delivering high levels of accuracy and consistency across various programming languages and tasks. We also make our evaluation metric and datasets available to the public111https://github.com/terryyz/ice-score, encouraging further research in evaluating code intelligence tasks.\n\n{retrieved_text}\n\nGenerate exactly 47 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 47\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Few-shot training llms for project-specific code-summarization\",\n        \"Can we trust the evaluation on chatgpt?\",\n        \"Santacoder: don’t reach for the stars!\",\n        \"A survey of machine learning for big code and naturalness\",\n        \"Meteor: An automatic metric for mt evaluation with improved correlation with human judgments\",\n        \"Language models are few-shot learners\",\n        \"Sparks of artificial general intelligence: Early experiments with gpt-4\",\n        \"MultiPL-E: A scalable and polyglot approach to benchmarking neural code generation\",\n        \"Evaluating large language models trained on code\",\n        \"Teaching large language models to self-debug\",\n        \"Crystalbleu: precisely and efficiently measuring the similarity of code\",\n        \"Out of the bleu: how should we assess quality of the code generation models?\",\n        \"Codebert: A pre-trained model for programming and natural languages\",\n        \"Results of wmt22 metrics shared task: Stop using bleu–neural metrics are better and more robust\",\n        \"Gptscore: Evaluate as you desire\",\n        \"On the naturalness of software\",\n        \"Correlating automated and human evaluation of code documentation generation quality\",\n        \"Large language models can self-improve\",\n        \"Large language models are state-of-the-art evaluators of translation quality\",\n        \"To ship or not to ship: An extensive evaluation of automatic metrics for machine translation\",\n        \"Large language models are zero-shot reasoners\",\n        \"Starcoder: may the source be with you!\",\n        \"Rouge: A package for automatic evaluation of summaries\",\n        \"Gpteval: Nlg evaluation using gpt-4 with better human alignment\",\n        \"Wizardcoder: Empowering code large language models with evol-instruct\",\n        \"At which training stage does code data help llms reasoning?\",\n        \"Self-refine: Iterative refinement with self-feedback\",\n        \"Octopack: Instruction tuning code large language models\",\n        \"Scaling data-constrained language models\",\n        \"Gpt-4 technical report\",\n        \"Training language models to follow instructions with human feedback\",\n        \"Bleu: a method for automatic evaluation of machine translation\",\n        \"chrf: character n-gram f-score for automatic mt evaluation\",\n        \"A call for clarity in reporting BLEU scores\",\n        \"Codebleu: a method for automatic evaluation of code synthesis\",\n        \"Code llama: Open foundation models for code\",\n        \"An analysis of the automatic bug fixing performance of chatgpt\",\n        \"Automatic code summarization via chatgpt: How far are we?\",\n        \"Use chat gpt to solve programming bugs\",\n        \"Does bleu score work for code migration?\",\n        \"Chain-of-thought prompting elicits reasoning in large language models\",\n        \"Learning to mine aligned code and natural language pairs from stack overflow\",\n        \"Codegeex: A pre-trained model for code generation with multilingual evaluations on humaneval-x\",\n        \"Towards a unified multi-dimensional evaluator for text generation\",\n        \"Codebertscore: Evaluating code generation with pretrained models of code\",\n        \"Promptbench: Towards evaluating the robustness of large language models on adversarial prompts\",\n        \"Red teaming chatgpt via jailbreaking: Bias, robustness, reliability and toxicity\"\n    ],\n    \"reasoning\": \"Selected these 47 references because they represent foundational work and recent advances in ICE-Score: Instructing Large Language Models to Evaluate Code, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}