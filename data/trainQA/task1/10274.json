{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 51 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: HasTEE+: Confidential Cloud Computing and Analytics with Haskell\n\nPaper Abstract: Abstract Confidential computing is a security paradigm that enables the protection of confidential code and data in a co-tenanted cloud deployment using specialized hardware isolation units called Trusted Execution Environments (TEEs). By integrating TEEs with a Remote Attestation protocol, confidential computing allows a third party to establish the integrity of an enclave hosted within an untrusted cloud. However, TEE solutions, such as Intel SGX and ARM TrustZone, offer low-level C/C++-based toolchains that are susceptible to inherent memory safety vulnerabilities and lack language constructs to monitor explicit and implicit information-flow leaks. Moreover, the toolchains involve complex multi-project hierarchies and the deployment of hand-written attestation protocols for verifying enclave integrity. We address the above with HasTEE+, a domain-specific language (DSL) embedded in Haskell that enables programming TEEs in a high-level language with strong type-safety. HasTEE+ assists in multi-tier cloud application development by (1) introducing a tierless programming model for expressing distributed client-server interactions as a single program, (2) integrating a general remote-attestation architecture that removes the necessity to write application-specific cross-cutting attestation code, and (3) employing a dynamic information flow control mechanism to prevent explicit as well as implicit data leaks. We demonstrate the practicality of HasTEE+ through a case study on confidential data analytics, presenting a data-sharing pattern applicable to mutually distrustful participants and providing overall performance metrics.\n\n{retrieved_text}\n\nGenerate exactly 51 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 51\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"ARM TrustZone\",\n        \"Mbed TLS\",\n        \"SCONE: secure linux containers with intel SGX\",\n        \"Shielding applications from an untrusted cloud with haven\",\n        \"Linear haskell: practical linearity in a higher-order polymorphic language\",\n        \"Integrity considerations for secure computer systems\",\n        \"Sgxpectre: Stealing intel secrets from SGX enclaves via speculative execution\",\n        \"Buffer overflows: Attacks and defenses for the vulnerability of the decade\",\n        \"A lattice model of secure information flow\",\n        \"A seamless, client-centric programming model for type safe web applications\",\n        \"Private set intersection: A systematic literature review\",\n        \"Trusted execution environments: Applications and organizational challenges\",\n        \"Secured routines: Language-based construction of trusted execution environments\",\n        \"Security policies and security models\",\n        \"Linking remote attestation to secure tunnel endpoints\",\n        \"Automatic enforcement of expressive security policies using enclaves\",\n        \"Information flow control for distributed trusted execution environments\",\n        \"Intel SGX Intro: Passing Data Between App and Enclave\",\n        \"tlibc - an alternative to glibc\",\n        \"Intel Trust Domain Extensions\",\n        \"Integrating remote attestation with transport layer security\",\n        \"Linux SGX Remote Attestation\",\n        \"Runtime support for multicore haskell\",\n        \"Innovative instructions and software model for isolated execution\",\n        \"Windows cryptoapi spoofing vulnerability\",\n        \"PPFL: privacy-preserving federated learning with trusted execution environments\",\n        \"Guarantee: Introducing control-flow attestation for trusted execution environments\",\n        \"Confidential computing - a brave new world\",\n        \"Protecting privacy using the decentralized label model\",\n        \"The full stack developer: your essential guide to the everyday skills expected of a modern full stack web developer\",\n        \"Language support for secure software development with enclaves\",\n        \"Do fewer tiers mean fewer tears? eliminating web stack components to improve interoperability\",\n        \"Toward confidential cloud computing\",\n        \"Language-based information-flow security\",\n        \"Declassification: Dimensions and principles\",\n        \"Confidential private set intersection with hastee\",\n        \"HasTEE: Programming Trusted Execution Environments with Haskell\",\n        \"Strengthening vm isolation with integrity protection and more\",\n        \"The geometry of innocent flesh on the bone: return-into-libc without function calls (on the x86)\",\n        \"Haschor: Functional choreographic programming for all (functional pearl)\",\n        \"Moat: Verifying confidentiality of enclave programs\",\n        \"Disjunction category labels\",\n        \"Flexible dynamic information flow control in haskell\",\n        \"Protecting users by confining javascript with COWL\",\n        \"A robust integrity reporting protocol for remote attestation\",\n        \"Information flow tracking for heterogeneous compartmentalized software\",\n        \"Intel SGX deprecation review\",\n        \"Towards memory safe enclave programming with rust-sgx\",\n        \"A survey of multitier programming\",\n        \"Use of intel SGX to ensure the confidentiality of data of cloud users\",\n        \"Making information flow explicit in histar\"\n    ],\n    \"reasoning\": \"Selected these 51 references because they represent foundational work and recent advances in HasTEE+: Confidential Cloud Computing and Analytics with Haskell, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}