{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 50 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: FastGL: A GPU-Efficient Framework for Accelerating Sampling-Based GNN Training at Large Scale\n\nPaper Abstract: Abstract. Graph Neural Networks (GNNs) have shown great superiority on non-Euclidean graph data, achieving ground-breaking performance on various graph-related tasks. As a practical solution to train GNN on large graphs with billions of nodes and edges, the sampling-based training is widely adopted by existing training frameworks. However, through an in-depth analysis, we observe that the efficiency of existing sampling-based training frameworks is still limited due to the key bottlenecks lying in all three phases of sampling-based training, i.e., subgraph sample, memory IO, and computation. To this end, we propose FastGL, a GPU-efficient Framework for accelerating sampling-based training of GNN at Large scale by simultaneously optimizing all above three phases, taking into account both GPU characteristics and graph structure. Specifically, by exploiting the inherent overlap within graph structures, FastGL develops the Match-Reorder strategy to reduce the data traffic, which accelerates the memory IO without incurring any GPU memory overhead. Additionally, FastGL leverages a Memory-Aware computation method, harnessing the GPU memory’s hierarchical nature to mitigate irregular data access during computation. FastGL further incorporates the Fused-Map approach aimed at diminishing the synchronization overhead during sampling. Extensive experiments demonstrate that FastGL can achieve an average speedup of 11.8×11.8\\times, 2.2×2.2\\times and 1.5×1.5\\times over the state-of-the-art frameworks PyG, DGL, and GNNLab, respectively. Our code is available at https://github.com/a1bc2def6g/fastgl-ae.\n\n{retrieved_text}\n\nGenerate exactly 50 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 50\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Scaling graph neural networks with approximate pagerank\",\n        \"Dsp: Efficient gnn training with multiple gpus\",\n        \"Stochastic training of graph convolutional networks with variance reduction\",\n        \"Fastgcn: Fast learning with graph convolutional networks via importance sampling\",\n        \"Cluster-gcn: An efficient algorithm for training deep and large graph convolutional networks\",\n        \"Cuda c++ programming guide\",\n        \"Nvidia collective communications library (nccl)\",\n        \"Nvidia grace hopper superchip architecture whitepaper\",\n        \"Graph neural networks for social recommendation\",\n        \"Fast graph representation learning with pytorch geometric\",\n        \"P3: Distributed deep graph learning at scale\",\n        \"Inductive representation learning on large graphs\",\n        \"Open graph benchmark: Datasets for machine learning on graphs\",\n        \"T-gcn: A sampling based streaming graph neural network system with hybrid architecture\",\n        \"Adaptive sampling towards fast graph representation learning\",\n        \"Accelerating graph sampling for graph machine learning using gpus\",\n        \"Improving the accuracy, scalability, and performance of graph neural networks with roc\",\n        \"Multi-behavior recommendation with graph convolutional networks\",\n        \"Accelerating training and inference of graph neural networks with fast sampling and pipelining\",\n        \"Igb: Addressing the gaps in labeling, features, heterogeneity, and size of public graph datasets for deep learning research\",\n        \"Semi-supervised classification with graph convolutional networks\",\n        \"Cooperative behavior planning for automated driving using graph neural networks\",\n        \"Pytorch-biggraph: A large scale graph embedding system\",\n        \"Gcnax: A flexible and energy-efficient accelerator for graph convolutional neural networks\",\n        \"Pagraph: Scaling gnn training on large graphs via computation-aware caching\",\n        \"BGL: GPU-Efficient GNN training by optimizing graph data I/O and preprocessing\",\n        \"NeuGraph: Parallel deep neural network computation on large graphs\",\n        \"C-saw: A framework for graph sampling and random walk on gpus\",\n        \"Pytorch: An imperative style, high-performance deep learning library\",\n        \"Deepwalk: Online learning of social representations\",\n        \"Rethinking graph data placement for graph neural network training on multiple gpus\",\n        \"Dorylus: Affordable, scalable, and accurate GNN training with distributed CPU servers and serverless threads\",\n        \"Graph attention networks\",\n        \"Bns-gcn: Efficient full-graph training of graph convolutional networks with partition-parallelism and random boundary node sampling\",\n        \"Scalable and efficient full-graph gnn training for large graphs\",\n        \"Flexgraph: a flexible and efficient distributed framework for gnn training\",\n        \"Deep graph library: Towards efficient and scalable deep learning on graphs\",\n        \"GNNAdvisor: An adaptive and efficient runtime system for GNN acceleration on GPUs\",\n        \"Joint 3d tracking and forecasting with graph neural network and diversity sampling\",\n        \"How powerful are graph neural networks?\",\n        \"Aligraph: A comprehensive graph neural network platform\",\n        \"Gnnlab: a factored system for sample-based gnn training over gpus\",\n        \"Betty: Enabling large-scale gnn training with batch-level graph partitioning\",\n        \"Hagerec: Hierarchical attention graph convolutional network incorporating knowledge graph for explainable recommendation\",\n        \"Graph convolutional neural networks for web-scale recommender systems\",\n        \"Graphsaint: Graph sampling based inductive learning method\",\n        \"A biased graph neural network sampler with near-optimal regret\",\n        \"Bytegnn: efficient graph neural network training at large scale\",\n        \"Distdgl: distributed graph neural network training for billion-scale graphs\",\n        \"Layer-dependent importance sampling for training deep and large graph convolutional networks\"\n    ],\n    \"reasoning\": \"Selected these 50 references because they represent foundational work and recent advances in FastGL: A GPU-Efficient Framework for Accelerating Sampling-Based GNN Training at Large Scale, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}