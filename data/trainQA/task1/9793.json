{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 52 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: MELT: Mining Effective Lightweight Transformations from Pull Requests\n\nPaper Abstract: Abstract Software developers often struggle to update APIs, leading to manual, time-consuming, and error-prone processes. We introduce Melt, a new approach that generates lightweight API migration rules directly from pull requests in popular library repositories. Our key insight is that pull requests merged into open-source libraries are a rich source of information sufficient to mine API migration rules. By leveraging code examples mined from the library source and automatically generated code examples based on the pull requests, we infer transformation rules in Comby, a language for structural code search and replace. Since inferred rules from single code examples may be too specific, we propose a generalization procedure to make the rules more applicable to client projects. Melt rules are syntax-driven, interpretable, and easily adaptable. Moreover, unlike previous work, our approach enables rule inference to seamlessly integrate into the library workflow, removing the need to wait for client code migrations. We evaluated Melt on pull requests from four popular libraries, successfully mining 461 migration rules from code examples in pull requests and 114 rules from auto-generated code examples. Our generalization procedure increases the number of matches for mined rules by 9×\\times. We applied these rules to client projects and ran their tests, which led to an overall decrease in the number of warnings and fixing some test cases demonstrating Melt’s effectiveness in real-world scenarios.\n\n{retrieved_text}\n\nGenerate exactly 52 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 52\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"How a good software practice thwarts collaboration: the multiple roles of apis in software development\",\n        \"Historical and impact analysis of API breaking changes: A large-scale study\",\n        \"How to break an API: cost negotiation and community values in three software ecosystems\",\n        \"How do apis evolve? A story of refactoring\",\n        \"Types of software evolution and software maintenance\",\n        \"Automatically generating refactorings to support API evolution\",\n        \"Refactoring: Improving the design of existing code\",\n        \"A field study of refactoring challenges and benefits\",\n        \"Data scientists in software teams: state of the art and challenges\",\n        \"Understanding software-2.0: A study of machine learning library usage and evolution\",\n        \"Vulnerable open source dependencies: counting those that matter\",\n        \"Meditor: inference and application of API migration edits\",\n        \"SOAR: A synthesis approach for data science API refactoring\",\n        \"Apifix: Output-oriented program synthesis for combating breaking changes in libraries\",\n        \"Apimigrator: an api-usage migration tool for android apps\",\n        \"A3: assisting android API migrations using code examples\",\n        \"Automated api-usage update for android apps\",\n        \"Do developers update their library dependencies? - an empirical study on the impact of security advisories on library migration\",\n        \"An empirical study of api stability and adoption in the android ecosystem\",\n        \"A systematic review of api evolution literature\",\n        \"An exploratory study of the pull-based software development model\",\n        \"Wait for it: Determinants of pull request evaluation latency on github\",\n        \"Lightweight multi-language syntax transformation with parser parser combinators\",\n        \"Comby\",\n        \"Inferring and applying type changes\",\n        \"DEPR: Deprecate DataFrame.append and Series.append\",\n        \"pandas-dev/pandas: Powerful data structures for data analysis, time series, and statistics\",\n        \"Scipy: Open source scientific tools for python\",\n        \"GPT-4\",\n        \"deprecate signal.spline in favor of signal\",\n        \"Replication of MELT: Mining Effective Lightweight Transformations from Pull Requests\",\n        \"DEPR: squeeze() argument in read_csv/read_table #43242\",\n        \"Pyevolve: Automating frequent code changes in python ml systems\",\n        \"Jedi: An autocompletion tool for python\",\n        \"Tiobe index\",\n        \"Comby with types\",\n        \"A Coefficient of Agreement for Nominal Scales\",\n        \"Seeking the ground truth: a retroactive study on the evolution and migration of software libraries\",\n        \"Dep: deprecate rollaxis\",\n        \"DEPR: pd.read_table\",\n        \"DEPR: disallow int fill_value in shift with dt64/td64 #49362\",\n        \"Sourcegraph\",\n        \"100k context windows\",\n        \"Scripting parametric refactorings in java to retrofit design patterns\",\n        \"Learning syntactic program transformations from examples\",\n        \"recode : A lightweight find-and-replace interaction in the IDE for transforming code by example\",\n        \"Nezha: Efficient domain-independent differential testing\",\n        \"SemDiff: Analysis and recommendation support for API evolution\",\n        \"CatchUp!: capturing and replaying refactorings to support API evolution\",\n        \"LASE: locating and applying systematic edits by learning from examples\",\n        \"Systematic editing: generating program transformations from an example\",\n        \"Intellitc: Automating type changes in intellij IDEA\"\n    ],\n    \"reasoning\": \"Selected these 52 references because they represent foundational work and recent advances in MELT: Mining Effective Lightweight Transformations from Pull Requests, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}