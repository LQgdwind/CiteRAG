{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 45 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: A Compiler Framework for Optimizing Dynamic Parallelism on GPUs\n\nPaper Abstract: Abstract Dynamic parallelism on GPUs allows GPU threads to dynamically launch other GPU threads. It is useful in applications with nested parallelism, particularly where the amount of nested parallelism is irregular and cannot be predicted beforehand. However, prior works have shown that dynamic parallelism may impose a high performance penalty when a large number of small grids are launched. The large number of launches results in high launch latency due to congestion, and the small grid sizes result in hardware underutilization. To address this issue, we propose a compiler framework for optimizing the use of dynamic parallelism in applications with nested parallelism. The framework features three key optimizations: thresholding, coarsening, and aggregation. Thresholding involves launching a grid dynamically only if the number of child threads exceeds some threshold, and serializing the child threads in the parent thread otherwise. Coarsening involves executing the work of multiple thread blocks by a single coarsened block to amortize the common work across them. Aggregation involves combining multiple child grids into a single aggregated grid. Thresholding is sometimes applied manually by programmers in the context of dynamic parallelism. We automate it in the compiler and discuss the challenges associated with doing so. Coarsening is sometimes applied as an optimization in other contexts. We propose to apply coarsening in the context of dynamic parallelism and automate it in the compiler as well. Aggregation has been automated in the compiler by prior work. We enhance aggregation by proposing a new aggregation technique that uses multi-block granularity. We also integrate these three optimizations into an open-source compiler framework to simplify the process of optimizing dynamic parallelism code. Our evaluation shows that our compiler framework improves the performance of applications with nested parallelism by a geometric mean of 43.0×\\times over applications that use dynamic parallelism, 8.7×\\times over applications that do not use dynamic parallelism, and 3.6×\\times over applications that use dynamic parallelism with aggregation alone as proposed in prior work.\n\n{retrieved_text}\n\nGenerate exactly 45 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 45\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Wireframe: supporting data-dependent parallelism through dependency graph execution in GPUs\",\n        \"BlockMaestro: Enabling programmer-transparent task-based execution in GPU systems\",\n        \"AMD EPYC 7551P\",\n        \"OpenTuner: An extensible framework for program autotuning\",\n        \"Proceedings of SAT Competition 2014\",\n        \"Juggler: a dependence-aware task-based execution framework for GPUs\",\n        \"The WebGraph framework I: Compression techniques\",\n        \"A quantitative study of irregular programs on GPUs\",\n        \"Free launch: optimizing GPU dynamic kernel launches through thread reuse\",\n        \"The scalable heterogeneous computing (SHOC) benchmark suite\",\n        \"9th DIMACS implementation challenge - shortest paths\",\n        \"Dynamic loop vectorization for executing OpenCL kernels on CPUs\",\n        \"Techniques for optimizing dynamic parallelism on graphics processing units\",\n        \"KLAP: Kernel launch aggregation and promotion for optimizing dynamic parallelism\",\n        \"NestGPU: Nested query processing on GPU\",\n        \"Characterizing performance and power towards efficient synchronization of GPU kernels\",\n        \"Adaptive task aggregation for high-performance sparse solvers on GPUs\",\n        \"Improving performance of OpenCL on CPUs\",\n        \"Eliminating intra-warp load imbalance in irregular nested patterns via collaborative task engagement\",\n        \"Locality-centric thread scheduling for bulk-synchronous programming models on CPU architectures\",\n        \"Multi-tier dynamic vectorization for translating GPU optimizations into CPU performance\",\n        \"Programming Massively Parallel Processors: A Hands-On Approach\",\n        \"LLVM: A compilation framework for lifelong program analysis & transformation\",\n        \"Exploiting dynamic parallelism to efficiently support irregular nested loops on GPUs\",\n        \"Nested parallelism on GPU: Exploring parallelization templates for irregular loops and recursive computations\",\n        \"Automatic optimization of thread-coarsening for graphics processors\",\n        \"Collaborative (CPU + GPU) algorithms for triangle counting and truss decomposition\",\n        \"CUDA samples v. 7.5\",\n        \"NVIDIA Tesla V100 GPU architecture: The world’s most advanced data center GPU. version WP-08608-001_v1\",\n        \"CUDA programming guide v. 11.2\",\n        \"The network data repository with interactive graph analytics and visualization\",\n        \"Predictable thread coarsening\",\n        \"MCUDA: An efficient implementation of CUDA kernels for multi-core CPUs\",\n        \"Controlled kernel launch for dynamic parallelism in GPUs\",\n        \"Quantifying data locality in dynamic parallelism in GPUs\",\n        \"NUPAR: A benchmark suite for modern GPU architectures\",\n        \"Acceleration and optimization of dynamic parallelism for irregular applications on GPUs\",\n        \"Dynamic thread block launch: A lightweight execution mechanism to support irregular applications on GPUs\",\n        \"Laperm: Locality aware scheduler for dynamic parallelism on GPUs\",\n        \"Characterization and analysis of dynamic parallelism in unstructured GPU applications\",\n        \"Compiler-assisted workload consolidation for efficient dynamic parallelism on GPU\",\n        \"CUDA-NP: Realizing nested thread-level parallelism in GPGPU applications\",\n        \"Transforming and optimizing irregular applications for parallel architectures\",\n        \"Taming irregular applications via advanced dynamic parallelism on GPUs\",\n        \"VersaPipe: A versatile programming framework for pipelined computing on GPU\"\n    ],\n    \"reasoning\": \"Selected these 45 references because they represent foundational work and recent advances in A Compiler Framework for Optimizing Dynamic Parallelism on GPUs, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}