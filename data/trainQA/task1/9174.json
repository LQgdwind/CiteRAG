{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 49 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Multi-target Backdoor Attacks for Code Pre-trained Models\n\nPaper Abstract: Abstract Backdoor attacks for neural code models have gained considerable attention due to the advancement of code intelligence. However, most existing works insert triggers into task-specific data for code-related downstream tasks, thereby limiting the scope of attacks. Moreover, the majority of attacks for pre-trained models are designed for understanding tasks. In this paper, we propose task-agnostic backdoor attacks for code pre-trained models. Our backdoored model is pre-trained with two learning strategies (i.e., Poisoned Seq2Seq learning and token representation learning) to support the multi-target attack of downstream code understanding and generation tasks. During the deployment phase, the implanted backdoors in the victim models can be activated by the designed triggers to achieve the targeted attack. We evaluate our approach on two code understanding tasks and three code generation tasks over seven datasets. Extensive experiments demonstrate that our approach can effectively and stealthily attack code-related downstream tasks.\n\n{retrieved_text}\n\nGenerate exactly 49 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 49\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Unified pre-training for program understanding and generation\",\n        \"Self-supervised bug detection and repair\",\n        \"Language models are few-shot learners\",\n        \"Using large-scale anomaly detection on code to improve kotlin compiler\",\n        \"Hawkeye: Towards a desired directed grey-box fuzzer\",\n        \"Badpre: Task-agnostic backdoor attacks to pre-trained nlp foundation models\",\n        \"Jbmc: A bounded model checking tool for verifying java bytecode\",\n        \"Bert: Pre-training of deep bidirectional transformers for language understanding\",\n        \"Ppt: Backdoor attacks on pre-trained models via poisoned prompt tuning\",\n        \"Codebert: A pre-trained model for programming and natural languages\",\n        \"Badnets: Identifying vulnerabilities in the machine learning model supply chain\",\n        \"Unixcoder: Unified cross-modal pre-training for code representation\",\n        \"Graphcodebert: Pre-training code representations with data flow\",\n        \"Codesearchnet challenge: Evaluating the state of semantic code search\",\n        \"Treebert: A tree-based pre-trained model for programming language\",\n        \"Pre-trained contextual embedding of source code\",\n        \"Data flow analysis: theory and practice\",\n        \"Adam: A method for stochastic optimization\",\n        \"Weight poisoning attacks on pretrained models\",\n        \"Bart: Denoising sequence-to-sequence pre-training for natural language generation, translation, and comprehension\",\n        \"Poison attack and defense on deep source code processing models\",\n        \"Steelix: program-state based binary fuzzing\",\n        \"Fine-pruning: Defending against backdooring attacks on deep neural networks\",\n        \"Commitbart: A large pre-trained model for github commits\",\n        \"Contrabert: Enhancing code pre-trained models via contrastive learning\",\n        \"Codexglue: A machine learning benchmark dataset for code understanding and generation\",\n        \"Bleu: a method for automatic evaluation of machine translation\",\n        \"Onion: A simple and effective defense against textual backdoor attacks\",\n        \"Language models are unsupervised multitask learners\",\n        \"Exploring the limits of transfer learning with a unified text-to-text transformer\",\n        \"Backdoors in neural models of source code\",\n        \"You autocomplete me: Poisoning vulnerabilities in neural code completion\",\n        \"Backdoor pre-trained models can transfer to all\",\n        \"Coprotector: Protect open-source code against unauthorized training usage with data poisoning\",\n        \"Towards a big data curated benchmark of inter-project code clones\",\n        \"Intellicode compose: Code generation using transformer\",\n        \"An empirical study on learning bug-fixing patches in the wild via neural machine translation\",\n        \"Attention is all you need\",\n        \"You see what i want you to see: poisoning vulnerabilities in neural code search\",\n        \"Glue: A multi-task benchmark and analysis platform for natural language understanding\",\n        \"Syncobert: Syntax-guided multi-modal contrastive pre-training for code representation\",\n        \"Codet5: Identifier-aware unified pre-trained encoder-decoder models for code understanding and generation\",\n        \"Modeling and discovering vulnerabilities with code property graphs\",\n        \"Static control-flow analysis of user-driven callbacks in android applications\",\n        \"Stealthy backdoor attack for code models\",\n        \"Adversarial examples for models of code\",\n        \"Red alarm for pre-trained models: Universal vulnerability to neuron-level backdoor attacks\",\n        \"Devign: Effective vulnerability identification by learning comprehensive program semantics via graph neural networks\",\n        \"Aligning books and movies: Towards story-like visual explanations by watching movies and reading books\"\n    ],\n    \"reasoning\": \"Selected these 49 references because they represent foundational work and recent advances in Multi-target Backdoor Attacks for Code Pre-trained Models, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}