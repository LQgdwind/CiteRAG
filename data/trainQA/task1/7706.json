{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 51 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Learning a Generic Value-Selection Heuristic Inside a Constraint Programming Solver\n\nPaper Abstract: Abstract Constraint programming is known for being an efficient approach to solving combinatorial problems. Important design choices in a solver are the branching heuristics, designed to lead the search to the best solutions in a minimum amount of time. However, developing these heuristics is a time-consuming process that requires problem-specific expertise. This observation has motivated many efforts to use machine learning to automatically learn efficient heuristics without expert intervention. Although several generic variable-selection heuristics are available in the literature, the options for value-selection heuristics are more scarce. We propose to tackle this issue by introducing a generic learning procedure that can be used to obtain a value-selection heuristic inside a constraint programming solver. This has been achieved thanks to the combination of a deep Q-learning algorithm, a tailored reward signal, and a heterogeneous graph neural network. Experiments on graph coloring, maximum independent set, and maximum cut problems show that this framework competes with the well-known impact-based and activity-based search heuristics and can find solutions close to optimality without requiring a large number of backtracks.\n\n{retrieved_text}\n\nGenerate exactly 51 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 51\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Spinning up as a deep RL researcher\",\n        \"Statistical mechanics of complex networks\",\n        \"Proceedings of the 2022 XCSP3 competition\",\n        \"Neural combinatorial optimization with reinforcement learning\",\n        \"Machine learning for combinatorial optimization: a methodological tour d’horizon\",\n        \"Discrete optimization with decision diagrams\",\n        \"Learning a classification of mixed-integer quadratic programming problems\",\n        \"Exploring the use of GPUs in constraint solving\",\n        \"Improving variable orderings of approximate decision diagrams using reinforcement learning\",\n        \"Combinatorial optimization and reasoning with graph neural networks\",\n        \"Combining reinforcement learning and constraint programming for combinatorial optimization\",\n        \"Seapearl: A constraint programming solver guided by reinforcement learning\",\n        \"Learning value heuristics for constraint programming\",\n        \"Benchmarking optimization software with performance profiles\",\n        \"Online learning of variable ordering heuristics for constraint optimisation problems\",\n        \"Exact combinatorial optimization with graph convolutional neural networks\",\n        \"Deep sparse rectifier neural networks\",\n        \"Soft actor-critic: Off-policy maximum entropy deep reinforcement learning with a stochastic actor\",\n        \"Limited discrepancy search\",\n        \"Deep residual learning for image recognition\",\n        \"Automated algorithm configuration and parameter tuning\",\n        \"Imitation learning: A survey of learning methods\",\n        \"Learning to branch in mixed integer programming\",\n        \"Adam: A method for stochastic optimization\",\n        \"Attention, learn to solve routing problems!\",\n        \"Learning when to use a decomposition\",\n        \"Deep learning\",\n        \"Rectifier nonlinearities improve neural network acoustic models\",\n        \"Reinforcement learning for combinatorial optimization: A survey\",\n        \"MiniCP: a lightweight solver for constraint programming\",\n        \"Activity-based search for black-box constraint programming solvers\",\n        \"Steps toward artificial intelligence\",\n        \"Playing atari with deep reinforcement learning\",\n        \"Machine-learning–based column selection for column generation\",\n        \"Minizinc: Towards a standard CP modelling language\",\n        \"A hybrid approach to vehicle routing using neural networks and genetic algorithms\",\n        \"Impact-based search strategies for constraint programming\",\n        \"Learning to branch with tree MDPs\",\n        \"Prioritized experience replay\",\n        \"Trust region policy optimization\",\n        \"Guiding high-performance SAT solvers with unsat-core predictions\",\n        \"Learning variable ordering heuristics for solving constraint satisfaction problems\",\n        \"Improving learning to branch via reinforcement learning\",\n        \"Value-decomposition networks for cooperative multi-agent learning\",\n        \"Reinforcement learning: An introduction\",\n        \"Constraints propagation on GPU: A case study for alldifferent\",\n        \"Keeping your distance: Solving sparse reward tasks using self-balancing shaped rewards\",\n        \"Learning variable activity initialisation for lazy clause generation solvers\",\n        \"Deep reinforcement learning with double Q-learning\",\n        \"Learning robust search strategies using a bandit-based approach\",\n        \"The combinatorial brain surgeon: Pruning weights that cancel one another in neural networks\"\n    ],\n    \"reasoning\": \"Selected these 51 references because they represent foundational work and recent advances in Learning a Generic Value-Selection Heuristic Inside a Constraint Programming Solver, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}