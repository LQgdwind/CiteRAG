{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic citation prediction expert. Your task is to predict the most likely citations for [ref] markers in academic paper sections based on the paper content and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract + section text with [ref] markers\n- Output: top {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nTASK DESCRIPTION:\n- Input: Paper section text with [ref] markers + retrieved relevant papers\n- Output: top 40 predicted reference titles for each [ref] marker with reasoning\n- Format: JSON object with \"citations\" array containing objects with \"ref_index\", \"titles\", and \"reasoning\" fields\n\nREQUIREMENTS:\n1. Analyze the context around each [ref] marker to understand what reference is needed\n2. Consider the retrieved papers as potential references (when available)\n3. Consider the surrounding text, research area, and topic\n4. Generate realistic and relevant reference titles that would fit the context\n5. Provide detailed reasoning for each prediction to prevent hallucination\n6. Output format: JSON object with \"citations\" array\n7. Generate exactly 40 most relevant reference titles for each [ref]\n8. Ensure titles are realistic and appropriate for the research area\n9. Include reasoning that explains why each title is relevant to the specific [ref] context\n10. Use proper JSON escaping for special characters (escape quotes with \\\")\n11. Ensure all strings are properly quoted and escaped\n\nEXAMPLE:\nInput:\n\"Federated Learning aims to train models in massively distributed networks [ref]38 at a large scale [ref]5, over multiple sources of heterogeneous data [ref]30.\"\n\nRetrieved papers (top {top_r}):\n1. Title: Communication-efficient learning of deep networks from decentralized data\n   Abstract: We report on a series of experiments with federated learning systems for decentralized data training.\n\n2. Title: Federated Learning: Challenges, Methods, and Future Directions\n   Abstract: A comprehensive survey of federated learning approaches and challenges in distributed settings.\n\nOutput:\n{\n  \"citations\": [\n    {\n      \"ref_index\": 38,\n      \"titles\": [\n        \"Communication-efficient learning of deep networks from decentralized data\",\n        \"Federated Learning: Challenges, Methods, and Future Directions\",\n        \"Federated optimization in heterogeneous networks\",\n        \"Towards federated learning at scale: System design\",\n        \"A performance evaluation of federated learning algorithms\",\n        \"Distributed machine learning: A survey\",\n        \"Communication protocols for distributed learning\",\n        \"Scalable federated learning systems\",\n        \"Efficient distributed training algorithms\",\n        \"Large-scale distributed learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]38 appears in the context of 'massively distributed networks' for federated learning, so it likely refers to foundational papers on federated learning systems, distributed training, and communication-efficient methods in distributed networks.\"\n    },\n    {\n      \"ref_index\": 5,\n      \"titles\": [\n        \"Bagging predictors\",\n        \"Ensemble methods in machine learning\",\n        \"Random forests for classification\",\n        \"Bootstrap methods and their application\",\n        \"Combining multiple classifiers\",\n        \"Large-scale machine learning systems\",\n        \"Distributed ensemble methods\",\n        \"Scalable classification algorithms\",\n        \"Massive data processing techniques\",\n        \"High-performance machine learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]5 appears in the context of 'at a large scale', suggesting it refers to papers on scaling machine learning methods, ensemble techniques, or methods that can handle large-scale data and distributed settings.\"\n    },\n    {\n      \"ref_index\": 30,\n      \"titles\": [\n        \"Learning fair representations\",\n        \"Fair machine learning: A survey\",\n        \"Bias in machine learning systems\",\n        \"Addressing fairness in AI systems\",\n        \"Fair representation learning\",\n        \"Heterogeneous data handling methods\",\n        \"Multi-source learning algorithms\",\n        \"Cross-domain representation learning\",\n        \"Fair learning from diverse data\",\n        \"Bias mitigation in heterogeneous datasets\"\n      ],\n      \"reasoning\": \"This [ref]30 appears in the context of 'heterogeneous data' and 'fair representation learning', indicating it likely refers to papers on heterogenous data handling, bias mitigation, and learning representations that are fair across different data distributions.\"\n    }\n  ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped.\n\nIMPORTANT NOTES ON REASONING:\n- The reasoning field is crucial for preventing hallucination\n- Each reasoning should be specific to the context around the [ref] marker\n- Explain the connection between the predicted titles and the research topic\n- This helps validate that predictions are grounded in the actual content\n- Reasoning should be concise but informative (2-3 sentences)\n- Consider retrieved papers when available to improve prediction accuracy"
    },
    {
      "role": "user",
      "content": "Paper Title: Programming Language Case Studies Can Be Deep\n\nPaper Abstract: \n\nPaper Section Text:\nContent Notice: This section discusses misogyny and transphobia. The Gender lesson opens with a case study named C-Plus-Equality (C+=) .\nIn contrast to the other case studies of HCPL, this case study is brief and is purely motivational in nature. To my knowledge, it is also the only case study which has never had its semantics formally defined nor had a production-quality implementation. This makes it no less important and no less deep. Before exploring the depth of this study, we must frame its history. The language C+= is not a “PL” in the traditional sense.\nRather, it is a programming language design proposal, distributed in the form of a GitHub repository, containing a minimal prototype implementation using the C preprocessor, design documents, and example programs.\nThe repository lists its author as “The Feminist Software Foundation,” but has been attributed by online observers  to one or more misogynist trolls organized through the anonymous image board 4chan7774chan, like the other chan boards, is a forum for conversation on a wide variety of topics, but is arguably best-known for its role as an a organizing space for far-right social activists..\nAs of this writing, C+= is not new, with the repository dating to 2013. Its visibility and influence have waxed and waned over time, however.\nAs of the writing of HCPL, simple web searches about the intersection of gender and PL design still return C+= as the top result, far before the\nrelevant works of HCI scholars like Burnett , artists like micha cárdenas [ref]10 and Mez Breeze , or even prominent scholarly discussions within the humanities, e.g., via the HASTAC  blog.\nThe latter example is especially noteworthy because online observers  have cited C+= as a reaction to the HASTAC blog post .\nThis anecdote about search results is used as the opening motivation to the Gender lesson, as a way of uniting students who might otherwise be divided in their beliefs about society. Not all of the author’s students are feminists, but few would dispute that their feminist classmates deserve access to intellectually-sound curriculum, and thus even more-conservative students tend not to object to the lesson’s presence. The depth of this case study lies in the fact that our classroom analysis of the language relies on foundational perspectives techniques from the humanities, and cannot be properly understood using the perspective of any other archetype.\nSpecifically, we unpack this case study by starting with the prompt: “Can a PL Spread Misogyny?” and remarking on the nature of the question.\nFew computer scientists have ever been asked a question of this nature, yet similar questions are routinely asked in media studies, i.e., they are frequently asked about popular media such as songs, movies, TV shows, or novels.\nA key insight of this case study is that PL design documents, implementations, and code more broadly can all be understood as media: after all, they are used to express the creative message of an author to a given audience. The (methodological) depth of this case study lies firmly in the humanities.\nIn analyzing PL design documents as media, CS methodologies are deeply insufficient.\nWe wish to analyze and interpret a small, related set of documents in detail: a close reading.\nDrawing on this insight, the lesson turns to a standard technique from media studies: close reading.\nThe broad technique of close reading comes in many specific forms, among which our analysis situates itself as a hermeneutic inquiry in the tradition of Schleiermacher  . Hermeneutic inquiry arises originally from the interpretation of religious texts, and might be described as “reading as a form of divination.”\nThis method grapples with a fundamental challenge in textual interpretation: though an author expresses their own intentions in a text, the process of interpreting those meanings is fundamentally a creative and thus subjective process.\nRecognizing the creative aspect, the hermeneutic inquiry method does not aim for reproducible interpretations of a text.\nInstead, it engages with the author’s creativity through the interpreter’s own creativity.\nAn emphasis is placed on an internal consistency of the interpretation, particularly a consistent interaction between the parts and the whole of the text, with language playing a pivotal role .\nIn the HCPL classroom, these insights are presented at a high level, emphasizing that we will pick apart the details of a text with focus on the meanings of specific details.\nWe emphasize that we will employ subjectivity as we analyze the meanings and motivations behind these details. We now undertake a close reading of the C+= design documents and prototype implementation in the tradition of hermeneutic inquiry, as is done in the course.\nWe reveal how the documents promote both misogynistic and transphobic messages and how those messages are ultimately inseparable from one another.\nWe quote several pieces of the text for analysis. The prototype implementation consists of a series of C preprocessor macros performing simplistic keyword replacements; we list three example keywords which were used for classroom discussion. Though this snippet is devoid of interesting technical content, its content as media is substantial.\nBy placing these three definitions together, the snippet suggest these concepts are closely linked in the author’s mind both with each other and the concept of a feminist.\nThis text suggests the author views feminists as likely to describe social categories as being constructed, e.g., drawing on Foucault or Butler, and that they are likely to discuss the topic of social privilege.\nMore mundanely, the right-hand sides suggest an understanding of social categories as classes, private fields as privileged, and yelling as a form of I/O.\nThe crucial line, however, is the definition of yell. In placing these lines together, the author suggests that they understand discussions of privilege and social constructionism as a form of yelling.\nIn the context of well-established tropes of online anti-feminist discourse, the (literal and figurative) keyword yell unmistakably evokes the trope of the hysterical feminist, who blames every smallest life inconvenience on patriarchy.\nThis trope serves to erase all real, justified claims of gender inequality by flattening all speech by feminists into the category of hysteria. Three (non-consecutive) snippets of the primary design document are also used for in-class analysis, quoted here [emphasis in original]: Constants are not allowed, as the idea of a lack of identity fluidity is problematic. ……\\ldots any numeric value is a variable, and is required to take on at least 2 values over the course of the program, or the inHERpreter will throw a Trigger Warning. A number can be an integer or a double or a long if xir so identifies xirself. Booleans are banned for imposing a binary view of true and false.\nC+= operates paralogically and transcends the trappings of Patriarchal binary logic.\nNo means no, and yes could mean no as well. The transphobia of the first snippet requires some analysis, but is hard to argue against.\nThe key term is identity fluidity, which is a frequently-used means of describing gender identity for some LGBT+ people, particularly genderfluid people.\nJuxtaposed against this, the following sentence is a clear metaphor for gender transition, with the requirement for taking on multiple values standing in for a requirement that a person take on multiple genders throughout life, i.e., a nonsensical requirement for all people to be transgender.\nThe reference to trigger warnings further solidifies the trope of the hysterical feminist.\nBy putting anti-trans and anti-feminist messages in the same paragraph, the author reveals their view of trans advocacy and feminist advocacy as fundamentally linked. In the second snippet, the key words are xir and xirself.\nThe words xir and xirself are neopronouns, i.e., neologisms chosen as personal pronouns, often for self-expression.\nPronouns are ascribed to people, not programs, and by ascribing a neopronoun to a program, the text implies that its author believes that the desire of some queer people to play with language for self-expression is as ludicrous as calling a program a person.\nIn my classroom, this concern is not an abstract one.\nRecall that Section 4.2 recounts a classroom interaction with a student who has neopronouns (specifically, ce/cer/cers).\nIf my student encounted C+= in the wild, ce would rightfully interpret it as a personal attack.\nBy making space for criticism of C+= discourse in the classroom, I concretely demonstrate to cer that ce will receive protection from cer academic community, the PL community, when attacked using our own jargon. In the third snippet, against this backdrop, it is hard to see the discussion of Booleans as anything other than a reference to the gender binary.\nIn its third sentence, no means no is a widely-understood slogan for advocating against sexual violence.\nOnce again, the text links feminism and trans advocacy by juxtaposing the gender binary with references to sexual violence. In summary, this proposal simultaneously contains many references to PL features that are laughable on their face to any experienced programmer, and consistently juxtaposes them will well-established concepts from feminism and especially transfeminism.\nIn doing so, it seeks to build the association in its reader’s mind that\ngender equality, and particularly trans equality, are equally laughable ideas. This concludes the close reading performed in the lesson.\nBy taking time to close-read this text as a class, we not only motivate the rest of the lesson, but demonstrate to students that humanistic techniques can give them, as computer scientists, a new and practical dimension of understanding that complements the methodologies with which they are more familiar.\n\nReference markers found: [10]\n\nContext windows for each [ref]:\n[ref]10: HCPL, simple web searches about the intersection of gender and PL design still return C+= as the top result, far before the\nrelevant works of HCI scholars like Burnett , artists like micha cárdenas [ref]10 and Mez Breeze , or even prominent scholarly discussions within the humanities, e.g., via the HASTAC  blog.\nThe latter example is especially noteworthy because online observers  have cited\n\n{retrieved_text}\n\nGenerate exactly 40 most likely reference titles for each [ref] marker. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL REQUIREMENTS:\n1. For each [ref] marker, provide detailed reasoning explaining why the predicted titles are relevant\n2. The reasoning should analyze the specific context around each [ref] marker\n3. Explain how each title connects to the research topic, methodology, or problem being discussed\n4. This reasoning helps prevent hallucination by grounding predictions in the actual context\n5. Consider retrieved papers when available to improve prediction accuracy\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"citations\": [\n        {\n            \"ref_index\": 38,\n            \"titles\": [\n                \"Reference Title 1\",\n                \"Reference Title 2\",\n                \"Reference Title 3\",\n                \"Reference Title 4\",\n                \"Reference Title 40\"\n            ],\n            \"reasoning\": \"Detailed explanation of why these titles are relevant to [ref]38 based on the surrounding context, research area, and specific topic being discussed.\"\n        }\n    ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped. Do not include authors, venues, or years - only the paper titles. Generate exactly 40 titles for each [ref] marker with reasoning."
    },
    {
      "role": "assistant",
      "content": "{\n    \"citations\": [\n        {\n            \"ref_index\": 10,\n            \"titles\": [\n                \"User-Centered Programming Language Design: A Course-Based Case Study\",\n                \"Adding interactive visual syntax to textual code\",\n                \"Plato’s method of dialectic\",\n                \"Imagining Introductory Rust\",\n                \"Centering Humans in the Programming Languages Classroom: Building a Text for the Next Generation\",\n                \"Human Centered Programming Languages\",\n                \"Thematic analysis\",\n                \"Mezangelle\",\n                \"GenderMag: A Method for Evaluating Software’s Gender Inclusiveness\",\n                \"femme Disturbance library\",\n                \"PLIERS: A Process that Integrates User-Centered Methods into Programming Language Design\",\n                \"A New Model for Weaving Responsible Computing Into Courses Across the CS Curriculum\",\n                \"Socratic method as an approach to teaching\",\n                \"Autoethnography: an overview\",\n                \"How to design programs: an introduction to programming and computing\",\n                \"Ungrading, supporting our students through a pedagogy of care\",\n                \"A Data-Centric Introduction to Computing\",\n                \"C Plus Equality\",\n                \"Twine 2.7.0\",\n                \"Essentials of programming languages\",\n                \"Learning and the reflective journal in computer science\",\n                \"Identifying features of effective open education\",\n                \"Practical foundations for programming languages\",\n                \"The Programmer’s Brain: What every programmer needs to know about cognition\",\n                \"Automatic programming: present status and future trends\",\n                \"Open educational resources: Opportunities and challenges\",\n                \"The Rust programming language\",\n                \"What is a programming language, really?\",\n                \"Designing the Whyline: a debugging interface for asking questions about program behavior\",\n                \"Ungrading: Why rating students undermines learning (and what to do instead)\",\n                \"Project-based learning: A review of the literature\",\n                \"Programming languages - application and interpretation\",\n                \"Teaching programming languages in a post-linnaean age\",\n                \"Subfield prestige and gender inequality among US computing faculty\",\n                \"Proofs and refutations\",\n                \"C Plus Equality C+=\",\n                \"Codework: Phenomenology of an anti-genre\",\n                \"Foundations for programming languages\",\n                \"Programmer eXperience: A Systematic Literature Review\",\n                \"Torino: A Tangible Programming Language Inclusive of Children with Visual Disabilities\"\n            ],\n            \"reasoning\": \"Selected these 40 citations for [ref]10 based on the context and research area of Programming Language Case Studies Can Be Deep. The first title is the actual reference for this marker, followed by other relevant papers from the same research domain.\"\n        }\n    ]\n}"
    }
  ],
  "format": "chatml"
}