{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic citation prediction expert. Your task is to predict the most likely citations for [ref] markers in academic paper sections based on the paper content and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract + section text with [ref] markers\n- Output: top {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nTASK DESCRIPTION:\n- Input: Paper section text with [ref] markers + retrieved relevant papers\n- Output: top 40 predicted reference titles for each [ref] marker with reasoning\n- Format: JSON object with \"citations\" array containing objects with \"ref_index\", \"titles\", and \"reasoning\" fields\n\nREQUIREMENTS:\n1. Analyze the context around each [ref] marker to understand what reference is needed\n2. Consider the retrieved papers as potential references (when available)\n3. Consider the surrounding text, research area, and topic\n4. Generate realistic and relevant reference titles that would fit the context\n5. Provide detailed reasoning for each prediction to prevent hallucination\n6. Output format: JSON object with \"citations\" array\n7. Generate exactly 40 most relevant reference titles for each [ref]\n8. Ensure titles are realistic and appropriate for the research area\n9. Include reasoning that explains why each title is relevant to the specific [ref] context\n10. Use proper JSON escaping for special characters (escape quotes with \\\")\n11. Ensure all strings are properly quoted and escaped\n\nEXAMPLE:\nInput:\n\"Federated Learning aims to train models in massively distributed networks [ref]38 at a large scale [ref]5, over multiple sources of heterogeneous data [ref]30.\"\n\nRetrieved papers (top {top_r}):\n1. Title: Communication-efficient learning of deep networks from decentralized data\n   Abstract: We report on a series of experiments with federated learning systems for decentralized data training.\n\n2. Title: Federated Learning: Challenges, Methods, and Future Directions\n   Abstract: A comprehensive survey of federated learning approaches and challenges in distributed settings.\n\nOutput:\n{\n  \"citations\": [\n    {\n      \"ref_index\": 38,\n      \"titles\": [\n        \"Communication-efficient learning of deep networks from decentralized data\",\n        \"Federated Learning: Challenges, Methods, and Future Directions\",\n        \"Federated optimization in heterogeneous networks\",\n        \"Towards federated learning at scale: System design\",\n        \"A performance evaluation of federated learning algorithms\",\n        \"Distributed machine learning: A survey\",\n        \"Communication protocols for distributed learning\",\n        \"Scalable federated learning systems\",\n        \"Efficient distributed training algorithms\",\n        \"Large-scale distributed learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]38 appears in the context of 'massively distributed networks' for federated learning, so it likely refers to foundational papers on federated learning systems, distributed training, and communication-efficient methods in distributed networks.\"\n    },\n    {\n      \"ref_index\": 5,\n      \"titles\": [\n        \"Bagging predictors\",\n        \"Ensemble methods in machine learning\",\n        \"Random forests for classification\",\n        \"Bootstrap methods and their application\",\n        \"Combining multiple classifiers\",\n        \"Large-scale machine learning systems\",\n        \"Distributed ensemble methods\",\n        \"Scalable classification algorithms\",\n        \"Massive data processing techniques\",\n        \"High-performance machine learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]5 appears in the context of 'at a large scale', suggesting it refers to papers on scaling machine learning methods, ensemble techniques, or methods that can handle large-scale data and distributed settings.\"\n    },\n    {\n      \"ref_index\": 30,\n      \"titles\": [\n        \"Learning fair representations\",\n        \"Fair machine learning: A survey\",\n        \"Bias in machine learning systems\",\n        \"Addressing fairness in AI systems\",\n        \"Fair representation learning\",\n        \"Heterogeneous data handling methods\",\n        \"Multi-source learning algorithms\",\n        \"Cross-domain representation learning\",\n        \"Fair learning from diverse data\",\n        \"Bias mitigation in heterogeneous datasets\"\n      ],\n      \"reasoning\": \"This [ref]30 appears in the context of 'heterogeneous data' and 'fair representation learning', indicating it likely refers to papers on heterogenous data handling, bias mitigation, and learning representations that are fair across different data distributions.\"\n    }\n  ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped.\n\nIMPORTANT NOTES ON REASONING:\n- The reasoning field is crucial for preventing hallucination\n- Each reasoning should be specific to the context around the [ref] marker\n- Explain the connection between the predicted titles and the research topic\n- This helps validate that predictions are grounded in the actual content\n- Reasoning should be concise but informative (2-3 sentences)\n- Consider retrieved papers when available to improve prediction accuracy"
    },
    {
      "role": "user",
      "content": "Paper Title: A Condense-then-Select Strategy for Text Summarization\n\nPaper Abstract: \n\nPaper Section Text:\nThe extractor module first encodes each extraction candidate into a context-aware representation, and then uses a pointer network [ref]34 to extract candidate sentences sequentially. Sentence candidate encoding. \nThe sentence candidate encoder incorporates the document context in a hierarchical manner.\nFor each document sentence 𝐱isubscript𝐱𝑖\\mathbf{x}_{i}, we define an extraction candidate set, 𝐱~i={𝐱i,𝐱i1,…,𝐱ik}subscript~𝐱𝑖subscript𝐱𝑖superscriptsubscript𝐱𝑖1…superscriptsubscript𝐱𝑖𝑘\\tilde{\\mathbf{x}}_{i}=\\{\\mathbf{x}_{i},\\mathbf{x}_{i}^{1},\\ldots,\\mathbf{x}_{i}^{k}\\}, which includes the document sentence itself and all of its concise versions. For simplicity, we denote the original sentence 𝐱isubscript𝐱𝑖\\mathbf{x}_{i} as 𝐱i0superscriptsubscript𝐱𝑖0\\mathbf{x}_{i}^{0}, so that 𝐱~i={𝐱i0,…,𝐱ik}subscript~𝐱𝑖superscriptsubscript𝐱𝑖0…superscriptsubscript𝐱𝑖𝑘\\tilde{\\mathbf{x}}_{i}=\\{\\mathbf{x}_{i}^{0},\\ldots,\\mathbf{x}_{i}^{k}\\}.\nThen, we hierarchically encode an extraction candidate in three levels: (1) candidate level, (2) candidate set level, and (3) document level, as illustrated in Figure 3. We first feed each sentence candidate 𝐱ijsuperscriptsubscript𝐱𝑖𝑗{\\mathbf{x}}_{i}^{j} to the Sentence-BERT model [ref]35 to learn word representations. The Sentence-BERT model incorporates the context information of the sentence candidate into each word representation. It has been shown that the Sentence-BERT model learns better sentence-level representations than the BERT model [ref]36 for several down-streaming tasks [ref]35. We feed the last layer output of Sentence-BERT through a MLP layer to yield the word embeddings.\nWe then apply a temporal convolutional neural network  on the word embeddings of each sentence candidate 𝐱ijsuperscriptsubscript𝐱𝑖𝑗{\\mathbf{x}}_{i}^{j} to learn a local candidate representation 𝐫ij∈ℝdl​o​csuperscriptsubscript𝐫𝑖𝑗superscriptℝsubscript𝑑𝑙𝑜𝑐\\mathbf{r}_{i}^{j}\\in\\mathbb{R}^{d_{loc}}.\nTo learn a representation for a sentence candidate set 𝐱i~~subscript𝐱𝑖\\tilde{\\mathbf{x}_{i}}, we use mean pooling to aggregate the local representations of its candidates {𝐫i0,…,𝐫ik}superscriptsubscript𝐫𝑖0…superscriptsubscript𝐫𝑖𝑘\\{\\mathbf{r}_{i}^{0},\\ldots,\\mathbf{r}_{i}^{k}\\} into a candidate set representation 𝐫isubscript𝐫𝑖\\mathbf{r}_{i}, i.e., 𝐫i=1k+1​∑j=0k𝐫ijsubscript𝐫𝑖1𝑘1superscriptsubscript𝑗0𝑘superscriptsubscript𝐫𝑖𝑗\\mathbf{r}_{i}=\\frac{1}{k+1}\\sum_{j=0}^{k}\\mathbf{r}_{i}^{j}. To incorporate the context information of other candidate sets in the document, we apply a bi-directional LSTM to read all the n𝑛n candidate set representations (𝐫1,…,𝐫n)subscript𝐫1…subscript𝐫𝑛(\\mathbf{r}_{1},\\ldots,\\mathbf{r}_{n}) and produce a document-level candidate representation 𝐡i∈ℝdd​o​csubscript𝐡𝑖superscriptℝsubscript𝑑𝑑𝑜𝑐\\mathbf{h}_{i}\\in\\mathbb{R}^{d_{doc}} for each candidate set 𝐱i~~subscript𝐱𝑖\\tilde{\\mathbf{x}_{i}}.\nThe context-aware candidate representation 𝐜ijsuperscriptsubscript𝐜𝑖𝑗\\mathbf{c}_{i}^{j} of an extraction candidate 𝐱ijsuperscriptsubscript𝐱𝑖𝑗{\\mathbf{x}}_{i}^{j} is then the concatenation of its local representation 𝐫ijsuperscriptsubscript𝐫𝑖𝑗\\mathbf{r}_{i}^{j} and the document-level representation of its associated candidate set 𝐡isubscript𝐡𝑖\\mathbf{h}_{i}, i.e., 𝐜ij=[𝐫ij;𝐡i]∈ℝdm​e​msuperscriptsubscript𝐜𝑖𝑗superscriptsubscript𝐫𝑖𝑗subscript𝐡𝑖superscriptℝsubscript𝑑𝑚𝑒𝑚\\mathbf{c}_{i}^{j}=[\\mathbf{r}_{i}^{j};\\mathbf{h}_{i}]\\in\\mathbb{R}^{d_{mem}}. Pointer network. \nThe pointer network consists of an LSTM decoder, L​S​T​M2𝐿𝑆𝑇subscript𝑀2LSTM_{2}, and a two-hop attention mechanism.\nTo prepare for the attention mechanism, we use all the context-aware candidate representations 𝐜ijsuperscriptsubscript𝐜𝑖𝑗\\mathbf{c}_{i}^{j} to form a memory bank matrix, 𝐁=[𝐜10,…,𝐜1k,…,𝐜n0,…,𝐜nk]𝐁superscriptsubscript𝐜10…superscriptsubscript𝐜1𝑘…superscriptsubscript𝐜𝑛0…superscriptsubscript𝐜𝑛𝑘\\mathbf{B}=[\\mathbf{c}_{1}^{0},\\ldots,\\mathbf{c}_{1}^{k},\\ldots,\\mathbf{c}_{n}^{0},\\ldots,\\mathbf{c}_{n}^{k}], and use 𝐛l∈ℝdm​e​msubscript𝐛𝑙superscriptℝsubscript𝑑𝑚𝑒𝑚\\mathbf{b}_{l}\\in\\mathbb{R}^{d_{mem}} to denote the l𝑙l-th column vector of 𝐁𝐁\\mathbf{B}. Thus, the attention mechanism can directly attend to all the context-aware candidate representations.\nFor the sake of the later extraction process, we also construct a proxy document, 𝐗¯=(𝐱10,…,𝐱1k,…,𝐱n0,…,𝐱nk)¯𝐗superscriptsubscript𝐱10…superscriptsubscript𝐱1𝑘…superscriptsubscript𝐱𝑛0…superscriptsubscript𝐱𝑛𝑘\\bar{\\mathbf{X}}=(\\mathbf{x}_{1}^{0},\\ldots,\\mathbf{x}_{1}^{k},\\ldots,\\mathbf{x}_{n}^{0},\\ldots,\\mathbf{x}_{n}^{k}), that aligns each extraction candidate to each column vector of the memory bank. We use 𝐱¯lsubscript¯𝐱𝑙\\bar{\\mathbf{x}}_{l} to denote the l𝑙l-th candidate sentence in 𝐗¯¯𝐗\\bar{\\mathbf{X}}. At each decoding step t𝑡t, L​S​T​M2𝐿𝑆𝑇subscript𝑀2LSTM_{2} first attends its hidden state 𝐳t∈ℝdd​e​csubscript𝐳𝑡superscriptℝsubscript𝑑𝑑𝑒𝑐\\mathbf{z}_{t}\\in\\mathbb{R}^{d_{dec}} to each candidate representation 𝐛lsubscript𝐛𝑙\\mathbf{b}_{l} to compute a glimpse vector 𝐞t∈ℝdm​e​msubscript𝐞𝑡superscriptℝsubscript𝑑𝑚𝑒𝑚\\mathbf{e}_{t}\\in\\mathbb{R}^{d_{mem}}:\n where 𝐖g​1∈ℝda​t​t×dm​e​msubscript𝐖𝑔1superscriptℝsubscript𝑑𝑎𝑡𝑡subscript𝑑𝑚𝑒𝑚\\mathbf{W}_{g1}\\in\\mathbb{R}^{d_{att}\\times d_{mem}}, 𝐖g​2∈ℝda​t​t×dd​e​csubscript𝐖𝑔2superscriptℝsubscript𝑑𝑎𝑡𝑡subscript𝑑𝑑𝑒𝑐\\mathbf{W}_{g2}\\in\\mathbb{R}^{d_{att}\\times d_{dec}}, and 𝐯g∈ℝda​t​tsubscript𝐯𝑔superscriptℝsubscript𝑑𝑎𝑡𝑡\\mathbf{v}_{g}\\in\\mathbb{R}^{d_{att}} are model parameters. The glimpse vector is then attended to the candidate representations to produce the probability of extracting each sentence candidate 𝐱¯lsubscript¯𝐱𝑙\\bar{\\mathbf{x}}_{l}:\n where θe​x​tsubscript𝜃𝑒𝑥𝑡\\theta_{ext} denotes all model parameters of the extractor, ltsubscript𝑙𝑡l_{t} denotes the index of the candidate extracted at step t𝑡t, 𝐯p∈ℝda​t​tsubscript𝐯𝑝superscriptℝsubscript𝑑𝑎𝑡𝑡\\mathbf{v}_{p}\\in\\mathbb{R}^{d_{att}}, and 𝐖p​1,𝐖p​2∈ℝda​t​t×dm​e​msubscript𝐖𝑝1subscript𝐖𝑝2superscriptℝsubscript𝑑𝑎𝑡𝑡subscript𝑑𝑚𝑒𝑚\\mathbf{W}_{p1},\\mathbf{W}_{p2}\\in\\mathbb{R}^{d_{att}\\times d_{mem}}. We simply extract the candidate with the highest extraction probability, and the representation of the extracted candidate 𝐛ltsubscript𝐛subscript𝑙𝑡\\mathbf{b}_{l_{t}} is adopted as the input to L​S​T​M2𝐿𝑆𝑇subscript𝑀2LSTM_{2} at the next step. Maximum-likelihood pre-training. \nWe use the maximum likelihood (ML) loss to pre-train the extractor module. ML pre-training is a common practice in previous literature    to improve the stability of RL training. \nSince we do not have extraction labels for the proxy document, we use the following method to construct those labels.\nFor each summary sentence 𝐲tsubscript𝐲𝑡\\mathbf{y}_{t}, we find the most similar sentence candidate from the proxy document in terms of Rouge-L F1subscript𝐹1F_{1} score: lt=argmaxi​Rouge-LF1​(𝐱¯i,𝐲t)​.subscript𝑙𝑡subscriptargmax𝑖subscriptRouge-Lsubscript𝐹1subscript¯𝐱𝑖subscript𝐲𝑡.{l_{t}}=\\text{argmax}_{i}\\text{Rouge-L}_{F_{1}}(\\bar{\\mathbf{x}}_{i},\\mathbf{y}_{t})\\text{.}\nWith these extraction labels, we can pre-train an extractor using maximum likelihood loss: −∑t=1mlog⁡Pθe​x​t​(lt|l1,…,lt−1,𝐗¯)superscriptsubscript𝑡1𝑚subscript𝑃subscript𝜃𝑒𝑥𝑡conditionalsubscript𝑙𝑡subscript𝑙1…subscript𝑙𝑡1¯𝐗-\\sum_{t=1}^{m}\\log P_{\\theta_{ext}}(l_{t}|l_{1},\\ldots,l_{t-1},\\bar{\\mathbf{X}}).\n\nReference markers found: [34]\n\nContext windows for each [ref]:\n[ref]34: The extractor module first encodes each extraction candidate into a context-aware representation, and then uses a pointer network [ref]34 to extract candidate sentences sequentially. Sentence candidate encoding. \nThe sentence candidate encoder incorporates the document context in a hierarchical manner.\nFor each document\n\n{retrieved_text}\n\nGenerate exactly 40 most likely reference titles for each [ref] marker. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL REQUIREMENTS:\n1. For each [ref] marker, provide detailed reasoning explaining why the predicted titles are relevant\n2. The reasoning should analyze the specific context around each [ref] marker\n3. Explain how each title connects to the research topic, methodology, or problem being discussed\n4. This reasoning helps prevent hallucination by grounding predictions in the actual context\n5. Consider retrieved papers when available to improve prediction accuracy\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"citations\": [\n        {\n            \"ref_index\": 38,\n            \"titles\": [\n                \"Reference Title 1\",\n                \"Reference Title 2\",\n                \"Reference Title 3\",\n                \"Reference Title 4\",\n                \"Reference Title 40\"\n            ],\n            \"reasoning\": \"Detailed explanation of why these titles are relevant to [ref]38 based on the surrounding context, research area, and specific topic being discussed.\"\n        }\n    ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped. Do not include authors, venues, or years - only the paper titles. Generate exactly 40 titles for each [ref] marker with reasoning."
    },
    {
      "role": "assistant",
      "content": "{\n    \"citations\": [\n        {\n            \"ref_index\": 34,\n            \"titles\": [\n                \"Sentence-BERT: Sentence Embeddings using Siamese BERT-Networks\",\n                \"Abstractive text summarization using sequence-to-sequence rnns and beyond\",\n                \"Get To The Point: Summarization with Pointer-Generator Networks\",\n                \"A Deep Reinforced Model for Abstractive Summarization\",\n                \"Exclusive Hierarchical Decoding for Deep Keyphrase Generation\",\n                \"Neural Machine Translation by Jointly Learning to Align and Translate\",\n                \"Fast Abstractive Summarization with Reinforce-Selected Sentence Rewriting\",\n                \"Statistics-based summarization - step one: Sentence compression\",\n                \"Cut and paste based text summarization\",\n                \"Neural Summarization by Extracting Sentences and Words\",\n                \"Classify or Select: Neural Architectures for Extractive Document Summarization\",\n                \"SummaRuNNer: A Recurrent Neural Network based Sequence Model for Extractive Summarization of Documents\",\n                \"Ranking Sentences for Extractive Summarization with Reinforcement Learning\",\n                \"Learning to Extract Coherent Summary via Deep Reinforcement Learning\",\n                \"Neural Document Summarization by Jointly Learning to Score and Select Sentences\",\n                \"BanditSum: Extractive Summarization as a Contextual Bandit\",\n                \"Extractive Summarization as Text Matching\",\n                \"Bottom-Up Abstractive Summarization\",\n                \"A Unified Model for Extractive and Abstractive Summarization using Inconsistency Loss\",\n                \"An Integrated Approach for Keyphrase Generation via Exploring the Power of Retrieval and Extraction\",\n                \"A unified dual-view model for review summarization and sentiment classification with inconsistency loss\",\n                \"Knowledge Graph-Augmented Abstractive Summarization with Semantic-Driven Cloze Reward\",\n                \"Deep Communicating Agents for Abstractive Summarization\",\n                \"BART: Denoising Sequence-to-Sequence Pre-training for Natural Language Generation, Translation, and Comprehension\",\n                \"Text Summarization with Pretrained Encoders\",\n                \"UniLMv2: Pseudo-Masked Language Models for Unified Language Model Pre-Training\",\n                \"PEGASUS: pre-training with extracted gap-sentences for abstractive summarization\",\n                \"Self-attention guided copy mechanism for abstractive summarization\",\n                \"Controllable abstractive summarization\",\n                \"Controlling length in abstractive summarization using a convolutional neural network\",\n                \"Discourse constraints for document compression\",\n                \"Neural Extractive Text Summarization with Syntactic Compression\",\n                \"An Entity-Driven Framework for Abstractive Summarization\",\n                \"Sentence compression as a component of a multi-document summarization system\",\n                \"Pointer networks\",\n                \"BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding\",\n                \"Convolutional Neural Networks for Sentence Classification\",\n                \"Self-critical Sequence Training for Image Captioning\",\n                \"Neural keyphrase generation via reinforcement learning with adaptive rewards\",\n                \"Asynchronous methods for deep reinforcement learning\"\n            ],\n            \"reasoning\": \"Selected these 40 citations for [ref]34 based on the context and research area of A Condense-then-Select Strategy for Text Summarization. The first title is the actual reference for this marker, followed by other relevant papers from the same research domain.\"\n        }\n    ]\n}"
    }
  ],
  "format": "chatml"
}