{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic citation prediction expert. Your task is to predict the most likely citations for [ref] markers in academic paper sections based on the paper content and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract + section text with [ref] markers\n- Output: top {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nTASK DESCRIPTION:\n- Input: Paper section text with [ref] markers + retrieved relevant papers\n- Output: top 40 predicted reference titles for each [ref] marker with reasoning\n- Format: JSON object with \"citations\" array containing objects with \"ref_index\", \"titles\", and \"reasoning\" fields\n\nREQUIREMENTS:\n1. Analyze the context around each [ref] marker to understand what reference is needed\n2. Consider the retrieved papers as potential references (when available)\n3. Consider the surrounding text, research area, and topic\n4. Generate realistic and relevant reference titles that would fit the context\n5. Provide detailed reasoning for each prediction to prevent hallucination\n6. Output format: JSON object with \"citations\" array\n7. Generate exactly 40 most relevant reference titles for each [ref]\n8. Ensure titles are realistic and appropriate for the research area\n9. Include reasoning that explains why each title is relevant to the specific [ref] context\n10. Use proper JSON escaping for special characters (escape quotes with \\\")\n11. Ensure all strings are properly quoted and escaped\n\nEXAMPLE:\nInput:\n\"Federated Learning aims to train models in massively distributed networks [ref]38 at a large scale [ref]5, over multiple sources of heterogeneous data [ref]30.\"\n\nRetrieved papers (top {top_r}):\n1. Title: Communication-efficient learning of deep networks from decentralized data\n   Abstract: We report on a series of experiments with federated learning systems for decentralized data training.\n\n2. Title: Federated Learning: Challenges, Methods, and Future Directions\n   Abstract: A comprehensive survey of federated learning approaches and challenges in distributed settings.\n\nOutput:\n{\n  \"citations\": [\n    {\n      \"ref_index\": 38,\n      \"titles\": [\n        \"Communication-efficient learning of deep networks from decentralized data\",\n        \"Federated Learning: Challenges, Methods, and Future Directions\",\n        \"Federated optimization in heterogeneous networks\",\n        \"Towards federated learning at scale: System design\",\n        \"A performance evaluation of federated learning algorithms\",\n        \"Distributed machine learning: A survey\",\n        \"Communication protocols for distributed learning\",\n        \"Scalable federated learning systems\",\n        \"Efficient distributed training algorithms\",\n        \"Large-scale distributed learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]38 appears in the context of 'massively distributed networks' for federated learning, so it likely refers to foundational papers on federated learning systems, distributed training, and communication-efficient methods in distributed networks.\"\n    },\n    {\n      \"ref_index\": 5,\n      \"titles\": [\n        \"Bagging predictors\",\n        \"Ensemble methods in machine learning\",\n        \"Random forests for classification\",\n        \"Bootstrap methods and their application\",\n        \"Combining multiple classifiers\",\n        \"Large-scale machine learning systems\",\n        \"Distributed ensemble methods\",\n        \"Scalable classification algorithms\",\n        \"Massive data processing techniques\",\n        \"High-performance machine learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]5 appears in the context of 'at a large scale', suggesting it refers to papers on scaling machine learning methods, ensemble techniques, or methods that can handle large-scale data and distributed settings.\"\n    },\n    {\n      \"ref_index\": 30,\n      \"titles\": [\n        \"Learning fair representations\",\n        \"Fair machine learning: A survey\",\n        \"Bias in machine learning systems\",\n        \"Addressing fairness in AI systems\",\n        \"Fair representation learning\",\n        \"Heterogeneous data handling methods\",\n        \"Multi-source learning algorithms\",\n        \"Cross-domain representation learning\",\n        \"Fair learning from diverse data\",\n        \"Bias mitigation in heterogeneous datasets\"\n      ],\n      \"reasoning\": \"This [ref]30 appears in the context of 'heterogeneous data' and 'fair representation learning', indicating it likely refers to papers on heterogenous data handling, bias mitigation, and learning representations that are fair across different data distributions.\"\n    }\n  ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped.\n\nIMPORTANT NOTES ON REASONING:\n- The reasoning field is crucial for preventing hallucination\n- Each reasoning should be specific to the context around the [ref] marker\n- Explain the connection between the predicted titles and the research topic\n- This helps validate that predictions are grounded in the actual content\n- Reasoning should be concise but informative (2-3 sentences)\n- Consider retrieved papers when available to improve prediction accuracy"
    },
    {
      "role": "user",
      "content": "Paper Title: Reinforcement Learning Algorithms: An Overview and Classification\n\nPaper Abstract: \n\nPaper Section Text:\nActor-Critic algorithms are a set of algorithms based on policy gradients theorem that consist of two components: An Actor responsible for adjusting the parameter 𝜽𝜽\\bm{\\theta} of the policy 𝝅𝜽subscript𝝅𝜽\\bm{\\pi_{\\theta}} A Critic which employs a parameterized vector 𝒘𝒘\\bm{w} to estimate the value-function 𝑸𝒘​(𝒔𝒕,𝒂𝒕)≈𝑸𝝅​(𝒔𝒕,𝒂𝒕)superscript𝑸𝒘subscript𝒔𝒕subscript𝒂𝒕superscript𝑸𝝅subscript𝒔𝒕subscript𝒂𝒕\\bm{Q^{w}(s_{t},a_{t})\\approx Q^{\\pi}(s_{t},a_{t})} using a policy evaluation algorithm such as temporal-difference learning  The actor can be described as the network trying to find the probability of all available actions and select the action with the highest value, while the critic can be described as a network evaluating the selected action by estimating the value of the new state resulted from performing the action. Different algorithms fall under the actor-critic category; the main ones are described in the following subsections. All deterministic policy gradients algorithms model the policy as a deterministic policy 𝝁​(𝒔)𝝁𝒔\\bm{\\mu(s)}, rather than stochastic policy 𝝅​(𝒔,𝒂)𝝅𝒔𝒂\\bm{\\pi(s,a)} that is modeled over the action’s probability distribution. We described earlier in Equation 9, the objective function under a selected policy 𝑱​(𝝅𝜽)𝑱subscript𝝅𝜽\\bm{J(\\pi_{\\theta})} to be ∑𝒔∈𝑺𝝆𝝅𝜽​(𝒔)​𝑽𝝅𝜽​(𝒔)subscript𝒔𝑺subscript𝝆subscript𝝅𝜽𝒔superscript𝑽subscript𝝅𝜽𝒔\\bm{\\sum_{s\\in S}\\rho_{\\pi_{\\theta}}(s)\\;V^{\\pi_{\\theta}}(s)}; however, a deterministic policy is a special case of stochastic policy, where the objective function of the target policy is averaged over the state distribution of the behaviour policy as described in equation 14 . In the off-policy approach with a stochastic policy, importance sampling is often used to correct the mismatch between behaviour and target policies. However, because the deterministic policy gradient removes the integral over actions, we can avoid importance sampling and the gradient becomes: Different algorithms build on DPG with improvements; for example, Deep Deterministic Policy Gradient (DDPG)  adapts DQN to work with continuous action space and combines it with DPG. On the other hand, Distributed Distributional DDPG (D4PG) [ref]26 adopts distributed settings for DDPG with additional improvements such as using N-step returns and prioritized experience replay [ref]26. Multi-agent DDPG (MADDPG)  is another algorithm that extends DDPG to work with multi-agents, where it considers action policies of other agents and learns policies that require multi-agent coordination . Twin Delayed Deep Deterministic (TD3)  builds on Double DQN and applies to DDPG to prevent the overestimation of the value function by taking the minimum value between a pair of critics . Asynchronous Advantage Actor-Critic (A3C)  is a policy gradient algorithm that uses multi-threads, also known as agents or workers, for parallel training. Each agent maintains a local policy 𝝅𝜽​(𝒂𝒕|𝒔𝒕)subscript𝝅𝜽conditionalsubscript𝒂𝒕subscript𝒔𝒕\\bm{\\pi_{\\theta}(a_{t}|s_{t})} and an estimate of the value function 𝑽𝜽​(𝒔𝒕)subscript𝑽𝜽subscript𝒔𝒕\\bm{V_{\\theta}(s_{t})}. The agent synchronizes its parameters with the global network having the same structure. The agents work asynchronously, where the value of the network parameters flows in both directions between the agents and the global network. The policy and the value function are updated after tm​a​xsubscript𝑡𝑚𝑎𝑥t_{max} actions or when a final state is reached . Advantage Actor-Critic (A2C)  is another policy gradient algorithm similar to A3C, except it has a coordinator responsible for synchronizing all agents. The coordinator waits for all agents to finish their work either by reaching a final state or by performing 𝒕𝒎​𝒂​𝒙subscript𝒕𝒎𝒂𝒙\\bm{t_{max}} actions before it updates the policy and the value function in both direction between the agents and the global network. Actor-Critic with Experience Replay (ACER) is an off-policy actor-critic algorithm with experience replay that uses a single deep neural network to estimate the policy πθ​(at|st)subscript𝜋𝜃conditionalsubscript𝑎𝑡subscript𝑠𝑡\\pi_{\\theta}(a_{t}|s_{t}) and the value function Vθvπ​(st)superscriptsubscript𝑉subscript𝜃𝑣𝜋subscript𝑠𝑡V_{\\theta_{v}}^{\\pi}(s_{t}) [ref]30. The three main advantages of ACER over A3C are : 1) it improves the truncated importance sampling with the bias correction, 2) it uses stochastic dueling network architectures, and 3) it applies a new trust region policy optimization method [ref]30. ACER uses an improved Retrace algorithm as described in Equation 16  by applying truncated importance sampling with bias correction technique and using the value 𝑸𝒓​𝒆​𝒕superscript𝑸𝒓𝒆𝒕\\bm{Q^{ret}} as the target value to train the critic by minimizing the L2 error term [ref]30. In ACER, the gradient 𝒈^𝒕𝒂​𝒄​𝒆​𝒓superscriptsubscriptbold-^𝒈𝒕𝒂𝒄𝒆𝒓\\bm{\\hat{g}_{t}^{acer}} is computed by truncating the importance weights by a constant 𝒄𝒄\\bm{c}, and subtracting 𝑽𝜽𝒗​(𝒔𝒕)subscript𝑽subscript𝜽𝒗subscript𝒔𝒕\\bm{V_{\\theta_{v}}(s_{t})} to reduce variance: this is denoted in Equation 17 [ref]30. Actor-Critic using Kronecker-Factored Trust Region (ACKTR)  is another extension of A3C , which optimizes both the actor and critic by using Kronecker-factored approximation curvature (K-FAC) . It provides an improved computation of the natural gradients by allowing the covariance matrix of the gradient to be efficiently inverted . Soft Actor-Critic (SAC) aims to maximize the expected reward while maximizing the entropy [ref]34. SAC ameliorates the maximum expected sum of rewards defined through accumulating the reward over states transitions J​(π)=∑t=1T𝔼s∼ρπ,a∼π​[r​(st,at)]𝐽𝜋superscriptsubscript𝑡1𝑇subscript𝔼formulae-sequencesimilar-to𝑠superscript𝜌𝜋similar-to𝑎𝜋delimited-[]𝑟subscript𝑠𝑡subscript𝑎𝑡J(\\pi)=\\sum_{t=1}^{T}\\mathbb{E}_{s\\sim\\rho^{\\pi},a\\sim\\pi}\\Big{[}r(s_{t},a_{t})\\Big{]} by adding the expected entropy of the policy over ρπ​(st)subscript𝜌𝜋subscript𝑠𝑡\\rho_{\\pi}(s_{t}) [ref]34. Equation 18 shows a generalized entropy objective, where the temperature parameter α𝛼\\alpha controls the stochasticity of the optimal policy through defining the relevance of the entropy ℋ(π(.|st))\\mathcal{H}(\\pi(.|s_{t})) term to the reward [ref]34. SAC uses two separate neural networks for the actor and critic, and applies function approximators to estimate a soft Q-function 𝑸𝜽​(𝒔𝒕,𝒂𝒕)subscript𝑸𝜽subscript𝒔𝒕subscript𝒂𝒕\\bm{Q_{\\theta}(s_{t},a_{t})} parameterized by 𝜽𝜽\\bm{\\theta}, a state value function 𝑽𝝍​(𝒔𝒕)subscript𝑽𝝍subscript𝒔𝒕\\bm{V_{\\psi}(s_{t})} parameterized by 𝝍𝝍\\bm{\\psi}, and an adjustable policy 𝝅ϕ​(𝒂𝒕|𝒔𝒕)subscript𝝅bold-italic-ϕconditionalsubscript𝒂𝒕subscript𝒔𝒕\\bm{\\pi_{\\phi}(a_{t}|s_{t})} parameterized by ϕbold-italic-ϕ\\bm{\\phi}. Importance Weighted Actor-Learner Architecture (IMPALA)  is an off-policy learning algorithm that decouples acting from learning and can be used in two different setups: 1) single learner and 2) multiple synchronous learners. Using a single learner and multiple actor setup, each actor generates trajectories and sends each trajectory to the learner, and receives the updated policy before starting a new trajectory. The learner learns from the actors simultaneously by saving the received trajectories from the actors in a queue and generating the updated policy. Nevertheless, actors might learn an older model because actors are not aware of each other and because of the lag between the actors and the learner. To resolve this issue, IMPALA uses a novel v-trace correction method that considers a truncated importance sampling (IS), which is the ratio between the learner policy 𝝅𝝅\\bm{\\pi} and the actor current policy 𝝁𝝁\\bm{\\mu}.\nSimilarly, in multiple synchronous learners, the policy parameters are distributed across multiple learners that work synchronously through a master learner .\n\nReference markers found: [26]\n\nContext windows for each [ref]:\n[ref]26: for example, Deep Deterministic Policy Gradient (DDPG)  adapts DQN to work with continuous action space and combines it with DPG. On the other hand, Distributed Distributional DDPG (D4PG) [ref]26 adopts distributed settings for DDPG with additional improvements such as using N-step returns and prioritized experience replay [ref]26. Multi-agent DDPG (MADDPG)  is another algorithm that\n\n{retrieved_text}\n\nGenerate exactly 40 most likely reference titles for each [ref] marker. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL REQUIREMENTS:\n1. For each [ref] marker, provide detailed reasoning explaining why the predicted titles are relevant\n2. The reasoning should analyze the specific context around each [ref] marker\n3. Explain how each title connects to the research topic, methodology, or problem being discussed\n4. This reasoning helps prevent hallucination by grounding predictions in the actual context\n5. Consider retrieved papers when available to improve prediction accuracy\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"citations\": [\n        {\n            \"ref_index\": 38,\n            \"titles\": [\n                \"Reference Title 1\",\n                \"Reference Title 2\",\n                \"Reference Title 3\",\n                \"Reference Title 4\",\n                \"Reference Title 40\"\n            ],\n            \"reasoning\": \"Detailed explanation of why these titles are relevant to [ref]38 based on the surrounding context, research area, and specific topic being discussed.\"\n        }\n    ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped. Do not include authors, venues, or years - only the paper titles. Generate exactly 40 titles for each [ref] marker with reasoning."
    },
    {
      "role": "assistant",
      "content": "{\n    \"citations\": [\n        {\n            \"ref_index\": 26,\n            \"titles\": [\n                \"Multi-Agent Actor-Critic for Mixed Cooperative-Competitive Environments\",\n                \"Autonomous driving system based on deep q learnig\",\n                \"Self-driving cars using cnn and q-learning\",\n                \"Self-improving reactive agents based on reinforcement learning, planning and teaching\",\n                \"Prioritized experience replay\",\n                \"Q-learning\",\n                \"On-line Q-learning using connectionist systems\",\n                \"Deep reinforcement learning with experience replay based on sarsa\",\n                \"Autonomous Navigation via Deep Reinforcement Learning for Resource Constraint Edge Nodes using Transfer Learning\",\n                \"Double Q-learning\",\n                \"Deep Reinforcement Learning with Double Q-learning\",\n                \"Dueling Network Architectures for Deep Reinforcement Learning\",\n                \"Deep Recurrent Q-Learning for Partially Observable MDPs\",\n                \"Reinforcement learning: An introduction\",\n                \"Deterministic policy gradient algorithms\",\n                \"Policy gradient methods for reinforcement learning with function approximation\",\n                \"Simple statistical gradient-following algorithms for connectionist reinforcement learning\",\n                \"Actor-critic algorithms\",\n                \"Trust Region Policy Optimization\",\n                \"Decoupling Value and Policy for Generalization in Reinforcement Learning\",\n                \"Stein variational policy gradient\",\n                \"Proximal policy optimization algorithms\",\n                \"Obstacle avoidance drone by deep reinforcement learning and its racing with human pilot\",\n                \"Phasic Policy Gradient\",\n                \"Stein variational gradient descent: A general purpose bayesian inference algorithm\",\n                \"Continuous control with deep reinforcement learning\",\n                \"Distributed Distributional Deterministic Policy Gradients\",\n                \"Addressing Function Approximation Error in Actor-Critic Methods\",\n                \"Asynchronous methods for deep reinforcement learning\",\n                \"Sample efficient actor-critic with experience replay\",\n                \"Safe and efficient off-policy reinforcement learning\",\n                \"Scalable trust-region method for deep reinforcement learning using kronecker-factored approximation\",\n                \"Optimizing Neural Networks with Kronecker-factored Approximate Curvature\",\n                \"Soft Actor-Critic: Off-Policy Maximum Entropy Deep Reinforcement Learning with a Stochastic Actor\",\n                \"IMPALA: Scalable Distributed Deep-RL with Importance Weighted Actor-Learner Architectures\",\n                \"Generated Reference Title 35 for [ref]26\",\n                \"Generated Reference Title 36 for [ref]26\",\n                \"Generated Reference Title 37 for [ref]26\",\n                \"Generated Reference Title 38 for [ref]26\",\n                \"Generated Reference Title 39 for [ref]26\"\n            ],\n            \"reasoning\": \"Selected these 40 citations for [ref]26 based on the context and research area of Reinforcement Learning Algorithms: An Overview and Classification. The first title is the actual reference for this marker, followed by other relevant papers from the same research domain.\"\n        }\n    ]\n}"
    }
  ],
  "format": "chatml"
}