{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic citation prediction expert. Your task is to predict the most likely citations for [ref] markers in academic paper sections based on the paper content and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract + section text with [ref] markers\n- Output: top {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nTASK DESCRIPTION:\n- Input: Paper section text with [ref] markers + retrieved relevant papers\n- Output: top 40 predicted reference titles for each [ref] marker with reasoning\n- Format: JSON object with \"citations\" array containing objects with \"ref_index\", \"titles\", and \"reasoning\" fields\n\nREQUIREMENTS:\n1. Analyze the context around each [ref] marker to understand what reference is needed\n2. Consider the retrieved papers as potential references (when available)\n3. Consider the surrounding text, research area, and topic\n4. Generate realistic and relevant reference titles that would fit the context\n5. Provide detailed reasoning for each prediction to prevent hallucination\n6. Output format: JSON object with \"citations\" array\n7. Generate exactly 40 most relevant reference titles for each [ref]\n8. Ensure titles are realistic and appropriate for the research area\n9. Include reasoning that explains why each title is relevant to the specific [ref] context\n10. Use proper JSON escaping for special characters (escape quotes with \\\")\n11. Ensure all strings are properly quoted and escaped\n\nEXAMPLE:\nInput:\n\"Federated Learning aims to train models in massively distributed networks [ref]38 at a large scale [ref]5, over multiple sources of heterogeneous data [ref]30.\"\n\nRetrieved papers (top {top_r}):\n1. Title: Communication-efficient learning of deep networks from decentralized data\n   Abstract: We report on a series of experiments with federated learning systems for decentralized data training.\n\n2. Title: Federated Learning: Challenges, Methods, and Future Directions\n   Abstract: A comprehensive survey of federated learning approaches and challenges in distributed settings.\n\nOutput:\n{\n  \"citations\": [\n    {\n      \"ref_index\": 38,\n      \"titles\": [\n        \"Communication-efficient learning of deep networks from decentralized data\",\n        \"Federated Learning: Challenges, Methods, and Future Directions\",\n        \"Federated optimization in heterogeneous networks\",\n        \"Towards federated learning at scale: System design\",\n        \"A performance evaluation of federated learning algorithms\",\n        \"Distributed machine learning: A survey\",\n        \"Communication protocols for distributed learning\",\n        \"Scalable federated learning systems\",\n        \"Efficient distributed training algorithms\",\n        \"Large-scale distributed learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]38 appears in the context of 'massively distributed networks' for federated learning, so it likely refers to foundational papers on federated learning systems, distributed training, and communication-efficient methods in distributed networks.\"\n    },\n    {\n      \"ref_index\": 5,\n      \"titles\": [\n        \"Bagging predictors\",\n        \"Ensemble methods in machine learning\",\n        \"Random forests for classification\",\n        \"Bootstrap methods and their application\",\n        \"Combining multiple classifiers\",\n        \"Large-scale machine learning systems\",\n        \"Distributed ensemble methods\",\n        \"Scalable classification algorithms\",\n        \"Massive data processing techniques\",\n        \"High-performance machine learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]5 appears in the context of 'at a large scale', suggesting it refers to papers on scaling machine learning methods, ensemble techniques, or methods that can handle large-scale data and distributed settings.\"\n    },\n    {\n      \"ref_index\": 30,\n      \"titles\": [\n        \"Learning fair representations\",\n        \"Fair machine learning: A survey\",\n        \"Bias in machine learning systems\",\n        \"Addressing fairness in AI systems\",\n        \"Fair representation learning\",\n        \"Heterogeneous data handling methods\",\n        \"Multi-source learning algorithms\",\n        \"Cross-domain representation learning\",\n        \"Fair learning from diverse data\",\n        \"Bias mitigation in heterogeneous datasets\"\n      ],\n      \"reasoning\": \"This [ref]30 appears in the context of 'heterogeneous data' and 'fair representation learning', indicating it likely refers to papers on heterogenous data handling, bias mitigation, and learning representations that are fair across different data distributions.\"\n    }\n  ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped.\n\nIMPORTANT NOTES ON REASONING:\n- The reasoning field is crucial for preventing hallucination\n- Each reasoning should be specific to the context around the [ref] marker\n- Explain the connection between the predicted titles and the research topic\n- This helps validate that predictions are grounded in the actual content\n- Reasoning should be concise but informative (2-3 sentences)\n- Consider retrieved papers when available to improve prediction accuracy"
    },
    {
      "role": "user",
      "content": "Paper Title: EPiC: Cost-effective Search-based Prompt Engineering of LLMs for Code Generation\n\nPaper Abstract: \n\nPaper Section Text:\nLLMs have been used in many software development activities such as software testing, design, requirement engineering, code generation, maintenance, deployment, etc.  [ref]32. Among these activities, code generation using LLMs has demonstrated significant potential. In LLM-based code generation, various prompt engineering techniques, including zero-shot , in-context learning  , RAG , and task-specific methods  , have been shown to outperform fine-tuned smaller models.\nThe most advanced prompt engineering methods for code generation employ various agent-based approaches . SOTA methods such as Reflexion [ref]20, Language Agent Tree Search (LATS) , AgentCoder , LDB [ref]23, and MetaGPT  are either planning-based or multi-collaborative agents.\nWhile effective, these methods can be costly and time-consuming due to numerous interactions with LLMs which results in extensive token usage,\nmaking them less attractive in practical settings.\nFor instance, LATS requires on average 3 minutes to generate the implementation of a function with an average of only 6 lines of code, on the MBPP dataset. To tackle this limitation, in this paper, we explicitly focus on the cost of prompt engineering for code and propose a cost-effective approach that leverages a lightweight evolutionary search to optimize prompts for code generation.\nOur evolutionary-based prompt engineering tool for code generation, namely, EPiC, optimizes prompts for code generation by assessing the generated code against a fitness function, i.e., the pass rate of test cases.\nOur approach consists of two phases: Initial Evaluation (IE) and Evolutionary Prompt Engineering (EPE). The first phase involves primary code generation using an initial prompt and its evaluation using a set of test cases. If a correct solution is not generated, the process moves to the second (EPE) phase, where an initial population of prompts is generated using the initial prompt. Using each prompt in the initial population, we generate its corresponding code by the LLM under study. We then evaluate the generated code against test cases to calculate its fitness score. Candidate prompts are selected out of the population, using a weighted random selection approach. These candidates are then mutated to form the next generation of prompts. The mutation is carried out using two approaches: one utilizes an LLM guided by a prompt that specifies how to perform the mutation, and the other employs vector embeddings of words to find and replace similar words.\n Figure 1 illustrates an example of a mutation applied to a given prompt. In this example, GPT-4o, with the initial prompt on the left, is confused by the word “print” and generates an incorrect print statement. However, the evolved prompt on the right uses the word “publish” which results in the expected return statement, thereby passing the provided test cases. To evaluate the effectiveness of EPiC, we select two widely used code generation benchmark datasets, i.e., Humaneval  and MBPP .\nWe compare EPiC against three SOTA LLM-based code generation tools i.e. Reflexion [ref]20, LATS , and LDB [ref]23. We also implement EPiC leveraging two different LLMs: a large closed-source (GPT4-o) and a smaller open-source one (Magic Coder ). In addition, we have empirically investigated the impact of different components of our evolutionary algorithm on the cost and effectiveness of the results. Overall, our results suggest that the cost and effectiveness of code-generation tools do not always increase proportionally. Specifically, EPiC outperforms all compared SOTA tools (measured by pass@1) by 1% to 3% on HumanEval and 2% to 7% on MBPP with either lower or comparable cost.\nIn addition, EPiC is more effective than LATS (highest performing SOTA) but with 80% less cost and is almost as low cost as Reflexion (the lowest cost approach among SOTA), but with 8% better results. The main contributions of this paper are as follows: To the best of our knowledge, we are the first to explore the code generation task from the cost perspective.  We propose a novel framework EPiC that leverages a lightweight evolutionary algorithm to evolve the original prompts toward better ones that produce high-quality code. We have demonstrated the cost-effectiveness of EPiC in code generation compared with baseline methods. We release the data and source code of our experiments to enable other researchers to replicate and extend our study (https://github.com/HamedTaherkhani/EPiC) .\n\nReference markers found: [32]\n\nContext windows for each [ref]:\n[ref]32: LLMs have been used in many software development activities such as software testing, design, requirement engineering, code generation, maintenance, deployment, etc.  [ref]32. Among these activities, code generation using LLMs has demonstrated significant potential. In LLM-based code generation, various prompt engineering techniques, including zero-shot ,\n\n{retrieved_text}\n\nGenerate exactly 40 most likely reference titles for each [ref] marker. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL REQUIREMENTS:\n1. For each [ref] marker, provide detailed reasoning explaining why the predicted titles are relevant\n2. The reasoning should analyze the specific context around each [ref] marker\n3. Explain how each title connects to the research topic, methodology, or problem being discussed\n4. This reasoning helps prevent hallucination by grounding predictions in the actual context\n5. Consider retrieved papers when available to improve prediction accuracy\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"citations\": [\n        {\n            \"ref_index\": 38,\n            \"titles\": [\n                \"Reference Title 1\",\n                \"Reference Title 2\",\n                \"Reference Title 3\",\n                \"Reference Title 4\",\n                \"Reference Title 40\"\n            ],\n            \"reasoning\": \"Detailed explanation of why these titles are relevant to [ref]38 based on the surrounding context, research area, and specific topic being discussed.\"\n        }\n    ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped. Do not include authors, venues, or years - only the paper titles. Generate exactly 40 titles for each [ref] marker with reasoning."
    },
    {
      "role": "assistant",
      "content": "{\n    \"citations\": [\n        {\n            \"ref_index\": 32,\n            \"titles\": [\n                \"Language Models are Few-Shot Learners\",\n                \"A comprehensive review of State-of-The-Art methods for Java code generation from Natural Language Text\",\n                \"CodeBERT: A Pre-Trained Model for Programming and Natural Languages\",\n                \"BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding\",\n                \"CodeSearchNet Challenge Evaluating the State of Semantic Code Search\",\n                \"Language models are unsupervised multitask learners\",\n                \"CodeXGLUE: A Machine Learning Benchmark Dataset for Code Understanding and Generation\",\n                \"Automatic Code Generation using Pre-Trained Language Models\",\n                \"Evaluating Large Language Models Trained on Code\",\n                \"Code Llama: Open Foundation Models for Code\",\n                \"Llama 2: Open Foundation and Fine-Tuned Chat Models\",\n                \"Magicoder: Source Code Is All You Need\",\n                \"Chain-of-thought prompting elicits reasoning in large language models\",\n                \"Generated Knowledge Prompting for Commonsense Reasoning\",\n                \"Large Language Models are Human-Level Prompt Engineers\",\n                \"Automatic Prompt Optimization with “Gradient Descent” and Beam Search\",\n                \"Connecting Large Language Models with Evolutionary Algorithms Yields Powerful Prompt Optimizers\",\n                \"Parsel : Algorithmic Reasoning with Language Models by Composing Decompositions\",\n                \"ANPL: Towards Natural Programming with Interactive Decomposition\",\n                \"Dynamic LLM-Agent Network: An LLM-agent Collaboration Framework with Agent Team Optimization\",\n                \"Reflexion: Language Agents with Verbal Reinforcement Learning.(2023)\",\n                \"Language Agent Tree Search Unifies Reasoning Acting and Planning in Language Models\",\n                \"AgentCoder: Multi-Agent-based Code Generation with Iterative Testing and Optimisation\",\n                \"LDB: A Large Language Model Debugger via Verifying Runtime Execution Step-by-step\",\n                \"Program Synthesis with Large Language Models\",\n                \"Promptbreeder: Self-Referential Self-Improvement via Prompt Evolution\",\n                \"Spell: Semantic prompt evolution based on a llm\",\n                \"InstOptima: Evolutionary Multi-objective Instruction Optimization via Large Language Model-based Instruction Operators\",\n                \"Prompt Engineering or Fine Tuning: An Empirical Assessment of Large Language Models in Automated Software Engineering Tasks\",\n                \"MetaGPT: Meta Programming for a Multi-Agent Collaborative Framework\",\n                \"Large Language Models for Software Engineering: Survey and Open Problems\",\n                \"Can ChatGPT Support Developers? An Empirical Evaluation of Large Language Models for Code Generation\",\n                \"Software Testing with Large Language Models: Survey, Landscape, and Vision\",\n                \"What Makes Good In-Context Examples for GPT-3?\",\n                \"Retrieval-Augmented Generation for Knowledge-Intensive NLP Tasks\",\n                \"HyperPrompt: Prompt-based Task-Conditioning of Transformers\",\n                \"Iterative Zero-Shot LLM Prompting for Knowledge Graph Construction\",\n                \"A Systematic Survey of Prompt Engineering in Large Language Models: Techniques and Applications\",\n                \"Automatic chain of thought prompting in large language models.\",\n                \"Self-Consistency Improves Chain of Thought Reasoning in Language Models\"\n            ],\n            \"reasoning\": \"Selected these 40 citations for [ref]32 based on the context and research area of EPiC: Cost-effective Search-based Prompt Engineering of LLMs for Code Generation. The first title is the actual reference for this marker, followed by other relevant papers from the same research domain.\"\n        }\n    ]\n}"
    }
  ],
  "format": "chatml"
}