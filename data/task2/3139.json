{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic citation prediction expert. Your task is to predict the most likely citations for [ref] markers in academic paper sections based on the paper content and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract + section text with [ref] markers\n- Output: top {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nTASK DESCRIPTION:\n- Input: Paper section text with [ref] markers + retrieved relevant papers\n- Output: top 40 predicted reference titles for each [ref] marker with reasoning\n- Format: JSON object with \"citations\" array containing objects with \"ref_index\", \"titles\", and \"reasoning\" fields\n\nREQUIREMENTS:\n1. Analyze the context around each [ref] marker to understand what reference is needed\n2. Consider the retrieved papers as potential references (when available)\n3. Consider the surrounding text, research area, and topic\n4. Generate realistic and relevant reference titles that would fit the context\n5. Provide detailed reasoning for each prediction to prevent hallucination\n6. Output format: JSON object with \"citations\" array\n7. Generate exactly 40 most relevant reference titles for each [ref]\n8. Ensure titles are realistic and appropriate for the research area\n9. Include reasoning that explains why each title is relevant to the specific [ref] context\n10. Use proper JSON escaping for special characters (escape quotes with \\\")\n11. Ensure all strings are properly quoted and escaped\n\nEXAMPLE:\nInput:\n\"Federated Learning aims to train models in massively distributed networks [ref]38 at a large scale [ref]5, over multiple sources of heterogeneous data [ref]30.\"\n\nRetrieved papers (top {top_r}):\n1. Title: Communication-efficient learning of deep networks from decentralized data\n   Abstract: We report on a series of experiments with federated learning systems for decentralized data training.\n\n2. Title: Federated Learning: Challenges, Methods, and Future Directions\n   Abstract: A comprehensive survey of federated learning approaches and challenges in distributed settings.\n\nOutput:\n{\n  \"citations\": [\n    {\n      \"ref_index\": 38,\n      \"titles\": [\n        \"Communication-efficient learning of deep networks from decentralized data\",\n        \"Federated Learning: Challenges, Methods, and Future Directions\",\n        \"Federated optimization in heterogeneous networks\",\n        \"Towards federated learning at scale: System design\",\n        \"A performance evaluation of federated learning algorithms\",\n        \"Distributed machine learning: A survey\",\n        \"Communication protocols for distributed learning\",\n        \"Scalable federated learning systems\",\n        \"Efficient distributed training algorithms\",\n        \"Large-scale distributed learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]38 appears in the context of 'massively distributed networks' for federated learning, so it likely refers to foundational papers on federated learning systems, distributed training, and communication-efficient methods in distributed networks.\"\n    },\n    {\n      \"ref_index\": 5,\n      \"titles\": [\n        \"Bagging predictors\",\n        \"Ensemble methods in machine learning\",\n        \"Random forests for classification\",\n        \"Bootstrap methods and their application\",\n        \"Combining multiple classifiers\",\n        \"Large-scale machine learning systems\",\n        \"Distributed ensemble methods\",\n        \"Scalable classification algorithms\",\n        \"Massive data processing techniques\",\n        \"High-performance machine learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]5 appears in the context of 'at a large scale', suggesting it refers to papers on scaling machine learning methods, ensemble techniques, or methods that can handle large-scale data and distributed settings.\"\n    },\n    {\n      \"ref_index\": 30,\n      \"titles\": [\n        \"Learning fair representations\",\n        \"Fair machine learning: A survey\",\n        \"Bias in machine learning systems\",\n        \"Addressing fairness in AI systems\",\n        \"Fair representation learning\",\n        \"Heterogeneous data handling methods\",\n        \"Multi-source learning algorithms\",\n        \"Cross-domain representation learning\",\n        \"Fair learning from diverse data\",\n        \"Bias mitigation in heterogeneous datasets\"\n      ],\n      \"reasoning\": \"This [ref]30 appears in the context of 'heterogeneous data' and 'fair representation learning', indicating it likely refers to papers on heterogenous data handling, bias mitigation, and learning representations that are fair across different data distributions.\"\n    }\n  ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped.\n\nIMPORTANT NOTES ON REASONING:\n- The reasoning field is crucial for preventing hallucination\n- Each reasoning should be specific to the context around the [ref] marker\n- Explain the connection between the predicted titles and the research topic\n- This helps validate that predictions are grounded in the actual content\n- Reasoning should be concise but informative (2-3 sentences)\n- Consider retrieved papers when available to improve prediction accuracy"
    },
    {
      "role": "user",
      "content": "Paper Title: Examining Zero-Shot Vulnerability Repair with Large Language Models\n\nPaper Abstract: \n\nPaper Section Text:\nCommercial large language models, trained on vast amounts of source code, have been enthusiastically promoted as tools to help developers in general coding tasks like translating between programming languages and explaining code    [ref]4 by predicting likely text completions given some “prompt” comprising comments, function names, and other code elements.\nThis is similar to the multi-tasking capabilities that LLMs for natural language exhibit  .\nOf the many tasks coders do, we are interested in fixing security bugs; developers might ordinarily run security tools such as fuzzers or static analyzers, try to understand the feedback, locate the issue, and modify the code to repair the bug. This is hard. In this paper, we ask:\nCan LLMs for code completion help us fix security bugs (Fig. 1)?\n“Out-of-the-box” LLMs for coding, such as OpenAI’s Codex  and AI21’s Jurassic-1  are trained on open-source code in myriad languages that contain a large variety of comments  0 1 and functionality (both buggy and non-buggy).\nThis powers the ability of LLMs to complete code in different ways, given some context such as the designer’s intent in code comments. While recent work 2 suggests that code completions with the LLM GitHub Copilot can introduce security weaknesses, Pearce et al. conclude that models can still “increase the productivity of software developers”, especially when paired with “appropriate security-aware tooling during…generation to minimize the risk” 2.\nAs one can guide LLMs by adding cues to prompts (as suggested by user guides like [ref]4), we seek to characterize the feasibility of using black-box, “off-the-shelf” LLMs for “zero-shot” generation of replacement code for an identified security bug, perhaps as part of an overarching program repair framework.\nThis contrasts prior work that trained specialized  neural machine translation (NMT)-based models for fixing software bugs (e.g., 3 4 5 6).\nUnlike prior approaches which are trained to predict the exact same tokens as a human developer’s fix, we want to investigate off-the-shelf LLMs’ apparent ability to “understand” the broader context from a source code file. We focus on creating security patches as they are important, can be tricky to write, and often require relatively small changes of code in a single file 7.\nThe smaller footprint of security patches suggests that current off-the-shelf LLMs might be capable of designing bug fixes.\nWe want to know if LLMs—despite not being trained specifically on security fixes (and, indeed, being trained on a great deal of insecure code)—are nonetheless capable of generating valid fixes for vulnerable code.\nWe seek answers to these research questions: Can off-the-shelf111From this point on, our discussion of LLMs is specifically about off-the-shelf, general coding LLMs available at the time of this study. LLMs generate safe and functional code to fix security vulnerabilities? Does varying the amount of context in the comments of a prompt affect the LLM’s ability to suggest fixes? What are the challenges when using LLMs to fix vulnerabilities in the real world? How reliable are LLMs at generating repairs? To answer these questions, we evaluate recent LLMs on a range of synthetic, hand-crafted, and real-world buggy scenarios.\nOur contributions are as follows. (1) We compare prompts, contextual cues, and model settings (temperature, sampling strategy, etc.) for encouraging LLMs to generate functional and secure code. (Section III)\n(2) We provide the first evaluation of LLMs for zero-shot generation of security fixes, showing that off-the-shelf models are capable of producing security fixes without any additional training in simple scenarios (Section IV).\nHowever, when we evaluate the LLMs on some real-world scenarios (Section  V), we find that they can struggle to generate plausible fixes and as such are still not ready to provide real-world value in a program repair framework.\n(3) To encourage further research into the use of LLMs in vulnerability repair, we open-source our datasets and evaluation framework, including the training data and trained model for ‘gpt2-csrc’.\n\nReference markers found: [4]\n\nContext windows for each [ref]:\n[ref]4: trained on vast amounts of source code, have been enthusiastically promoted as tools to help developers in general coding tasks like translating between programming languages and explaining code    [ref]4 by predicting likely text completions given some “prompt” comprising comments, function names, and other code elements.\nThis is similar to the multi-tasking capabilities that LLMs for natural\n\n{retrieved_text}\n\nGenerate exactly 40 most likely reference titles for each [ref] marker. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL REQUIREMENTS:\n1. For each [ref] marker, provide detailed reasoning explaining why the predicted titles are relevant\n2. The reasoning should analyze the specific context around each [ref] marker\n3. Explain how each title connects to the research topic, methodology, or problem being discussed\n4. This reasoning helps prevent hallucination by grounding predictions in the actual context\n5. Consider retrieved papers when available to improve prediction accuracy\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"citations\": [\n        {\n            \"ref_index\": 38,\n            \"titles\": [\n                \"Reference Title 1\",\n                \"Reference Title 2\",\n                \"Reference Title 3\",\n                \"Reference Title 4\",\n                \"Reference Title 40\"\n            ],\n            \"reasoning\": \"Detailed explanation of why these titles are relevant to [ref]38 based on the surrounding context, research area, and specific topic being discussed.\"\n        }\n    ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped. Do not include authors, venues, or years - only the paper titles. Generate exactly 40 titles for each [ref] marker with reasoning."
    },
    {
      "role": "assistant",
      "content": "{\n    \"citations\": [\n        {\n            \"ref_index\": 4,\n            \"titles\": [\n                \"Language Models are Few-Shot Learners\",\n                \"Evaluating Large Language Models Trained on Code\",\n                \"GitHub Copilot · Your AI pair programmer.\",\n                \"Discover Use Cases for AI21 Studio and Jurassic-1.\",\n                \"Completion - OpenAI API.\",\n                \"Language Models are Unsupervised Multitask Learners\",\n                \"OpenAI Codex\",\n                \"Jurassic-1: Technical Details and Evaluation\",\n                \"Is there a correlation between code comments and issues? an exploratory study\",\n                \"Classifying Code Comments in Java Open-Source Software Systems\",\n                \"/*icomment: bugs or bad comments?*/\",\n                \"An Empirical Cybersecurity Evaluation of GitHub Copilot’s Code Contributions\",\n                \"SequenceR: Sequence-to-Sequence Learning for End-to-End Program Repair\",\n                \"CURE: Code-Aware Neural Machine Translation for Automatic Program Repair\",\n                \"An Empirical Study on Learning Bug-Fixing Patches in the Wild via Neural Machine Translation\",\n                \"Generating Bug-Fixes Using Pretrained Transformers\",\n                \"A Large-Scale Empirical Study of Security Patches\",\n                \"CWE - CWE-Compatible Products and Services\",\n                \"Source Code Analysis Tools.\",\n                \"AddressSanitizer: A Fast Address Sanity Checker\",\n                \"GCC Undefined Behavior Sanitizer - ubsan\",\n                \"Automatic Software Repair: A Bibliography\",\n                \"A New Algorithm for Data Compression\",\n                \"How to generate text: using different decoding methods for language generation with Transformers\",\n                \"Jurassic-1 Language Models - AI21 Studio Docs\",\n                \"A Systematic Evaluation of Large Language Models of Code\",\n                \"Examples - OpenAI API.\",\n                \"Quality analysis of source code comments\",\n                \"The Secret Life of Commented-Out Source Code\",\n                \"CodeQL documentation\",\n                \"2021 CWE Top 25 Most Dangerous Software Weaknesses\",\n                \"CWE-1194: CWE VIEW: Hardware Design\",\n                \"Verilator User’s Guide — Verilator 4.202 documentation.\",\n                \"Beyond Tests: Program Vulnerability Repair via Crash Constraint Extraction\",\n                \"Automated Bug Hunting With Data-Driven Symbolic Root Cause Analysis\",\n                \"ARCUS: Symbolic Root Cause Analysis of Exploits in Production Systems\",\n                \"Simplifying and Isolating Failure-Inducing Input\",\n                \"Isolating Failure-Inducing Thread Schedules\",\n                \"Using Likely Invariants for Automated Software Fault Localization\",\n                \"Failure Sketching: A Technique for Automated Root Cause Diagnosis of in-Production Failures\"\n            ],\n            \"reasoning\": \"Selected these 40 citations for [ref]4 based on the context and research area of Examining Zero-Shot Vulnerability Repair with Large Language Models. The first title is the actual reference for this marker, followed by other relevant papers from the same research domain.\"\n        }\n    ]\n}"
    }
  ],
  "format": "chatml"
}