{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic citation prediction expert. Your task is to predict the most likely citations for [ref] markers in academic paper sections based on the paper content and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract + section text with [ref] markers\n- Output: top {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nTASK DESCRIPTION:\n- Input: Paper section text with [ref] markers + retrieved relevant papers\n- Output: top 40 predicted reference titles for each [ref] marker with reasoning\n- Format: JSON object with \"citations\" array containing objects with \"ref_index\", \"titles\", and \"reasoning\" fields\n\nREQUIREMENTS:\n1. Analyze the context around each [ref] marker to understand what reference is needed\n2. Consider the retrieved papers as potential references (when available)\n3. Consider the surrounding text, research area, and topic\n4. Generate realistic and relevant reference titles that would fit the context\n5. Provide detailed reasoning for each prediction to prevent hallucination\n6. Output format: JSON object with \"citations\" array\n7. Generate exactly 40 most relevant reference titles for each [ref]\n8. Ensure titles are realistic and appropriate for the research area\n9. Include reasoning that explains why each title is relevant to the specific [ref] context\n10. Use proper JSON escaping for special characters (escape quotes with \\\")\n11. Ensure all strings are properly quoted and escaped\n\nEXAMPLE:\nInput:\n\"Federated Learning aims to train models in massively distributed networks [ref]38 at a large scale [ref]5, over multiple sources of heterogeneous data [ref]30.\"\n\nRetrieved papers (top {top_r}):\n1. Title: Communication-efficient learning of deep networks from decentralized data\n   Abstract: We report on a series of experiments with federated learning systems for decentralized data training.\n\n2. Title: Federated Learning: Challenges, Methods, and Future Directions\n   Abstract: A comprehensive survey of federated learning approaches and challenges in distributed settings.\n\nOutput:\n{\n  \"citations\": [\n    {\n      \"ref_index\": 38,\n      \"titles\": [\n        \"Communication-efficient learning of deep networks from decentralized data\",\n        \"Federated Learning: Challenges, Methods, and Future Directions\",\n        \"Federated optimization in heterogeneous networks\",\n        \"Towards federated learning at scale: System design\",\n        \"A performance evaluation of federated learning algorithms\",\n        \"Distributed machine learning: A survey\",\n        \"Communication protocols for distributed learning\",\n        \"Scalable federated learning systems\",\n        \"Efficient distributed training algorithms\",\n        \"Large-scale distributed learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]38 appears in the context of 'massively distributed networks' for federated learning, so it likely refers to foundational papers on federated learning systems, distributed training, and communication-efficient methods in distributed networks.\"\n    },\n    {\n      \"ref_index\": 5,\n      \"titles\": [\n        \"Bagging predictors\",\n        \"Ensemble methods in machine learning\",\n        \"Random forests for classification\",\n        \"Bootstrap methods and their application\",\n        \"Combining multiple classifiers\",\n        \"Large-scale machine learning systems\",\n        \"Distributed ensemble methods\",\n        \"Scalable classification algorithms\",\n        \"Massive data processing techniques\",\n        \"High-performance machine learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]5 appears in the context of 'at a large scale', suggesting it refers to papers on scaling machine learning methods, ensemble techniques, or methods that can handle large-scale data and distributed settings.\"\n    },\n    {\n      \"ref_index\": 30,\n      \"titles\": [\n        \"Learning fair representations\",\n        \"Fair machine learning: A survey\",\n        \"Bias in machine learning systems\",\n        \"Addressing fairness in AI systems\",\n        \"Fair representation learning\",\n        \"Heterogeneous data handling methods\",\n        \"Multi-source learning algorithms\",\n        \"Cross-domain representation learning\",\n        \"Fair learning from diverse data\",\n        \"Bias mitigation in heterogeneous datasets\"\n      ],\n      \"reasoning\": \"This [ref]30 appears in the context of 'heterogeneous data' and 'fair representation learning', indicating it likely refers to papers on heterogenous data handling, bias mitigation, and learning representations that are fair across different data distributions.\"\n    }\n  ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped.\n\nIMPORTANT NOTES ON REASONING:\n- The reasoning field is crucial for preventing hallucination\n- Each reasoning should be specific to the context around the [ref] marker\n- Explain the connection between the predicted titles and the research topic\n- This helps validate that predictions are grounded in the actual content\n- Reasoning should be concise but informative (2-3 sentences)\n- Consider retrieved papers when available to improve prediction accuracy"
    },
    {
      "role": "user",
      "content": "Paper Title: Revisiting File Context for Source Code Summarization\n\nPaper Abstract: \n\nPaper Section Text:\nIn Figure 2 we provide an overview of selected related work from the last five years. The related work can be broadly classified into four families. AST-Flat is a family of approaches marked by Column A in Figure 2 that uses the Abstract Syntax Tree (AST) as a sequence of nodes. In 2018, Hu et al  introduced DeepCom, a model that encodes code tokens and AST nodes together using LSTMs. In 2019, LeClair et al  introduced a similar model ast-attendgru, except that they use GRUs instead of LSTM and they decoupled the AST and source code sequence to separate encoders. They found that learning separate representations of code and structure helps generate better natural language summaries. AST-GNN is a family of approaches marked by Column G in Figure 2 that use Graph Neural Networks (GNN). In 2020, LeClair et al [ref]30 introduced a hybrid GNN-RNN model that encodes AST as a graph using a GNN layer and combines it with a GRU based source code sequence encoder. They found that, compared to a flat representation of AST, a GNN can learn to better place AST nodes in the embedding space by using the edges of the AST. Since that landmark paper, a few approaches have been introduced that use GNNs to encode code structure for code summarization   . Transformers is a family of approaches marked by Column T in Figure 2 that mainly use a Transformer architecture. In 2020, Ahmad et al [ref]1 introduced a Transformer based approach for code summarization. They found that the self-attention mechanism helps transformers better map words in the encoder to words in the decoder. Since then, several approaches have been introduced that use a network of transformers [ref]2  . In 2022, Li et al  introduced SeTransformer that encodes decoupled AST and source code, using a network of transformers and CNNs. Context is a family of approaches marked by Column C in Figure 2 that mainly relies on contextual information, i.e., information outside the target function. In 2020, Haque et al  introduced an encoder “FC”, that encodes file context, i.e., the summaries around the target function in the same file as a separate encoder. They add this encoder to several RNN based baselines. They found that sometimes the important information needed to generate accurate summaries is not present in the target function, but can be found in the functions around it in the same file. Our paper is an extension of that work. In 2021,  Bansal et al  introduced another context-based encoder “PC” that encodes several files from the project as project context. They disclosed that the computational cost of their encoder is exponentially higher than “FC”. Therefore, we do not replicate their approach for this paper. Since 2020, Large Language Models (LLMs) have become increasingly popular in several domains of applied NLP research. In 2020, Feng et al  introduced CodeBERT that uses a stack of Transformers which are bidirectionally trained. The network models source code syntax by learning to predict randomly masked tokens proposed. In 2021, Ahmad et al [ref]2 proposed PLBART, using graph neural networks to learn programming language generation. Both report modest improvements in performance for code summarization, while reporting high training costs, which are critical for academic research. In 2020, Wei et al  introduced an approach to use AST and exemplar representations of source code as context. They used these representations to fetch similar methods from a database to help refine the search for a more accurate summary. In 2021, Liu et al  introduced an approach to retrieve similar code properties from a data as context, then model that context as a property graph using GNNs. These are examples of retrieval-based techniques that use summaries from similar methods as an input to the model. In contrast, we make every effort to remove comments and doc-strings from our context input. Retrieval-based techniques are also more susceptible to data leaks between the training and test set that could skew the results over unseen samples. Therefore, we do not replicate their work as a baseline. Overall, we observe a clear trend from GRU/LSTM based models that mainly relied on source code and AST – to transformer based techniques, with a few approaches increasingly incorporating some contextual information in their design. This paper is a natural evolution of that trend, in that we present an in-depth analysis of how transformers and file context can be used to improve the state-of-the-art in source code summarization.\n\nReference markers found: [30]\n\nContext windows for each [ref]:\n[ref]30: of code and structure helps generate better natural language summaries. AST-GNN is a family of approaches marked by Column G in Figure 2 that use Graph Neural Networks (GNN). In 2020, LeClair et al [ref]30 introduced a hybrid GNN-RNN model that encodes AST as a graph using a GNN layer and combines it with a GRU based source code sequence encoder. They found that, compared to a flat\n\n{retrieved_text}\n\nGenerate exactly 40 most likely reference titles for each [ref] marker. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL REQUIREMENTS:\n1. For each [ref] marker, provide detailed reasoning explaining why the predicted titles are relevant\n2. The reasoning should analyze the specific context around each [ref] marker\n3. Explain how each title connects to the research topic, methodology, or problem being discussed\n4. This reasoning helps prevent hallucination by grounding predictions in the actual context\n5. Consider retrieved papers when available to improve prediction accuracy\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"citations\": [\n        {\n            \"ref_index\": 38,\n            \"titles\": [\n                \"Reference Title 1\",\n                \"Reference Title 2\",\n                \"Reference Title 3\",\n                \"Reference Title 4\",\n                \"Reference Title 40\"\n            ],\n            \"reasoning\": \"Detailed explanation of why these titles are relevant to [ref]38 based on the surrounding context, research area, and specific topic being discussed.\"\n        }\n    ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped. Do not include authors, venues, or years - only the paper titles. Generate exactly 40 titles for each [ref] marker with reasoning."
    },
    {
      "role": "assistant",
      "content": "{\n    \"citations\": [\n        {\n            \"ref_index\": 30,\n            \"titles\": [\n                \"Improved Code Summarization via a Graph Neural Network\",\n                \"인공지능 기반 공격 그래프 생성\",\n                \"A Transformer-based Approach for Source Code Summarization\",\n                \"Unified Pre-training for Program Understanding and Generation\",\n                \"Few-shot training LLMs for project-specific code-summarization\",\n                \"The Adverse Effects of Code Duplication in Machine Learning Models of Code\",\n                \"code2vec: Learning Distributed Representations of Code\",\n                \"Meteor: An automatic metric for mt evaluation with improved correlation with human judgments\",\n                \"Project-level encoding for neural source code summarization of subroutines\",\n                \"Function call graph context encoding for neural source code summarization\",\n                \"Towards modeling human attention from eye movements for neutral source code summarization\",\n                \"Named tensor notation\",\n                \"” yours is better!” participant response bias in hci\",\n                \"CoCoMIC: Code Completion By Jointly Modeling In-file and Cross-file Context\",\n                \"CodeBERT: A Pre-Trained Model for Programming and Natural Languages\",\n                \"An experimental investigation on the effects of context on source code identifiers splitting and expansion\",\n                \"A Multi-Perspective Architecture for Semantic Code Search\",\n                \"Improved Automatic Summarization of Subroutines via Attention to File Context\",\n                \"Action word prediction for neural source code summarization\",\n                \"Semantic Similarity Metrics for Evaluating Source Code Summarization\",\n                \"Automatically capturing source code context of nl-queries for software maintenance and reuse\",\n                \"Using structural context to recommend source code examples\",\n                \"Lora: Low-rank adaptation of large language models\",\n                \"Deep code comment generation\",\n                \"Summarizing source code with transferred api knowledge\",\n                \"Improve Transformer Models with Better Relative Position Embeddings\",\n                \"Exhaustive or exhausting? evidence on respondent fatigue in long surveys\",\n                \"Api documentation from source code comments: a case study of javadoc\",\n                \"Code comment generation based on graph neural network enhanced transformer model for code understanding in open-source software ecosystems\",\n                \"Recommendations for Datasets for Source Code Summarization\",\n                \"A neural model for generating natural language summaries of program subroutines\",\n                \"Setransformer: A transformer-based code semantic parser for code comment generation\",\n                \"Automatic Generation of Text Descriptive Comments for Code Blocks\",\n                \"Retrieval-augmented generation for code summarization via hybrid {gnn}\",\n                \"A framework for writing trigger-action todo comments in executable format\",\n                \"How do professional developers comprehend software?\",\n                \"Reassessing automatic evaluation metrics for code summarization tasks\",\n                \"Are We Building on the Rock? On the Importance of Data Preprocessing for Code Summarization\",\n                \"Cognitive fatigue influences students’ performance on standardized tests\",\n                \"Towards automatically generating summary comments for java methods\"\n            ],\n            \"reasoning\": \"Selected these 40 citations for [ref]30 based on the context and research area of Revisiting File Context for Source Code Summarization. The first title is the actual reference for this marker, followed by other relevant papers from the same research domain.\"\n        }\n    ]\n}"
    }
  ],
  "format": "chatml"
}