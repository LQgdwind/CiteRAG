{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic citation prediction expert. Your task is to predict the most likely citations for [ref] markers in academic paper sections based on the paper content and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract + section text with [ref] markers\n- Output: top {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nTASK DESCRIPTION:\n- Input: Paper section text with [ref] markers + retrieved relevant papers\n- Output: top 40 predicted reference titles for each [ref] marker with reasoning\n- Format: JSON object with \"citations\" array containing objects with \"ref_index\", \"titles\", and \"reasoning\" fields\n\nREQUIREMENTS:\n1. Analyze the context around each [ref] marker to understand what reference is needed\n2. Consider the retrieved papers as potential references (when available)\n3. Consider the surrounding text, research area, and topic\n4. Generate realistic and relevant reference titles that would fit the context\n5. Provide detailed reasoning for each prediction to prevent hallucination\n6. Output format: JSON object with \"citations\" array\n7. Generate exactly 40 most relevant reference titles for each [ref]\n8. Ensure titles are realistic and appropriate for the research area\n9. Include reasoning that explains why each title is relevant to the specific [ref] context\n10. Use proper JSON escaping for special characters (escape quotes with \\\")\n11. Ensure all strings are properly quoted and escaped\n\nEXAMPLE:\nInput:\n\"Federated Learning aims to train models in massively distributed networks [ref]38 at a large scale [ref]5, over multiple sources of heterogeneous data [ref]30.\"\n\nRetrieved papers (top {top_r}):\n1. Title: Communication-efficient learning of deep networks from decentralized data\n   Abstract: We report on a series of experiments with federated learning systems for decentralized data training.\n\n2. Title: Federated Learning: Challenges, Methods, and Future Directions\n   Abstract: A comprehensive survey of federated learning approaches and challenges in distributed settings.\n\nOutput:\n{\n  \"citations\": [\n    {\n      \"ref_index\": 38,\n      \"titles\": [\n        \"Communication-efficient learning of deep networks from decentralized data\",\n        \"Federated Learning: Challenges, Methods, and Future Directions\",\n        \"Federated optimization in heterogeneous networks\",\n        \"Towards federated learning at scale: System design\",\n        \"A performance evaluation of federated learning algorithms\",\n        \"Distributed machine learning: A survey\",\n        \"Communication protocols for distributed learning\",\n        \"Scalable federated learning systems\",\n        \"Efficient distributed training algorithms\",\n        \"Large-scale distributed learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]38 appears in the context of 'massively distributed networks' for federated learning, so it likely refers to foundational papers on federated learning systems, distributed training, and communication-efficient methods in distributed networks.\"\n    },\n    {\n      \"ref_index\": 5,\n      \"titles\": [\n        \"Bagging predictors\",\n        \"Ensemble methods in machine learning\",\n        \"Random forests for classification\",\n        \"Bootstrap methods and their application\",\n        \"Combining multiple classifiers\",\n        \"Large-scale machine learning systems\",\n        \"Distributed ensemble methods\",\n        \"Scalable classification algorithms\",\n        \"Massive data processing techniques\",\n        \"High-performance machine learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]5 appears in the context of 'at a large scale', suggesting it refers to papers on scaling machine learning methods, ensemble techniques, or methods that can handle large-scale data and distributed settings.\"\n    },\n    {\n      \"ref_index\": 30,\n      \"titles\": [\n        \"Learning fair representations\",\n        \"Fair machine learning: A survey\",\n        \"Bias in machine learning systems\",\n        \"Addressing fairness in AI systems\",\n        \"Fair representation learning\",\n        \"Heterogeneous data handling methods\",\n        \"Multi-source learning algorithms\",\n        \"Cross-domain representation learning\",\n        \"Fair learning from diverse data\",\n        \"Bias mitigation in heterogeneous datasets\"\n      ],\n      \"reasoning\": \"This [ref]30 appears in the context of 'heterogeneous data' and 'fair representation learning', indicating it likely refers to papers on heterogenous data handling, bias mitigation, and learning representations that are fair across different data distributions.\"\n    }\n  ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped.\n\nIMPORTANT NOTES ON REASONING:\n- The reasoning field is crucial for preventing hallucination\n- Each reasoning should be specific to the context around the [ref] marker\n- Explain the connection between the predicted titles and the research topic\n- This helps validate that predictions are grounded in the actual content\n- Reasoning should be concise but informative (2-3 sentences)\n- Consider retrieved papers when available to improve prediction accuracy"
    },
    {
      "role": "user",
      "content": "Paper Title: Large Language Models for Compiler Optimization\n\nPaper Abstract: \n\nPaper Section Text:\nIn this experiment, we perform a large-scale evaluation of the LLM’s ability to predict pass lists in comparison to baselines. Datasets We aggregate a broad suite of benchmark datasets for evaluation, summarized in Table II. We deduplicate and exclude IR functions identical to those we trained on. Our test data comprises code from a variety of domains including coding competitions (AI-SOCO , POJ-104 ), compiler test case generators (CSmith , YARPGen ), and miscellaneous publicly available code (ExeBench [ref]32, Transcoder [ref]12). Baselines We compare our approach to three baselines: AutoPhase [ref]39, Coreset-NVP , and the Autotuner. AutoPhase [ref]39 is a reinforcement learning approach in which an agent is trained using Proximal Policy Optimization  to select the sequence of optimization passes that will maximize cumulative instruction count savings over a fixed-length episode. At each step, the program being optimized is represented to the agent as a 56-dimensional vector of instruction counts and other properties. We replicate the environment of [ref]39 but use the implementation and expanded training regime from  in which the agent is trained for 100,000 episodes. We train the agent on the same data as our language model (Table I) and evaluate agent performance periodically during training on a holdout validation set. As in prior works, we use an action space and episode length of 45. Coreset-NVP  is a technique that combines iterative search with a learned cost model. First, a greedy search is run on 17,500 benchmarks to determine a Core set of best pass lists. Then a Neural Value Prediction (NVP) is trained on the results of this search, using ProGraML  graphs processed by a Graph Convolutional Network as program representation. At inference, Coreset-NVP predicts the normalized reward and tries the first few pass sequences with the highest normalized reward. The total number of passes it is allowed to try for each benchmark is 45, following prior works. We use author-provided model weights to perform inference on our test set. Finally, we compare it to the Autotuner that we used to generate training data. We autotuned the test dataset in the same manner as the training data, described in Section III-B. Results Table III summarizes the results. Our approach outperforms -Oz, AutoPhase, and Coreset-NVP across all datasets. Overall, the thousands of optimization attempts that are afforded to the autotuner enable it to discover the best-performing pass lists. AutoPhase and Coreset-NVP are both able to identify pass lists that outperform -Oz but have an overall net negative impact on instruction count due to a large number of regressions. We propose a simple “-Oz backup” extension to overcome this: if a model predicts a pass list other than -Oz, we also run -Oz and select the best of the two options. This prevents regressions w.r.t. -Oz, but increases the number of additional compilations by the number of times the model predicts a pass list other than -Oz. Table IV shows the results of the techniques when evaluated in this manner. While this does not help the models find further improvements, the lack of regressions means that AutoPhase and Coreset-NVP now achieve overall improvements over -Oz, though still less than the LLM with or without the -Oz backup.\n\nReference markers found: [32]\n\nContext windows for each [ref]:\n[ref]32: comprises code from a variety of domains including coding competitions (AI-SOCO , POJ-104 ), compiler test case generators (CSmith , YARPGen ), and miscellaneous publicly available code (ExeBench [ref]32, Transcoder [ref]12). Baselines We compare our approach to three baselines: AutoPhase [ref]39, Coreset-NVP , and the Autotuner. AutoPhase [ref]39 is a reinforcement learning approach in which\n\n{retrieved_text}\n\nGenerate exactly 40 most likely reference titles for each [ref] marker. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL REQUIREMENTS:\n1. For each [ref] marker, provide detailed reasoning explaining why the predicted titles are relevant\n2. The reasoning should analyze the specific context around each [ref] marker\n3. Explain how each title connects to the research topic, methodology, or problem being discussed\n4. This reasoning helps prevent hallucination by grounding predictions in the actual context\n5. Consider retrieved papers when available to improve prediction accuracy\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"citations\": [\n        {\n            \"ref_index\": 38,\n            \"titles\": [\n                \"Reference Title 1\",\n                \"Reference Title 2\",\n                \"Reference Title 3\",\n                \"Reference Title 4\",\n                \"Reference Title 40\"\n            ],\n            \"reasoning\": \"Detailed explanation of why these titles are relevant to [ref]38 based on the surrounding context, research area, and specific topic being discussed.\"\n        }\n    ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped. Do not include authors, venues, or years - only the paper titles. Generate exactly 40 titles for each [ref] marker with reasoning."
    },
    {
      "role": "assistant",
      "content": "{\n    \"citations\": [\n        {\n            \"ref_index\": 32,\n            \"titles\": [\n                \"Convolutional Neural Networks over Tree Structures for Programming Language Processing\",\n                \"StarCoder: may the source be with you!\",\n                \"Competition-Level Code Generation with AlphaCode\",\n                \"GPT-4 Technical Report\",\n                \"SantaCoder: don’t reach for the stars!\",\n                \"PaLM: Scaling Language Modeling with Pathways\",\n                \"InCoder: A Generative Model for Code Infilling and Synthesis\",\n                \"Textbooks Are All You Need\",\n                \"Evaluating Large Language Models Trained on Code\",\n                \"Code Llama: Open Foundation Models for Code\",\n                \"Unsupervised Translation of Programming Languages\",\n                \"Learning C to x86 Translation: An Experiment in Neural Compilation\",\n                \"Code Translation with Compiler Representations\",\n                \"Automated Conformance Testing for JavaScript Engines via Deep Compiler Fuzzing\",\n                \"Large Language Models Are Zero-Shot Fuzzers: Fuzzing Deep-Learning Libraries via Large Language Models\",\n                \"Adaptive Test Generation Using a Large Language Model\",\n                \"ChatGPT\",\n                \"MLGO: a Machine Learning Guided Compiler Optimizations Framework\",\n                \"Machine Learning in Compiler Optimisation\",\n                \"Machine Learning in Compilers: Past, Present and Future\",\n                \"Learning Compiler Pass Orders using Coreset and Normalized Value Prediction\",\n                \"ProGraML: A Graph-based Program Representation for Data Flow Analysis and Compiler Optimizations\",\n                \"LLVM: A Compilation Framework for Lifelong Program Analysis & Transformation\",\n                \"Limits for learning with Language Models\",\n                \"Limitations of Language Models in Arithmetic and Symbolic Induction\",\n                \"Llama 2: Open Foundation and Fine-Tuned Chat Models\",\n                \"Evaluating Iterative Compilation\",\n                \"CompilerGym: Robust, Performant Compiler Optimization Environments for AI Research\",\n                \"The Stack: 3TB of Permissively Licensed Source Code\",\n                \"The Pile: An 800GB Dataset of Diverse Text for Language Modeling\",\n                \"CodeSearchNet Challenge Evaluating the State of Semantic Code Search\",\n                \"Overview of the PAN@FIRE 2020 task on the authorship identification of SOurce COde (AI-SOCO)\",\n                \"ExeBench: an ML-scale Dataset of Executable C Functions\",\n                \"Finding and Understanding Bugs in C Compilers\",\n                \"Random Testing for C and C++ Compilers with YARPGen\",\n                \"SLaDe: A Portable Small Language Model Decompiler for Optimized Assembler\",\n                \"Attention Is All You Need\",\n                \"A New Algorithm for Data Compression\",\n                \"AutoPhase: Juggling HLS Phase Orderings in Random Forests with Deep Reinforcement Learning\",\n                \"Decoupled Weight Decay Regularization\"\n            ],\n            \"reasoning\": \"Selected these 40 citations for [ref]32 based on the context and research area of Large Language Models for Compiler Optimization. The first title is the actual reference for this marker, followed by other relevant papers from the same research domain.\"\n        }\n    ]\n}"
    }
  ],
  "format": "chatml"
}