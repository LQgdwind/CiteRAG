{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic citation prediction expert. Your task is to predict the most likely citations for [ref] markers in academic paper sections based on the paper content and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract + section text with [ref] markers\n- Output: top {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nTASK DESCRIPTION:\n- Input: Paper section text with [ref] markers + retrieved relevant papers\n- Output: top 40 predicted reference titles for each [ref] marker with reasoning\n- Format: JSON object with \"citations\" array containing objects with \"ref_index\", \"titles\", and \"reasoning\" fields\n\nREQUIREMENTS:\n1. Analyze the context around each [ref] marker to understand what reference is needed\n2. Consider the retrieved papers as potential references (when available)\n3. Consider the surrounding text, research area, and topic\n4. Generate realistic and relevant reference titles that would fit the context\n5. Provide detailed reasoning for each prediction to prevent hallucination\n6. Output format: JSON object with \"citations\" array\n7. Generate exactly 40 most relevant reference titles for each [ref]\n8. Ensure titles are realistic and appropriate for the research area\n9. Include reasoning that explains why each title is relevant to the specific [ref] context\n10. Use proper JSON escaping for special characters (escape quotes with \\\")\n11. Ensure all strings are properly quoted and escaped\n\nEXAMPLE:\nInput:\n\"Federated Learning aims to train models in massively distributed networks [ref]38 at a large scale [ref]5, over multiple sources of heterogeneous data [ref]30.\"\n\nRetrieved papers (top {top_r}):\n1. Title: Communication-efficient learning of deep networks from decentralized data\n   Abstract: We report on a series of experiments with federated learning systems for decentralized data training.\n\n2. Title: Federated Learning: Challenges, Methods, and Future Directions\n   Abstract: A comprehensive survey of federated learning approaches and challenges in distributed settings.\n\nOutput:\n{\n  \"citations\": [\n    {\n      \"ref_index\": 38,\n      \"titles\": [\n        \"Communication-efficient learning of deep networks from decentralized data\",\n        \"Federated Learning: Challenges, Methods, and Future Directions\",\n        \"Federated optimization in heterogeneous networks\",\n        \"Towards federated learning at scale: System design\",\n        \"A performance evaluation of federated learning algorithms\",\n        \"Distributed machine learning: A survey\",\n        \"Communication protocols for distributed learning\",\n        \"Scalable federated learning systems\",\n        \"Efficient distributed training algorithms\",\n        \"Large-scale distributed learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]38 appears in the context of 'massively distributed networks' for federated learning, so it likely refers to foundational papers on federated learning systems, distributed training, and communication-efficient methods in distributed networks.\"\n    },\n    {\n      \"ref_index\": 5,\n      \"titles\": [\n        \"Bagging predictors\",\n        \"Ensemble methods in machine learning\",\n        \"Random forests for classification\",\n        \"Bootstrap methods and their application\",\n        \"Combining multiple classifiers\",\n        \"Large-scale machine learning systems\",\n        \"Distributed ensemble methods\",\n        \"Scalable classification algorithms\",\n        \"Massive data processing techniques\",\n        \"High-performance machine learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]5 appears in the context of 'at a large scale', suggesting it refers to papers on scaling machine learning methods, ensemble techniques, or methods that can handle large-scale data and distributed settings.\"\n    },\n    {\n      \"ref_index\": 30,\n      \"titles\": [\n        \"Learning fair representations\",\n        \"Fair machine learning: A survey\",\n        \"Bias in machine learning systems\",\n        \"Addressing fairness in AI systems\",\n        \"Fair representation learning\",\n        \"Heterogeneous data handling methods\",\n        \"Multi-source learning algorithms\",\n        \"Cross-domain representation learning\",\n        \"Fair learning from diverse data\",\n        \"Bias mitigation in heterogeneous datasets\"\n      ],\n      \"reasoning\": \"This [ref]30 appears in the context of 'heterogeneous data' and 'fair representation learning', indicating it likely refers to papers on heterogenous data handling, bias mitigation, and learning representations that are fair across different data distributions.\"\n    }\n  ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped.\n\nIMPORTANT NOTES ON REASONING:\n- The reasoning field is crucial for preventing hallucination\n- Each reasoning should be specific to the context around the [ref] marker\n- Explain the connection between the predicted titles and the research topic\n- This helps validate that predictions are grounded in the actual content\n- Reasoning should be concise but informative (2-3 sentences)\n- Consider retrieved papers when available to improve prediction accuracy"
    },
    {
      "role": "user",
      "content": "Paper Title: APPROXIMATING THE SMALLEST 𝐾-ENCLOSING GEODESIC DISC IN A SIMPLE POLYGONThis research was funded in part by the Natural Sciences and Engineering Research Council of Canada (NSERC). A preliminary version of this paper appeared in WADS 2023 [16]. A full version of this paper also appeared as a chapter in Anthony D’Angelo’s thesis [24]. This paper has undergone minor corrections since publication.\n\nPaper Abstract: \n\nPaper Section Text:\nIn this section we present an exact algorithm for the SKEG disc\nproblem that uses higher-order geodesic Voronoi diagrams to find the\nexact solution.\nOmitted details appear in Appendix C. Rather than working with our m𝑚m-gon,\nwe use the polygon simplification algorithm of\nAichholzer et al.  to transform Pi​nsubscript𝑃𝑖𝑛P_{in} into\na simple polygon P⊇Pi​nsubscript𝑃𝑖𝑛𝑃P\\supseteq P_{in} of size O​(r)𝑂𝑟O(r) in O​(m)𝑂𝑚O(m) time and space\nsuch that P𝑃P preserves the visibility of points in Pi​nsubscript𝑃𝑖𝑛P_{in},\nas well as their shortest paths.\nThe reflex vertices\nin Pi​nsubscript𝑃𝑖𝑛P_{in} also appear in P𝑃P.\nWe again assume that S𝑆S is in general position with respect to P𝑃P.\nThe polygon simplification allows the running time of the\nalgorithm to depend on the number of reflex vertices of Pi​nsubscript𝑃𝑖𝑛P_{in} rather\nthan the total number of vertices of Pi​nsubscript𝑃𝑖𝑛P_{in}.\nThus, the algorithm runs faster on polygons with fewer\nreflex vertices. For k≤n−1𝑘𝑛1k\\leq n-1 we use the shortest-path data structure of\nGuibas and Hershberger  .\nThis shortest-path data structure can be built in\nO​(r)𝑂𝑟O(r) time and space\n(since we have linear-time polygon triangulation\nalgorithms [ref]7 )\nand, given any two query points in the polygon,\nreturns a tree of\nO​(log⁡r)𝑂𝑟O(\\log r)\nheight in O​(log⁡r)𝑂𝑟O(\\log r) time\nrepresenting the shortest path\nbetween the two query points as well as the length of this path.\nThe in-order traversal of this tree gives the shortest path.\nThe data structure uses additional O​(log⁡r)𝑂𝑟O(\\log r) space to build the\nresult of the query (i.e., the tree) by linking together precomputed\nstructures.\nGiven the result of a query, we can perform a search through\nthis tree to find the midpoint of the shortest path in\nO​(log⁡r)𝑂𝑟O(\\log r) time\n[55, Lemma 333],\nor traverse the resulting tree to a leaf to get\nthe first or last edge of the path in O​(log⁡r)𝑂𝑟O(\\log r) time. Higher-order Voronoi diagrams have been considered to\nsolve the smallest k𝑘k-enclosing disc problem in the plane\n[ref]3 .\nThis approach can be generalized to a point set S𝑆S contained in\nsimple polygons,\nbut it requires computing the order-k𝑘k geodesic Voronoi diagram\n(OKGVD),999Stated briefly, the order-k𝑘k Voronoi diagram\nis a generalization of the Voronoi\ndiagram such that each face is the locus of points whose\nk𝑘k nearest neighbours are the k𝑘k points of S𝑆S\nassociated with (i.e., that define) the face.\nor the order-(k−1𝑘1k-1) and order-(k−2)𝑘2(k-2) diagrams. The order-111 and the order-(n−1)𝑛1(n-1) geodesic Voronoi diagrams\n(a.k.a., the nearest-point and farthest-point geodesic Voronoi diagrams, respectively)\nhave complexity Θ​(n+r)Θ𝑛𝑟\\Theta(n+r)  .\nThere is an algorithm for the geodesic nearest-point Voronoi diagram\nthat runs in O​(n​log⁡n+r)𝑂𝑛𝑛𝑟O(n\\log n+r) time and uses\nO​(n​log⁡n+r)𝑂𝑛𝑛𝑟O(n\\log n+r)\nspace\n, and one for the\nfarthest-point diagram that runs in\nO​(n​log⁡n+r)𝑂𝑛𝑛𝑟O(n\\log n+r) time and uses Θ​(n+r)Θ𝑛𝑟\\Theta(n+r) space\n 5. Oh and Ahn  showed that the complexity\nof the\nOKGVD\nof n𝑛n points in a simple r𝑟r-gon is\nΘ​(k​(n−k)+min⁡(k​r,r​(n−k)))Θ𝑘𝑛𝑘𝑘𝑟𝑟𝑛𝑘\\Theta(k(n-k)+\\min(kr,r(n-k))).\nThe fastest algorithms to compute the OKGVD\nare the one by Oh and Ahn  that runs in time\nO​(k2​n​log⁡n​log2⁡r+min⁡(k​r,r​(n−k)))𝑂superscript𝑘2𝑛𝑛superscript2𝑟𝑘𝑟𝑟𝑛𝑘O(k^{2}n\\log n\\log^{2}r+\\min(kr,r(n-k))),\nand the one by Liu and Lee  that runs in\nO​(k2​n​log⁡n+k2​r​log⁡r)𝑂superscript𝑘2𝑛𝑛superscript𝑘2𝑟𝑟O(k^{2}n\\log n+k^{2}r\\log r)\ntime.\nThey both use Ω​(k​(n−k)+min⁡(k​r,r​(n−k)))Ω𝑘𝑛𝑘𝑘𝑟𝑟𝑛𝑘\\Omega(k(n-k)+\\min(kr,r(n-k)))\nspace (which is\nΩ​(n+r)Ω𝑛𝑟\\Omega(n+r)\nfor constant k𝑘k or k𝑘k close to n𝑛n\nand\nΩ​(k​n+k​r)=Ω​(n2+n​r)Ω𝑘𝑛𝑘𝑟Ωsuperscript𝑛2𝑛𝑟\\Omega(kn+kr)=\\Omega(n^{2}+nr)\nfor k𝑘k a constant fraction of n𝑛n). When using the order-k𝑘k diagram to find a SKEG disc, the approach is to traverse the diagram\nand, for each face, compute the geodesic centre of the k𝑘k points that define\nthe face (either by using the approach of Oh and Ahn [47, Lemma 3.93.93.9],\nor by computing C​Hg𝐶subscript𝐻𝑔CH_{g} for the points and then computing the geodesic centre\nof C​Hg𝐶subscript𝐻𝑔CH_{g}).\nWhile computing the geodesic centre for the k𝑘k points that define a face,\nwe also find one of these k𝑘k points farthest from this centre.\nAs such, we can then get the radius of a SKEG disc for these points in O​(log⁡r)𝑂𝑟O(\\log r)\ntime using shortest-path queries.\nA solution to the SKEG disc problem is then the smallest of these discs. Assuming general positioning,\na\nSKEG\ndisc has either two or three points of S𝑆S\non its boundary. The second approach for computing a SKEG disc with geodesic Voronoi diagrams\ncomputes the order-(k−1𝑘1k-1) and order-(k−2)𝑘2(k-2) diagrams.\nIf there are three points of S𝑆S on the boundary of a SKEG disc, then\nthe centre of a SKEG disc is a Voronoi vertex of the order-(k−2)𝑘2(k-2) diagram\nand the radius is the geodesic distance from that Voronoi vertex to the\npoints of S𝑆S that define it.\nGiven the order-(k−2)𝑘2(k-2) diagram, we traverse it and compute a SKEG disc\nfor the k𝑘k points defining each Voronoi vertex in O​(log⁡r)𝑂𝑟O(\\log r) time each\n(i.e., the three faces adjacent to a given Voronoi vertex will be defined by k𝑘k\ndistinct points of S𝑆S, and the SKEG disc for those points will be the geodesic disc\ncentred at the Voronoi vertex and whose radius is the distance to any one of the three points\nof S𝑆S that defined the vertex).\nIf there are two points of S𝑆S on the boundary of a SKEG disc,\nthen the centre of a SKEG disc lies along a Voronoi edge of the order-(k−1𝑘1k-1) diagram,\nmore specifically at the midpoint of the shortest path between the two points of S𝑆S that defined\nthe geodesic bisector defining the Voronoi edge.\nGiven the order-(k−1)𝑘1(k-1) diagram, we traverse it and compute a SKEG disc for\nthe k𝑘k points defining each Voronoi edge in O​(log⁡r)𝑂𝑟O(\\log r) time each\n(i.e., the two faces adjacent to a given Voronoi edge will be defined by k𝑘k\ndistinct points of S𝑆S, and the SKEG disc for those points will be the geodesic\ndisc centred at the midpoint of the aforementioned shortest path\nand whose radius is half the length of said shortest path).\nThe smallest computed disc is a SKEG disc for the points of S𝑆S. When k=n−1𝑘𝑛1k=n-1, it is more efficient to use the order-k𝑘k\ndiagram to solve the SKEG disc problem.\nOtherwise, for 1<k<n−11𝑘𝑛11<k<n-1,\nit is more efficient to use the order-(k−1𝑘1k-1) and\norder-(k−2)𝑘2(k-2) diagrams to solve the SKEG disc problem. Given an integer 1<k≤n1𝑘𝑛1<k\\leq n,\na SKEG disc of the points of S𝑆S\ncan be computed in: \n\n\n\n\nk𝑘k\nTime\nSpace\n\n\n\nn𝑛n\nO​(n​log⁡n+m)𝑂𝑛𝑛𝑚O(n\\log n+m)\nΘ​(n+m)Θ𝑛𝑚\\Theta(n+m)\n\nn−1𝑛1n-1\nif k​log⁡k​log2⁡r∈O​(r)𝑘𝑘superscript2𝑟𝑂𝑟k\\log k\\log^{2}r\\in O(r)\n\n\n   • O​(n​r​log⁡n​log2⁡r+m)𝑂𝑛𝑟𝑛superscript2𝑟𝑚O(nr\\log n\\log^{2}r+m)\nΘ​(n+m)Θ𝑛𝑚\\Theta(n+m)\n\nelse\n\n\n   • O​(n2​log⁡n+n2​log⁡r+n​r​log⁡n+n​r​log⁡r+r2+m)𝑂superscript𝑛2𝑛superscript𝑛2𝑟𝑛𝑟𝑛𝑛𝑟𝑟superscript𝑟2𝑚O(n^{2}\\log n+n^{2}\\log r+nr\\log n+nr\\log r+r^{2}+m)\n\n\n222\nO​(n​log⁡n+r​log⁡r+m)𝑂𝑛𝑛𝑟𝑟𝑚O(n\\log n+r\\log r+m)\nO​(n​log⁡n+m)𝑂𝑛𝑛𝑚O(n\\log n+m)\n\nelse\nif n​log⁡n​log⁡r∈O​(r)𝑛𝑛𝑟𝑂𝑟n\\log n\\log r\\in O(r)\nΩ(k(n−k)\\Omega(k(n-k)\n\n   • O​(k2​n​log⁡n​log2⁡r+min⁡(r​k,r​(n−k))​log⁡r+m)𝑂superscript𝑘2𝑛𝑛superscript2𝑟𝑟𝑘𝑟𝑛𝑘𝑟𝑚O(k^{2}n\\log n\\log^{2}r+\\min(rk,r(n-k))\\log r+m)\n   +min⁡(r​k,r​(n−k))𝑟𝑘𝑟𝑛𝑘+\\min(rk,r(n-k))\n\nelse\n   +m)+m)\n\n   • O(k2nlogn+k2rlogr+k(n−k)logr+O(k^{2}n\\log n+k^{2}r\\log r+k(n-k)\\log r+\n\n\n     min(kr,r(n−k))logr+m)\\min(kr,r(n-k))\\log r+m)\n\n\n Ignoring polylogarithmic factors,\nthe worst-case runtime\nfor k={2,n}𝑘2𝑛k=\\{2,n\\} is O​(n+m)𝑂𝑛𝑚O(n+m);\nfor k=n−1𝑘𝑛1k=n-1: if k​log⁡k​log2⁡r∈O​(r)𝑘𝑘superscript2𝑟𝑂𝑟k\\log k\\log^{2}r\\in O(r) is\nO​(n​r+m)𝑂𝑛𝑟𝑚O(nr+m),\nelse, is\nO​(n2+n​r+r2+m)𝑂superscript𝑛2𝑛𝑟superscript𝑟2𝑚O(n^{2}+nr+r^{2}+m);\nfor k<n−1𝑘𝑛1k<n-1: if n​log⁡n​log⁡r∈O​(r)𝑛𝑛𝑟𝑂𝑟n\\log n\\log r\\in O(r)\nis O​(k2​n+min⁡(r​k,r​(n−k))+m)𝑂superscript𝑘2𝑛𝑟𝑘𝑟𝑛𝑘𝑚O(k^{2}n+\\min(rk,r(n-k))+m),\nand O​(k2​n+k2​r+min⁡(k​r,r​(n−k))+m)𝑂superscript𝑘2𝑛superscript𝑘2𝑟𝑘𝑟𝑟𝑛𝑘𝑚O(k^{2}n+k^{2}r+\\min(kr,r(n-k))+m) otherwise. Omitted details appear in Appendix C. When k=n𝑘𝑛k=n, the SKEG disc problem is the same as the problem of\ncomputing the geodesic centre of a set of points inside a simple polygon. We can use the order-111 geodesic Voronoi diagram\nwhen k=2𝑘2k=2.\nConsidering the preprocessing time, the construction time,\nand the time to traverse the diagram performing the\nappropriate O​(log⁡r)𝑂𝑟O(\\log r)-time queries, we can solve the SKEG disc problem\nin O​(n​log⁡n+r​log⁡r+m)𝑂𝑛𝑛𝑟𝑟𝑚O(n\\log n+r\\log r+m) time (simplified from O​(n​log⁡n+n​log⁡r+r​log⁡r+m)𝑂𝑛𝑛𝑛𝑟𝑟𝑟𝑚O(n\\log n+n\\log r+r\\log r+m)). The farthest-point geodesic Voronoi\ndiagram is the same as the order-(n−1)𝑛1(n-1) diagram.\nWhen k=n−1𝑘𝑛1k=n-1,\nit is more efficient to compute a SKEG disc using the farthest-point\ngeodesic Voronoi diagram and,\nfor each face,\ncompute the geodesic centre of the n−1𝑛1n-1 closest points.\nOh and Ahn [47, Lemma 3.93.93.9] presented a method to find\nthe geodesic centre of k𝑘k points in\nO​(k​log⁡k​log2⁡r)𝑂𝑘𝑘superscript2𝑟O(k\\log k\\log^{2}r) time and O​(k+r)𝑂𝑘𝑟O(k+r) space.\nThe other method for computing the appropriate geodesic centres is to\nfirst compute C​Hg𝐶subscript𝐻𝑔CH_{g} for the k𝑘k points defining each face, and then compute\nthe geodesic centre of the weakly simple polygon formed by the C​Hg𝐶subscript𝐻𝑔CH_{g}.\nThe time for the Oh and Ahn approach (i.e., O​(k​log⁡k​log2⁡r)𝑂𝑘𝑘superscript2𝑟O(k\\log k\\log^{2}r)) always dominates\nthe time to compute C​Hg𝐶subscript𝐻𝑔CH_{g} (i.e., O​(k​log⁡r+k​log⁡k)𝑂𝑘𝑟𝑘𝑘O(k\\log r+k\\log k)).\nThus, the Oh and Ahn approach is only more efficient for\ncomputing the geodesic centres of the requisite points when its runtime\nis dominated by the time to compute the geodesic centre of C​Hg𝐶subscript𝐻𝑔CH_{g}.\nAs has already been mentioned,\nthe time to compute the geodesic centre of a weakly simple polygon is linear in its\nsize.\nThe size of C​Hg𝐶subscript𝐻𝑔CH_{g} of the k𝑘k points of S𝑆S defining\na face of the OKGVD is O​(r+k)𝑂𝑟𝑘O(r+k).\nConsequently, the Oh and Ahn [47, Lemma 3.93.93.9] approach is more efficient when\nk​log⁡k​log2⁡r∈O​(r)𝑘𝑘superscript2𝑟𝑂𝑟k\\log k\\log^{2}r\\in O(r).\nPerforming this computation for each face of the OKGVD,\nwe spend O​((r+n)⋅k​log⁡k​log2⁡r)𝑂⋅𝑟𝑛𝑘𝑘superscript2𝑟O((r+n)\\cdot k\\log k\\log^{2}r) time over all faces\nand O​(r+n)𝑂𝑟𝑛O(r+n) space.\nSubstituting k=n−1𝑘𝑛1k=n-1, noting that k​log⁡k​log2⁡r∈O​(r)𝑘𝑘superscript2𝑟𝑂𝑟k\\log k\\log^{2}r\\in O(r)\nmeans n∈O​(r)𝑛𝑂𝑟n\\in O(r),\nand considering the preprocessing,\nthe time we use is O​(n​r​log⁡n​log2⁡r+m)𝑂𝑛𝑟𝑛superscript2𝑟𝑚O(nr\\log n\\log^{2}r+m). Otherwise, for k=n−1𝑘𝑛1k=n-1 it is more efficient to\ncompute C​Hg𝐶subscript𝐻𝑔CH_{g} of the k𝑘k points of S𝑆S associated\nwith each face of the diagram to obtain weakly simple polygons,\nand then compute the geodesic centre of each of\nthose geodesic convex hulls.\nWe spend\nO​(r+n)⋅O​(k​log⁡r+k​log⁡k)⋅𝑂𝑟𝑛𝑂𝑘𝑟𝑘𝑘O(r+n)\\cdot O(k\\log r+k\\log k)\ntime to compute C​Hg𝐶subscript𝐻𝑔CH_{g} of each subset of k𝑘k points\nthat defines a face;\nthen we compute the geodesic centres in\nO​(r+n)⋅O​(r+k)⋅𝑂𝑟𝑛𝑂𝑟𝑘O(r+n)\\cdot O(r+k) time\nand O​(r+n)𝑂𝑟𝑛O(r+n) space.\nSubstituting\nk=n−1𝑘𝑛1k=n-1 and considering the preprocessing cost,\nthe time used becomes O​(n2​log⁡n+n2​log⁡r+n​r​log⁡n+n​r​log⁡r+r2+m)𝑂superscript𝑛2𝑛superscript𝑛2𝑟𝑛𝑟𝑛𝑛𝑟𝑟superscript𝑟2𝑚O(n^{2}\\log n+n^{2}\\log r+nr\\log n+nr\\log r+r^{2}+m). For 1<k<n−11𝑘𝑛11<k<n-1, it suffices\nto compute the order-(k−2)𝑘2(k-2) and order-(k−1)𝑘1(k-1) geodesic Voronoi diagrams\nand consider: the vertices of the order-(k−2)𝑘2(k-2) diagram;\nand the midpoints of the shortest paths\nbetween the points defining edges shared by adjacent cells\nof the order-(k−1)𝑘1(k-1) diagram. Oh and Ahn  showed that the complexity\nof the\nOKGVD\nof n𝑛n points in a simple r𝑟r-gon is\nΘ​(k​(n−k)+min⁡(k​r,r​(n−k)))Θ𝑘𝑛𝑘𝑘𝑟𝑟𝑛𝑘\\Theta(k(n-k)+\\min(kr,r(n-k))).\nThe fastest algorithms to compute the OKGVD\nare the one by Oh and Ahn  that runs in time\nO​(k2​n​log⁡n​log2⁡r+min⁡(k​r,r​(n−k)))𝑂superscript𝑘2𝑛𝑛superscript2𝑟𝑘𝑟𝑟𝑛𝑘O(k^{2}n\\log n\\log^{2}r+\\min(kr,r(n-k))),\nand the one by Liu and Lee  that runs in\nO​(k2​n​log⁡n+k2​r​log⁡r)𝑂superscript𝑘2𝑛𝑛superscript𝑘2𝑟𝑟O(k^{2}n\\log n+k^{2}r\\log r)\ntime.\nThey both use Ω​(k​(n−k)+min⁡(k​r,r​(n−k)))Ω𝑘𝑛𝑘𝑘𝑟𝑟𝑛𝑘\\Omega(k(n-k)+\\min(kr,r(n-k)))\nspace (which is\nΩ​(n+r)Ω𝑛𝑟\\Omega(n+r)\nfor constant k𝑘k or k𝑘k close to n𝑛n\nand\nΩ​(k​n+k​r)=Ω​(n2+n​r)Ω𝑘𝑛𝑘𝑟Ωsuperscript𝑛2𝑛𝑟\\Omega(kn+kr)=\\Omega(n^{2}+nr)\nfor k𝑘k a constant fraction of n𝑛n).\nThe algorithm of Oh and Ahn \nis more efficient when n​log⁡n​log⁡r∈O​(r)𝑛𝑛𝑟𝑂𝑟n\\log n\\log r\\in O(r),\nwhich means the algorithm of Liu and Lee \nis more efficient the rest of the time.\nUsing shortest-path queries\nwe traverse the diagrams in\nO​(k​(n−k)+min⁡(k​r,r​(n−k)))⋅O​(log⁡r)⋅𝑂𝑘𝑛𝑘𝑘𝑟𝑟𝑛𝑘𝑂𝑟O(k(n-k)+\\min(kr,r(n-k)))\\cdot O(\\log r) time\nwhile\ncomparing the candidates from the edges\nand vertices.\nThus, for n​log⁡n​log⁡r∈O​(r)𝑛𝑛𝑟𝑂𝑟n\\log n\\log r\\in O(r),\nthe time used including preprocessing is O​(k2​n​log⁡n​log2⁡r+min⁡(k​r,r​(n−k))​log⁡r+m)𝑂superscript𝑘2𝑛𝑛superscript2𝑟𝑘𝑟𝑟𝑛𝑘𝑟𝑚O(k^{2}n\\log n\\log^{2}r+\\min(kr,r(n-k))\\log r+m).\nOtherwise, the time including preprocessing is\nO​(k2​n​log⁡n+k2​r​log⁡r+k​(n−k)​log⁡r+min⁡(k​r,r​(n−k))​log⁡r+m)𝑂superscript𝑘2𝑛𝑛superscript𝑘2𝑟𝑟𝑘𝑛𝑘𝑟𝑘𝑟𝑟𝑛𝑘𝑟𝑚O(k^{2}n\\log n+k^{2}r\\log r+k(n-k)\\log r+\\min(kr,r(n-k))\\log r+m).\n∎ The main result of our paper is an improvement in the\nruntime for computing a SKEG disc (Theorem 1),\nbut it comes\nat the expense of a 222-approximation.\nThis is summarized in\nSection 1.\nThe runtime of Section 1\nis derived by balancing the runtimes of two algorithms:\n1\n(a random sampling algorithm\ndescribed in Section 2)\nand\n3\n(a Divide-and-Conquer algorithm described\nin Section 3). Ignoring polylogarithmic factors,\nthe expected runtime of the approximation\nalgorithm of\nSection 1 is O​(n+m)𝑂𝑛𝑚O(n+m),\nmatching the exact approach for k={2,n}𝑘2𝑛k=\\{2,n\\}.\nThe approximation algorithm of Section 1\nis roughly expected to be\nfaster by a factor of k𝑘k or r𝑟r for k=n−1𝑘𝑛1k=n-1,\nand a factor of k2superscript𝑘2k^{2} otherwise.\nFor example, if k∈Ω​(n)𝑘Ω𝑛k\\in\\Omega(n) and k<n−1𝑘𝑛1k<n-1,\ncompare O​(n+m)𝑂𝑛𝑚O(n+m) to:\nO​(n3+r+m)𝑂superscript𝑛3𝑟𝑚O(n^{3}+r+m) for k𝑘k close to n𝑛n,\nor O​(n3+n​r+m)𝑂superscript𝑛3𝑛𝑟𝑚O(n^{3}+nr+m) for k𝑘k a fraction of n𝑛n;\nand O​(n3+n2​r+m)𝑂superscript𝑛3superscript𝑛2𝑟𝑚O(n^{3}+n^{2}r+m). Section 4 shows\nhow to use a randomized iterative search as\nthe merge step in Section 3\nto compute a 222-approximation.\nWe summarize our results in Section 5.\nAppendix A illustrates an example where the\ndoubling dimension in the geodesic setting is proportional to the\nnumber of reflex vertices of the simple polygon being considered;\nAppendix B provides an example where the geodesic\nbisector of two points in a simple polygon\ncrosses a chord of that polygon multiple times;\nAppendix C provides omitted details detailing the exact algorithm\nthat uses geodesic Voronoi diagrams (i.e., the approach described in this section)\nand the calculation of the runtimes presented in Theorem 1;\nAppendix D provides details omitted from the section describing the Divide-and-Conquer\nalgorithm presented in this paper (i.e., the algorithm from Section 3);\nAppendix E provides details omitted from the discussion in Section 5.1 about\nusing k𝑘k-nearest neighbour queries in our algorithms;\nand Appendix F provides pseudocode for the algorithms described\nin the remainder of this paper.\n\nReference markers found: [7]\n\nContext windows for each [ref]:\n[ref]7: the shortest-path data structure of\nGuibas and Hershberger  .\nThis shortest-path data structure can be built in\nO​(r)𝑂𝑟O(r) time and space\n(since we have linear-time polygon triangulation\nalgorithms [ref]7 )\nand, given any two query points in the polygon,\nreturns a tree of\nO​(log⁡r)𝑂𝑟O(\\log r)\nheight in O​(log⁡r)𝑂𝑟O(\\log r) time\nrepresenting the shortest path\nbetween the two query points as well\n\n{retrieved_text}\n\nGenerate exactly 40 most likely reference titles for each [ref] marker. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL REQUIREMENTS:\n1. For each [ref] marker, provide detailed reasoning explaining why the predicted titles are relevant\n2. The reasoning should analyze the specific context around each [ref] marker\n3. Explain how each title connects to the research topic, methodology, or problem being discussed\n4. This reasoning helps prevent hallucination by grounding predictions in the actual context\n5. Consider retrieved papers when available to improve prediction accuracy\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"citations\": [\n        {\n            \"ref_index\": 38,\n            \"titles\": [\n                \"Reference Title 1\",\n                \"Reference Title 2\",\n                \"Reference Title 3\",\n                \"Reference Title 4\",\n                \"Reference Title 40\"\n            ],\n            \"reasoning\": \"Detailed explanation of why these titles are relevant to [ref]38 based on the surrounding context, research area, and specific topic being discussed.\"\n        }\n    ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped. Do not include authors, venues, or years - only the paper titles. Generate exactly 40 titles for each [ref] marker with reasoning."
    },
    {
      "role": "assistant",
      "content": "{\n    \"citations\": [\n        {\n            \"ref_index\": 7,\n            \"titles\": [\n                \"Dynamic Geodesic Nearest Neighbor Searching in a Simple Polygon\",\n                \"Improved Dynamic Geodesic Nearest Neighbor Searching in a Simple Polygon\",\n                \"Finding k points with minimum diameter and related problems\",\n                \"A linear-time algorithm for the geodesic center of a simple polygon\",\n                \"Geodesic-preserving polygon simplification\",\n                \"Fast deterministic selection\",\n                \"Linear-time triangulation of a simple polygon made easier via randomization\",\n                \"On the geodesic voronoi diagram of point sites in a simple polygon\",\n                \"The furthest-site geodesic voronoi diagram\",\n                \"Computing the geodesic center of a simple polygon\",\n                \"Computing the geodesic centers of a polygonal domain\",\n                \"Optimal algorithm for geodesic farthest-point voronoi diagrams\",\n                \"Time bounds for selection\",\n                \"Geodesic disks and clustering in a simple polygon\",\n                \"Approximating the smallest k-enclosing geodesic disc in a simple polygon\",\n                \"Computing the constrained euclidean geodesic and link center of a simple polygon with application\",\n                \"Geometric applications of a randomized optimization technique\",\n                \"A theorem on polygon cutting with applications\",\n                \"Triangulating a simple polygon in linear time\",\n                \"Visibility and intersection problems in plane geometry\",\n                \"Routing past unions of disjoint linear barriers\",\n                \"Introduction to Algorithms, 3rd Edition\",\n                \"Constrained Geometric Optimization Problems\",\n                \"Static and dynamic algorithms for k-point clustering problems\",\n                \"Dynamic Data Structures for 𝑘-Nearest Neighbor Queries\",\n                \"Applications of the theory of records in the study of random trees\",\n                \"Computing the smallest k-enclosing circle and related problems\",\n                \"Iterated nearest neighbors and finding minimal polytopes\",\n                \"Optimal shortest path queries in a simple polygon\",\n                \"Linear-time algorithms for visibility and shortest path problems inside triangulated simple polygons\",\n                \"Geometric approximation algorithms, volume 173\",\n                \"Fast algorithms for computing the smallest k-enclosing circle\",\n                \"Lectures on analysis on metric spaces\",\n                \"A new data structure for shortest path queries in a simple polygon\",\n                \"Optimal search in planar subdivisions\",\n                \"Euclidean shortest paths in the presence of rectilinear barriers\",\n                \"A Nearly Optimal Algorithm for the Geodesic Voronoi Diagram of Points in a Simple Polygon\",\n                \"Higher-order geodesic voronoi diagrams in a polygonal domain with holes\",\n                \"An algorithm for planning collision-free paths among polyhedral obstacles\",\n                \"The geodesic edge center of a simple polygon\"\n            ],\n            \"reasoning\": \"Selected these 40 citations for [ref]7 based on the context and research area of APPROXIMATING THE SMALLEST 𝐾-ENCLOSING GEODESIC DISC IN A SIMPLE POLYGONThis research was funded in part by the Natural Sciences and Engineering Research Council of Canada (NSERC). A preliminary version of this paper appeared in WADS 2023 [16]. A full version of this paper also appeared as a chapter in Anthony D’Angelo’s thesis [24]. This paper has undergone minor corrections since publication.. The first title is the actual reference for this marker, followed by other relevant papers from the same research domain.\"\n        }\n    ]\n}"
    }
  ],
  "format": "chatml"
}