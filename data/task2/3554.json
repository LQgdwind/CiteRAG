{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic citation prediction expert. Your task is to predict the most likely citations for [ref] markers in academic paper sections based on the paper content and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract + section text with [ref] markers\n- Output: top {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nTASK DESCRIPTION:\n- Input: Paper section text with [ref] markers + retrieved relevant papers\n- Output: top 40 predicted reference titles for each [ref] marker with reasoning\n- Format: JSON object with \"citations\" array containing objects with \"ref_index\", \"titles\", and \"reasoning\" fields\n\nREQUIREMENTS:\n1. Analyze the context around each [ref] marker to understand what reference is needed\n2. Consider the retrieved papers as potential references (when available)\n3. Consider the surrounding text, research area, and topic\n4. Generate realistic and relevant reference titles that would fit the context\n5. Provide detailed reasoning for each prediction to prevent hallucination\n6. Output format: JSON object with \"citations\" array\n7. Generate exactly 40 most relevant reference titles for each [ref]\n8. Ensure titles are realistic and appropriate for the research area\n9. Include reasoning that explains why each title is relevant to the specific [ref] context\n10. Use proper JSON escaping for special characters (escape quotes with \\\")\n11. Ensure all strings are properly quoted and escaped\n\nEXAMPLE:\nInput:\n\"Federated Learning aims to train models in massively distributed networks [ref]38 at a large scale [ref]5, over multiple sources of heterogeneous data [ref]30.\"\n\nRetrieved papers (top {top_r}):\n1. Title: Communication-efficient learning of deep networks from decentralized data\n   Abstract: We report on a series of experiments with federated learning systems for decentralized data training.\n\n2. Title: Federated Learning: Challenges, Methods, and Future Directions\n   Abstract: A comprehensive survey of federated learning approaches and challenges in distributed settings.\n\nOutput:\n{\n  \"citations\": [\n    {\n      \"ref_index\": 38,\n      \"titles\": [\n        \"Communication-efficient learning of deep networks from decentralized data\",\n        \"Federated Learning: Challenges, Methods, and Future Directions\",\n        \"Federated optimization in heterogeneous networks\",\n        \"Towards federated learning at scale: System design\",\n        \"A performance evaluation of federated learning algorithms\",\n        \"Distributed machine learning: A survey\",\n        \"Communication protocols for distributed learning\",\n        \"Scalable federated learning systems\",\n        \"Efficient distributed training algorithms\",\n        \"Large-scale distributed learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]38 appears in the context of 'massively distributed networks' for federated learning, so it likely refers to foundational papers on federated learning systems, distributed training, and communication-efficient methods in distributed networks.\"\n    },\n    {\n      \"ref_index\": 5,\n      \"titles\": [\n        \"Bagging predictors\",\n        \"Ensemble methods in machine learning\",\n        \"Random forests for classification\",\n        \"Bootstrap methods and their application\",\n        \"Combining multiple classifiers\",\n        \"Large-scale machine learning systems\",\n        \"Distributed ensemble methods\",\n        \"Scalable classification algorithms\",\n        \"Massive data processing techniques\",\n        \"High-performance machine learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]5 appears in the context of 'at a large scale', suggesting it refers to papers on scaling machine learning methods, ensemble techniques, or methods that can handle large-scale data and distributed settings.\"\n    },\n    {\n      \"ref_index\": 30,\n      \"titles\": [\n        \"Learning fair representations\",\n        \"Fair machine learning: A survey\",\n        \"Bias in machine learning systems\",\n        \"Addressing fairness in AI systems\",\n        \"Fair representation learning\",\n        \"Heterogeneous data handling methods\",\n        \"Multi-source learning algorithms\",\n        \"Cross-domain representation learning\",\n        \"Fair learning from diverse data\",\n        \"Bias mitigation in heterogeneous datasets\"\n      ],\n      \"reasoning\": \"This [ref]30 appears in the context of 'heterogeneous data' and 'fair representation learning', indicating it likely refers to papers on heterogenous data handling, bias mitigation, and learning representations that are fair across different data distributions.\"\n    }\n  ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped.\n\nIMPORTANT NOTES ON REASONING:\n- The reasoning field is crucial for preventing hallucination\n- Each reasoning should be specific to the context around the [ref] marker\n- Explain the connection between the predicted titles and the research topic\n- This helps validate that predictions are grounded in the actual content\n- Reasoning should be concise but informative (2-3 sentences)\n- Consider retrieved papers when available to improve prediction accuracy"
    },
    {
      "role": "user",
      "content": "Paper Title: AgileWatts: An Energy-Efficient CPU Core Idle-State Architecture for Latency-Sensitive Server Applications\n\nPaper Abstract: \n\nPaper Section Text:\nWe provide a brief overview of different power management components and techniques used in modern processors. Server and Client Cores.\nMajor server vendors have nearly the same\ncore microarchitecture for client and server CPUs.\nFor example, Intel CPU core design is a single development project\nthat has two derivatives, one for server and one for client CPUs . Fig. 1 shows the AVX and L2 extension of the Intel Skylake server core over the client core . Clock Distribution Network (CDN).\nA CDN distributes the signals from a common point (e.g., clock generator) to all the elements in the system that need it.\nModern processors use an all-digital phase-locked loop (ADPLL) to generate the CPU core clock . An ADPLL maintains high performance with significantly less power as compared to conventional PLLs. For example, the power of an ADPLL in Skylake, shown at the bottom right of Fig. 1, is only 7​m​W7𝑚𝑊7mW at 4​G​H​z4𝐺𝐻𝑧4GHz . Power Delivery Network (PDN).\nThe three commonly-used PDNs in modern CPUs are: 1) integrated voltage regulator (IVR)    ,\n2) motherboard voltage regulator (MBVR)   ,\nand 3) low dropout voltage regulator (LDO VR)     .\nFor example, recent Intel server CPUs implement a fully-integrated voltage regulator (FIVR) per core, as shown at the bottom right of Fig. 1   . Staggered Power-gate Wake-up.\nPower-gating is a\ntechnique that is used to eliminate leakage of idle circuits [ref]47 [ref]8  . Typically, the wake-up latency from a power-gated state requires a few to tens of cycles  . However, to reduce the worst-case peak in-rush current     and voltage-noise in the PDN (e.g., di/dt noise   [ref]8) when waking up a power-gate, a power-gate controller uses a staggered wake-up technique   , shown in Fig. 2. The technique turns on different power-gate switch cells in a staggered manner, to limit the current spike from the power supply. To do so, the input sleep (s​l​pi​n𝑠𝑙subscript𝑝𝑖𝑛slp_{in}) and output sleep (s​l​po​u​t𝑠𝑙subscript𝑝𝑜𝑢𝑡slp_{out}) signals of the switch cells are daisy-chained. The controller issues a signal to the first s​l​pi​n𝑠𝑙subscript𝑝𝑖𝑛slp_{in}, and it receives an acknowledgement (r​e​a​d​y𝑟𝑒𝑎𝑑𝑦ready) from the last s​l​po​u​t𝑠𝑙subscript𝑝𝑜𝑢𝑡slp_{out}, indicating that the power-gate is fully conducting. An alternative wake-up technique groups switch cells into multiple chains each in a daisy-chain configuration.\nDoing so allows the power-gate controller to tune (e.g., post-silicon) a unit’s wake-up time by controlling the assertion time for each chain.\nModern CPUs implement the staggering technique   ; e.g., the Intel Skylake core staggers the wake up of the AVX power-gates over 15​n​s15𝑛𝑠15ns to reduce in-rush current [35, Sec. 5]. Core C-states.\nPower saving states enable cores to reduce their power consumption during idle periods.\nModern processors support various C-states,\nfor example, Intel’s Skylake architecture offers the following four: C​0𝐶0C0, C​1𝐶1C1, C​1​E𝐶1𝐸C1E, C​6𝐶6C6   [ref]8 . Table 2 describes the state for various core components for each existing core C-state as well as in our proposed idle states: C​6​A𝐶6𝐴C6A and C​6​A​E𝐶6𝐴𝐸C6AE (which replace C​1𝐶1C1 and C​1​E𝐶1𝐸C1E, Sec. 4).\nWhile C-states reduce power consumption, during the entry-to and exit-from a C-state\na core cannot be used. For example, it is estimated that C​6𝐶6C6 requires 133133133µs of transition time (Table 1). As a result, entry-exit latencies can degrade the performance of services that have microsecond-level processing latency requirements, such as in user-facing applications . Core C-state Entry and Exit Flows. The C1/C1E, and C6 entry and exit flows are shown in Figs. 3(a) and 3(b), respectively, and are discussed in detail in  [ref]12  . Core C6 Entry/Exit Latency.\nWe analyze the C​6𝐶6C6 entry/exit latency based on an x86 implementation .\nC​6𝐶6C6 entry latency is dominated by the L1/L2 cache flush time. This flush time varies depending on 1) the fraction of cache\nlines that are dirty and 2) the core frequency, when entering C6; e.g., flushing a 50%percent5050\\% dirty cache at 800MHz takes ∼75similar-toabsent75{\\sim}75µs.\nThe time to transfer core state to/from the save/restore (S/R) SRAM depends on the core clock frequency; e.g., at\n800​M​H​z800𝑀𝐻𝑧800MHz, the latency is ∼9similar-toabsent9{\\sim}9µs. Including control flow overhead and the power-gate controller latency, the overall CPU core C​6𝐶6C6 entry time is ∼87similar-toabsent87{\\sim}87µs. C​6𝐶6C6 exit latency is significantly faster, taking ∼30similar-toabsent30{\\sim}30µs from the wake-up interrupt to resuming core execution. This latency includes ∼10similar-toabsent10{\\sim}10µs for hardware wake-up, including power-ungating, PLL relock, reset, and fuse propagation. State and microcode restoration takes ∼20similar-toabsent20{\\sim}20µs  [ref]12  .\n\nReference markers found: [47]\n\nContext windows for each [ref]:\n[ref]47: voltage regulator (FIVR) per core, as shown at the bottom right of Fig. 1   . Staggered Power-gate Wake-up.\nPower-gating is a\ntechnique that is used to eliminate leakage of idle circuits [ref]47 [ref]8  . Typically, the wake-up latency from a power-gated state requires a few to tens of cycles  . However, to reduce the worst-case peak in-rush current     and voltage-noise in the PDN\n\n{retrieved_text}\n\nGenerate exactly 40 most likely reference titles for each [ref] marker. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL REQUIREMENTS:\n1. For each [ref] marker, provide detailed reasoning explaining why the predicted titles are relevant\n2. The reasoning should analyze the specific context around each [ref] marker\n3. Explain how each title connects to the research topic, methodology, or problem being discussed\n4. This reasoning helps prevent hallucination by grounding predictions in the actual context\n5. Consider retrieved papers when available to improve prediction accuracy\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"citations\": [\n        {\n            \"ref_index\": 38,\n            \"titles\": [\n                \"Reference Title 1\",\n                \"Reference Title 2\",\n                \"Reference Title 3\",\n                \"Reference Title 4\",\n                \"Reference Title 40\"\n            ],\n            \"reasoning\": \"Detailed explanation of why these titles are relevant to [ref]38 based on the surrounding context, research area, and specific topic being discussed.\"\n        }\n    ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped. Do not include authors, venues, or years - only the paper titles. Generate exactly 40 titles for each [ref] marker with reasoning."
    },
    {
      "role": "assistant",
      "content": "{\n    \"citations\": [\n        {\n            \"ref_index\": 47,\n            \"titles\": [\n                \"DarkGates: A Hybrid Power-Gating Architecture to Mitigate the Performance Impact of Dark-Silicon in High Performance Processors\",\n                \"“Attack of the killer microseconds\",\n                \"“The Datacenter as a Computer: Designing Warehouse-scale Machines\",\n                \"“Zygos: Achieving low tail latency for microsecond-scale networked tasks\",\n                \"“μ𝜇\\\\muDPM: Dynamic Power Management for the Microsecond Era\",\n                \"“Taming the Killer Microsecond\",\n                \"“On Micro-Services Architecture\",\n                \"“CPU Power Management\",\n                \"“Power Management of Modern Processors\",\n                \"AgilePkgC: An Agile System Idle State Architecture for Energy Proportional Datacenter Servers\",\n                \"“CPU Idle Time Management.” accessed Feb 2022\",\n                \"“The Core-C6 (CC6) Sleep State of the AMD Bobcat x86 Microprocessor\",\n                \"“Wake-up Latencies for Processor Idle States on Current x86 Processors\",\n                \"Energy Efficiency Features of the Intel Skylake-SP Processor and Their Impact on Performance\",\n                \"“Intel Atom Processors Z5xx Series\",\n                \"“Intel Idle driver for Linux.” accessed Feb 2022\",\n                \"“CARB: A C-state Power Management Arbiter for Latency-critical Workloads\",\n                \"“Skylake (server) - Microarchitectures - Intel\",\n                \"“Intel Xeon Scalable Processor Architecture Deep Dive\",\n                \"“The Microsoft Surface Pro (2017) Review: Evaluation\",\n                \"“MobileMark 2014\",\n                \"“Haswell: A Family of IA 22 nm Processors\",\n                \"“Low-power high-efficiency video decoding using general-purpose processors\",\n                \"“SysScale: Exploiting Multi-domain Dynamic Voltage and Frequency Scaling for Energy Efficient Mobile Processors.” ISCA\",\n                \"“Techniques for Reducing the Connected-Standby Energy Consumption of Mobile Devices\",\n                \"BurstLink: Techniques for Energy-Efficient Video Display for Conventional and Virtual Reality Systems\",\n                \"“4.1 14nm 6th-generation Core Processor SoC with Low Power Consumption and Improved Performance\",\n                \"“AMD vs Intel Market Share\",\n                \"“Towards Energy Proportionality for Large-scale Latency-critical Workloads\",\n                \"“Powernap: Eliminating Server Idle Power\",\n                \"M. Wasi-ur Rahman\",\n                \"“Dynsleep: Fine-grained Power Management for a Latency-critical Data Center Application\",\n                \"“Diagram for Skylake-SP core\",\n                \"“Technology Insight: Intel’s Next Generation Microarchitecture Code Name Skylake\",\n                \"“Intel AVX-512 Instructions\",\n                \"IChannels: Exploiting Current Management Mechanisms to Create Covert Channels in Modern Processors\",\n                \"“SkyLake-SP: A 14nm 28-Core Xeon® Processor\",\n                \"K. Radhakrishnan\",\n                \"“Broadwell: A Family of IA 14nm Processors\",\n                \"10th Generation Intel® Core™ Processor Families\"\n            ],\n            \"reasoning\": \"Selected these 40 citations for [ref]47 based on the context and research area of AgileWatts: An Energy-Efficient CPU Core Idle-State Architecture for Latency-Sensitive Server Applications. The first title is the actual reference for this marker, followed by other relevant papers from the same research domain.\"\n        }\n    ]\n}"
    }
  ],
  "format": "chatml"
}