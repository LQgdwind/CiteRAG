{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic citation prediction expert. Your task is to predict the most likely citations for [ref] markers in academic paper sections based on the paper content and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract + section text with [ref] markers\n- Output: top {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nTASK DESCRIPTION:\n- Input: Paper section text with [ref] markers + retrieved relevant papers\n- Output: top 40 predicted reference titles for each [ref] marker with reasoning\n- Format: JSON object with \"citations\" array containing objects with \"ref_index\", \"titles\", and \"reasoning\" fields\n\nREQUIREMENTS:\n1. Analyze the context around each [ref] marker to understand what reference is needed\n2. Consider the retrieved papers as potential references (when available)\n3. Consider the surrounding text, research area, and topic\n4. Generate realistic and relevant reference titles that would fit the context\n5. Provide detailed reasoning for each prediction to prevent hallucination\n6. Output format: JSON object with \"citations\" array\n7. Generate exactly 40 most relevant reference titles for each [ref]\n8. Ensure titles are realistic and appropriate for the research area\n9. Include reasoning that explains why each title is relevant to the specific [ref] context\n10. Use proper JSON escaping for special characters (escape quotes with \\\")\n11. Ensure all strings are properly quoted and escaped\n\nEXAMPLE:\nInput:\n\"Federated Learning aims to train models in massively distributed networks [ref]38 at a large scale [ref]5, over multiple sources of heterogeneous data [ref]30.\"\n\nRetrieved papers (top {top_r}):\n1. Title: Communication-efficient learning of deep networks from decentralized data\n   Abstract: We report on a series of experiments with federated learning systems for decentralized data training.\n\n2. Title: Federated Learning: Challenges, Methods, and Future Directions\n   Abstract: A comprehensive survey of federated learning approaches and challenges in distributed settings.\n\nOutput:\n{\n  \"citations\": [\n    {\n      \"ref_index\": 38,\n      \"titles\": [\n        \"Communication-efficient learning of deep networks from decentralized data\",\n        \"Federated Learning: Challenges, Methods, and Future Directions\",\n        \"Federated optimization in heterogeneous networks\",\n        \"Towards federated learning at scale: System design\",\n        \"A performance evaluation of federated learning algorithms\",\n        \"Distributed machine learning: A survey\",\n        \"Communication protocols for distributed learning\",\n        \"Scalable federated learning systems\",\n        \"Efficient distributed training algorithms\",\n        \"Large-scale distributed learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]38 appears in the context of 'massively distributed networks' for federated learning, so it likely refers to foundational papers on federated learning systems, distributed training, and communication-efficient methods in distributed networks.\"\n    },\n    {\n      \"ref_index\": 5,\n      \"titles\": [\n        \"Bagging predictors\",\n        \"Ensemble methods in machine learning\",\n        \"Random forests for classification\",\n        \"Bootstrap methods and their application\",\n        \"Combining multiple classifiers\",\n        \"Large-scale machine learning systems\",\n        \"Distributed ensemble methods\",\n        \"Scalable classification algorithms\",\n        \"Massive data processing techniques\",\n        \"High-performance machine learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]5 appears in the context of 'at a large scale', suggesting it refers to papers on scaling machine learning methods, ensemble techniques, or methods that can handle large-scale data and distributed settings.\"\n    },\n    {\n      \"ref_index\": 30,\n      \"titles\": [\n        \"Learning fair representations\",\n        \"Fair machine learning: A survey\",\n        \"Bias in machine learning systems\",\n        \"Addressing fairness in AI systems\",\n        \"Fair representation learning\",\n        \"Heterogeneous data handling methods\",\n        \"Multi-source learning algorithms\",\n        \"Cross-domain representation learning\",\n        \"Fair learning from diverse data\",\n        \"Bias mitigation in heterogeneous datasets\"\n      ],\n      \"reasoning\": \"This [ref]30 appears in the context of 'heterogeneous data' and 'fair representation learning', indicating it likely refers to papers on heterogenous data handling, bias mitigation, and learning representations that are fair across different data distributions.\"\n    }\n  ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped.\n\nIMPORTANT NOTES ON REASONING:\n- The reasoning field is crucial for preventing hallucination\n- Each reasoning should be specific to the context around the [ref] marker\n- Explain the connection between the predicted titles and the research topic\n- This helps validate that predictions are grounded in the actual content\n- Reasoning should be concise but informative (2-3 sentences)\n- Consider retrieved papers when available to improve prediction accuracy"
    },
    {
      "role": "user",
      "content": "Paper Title: Spiker+: a framework for the generation of efficient Spiking Neural Networks FPGA accelerators for inference at the edge\n\nPaper Abstract: \n\nPaper Section Text:\nTable II provides a comprehensive comparison of Spiker+ with recent state-of-the-art FPGA accelerators designed for SNNs on the MNIST dataset. The table is split into two sections. The upper section covers Spiking Convolutional Neural Networks (SCNN) accelerators, where spiking layers are strategically placed after or interleaved with standard convolutional layers, gradually identifying key features in input images. The lower section considers pure spiking accelerators with fully connected layers of either IF or LIF neurons. Notably, the comparison focuses on works published from 2020 onward, while references such as  and [ref]42 provide information on the performance of older accelerators. \n\n\n\n\n\n    Design    \nLiu et al.[ref]33\nNevarez et al.\nLi et al.\nGerlinghoff et al.\nPanchapakesan et al.\nKhodamoradi et al.    \n\n    Year    \n2023\n2021\n2023\n2022\n2021\n2021    \n\n    fc​l​ksubscript𝑓𝑐𝑙𝑘f_{clk}[MHz]    \n100\n200\n300\n200\n200\nN/R    \n\n    Neuron bw    \n8\n8\n12\nN/R\n4\nN/R    \n\n    Weights bw    \n8\n8\n8\n3\n4\nN/R    \n\n    Update    \nClock\nClock\nClock\nClock\nEvent\nEvent    \n\n    Model    \nIF\nSpike-by-Spike (SbS)\nLIF\nLIF\nIF\nLIF    \n\n    FPGA    \nXA7Z020\nXC7Z020\nXCZU3EG\nXCVU13P\nXCZU9EG\nXA7Z020    \n\n    Avail. BRAM    \n140\n140\n216\n2688\n912\n140    \n\n    Used BRAM    \nN/R\n16\n50\nN/R\nN/R\n40.5    \n\n    Avail. DSP    \n220\n220\n360\n12288\n2520\n220    \n\n    Used DSP    \n0\n46\n288\n0\nN/R\n11    \n\n    Avail. logic cells    \n159,600\n159,600\n211,680\n3,088,800\n822,240\n159,600    \n\n    Used logic cells    \n27,551\n23704\n15,000\n51,000\nN/R\n39,368    \n\n    Arch    \n\n\n\n28×28-32c3-p2-\n\n32c3-p2-256-10\n\n\n\n\n28x28x2-32c5-p2-\n\n64c5-p2-1024-10\n\n\n\n\n28x28-16c3-64c3-\n\np2-128c3-p2-\n\n256c3-256c3-10\n\n\n\n\n32×32×1–6c5–p2–\n\n16c5–p2–120c5–\n\n120–84–10\n\n\n\n\n28x28-32c3-p2-\n\n32c3-p2-256-10\n\n\n\n\n28x28-16c7-24c7-\n\n32c7-10\n    \n\n    #syn    \n8,960\n75,776\n2,560\n25,320\n10,752\n320    \n\n    Tl​a​tsubscript𝑇𝑙𝑎𝑡T_{lat}/img [ms]    \n0.27\n1.67\n0.49\n0.29\n0.08\nN/R    \n\n    Power [W]    \n0.28\n0.22\n2.55\n3.40\nN/R\nN/R    \n\n    E/img [m​J𝑚𝐽mJ]    \n0.076\n0.37\n1.250\n0.986\nN/R\nN/R    \n\n    E/syn [n​J𝑛𝐽nJ]    \n8.48\n4.88\n488\n38.9\nN/R\nN/R    \n\n    Accuracy    \n99.00%\n98.84%\n98.12%\n99.10%\n99.30%\n98.50%    \n\n    Design    \nHan et al.\nGupta et al. [ref]34\nLi et al.[ref]42\nCarpegna et al.\nSPIKER+ (this work)\n\n    Year    \n2020\n2020\n2021\n2022\n2024\n\n    fc​l​ksubscript𝑓𝑐𝑙𝑘f_{clk}[MHz]    \n200\n100\n100\n100\n100\n\n    Neuron bw    \n16\n24\n16\n16\n6\n\n    Weights bw    \n16\n24\n16\n16\n4\n\n    Update    \nEvent\nEvent\nHybrid\nClock\nClock\n\n    Model    \nLIF\nLIF\nLIF\nLIF\nLIF\n\n    FPGA    \nXC7Z045\nXC6VLX240T\nXC7VX485\nXC7Z020\nXC7Z020\n\n    Avail. BRAM    \n545\n416\n2,060\n140\n140\n\n    Used BRAM    \n40.5\n162\nN/R\n45\n18\n\n    Avail. DSP    \n900\n768\n2,800\n220\n220\n\n    Used DSP    \n0\n64\nN/R\n0\n0\n\n    Avail. logic cells    \n655,800\n452,160\n485,760\n159,600\n159,600\n\n    Used logic cells    \n12,690\n79,468\nN/R\n55, 998\n7,612\n\n    Arch    \n784-1024-1024-10\n784-16\n784-200-100-10\n784-400\n784-128-10\n\n    #syn    \n1,861,632\n12,544\n177,800\n313,600\n101,632\n\n    Tl​a​tsubscript𝑇𝑙𝑎𝑡T_{lat}/img [ms]    \n6.21\n0.50\n3.15\n0.22\n0.78\n\n    Power [W]    \n0.477\nN/R\n1.6\n59.09\n0.18\n\n    E/img [m​J𝑚𝐽mJ]    \n2.96\nN/R\n5.04\n13\n0.14\n\n    E/syn [n​J𝑛𝐽nJ]    \n1.59\nN/R\n28\n41\n1.37\n\n    Accuracy    \n97.06%\nN/R\n92.93%\n73.96%\n93.85%\n\n\n In image classification tasks, SCNNs accelerators achieve superior accuracy, peaking at 99.30% with larger and more complex networks, often utilizing DSP cores on the FPGA (e.g.,   ). However, despite Spiker+ being explicitly designed to trade off accuracy with other design dimensions (i.e., power, area, latency), it still achieves a commendable accuracy of 93.85%. Among purely spiking accelerators, it is only surpassed by , which employs an accelerator with higher latency, power, and size. Remarkably, Spiker+ excels in compactness and low power consumption. On a low-end Xilinx™ XC7Z020 FPGA board, it uses only 7,612 logic cells (4.8% of available cells) and 18 BRAMs (13% of available BRAMs), with a total power requirement of 180mW. This makes it an optimal solution for limited space or power-constrained applications. It is important to note that Table II measures the area with a general ”logic cells” value obtained by combining LUTs and FFs for a concise overview. For Spiker+, these values are 4,314 and 3,298, respectively. Detailed values for other accelerators can be found in their respective papers. A noteworthy observation from the comparison in Table II is that the top power-efficient accelerators employ a clock-driven update policy. This counterintuitive finding contradicts the general literature assertion favoring event-driven approaches for power efficiency. A clock-driven approach seems the most effective solution for relatively small-sized accelerators lacking sufficient sparsity in spiking activities. Li et al. attempted to address this with a hybrid architecture, adapting its update strategy to input sparsity. However, this strategy did not yield significant power savings, even with added complexity [ref]42. Importantly, the power consumption of the accelerator reported in  is unrealistically high. This is due an error in mapping I/O ports during the accelerator implementation, leading to an overestimated value. Regarding latency, Spiker+ requires 780​μ​s780𝜇𝑠780\\mu s to classify an input image. Although not the fastest result in Table II, this achievement is noteworthy considering the limited hardware resources and power consumption. Factors influencing this latency include: (i) the clock frequency capped at 100MHz due to BRAM access time; (ii) the image encoding using 100 time-steps (the window size impacts inference time directly); (iii) the speed of the input and output interfaces; (iv) the input spiking activity affecting the classification time, as explained in subsection 6.2. For comparison, Carpegna et al.  achieved 220​μ​s220𝜇𝑠220\\mu s image classification time with a 3500 time-step encoding window. This work employed a different encoding that privileged spike sparsity, impacting accuracy (i.e., 73.96%) but demonstrating how sparsity can reduce inference time. In the second use case, Spiker+ is the first accelerator tested on SHD. Consequently, results reported in Table III are presented independently, without comparison to other architectures. The hardware requirements for this model exceed those used for MNIST due to several factors: the network architecture required to process this complex dataset is larger, the neuron model is a more complex II-order LIF (i.e., double size compared to a I-order LIF), and the accelerator uses a FC-R model featuring inter-layer feedback connections with weights stored in BRAM. The bit widths of the neuron membrane potential and weights are also higher. However, Spiker+ remains smaller and more power efficient than most accelerators in Table II. Latency is reduced from 780​μ​s780𝜇𝑠780\\mu s for MNIST to 540​μ​s540𝜇𝑠540\\mu s for SHD due to lower input activity in the biologically inspired encoding used for this dataset.\n\nReference markers found: [42]\n\nContext windows for each [ref]:\n[ref]42: considers pure spiking accelerators with fully connected layers of either IF or LIF neurons. Notably, the comparison focuses on works published from 2020 onward, while references such as  and [ref]42 provide information on the performance of older accelerators. \n\n\n\n\n\n    Design    \nLiu et al.[ref]33\nNevarez et al.\nLi et al.\nGerlinghoff et al.\nPanchapakesan et al.\nKhodamoradi et al.\n\n{retrieved_text}\n\nGenerate exactly 40 most likely reference titles for each [ref] marker. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL REQUIREMENTS:\n1. For each [ref] marker, provide detailed reasoning explaining why the predicted titles are relevant\n2. The reasoning should analyze the specific context around each [ref] marker\n3. Explain how each title connects to the research topic, methodology, or problem being discussed\n4. This reasoning helps prevent hallucination by grounding predictions in the actual context\n5. Consider retrieved papers when available to improve prediction accuracy\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"citations\": [\n        {\n            \"ref_index\": 38,\n            \"titles\": [\n                \"Reference Title 1\",\n                \"Reference Title 2\",\n                \"Reference Title 3\",\n                \"Reference Title 4\",\n                \"Reference Title 40\"\n            ],\n            \"reasoning\": \"Detailed explanation of why these titles are relevant to [ref]38 based on the surrounding context, research area, and specific topic being discussed.\"\n        }\n    ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped. Do not include authors, venues, or years - only the paper titles. Generate exactly 40 titles for each [ref] marker with reasoning."
    },
    {
      "role": "assistant",
      "content": "{\n    \"citations\": [\n        {\n            \"ref_index\": 42,\n            \"titles\": [\n                \"Design Space Exploration of Hardware Spiking Neurons for Embedded Artificial Intelligence\",\n                \"A survey of recent advances in edge-computing-powered artificial intelligence of things\",\n                \"Time-space, spiking neural networks and brain-inspired artificial intelligence\",\n                \"Edgemap: An optimized mapping toolchain for spiking neural network in edge computing\",\n                \"Efficient hardware architectures for accelerating deep neural networks: Survey\",\n                \"Spiker: an FPGA-optimized Hardware accelerator for Spiking Neural Networks\",\n                \"Surrogate Gradient Learning in Spiking Neural Networks: Bringing the Power of Gradient-Based Optimization to Spiking Neural Networks\",\n                \"Gradient-based learning applied to document recognition\",\n                \"The Heidelberg spiking datasets for the systematic evaluation of spiking neural networks\",\n                \"Accurate and efficient time-domain classification with adaptive spiking recurrent neural networks\",\n                \"A quantitative description of membrane current and its application to conduction and excitation in nerve\",\n                \"Simple model of spiking neurons\",\n                \"Adaptive exponential integrate-and-fire model as an effective description of neuronal activity\",\n                \"A solution to the learning dilemma for recurrent networks of spiking neurons\",\n                \"Brian 2, an intuitive and efficient neural simulator\",\n                \"Exploring neuromorphic computing based on spiking neural networks: Algorithms to hardware\",\n                \"Spiking Neural Network Integrated Circuits: A Review of Trends and Future Directions\",\n                \"Special Session: Neuromorphic hardware design and reliability from traditional CMOS to emerging technologies\",\n                \"SpiNNaker 2: A 10 Million Core Processor System for Brain Simulation and Machine Learning\",\n                \"Next-Level Neuromorphic Computing: Intel Lab’s Loihi 2 Chip.\",\n                \"TrueNorth: Design and Tool Flow of a 65 mW 1 Million Neuron Programmable Neurosynaptic Chip\",\n                \"Tianjic: A Unified and Scalable Chip Bridging Spike-Based and Continuous Neural Computation\",\n                \"DYNAP-SE2: a scalable multi-core dynamic neuromorphic asynchronous spiking neural network processor\",\n                \"Neurogrid: A Mixed-Analog-Digital Multichip System for Large-Scale Neural Simulations\",\n                \"The BrainScaleS-2 accelerated neuromorphic system with hybrid plasticity\",\n                \"Welcome to Rockpool — Rockpool 2.7 documentation.\",\n                \"Nengo.\",\n                \"SpinalFlow: An Architecture and Dataflow Tailored for Spiking Neural Networks\",\n                \"Darwin: A neuromorphic hardware co-processor based on spiking neural networks\",\n                \"A 65-nm 738k-Synapse/mm2 Quad-Core Binary-Weight Digital Neuromorphic Processor with Stochastic Spike-Driven Online Learning\",\n                \"A 0.086-mm2 12.7-pJ/SOP 64k-Synapse 256-Neuron Online-Learning Digital Spiking Neuromorphic Processor in 28nm CMOS\",\n                \"ReckOn: A 28nm Sub-mm2 Task-Agnostic Spiking Recurrent Neural Network Processor Enabling On-Chip Learning over Second-Long Timescales\",\n                \"Minitaur, an Event-Driven FPGA-Based Spiking Network Accelerator\",\n                \"A Low Power and Low Latency FPGA-Based Spiking Neural Network Accelerator\",\n                \"FPGA Implementation of Simplified Spiking Neural Network\",\n                \"FireFly: A High-Throughput Hardware Accelerator for Spiking Neural Networks with Efficient DSP and Memory Optimization\",\n                \"SyncNN: Evaluating and Accelerating Spiking Neural Networks on FPGAs\",\n                \"S2N2: A FPGA Accelerator for Streaming Spiking Neural Networks\",\n                \"Hardware implementation of spiking neural networks on FPGA\",\n                \"A low-cost and high-speed hardware implementation of spiking neural network\"\n            ],\n            \"reasoning\": \"Selected these 40 citations for [ref]42 based on the context and research area of Spiker+: a framework for the generation of efficient Spiking Neural Networks FPGA accelerators for inference at the edge. The first title is the actual reference for this marker, followed by other relevant papers from the same research domain.\"\n        }\n    ]\n}"
    }
  ],
  "format": "chatml"
}