{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic citation prediction expert. Your task is to predict the most likely citations for [ref] markers in academic paper sections based on the paper content and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract + section text with [ref] markers\n- Output: top {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nTASK DESCRIPTION:\n- Input: Paper section text with [ref] markers + retrieved relevant papers\n- Output: top 40 predicted reference titles for each [ref] marker with reasoning\n- Format: JSON object with \"citations\" array containing objects with \"ref_index\", \"titles\", and \"reasoning\" fields\n\nREQUIREMENTS:\n1. Analyze the context around each [ref] marker to understand what reference is needed\n2. Consider the retrieved papers as potential references (when available)\n3. Consider the surrounding text, research area, and topic\n4. Generate realistic and relevant reference titles that would fit the context\n5. Provide detailed reasoning for each prediction to prevent hallucination\n6. Output format: JSON object with \"citations\" array\n7. Generate exactly 40 most relevant reference titles for each [ref]\n8. Ensure titles are realistic and appropriate for the research area\n9. Include reasoning that explains why each title is relevant to the specific [ref] context\n10. Use proper JSON escaping for special characters (escape quotes with \\\")\n11. Ensure all strings are properly quoted and escaped\n\nEXAMPLE:\nInput:\n\"Federated Learning aims to train models in massively distributed networks [ref]38 at a large scale [ref]5, over multiple sources of heterogeneous data [ref]30.\"\n\nRetrieved papers (top {top_r}):\n1. Title: Communication-efficient learning of deep networks from decentralized data\n   Abstract: We report on a series of experiments with federated learning systems for decentralized data training.\n\n2. Title: Federated Learning: Challenges, Methods, and Future Directions\n   Abstract: A comprehensive survey of federated learning approaches and challenges in distributed settings.\n\nOutput:\n{\n  \"citations\": [\n    {\n      \"ref_index\": 38,\n      \"titles\": [\n        \"Communication-efficient learning of deep networks from decentralized data\",\n        \"Federated Learning: Challenges, Methods, and Future Directions\",\n        \"Federated optimization in heterogeneous networks\",\n        \"Towards federated learning at scale: System design\",\n        \"A performance evaluation of federated learning algorithms\",\n        \"Distributed machine learning: A survey\",\n        \"Communication protocols for distributed learning\",\n        \"Scalable federated learning systems\",\n        \"Efficient distributed training algorithms\",\n        \"Large-scale distributed learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]38 appears in the context of 'massively distributed networks' for federated learning, so it likely refers to foundational papers on federated learning systems, distributed training, and communication-efficient methods in distributed networks.\"\n    },\n    {\n      \"ref_index\": 5,\n      \"titles\": [\n        \"Bagging predictors\",\n        \"Ensemble methods in machine learning\",\n        \"Random forests for classification\",\n        \"Bootstrap methods and their application\",\n        \"Combining multiple classifiers\",\n        \"Large-scale machine learning systems\",\n        \"Distributed ensemble methods\",\n        \"Scalable classification algorithms\",\n        \"Massive data processing techniques\",\n        \"High-performance machine learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]5 appears in the context of 'at a large scale', suggesting it refers to papers on scaling machine learning methods, ensemble techniques, or methods that can handle large-scale data and distributed settings.\"\n    },\n    {\n      \"ref_index\": 30,\n      \"titles\": [\n        \"Learning fair representations\",\n        \"Fair machine learning: A survey\",\n        \"Bias in machine learning systems\",\n        \"Addressing fairness in AI systems\",\n        \"Fair representation learning\",\n        \"Heterogeneous data handling methods\",\n        \"Multi-source learning algorithms\",\n        \"Cross-domain representation learning\",\n        \"Fair learning from diverse data\",\n        \"Bias mitigation in heterogeneous datasets\"\n      ],\n      \"reasoning\": \"This [ref]30 appears in the context of 'heterogeneous data' and 'fair representation learning', indicating it likely refers to papers on heterogenous data handling, bias mitigation, and learning representations that are fair across different data distributions.\"\n    }\n  ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped.\n\nIMPORTANT NOTES ON REASONING:\n- The reasoning field is crucial for preventing hallucination\n- Each reasoning should be specific to the context around the [ref] marker\n- Explain the connection between the predicted titles and the research topic\n- This helps validate that predictions are grounded in the actual content\n- Reasoning should be concise but informative (2-3 sentences)\n- Consider retrieved papers when available to improve prediction accuracy"
    },
    {
      "role": "user",
      "content": "Paper Title: Efficient Data-Plane Memory Scheduling for In-Network Aggregation\n\nPaper Abstract: \n\nPaper Section Text:\nDistributed Training. In various existing ML applications     , the required computational resources notably exceed a single machine’s capability (>1000 Pflops-day v.s. <2.5 Pflops), and the modeling training becomes distributed. Data parallelism is one of the most common approaches in distributed training  . The distributed training algorithm is iterative, and each iteration consists of three steps: (1) forward propagation (FP) and backward propagation (BP), each worker acquires a batch of training data, propagates it through the model to get the loss function, and calculates the gradients of parameters based on the loss value; (2) gradients aggregation, all workers’ gradients are aggregated (summation), and sent back to workers; (3) parameter update, each worker uses the aggregated gradients to update their parameters. Two kinds of communication patterns are widely adopted for gradient aggregation. Parameter Server (PS) : This communication pattern requires specific parameter servers. Each worker first sends its calculated gradients to parameter servers in each iteration, which then average the gradients and update the parameters, and finally broadcast the updated parameters to all workers. Ring All-Reduce : This communication pattern is a collective operation with two stages. A logical ring is formed among all workers. In the first stage, each worker sends a chunk of gradients to its right neighbor and receives gradients from its left neighbor, then accumulates its own copy to the received value, until all gradients are aggregated. In the second stage, each worker broadcasts its own aggregated chunk of gradients to other workers along the ring. Despite of scaling out the computation capacity, distributed model training suffers from the communication overhead . Every worker sends and receives tens MBs or even several GBs size of data in each iteration, which often becomes the bottleneck of the whole model training  . For example, PipeDream  shows that communication overhead dominates the overall training time by over 90% on 32 GPUs, and SwitchML reports a 29% (for ResNet50) to 97% (for DeepLight) communication time consumption in a 10Gbps network. In-Network Aggregation (INA). The advent of programmable switches provides an opportunity to scale out the distributed training . The programmable switches typically use Reconfigurable Match-action Table (RMT) architecture with multi-stage pipelines. Each stage has memory (i.e., registers) to store durable network states and can load user-specified programs to process packets. Currently, a bunch of works apply programmable switches to accelerate distributed applications, e.g., NetCache , NetLock , and NetSeer. Based on programmable switches, a recent technique called In-Network Aggregation (INA) is proposed to scale out distributed training communication. The basic mechanism is illustrated in Figure 1, where workers offload their gradient aggregation from hosts to the switch. As workers’ gradients stream through the switch, the switch adds up the gradient packets from different workers as result packets, and streams the result packets either back to workers (e.g., SwitchML , PANAMA ) or to the PS (e.g., ATP [ref]1). INA brings several advantages in the gradient aggregation (and the whole training process). First, INA reduces the traffic volume by letting the network carry the aggregation result instead of the raw gradients, and consequently eliminates the network bottleneck and reduces the communication time. Second, the aggregation operation is offloaded to the high-speed switches instead of servers, which not only saves CPU resources but also accelerates the aggregation speed. Third, the round-trip of a gradient packet and its result packet can be sub-RTT (except ATP with PS). Experiment results also show that INA can achieve up to 1.8×1.8\\times speedup, compared to the current best practice, Ring All-reduce . Switch Memory Usage in INA (a.k.a. aggregator membership). In INA solutions, the switch memory is organized as a pool of aggregators, each is a basic unit to accumulate and store gradient packets. Gradient tensors in workers are organized as a sequence of packets, each with a unique sequence number. Gradient packets from different workers but with the same sequence number are assigned to the same aggregators and got aggregated, and the aggregation result is sent downstream; the whole process is called an aggregator task. In the scenario of multiple jobs, existing solutions use switch memory in two ways. The first class statically partition switch memory and allocate a partition to a job (e.g., SwitchML , iSwitch 8, PANAMA ). The switch memory is not released until the job ends. The second class dynamically allocates switch memory to jobs (e.g., ATP [ref]1). Each of the all aggregation tasks (from multiple jobs) choose its own aggregators in a decentralized manner (e.g., hash(jobID, seqNum) in ATP), and would release the aggregator when the result packet (ACK) arrives at the switch; when two tasks collide in choosing an aggregator, the aggregator serve the first arrived one, i.e., First-Come-First-Serve (FCFS), and the later-arrived one falls back to the PS for aggregation.\n\nReference markers found: [1]\n\nContext windows for each [ref]:\n[ref]1: the switch, the switch adds up the gradient packets from different workers as result packets, and streams the result packets either back to workers (e.g., SwitchML , PANAMA ) or to the PS (e.g., ATP [ref]1). INA brings several advantages in the gradient aggregation (and the whole training process). First, INA reduces the traffic volume by letting the network carry the aggregation result instead\n\n{retrieved_text}\n\nGenerate exactly 40 most likely reference titles for each [ref] marker. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL REQUIREMENTS:\n1. For each [ref] marker, provide detailed reasoning explaining why the predicted titles are relevant\n2. The reasoning should analyze the specific context around each [ref] marker\n3. Explain how each title connects to the research topic, methodology, or problem being discussed\n4. This reasoning helps prevent hallucination by grounding predictions in the actual context\n5. Consider retrieved papers when available to improve prediction accuracy\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"citations\": [\n        {\n            \"ref_index\": 38,\n            \"titles\": [\n                \"Reference Title 1\",\n                \"Reference Title 2\",\n                \"Reference Title 3\",\n                \"Reference Title 4\",\n                \"Reference Title 40\"\n            ],\n            \"reasoning\": \"Detailed explanation of why these titles are relevant to [ref]38 based on the surrounding context, research area, and specific topic being discussed.\"\n        }\n    ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped. Do not include authors, venues, or years - only the paper titles. Generate exactly 40 titles for each [ref] marker with reasoning."
    },
    {
      "role": "assistant",
      "content": "{\n    \"citations\": [\n        {\n            \"ref_index\": 1,\n            \"titles\": [\n                \"Scaling Distributed Machine Learning with In-Network Aggregation\",\n                \"ATP: In-network aggregation for multi-tenant learning\",\n                \"The source code of atp: https://github.com/in-ATP/ATP\",\n                \"Information-agnostic flow scheduling for commodity data centers\",\n                \"Switches for hire: resource scheduling for data center in-network computing\",\n                \"Cofilter: A high-performance switch-assisted stateful packet filter\",\n                \"Programmable Switch as a Parallel Computing Device\",\n                \"Auto: Scaling deep reinforcement learning for datacenter-scale automatic traffic optimization\",\n                \"Blueconnect: Novel hierarchical all-reduce on multi-tired network for deep learning\",\n                \"Natural language processing\",\n                \"Efficient coflow scheduling with varys\",\n                \"Gpt-3: Its nature, scope, limits, and consequences\",\n                \"In-network aggregation for shared machine learning clusters\",\n                \"Tiresias: A GPU cluster manager for distributed deep learning\",\n                \"A Survey on Data Plane Programming with P4: Fundamentals, Advances, and Applied Research\",\n                \"Deep Residual Learning for Image Recognition\",\n                \"Network simulations with the ns-3 simulator\",\n                \"Alexa, siri, cortana, and more: an introduction to voice assistants\",\n                \"Gpipe: Efficient training of giant neural networks using pipeline parallelism\",\n                \"Analysis of Large-Scale Multi-Tenant GPU Clusters for DNN Training Workloads\",\n                \"A unified architecture for accelerating distributed DNN training in heterogeneous gpu/cpu clusters\",\n                \"Netcache: Balancing key-value stores with fast in-network caching\",\n                \"Optimizing tcp retransmission timeout\",\n                \"Learning multiple layers of features from tiny images\",\n                \"DeepLight: Learning Illumination for Unconstrained Mobile Mixed Reality\",\n                \"Towards fully autonomous driving: Systems and algorithms\",\n                \"Scaling distributed machine learning with the parameter server\",\n                \"Accelerating distributed reinforcement learning with in-switch computing\",\n                \"Rate-aware flow scheduling for commodity data center networks\",\n                \"Plink: Discovering and exploiting locality for accelerated distributed training on the public cloud\",\n                \"Silkroad: Making stateful layer-4 load balancing fast and cheap using switching asics\",\n                \"Pipedream: generalized pipeline parallelism for dnn training\",\n                \"Bandwidth optimal all-reduce algorithms for clusters of workstations\",\n                \"Optimus: an efficient dynamic resource scheduler for deep learning clusters\",\n                \"A generic communication scheduler for distributed dnn training acceleration\",\n                \"When should the network be the computer?\",\n                \"Very Deep Convolutional Networks for Large-Scale Image Recognition\",\n                \"Stream: Decentralized opportunistic inter-coflow scheduling for datacenter networks\",\n                \"Rat-resilient allreduce tree for distributed machine learning\",\n                \"SuperGLUE: A Stickier Benchmark for General-Purpose Language Understanding Systems\"\n            ],\n            \"reasoning\": \"Selected these 40 citations for [ref]1 based on the context and research area of Efficient Data-Plane Memory Scheduling for In-Network Aggregation. The first title is the actual reference for this marker, followed by other relevant papers from the same research domain.\"\n        }\n    ]\n}"
    }
  ],
  "format": "chatml"
}