{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic citation prediction expert. Your task is to predict the most likely citations for [ref] markers in academic paper sections based on the paper content and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract + section text with [ref] markers\n- Output: top {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nTASK DESCRIPTION:\n- Input: Paper section text with [ref] markers + retrieved relevant papers\n- Output: top 40 predicted reference titles for each [ref] marker with reasoning\n- Format: JSON object with \"citations\" array containing objects with \"ref_index\", \"titles\", and \"reasoning\" fields\n\nREQUIREMENTS:\n1. Analyze the context around each [ref] marker to understand what reference is needed\n2. Consider the retrieved papers as potential references (when available)\n3. Consider the surrounding text, research area, and topic\n4. Generate realistic and relevant reference titles that would fit the context\n5. Provide detailed reasoning for each prediction to prevent hallucination\n6. Output format: JSON object with \"citations\" array\n7. Generate exactly 40 most relevant reference titles for each [ref]\n8. Ensure titles are realistic and appropriate for the research area\n9. Include reasoning that explains why each title is relevant to the specific [ref] context\n10. Use proper JSON escaping for special characters (escape quotes with \\\")\n11. Ensure all strings are properly quoted and escaped\n\nEXAMPLE:\nInput:\n\"Federated Learning aims to train models in massively distributed networks [ref]38 at a large scale [ref]5, over multiple sources of heterogeneous data [ref]30.\"\n\nRetrieved papers (top {top_r}):\n1. Title: Communication-efficient learning of deep networks from decentralized data\n   Abstract: We report on a series of experiments with federated learning systems for decentralized data training.\n\n2. Title: Federated Learning: Challenges, Methods, and Future Directions\n   Abstract: A comprehensive survey of federated learning approaches and challenges in distributed settings.\n\nOutput:\n{\n  \"citations\": [\n    {\n      \"ref_index\": 38,\n      \"titles\": [\n        \"Communication-efficient learning of deep networks from decentralized data\",\n        \"Federated Learning: Challenges, Methods, and Future Directions\",\n        \"Federated optimization in heterogeneous networks\",\n        \"Towards federated learning at scale: System design\",\n        \"A performance evaluation of federated learning algorithms\",\n        \"Distributed machine learning: A survey\",\n        \"Communication protocols for distributed learning\",\n        \"Scalable federated learning systems\",\n        \"Efficient distributed training algorithms\",\n        \"Large-scale distributed learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]38 appears in the context of 'massively distributed networks' for federated learning, so it likely refers to foundational papers on federated learning systems, distributed training, and communication-efficient methods in distributed networks.\"\n    },\n    {\n      \"ref_index\": 5,\n      \"titles\": [\n        \"Bagging predictors\",\n        \"Ensemble methods in machine learning\",\n        \"Random forests for classification\",\n        \"Bootstrap methods and their application\",\n        \"Combining multiple classifiers\",\n        \"Large-scale machine learning systems\",\n        \"Distributed ensemble methods\",\n        \"Scalable classification algorithms\",\n        \"Massive data processing techniques\",\n        \"High-performance machine learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]5 appears in the context of 'at a large scale', suggesting it refers to papers on scaling machine learning methods, ensemble techniques, or methods that can handle large-scale data and distributed settings.\"\n    },\n    {\n      \"ref_index\": 30,\n      \"titles\": [\n        \"Learning fair representations\",\n        \"Fair machine learning: A survey\",\n        \"Bias in machine learning systems\",\n        \"Addressing fairness in AI systems\",\n        \"Fair representation learning\",\n        \"Heterogeneous data handling methods\",\n        \"Multi-source learning algorithms\",\n        \"Cross-domain representation learning\",\n        \"Fair learning from diverse data\",\n        \"Bias mitigation in heterogeneous datasets\"\n      ],\n      \"reasoning\": \"This [ref]30 appears in the context of 'heterogeneous data' and 'fair representation learning', indicating it likely refers to papers on heterogenous data handling, bias mitigation, and learning representations that are fair across different data distributions.\"\n    }\n  ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped.\n\nIMPORTANT NOTES ON REASONING:\n- The reasoning field is crucial for preventing hallucination\n- Each reasoning should be specific to the context around the [ref] marker\n- Explain the connection between the predicted titles and the research topic\n- This helps validate that predictions are grounded in the actual content\n- Reasoning should be concise but informative (2-3 sentences)\n- Consider retrieved papers when available to improve prediction accuracy"
    },
    {
      "role": "user",
      "content": "Paper Title: Reinforcement Learning-based Non-Autoregressive Solver for Traveling Salesman Problems\n\nPaper Abstract: \n\nPaper Section Text:\nThe ability to generalize effectively across TSP instances in different sizes is a highly desirable characteristic for NN-based models to solve CO problems [ref]25. Notably, NAR4TSP shares parameters across all nodes, thus enabling it to remain robust to variations in the number of nodes. This property of NAR4TSP allows the application of a pre-trained model to solve TSP instances of different sizes. To assess the generalization ability of each model, we compare NAR4TSP with four SOTA models   [ref]16 [ref]17. Table¬†III presents the performance of the models trained using TSP50 instances and applied to solve 10,000 TSP100 and TSP200¬†(TSP with 200 nodes) instances. Similarly, Table¬†IV demonstrates the performance of the models trained using TSP100 instances and applied to solve 10,000 TSP50 and TSP200 instances. We exclude the TSP200-trained models from the generalization comparisons due to the substantial training time and failure to converge, as observed in two SOTA models  . The experimental results presented in Tables¬†III and¬†IV demonstrate that NAR4TSP and three AR models  [ref]16 [ref]17 perform well, while the other model  does not. The plausible reason is overfitting that the model  uses an excessive number of parameters¬†(over 11 million) to memorize TSP training patterns, but the learned policy is still unable to generalize beyond the training sizes [ref]25. Importantly, NAR4TSP exhibits superior generalization ability compared to all the other SOTA models   [ref]16 [ref]17. Furthermore, the results presented in Tables¬†III and¬†IV indicate that the generalization performance of NAR4TSP improves as the size of the TSP instances used for training increases, which is consistent with the commonsense that if the model is trained using complex examples, it should perform well on less complex ones. Optimality gaps indicate length differences compared to the optimal solutions from TSPLIB. Time indicates inference time. Nonetheless, in Tables¬†III and¬†IV, the node coordinates in the test instances are all sampled based on the unit uniform distribution, which is consistent with the training data. We further evaluate the generalization ability of NAR4TSP and three SOTA AR models  [ref]16 [ref]17 using the widely adopted TSPLIB222URL: http://comopt.ifi.uni-heidelberg.de/software/TSPLIB95/ dataset. TSPLIB is a repository of TSP instances widely used to assess the effectiveness of algorithms for solving TSPs  . To this end, we randomly select 25 real-world TSP instances of different sizes¬†(ranging from 51 to 575 nodes) from the TSPLIB dataset as test instances. Unlike the training instances where the node coordinates are bounded between 0 and 1, the node coordinates of the real-world instances in TSPLIB are integers that span from one to thousands and in some cases, even negative values. To maximally simulate the unknown real-world scenarios, we refrain from applying any preprocessing methods, such as normalization, rotation, or transformation, to the test instances. Instead, we straightforwardly apply the models trained using the TSP50 instances to solve the 25 real-world instances. This setting is widely known as zero-shot generalization [ref]25. A model capable of generating good solutions in such cases signifies its ability to recognize and learn the underlying patterns and insights of TSPs, making it suitable for diverse applications, as opposed to superficial pattern recognition [ref]25. As shown in Table¬†V, the three SOTA models  [ref]16 [ref]17 exhibit unsatisfactory results. Although increasing the beam width BùêµB generally improves the solution quality by preserving the top-BùêµB candidate solutions with the highest probability, the model [ref]16 only shows a 1‚àí167.08%176.58%‚âà5.37%1percent167.08percent176.58percent5.371-\\frac{167.08\\%}{176.58\\%}\\approx 5.37\\% improvement in performance as BùêµB increases from 111 to 100010001000, while the performance of the other two models  [ref]17 even decreases by 701.59%455.92%‚àí1‚âà53.88%percent701.59percent455.921percent53.88\\frac{701.59\\%}{455.92\\%}-1\\approx 53.88\\% and 655.44%475.11%‚àí1‚âà37.95%percent655.44percent475.111percent37.95\\frac{655.44\\%}{475.11\\%}-1\\approx 37.95\\%, respectively. This finding indicates that these models have difficulties in handling TSP cases formulated differently from the training instances. In contrast, NAR4TSP outperforms these models by showcasing a 1‚àí11.51%19.26%‚âà40.25%1percent11.51percent19.26percent40.251-\\frac{11.51\\%}{19.26\\%}\\approx 40.25\\% improvement in solution quality when the beam width BùêµB increases from 111 to 100010001000. Furthermore, NAR4TSP exhibits significantly lower computation time, accounting for only 0.1623.573‚âà4.53%0.1623.573percent4.53\\frac{0.162}{3.573}\\approx 4.53\\% of the total time taken by [ref]16, 0.1621.331‚âà12.17%0.1621.331percent12.17\\frac{0.162}{1.331}\\approx 12.17\\% of the total time taken by , and 0.1622.485‚âà6.52%0.1622.485percent6.52\\frac{0.162}{2.485}\\approx 6.52\\% of the total time taken by [ref]17. This finding highlights the remarkable time efficiency of our NAR4TSP model. Furthermore, we preprocess the 25 real-world TSP instances by normalizing their node coordinates and subsequently compare the performance of NAR4TSP with the three SOTA models on the normalized TSP instances. The results, presented in the last two rows of Table¬†V, indicate that NAR4TSP again outperforms the three SOTA models. Remarkably, NAR4TSP achieves better performance even without requiring instances normalization (optimality gap = 11.51% when BùêµB = 1,000) comparing to the three SOTA models with instances normalization, despite the significant improvement in solution quality attained by the latter after normalization.\n\nReference markers found: [25]\n\nContext windows for each [ref]:\n[ref]25: The ability to generalize effectively across TSP instances in different sizes is a highly desirable characteristic for NN-based models to solve CO problems [ref]25. Notably, NAR4TSP shares parameters across all nodes, thus enabling it to remain robust to variations in the number of nodes. This property of NAR4TSP allows the application of a pre-trained\n\n{retrieved_text}\n\nGenerate exactly 40 most likely reference titles for each [ref] marker. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL REQUIREMENTS:\n1. For each [ref] marker, provide detailed reasoning explaining why the predicted titles are relevant\n2. The reasoning should analyze the specific context around each [ref] marker\n3. Explain how each title connects to the research topic, methodology, or problem being discussed\n4. This reasoning helps prevent hallucination by grounding predictions in the actual context\n5. Consider retrieved papers when available to improve prediction accuracy\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"citations\": [\n        {\n            \"ref_index\": 38,\n            \"titles\": [\n                \"Reference Title 1\",\n                \"Reference Title 2\",\n                \"Reference Title 3\",\n                \"Reference Title 4\",\n                \"Reference Title 40\"\n            ],\n            \"reasoning\": \"Detailed explanation of why these titles are relevant to [ref]38 based on the surrounding context, research area, and specific topic being discussed.\"\n        }\n    ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped. Do not include authors, venues, or years - only the paper titles. Generate exactly 40 titles for each [ref] marker with reasoning."
    },
    {
      "role": "assistant",
      "content": "{\n    \"citations\": [\n        {\n            \"ref_index\": 25,\n            \"titles\": [\n                \"Combinatorial Optimization by Graph Pointer Networks and Hierarchical Reinforcement Learning\",\n                \"Computers and Intractability; A Guide to the Theory of NP-Completeness\",\n                \"Ship routing and scheduling: Status and perspectives\",\n                \"Algorithms for facility location problems with outliers\",\n                \"Integrated process planning and scheduling with minimizing total tardiness in multi-plants supply chain\",\n                \"Discrete comprehensive learning particle swarm optimization algorithm with metropolis acceptance criterion for traveling salesman problem\",\n                \"Fast-converging simulated annealing for ising models based on integral stochastic computing\",\n                \"Machine learning for combinatorial optimization: a methodological tour d‚Äôhorizon\",\n                \"Meta-learning-based deep reinforcement learning for multiobjective optimization problems\",\n                \"Multi-objective neural evolutionary algorithm for combinatorial optimization problems\",\n                \"Solving dynamic traveling salesman problems with deep reinforcement learning\",\n                \"AMARL: An attention-based multiagent reinforcement learning approach to the min-max multiple traveling salesmen problem\",\n                \"Divide and Conquer Networks\",\n                \"An Efficient Graph Convolutional Network Technique for the Travelling Salesman Problem\",\n                \"The Traveling Salesman Problem: A Computational Study\",\n                \"Attention, Learn to Solve Routing Problems!\",\n                \"The transformer network for the traveling salesman problem\",\n                \"A Lightweight CNN-Transformer Model for Learning Traveling Salesman Problems\",\n                \"Self-critical Sequence Training for Image Captioning\",\n                \"Pointer networks\",\n                \"Neural Combinatorial Optimization with Reinforcement Learning\",\n                \"Learning Combinatorial Optimization Algorithms over Graphs\",\n                \"Learning heuristics for the TSP by policy gradient\",\n                \"Learning Improvement Heuristics for Solving Routing Problems\",\n                \"Learning 2-opt heuristics for routing problems via deep reinforcement learning\",\n                \"Learning the Travelling Salesperson Problem Requires Rethinking Generalization\",\n                \"Reinforcement Learning for Solving the Vehicle Routing Problem\",\n                \"Solving combinatorial optimization problems over graphs with bert-based deep reinforcement learning\",\n                \"A branch-and-cut algorithm for the resolution of large-scale symmetric traveling salesman problems\",\n                \"Implementing the Dantzig-Fulkerson-Johnson algorithm for large traveling salesman problems\",\n                \"Dynamic programming treatment of the travelling salesman problem\",\n                \"Approximation algorithms for np-hard problems\",\n                \"An extension of the Lin-Kernighan-Helsgaun TSP solver for constrained traveling salesman and vehicle routing problems\",\n                \"General k-opt submoves for the Lin-Kernighan TSP heuristic\",\n                \"Deep policy dynamic programming for vehicle routing problems\",\n                \"Multi-strategy particle swarm and ant colony hybrid optimization for airport taxiway planning problem\",\n                \"Goods consumed during transit in split delivery vehicle routing problems: Modeling and solution\",\n                \"Research reviews of combinatorial optimization methods based on deep reinforcement learning\",\n                \"Neural Machine Translation by Jointly Learning to Align and Translate\",\n                \"Generalize a Small Pre-trained Model to Arbitrarily Large TSP Instances\"\n            ],\n            \"reasoning\": \"Selected these 40 citations for [ref]25 based on the context and research area of Reinforcement Learning-based Non-Autoregressive Solver for Traveling Salesman Problems. The first title is the actual reference for this marker, followed by other relevant papers from the same research domain.\"\n        }\n    ]\n}"
    }
  ],
  "format": "chatml"
}