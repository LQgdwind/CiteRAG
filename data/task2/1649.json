{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic citation prediction expert. Your task is to predict the most likely citations for [ref] markers in academic paper sections based on the paper content and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract + section text with [ref] markers\n- Output: top {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nTASK DESCRIPTION:\n- Input: Paper section text with [ref] markers + retrieved relevant papers\n- Output: top 40 predicted reference titles for each [ref] marker with reasoning\n- Format: JSON object with \"citations\" array containing objects with \"ref_index\", \"titles\", and \"reasoning\" fields\n\nREQUIREMENTS:\n1. Analyze the context around each [ref] marker to understand what reference is needed\n2. Consider the retrieved papers as potential references (when available)\n3. Consider the surrounding text, research area, and topic\n4. Generate realistic and relevant reference titles that would fit the context\n5. Provide detailed reasoning for each prediction to prevent hallucination\n6. Output format: JSON object with \"citations\" array\n7. Generate exactly 40 most relevant reference titles for each [ref]\n8. Ensure titles are realistic and appropriate for the research area\n9. Include reasoning that explains why each title is relevant to the specific [ref] context\n10. Use proper JSON escaping for special characters (escape quotes with \\\")\n11. Ensure all strings are properly quoted and escaped\n\nEXAMPLE:\nInput:\n\"Federated Learning aims to train models in massively distributed networks [ref]38 at a large scale [ref]5, over multiple sources of heterogeneous data [ref]30.\"\n\nRetrieved papers (top {top_r}):\n1. Title: Communication-efficient learning of deep networks from decentralized data\n   Abstract: We report on a series of experiments with federated learning systems for decentralized data training.\n\n2. Title: Federated Learning: Challenges, Methods, and Future Directions\n   Abstract: A comprehensive survey of federated learning approaches and challenges in distributed settings.\n\nOutput:\n{\n  \"citations\": [\n    {\n      \"ref_index\": 38,\n      \"titles\": [\n        \"Communication-efficient learning of deep networks from decentralized data\",\n        \"Federated Learning: Challenges, Methods, and Future Directions\",\n        \"Federated optimization in heterogeneous networks\",\n        \"Towards federated learning at scale: System design\",\n        \"A performance evaluation of federated learning algorithms\",\n        \"Distributed machine learning: A survey\",\n        \"Communication protocols for distributed learning\",\n        \"Scalable federated learning systems\",\n        \"Efficient distributed training algorithms\",\n        \"Large-scale distributed learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]38 appears in the context of 'massively distributed networks' for federated learning, so it likely refers to foundational papers on federated learning systems, distributed training, and communication-efficient methods in distributed networks.\"\n    },\n    {\n      \"ref_index\": 5,\n      \"titles\": [\n        \"Bagging predictors\",\n        \"Ensemble methods in machine learning\",\n        \"Random forests for classification\",\n        \"Bootstrap methods and their application\",\n        \"Combining multiple classifiers\",\n        \"Large-scale machine learning systems\",\n        \"Distributed ensemble methods\",\n        \"Scalable classification algorithms\",\n        \"Massive data processing techniques\",\n        \"High-performance machine learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]5 appears in the context of 'at a large scale', suggesting it refers to papers on scaling machine learning methods, ensemble techniques, or methods that can handle large-scale data and distributed settings.\"\n    },\n    {\n      \"ref_index\": 30,\n      \"titles\": [\n        \"Learning fair representations\",\n        \"Fair machine learning: A survey\",\n        \"Bias in machine learning systems\",\n        \"Addressing fairness in AI systems\",\n        \"Fair representation learning\",\n        \"Heterogeneous data handling methods\",\n        \"Multi-source learning algorithms\",\n        \"Cross-domain representation learning\",\n        \"Fair learning from diverse data\",\n        \"Bias mitigation in heterogeneous datasets\"\n      ],\n      \"reasoning\": \"This [ref]30 appears in the context of 'heterogeneous data' and 'fair representation learning', indicating it likely refers to papers on heterogenous data handling, bias mitigation, and learning representations that are fair across different data distributions.\"\n    }\n  ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped.\n\nIMPORTANT NOTES ON REASONING:\n- The reasoning field is crucial for preventing hallucination\n- Each reasoning should be specific to the context around the [ref] marker\n- Explain the connection between the predicted titles and the research topic\n- This helps validate that predictions are grounded in the actual content\n- Reasoning should be concise but informative (2-3 sentences)\n- Consider retrieved papers when available to improve prediction accuracy"
    },
    {
      "role": "user",
      "content": "Paper Title: Algorithms and Complexity on Indexing Founder GraphsThis is a preprint of the extended full version of conference papers in WABI 2020 [33] and ISAAC 2021 [19]. An earlier version of this preprint has also been reviewed and presented at RECOMB-seq 2021 highlights track.\n\nPaper Abstract: \n\nPaper Section Text:\nIn string research, many different problems relate to the common question of how to handle a collection of strings. When such a collection contains very similar strings, it can be represented as some ‚Äúhigh scoring‚Äù Multiple Sequence Alignment (MSA), i.e., as a matrix MSA[1..m,1..n][1..m,1..n] whose mùëöm rows are the individual strings each of length nùëõn, which may include special ‚Äúgap‚Äù symbols such that the columns represent the aligned positions. While it is NP-hard to find an optimal MSA even under the simplest score of maximizing the number of identity columns (i.e., longest common subsequence length)¬†, the central role of MSA as a model of biological evolution has resulted into numerous heuristics to solve this problem in practice¬†. In this paper, we assume an MSA as an input. A simple way to define the problem of finding a match for a given string in the MSA is to ask whether the string matches a substring of some row (ignoring gap symbols). This leads to the widely studied problem of indexing repetitive text collections, see, e.g., references¬†      . These approaches reducing an MSA to plain text reach algorithms with linear time complexities. However, the performance of these algorithms rely on the fact that a match is always found within an individual row of the MSA. One feature worth considering is the possibility to allow a match to jump from any row to any other row of the MSA between consecutive columns. This property is usually referred to as recombination due to its connection to evolution. To solve this version of the problem, different approaches have to be used, and a possible alternative is a graph representation of the MSA. Figure¬†1(a) shows a simple solution, which consists in turning distinct characters of each column into nodes, and then adding the edges supported by row-wise connections. In this graph, a path whose concatenation of node labels matches a given string represents a match in the original MSA (ignoring gaps). Refinements of this approach are mostly used in bioinformatics¬†[ref]37, where recombination is a desired feature, and it is realized by the fact that the resulting graph encodes a super-set of the strings of the original MSA. Aligning a sequence against a graph is not a trivial task. Only quadratic solutions are known¬†  3, and this was recently proved to be a conditional lower bound for the problem¬†[ref]17. Moreover, even attempting to index the graph to query the string faster presents significant difficulties. On one hand, indexes constructed in polynomial time still require quadratic-time queries in the worst case¬†9. On the other hand, worst-case linear-time queries are possible, but this has the potential to make the index grow exponentially¬†8. These might be the best results possible for general graphs and DAGs without any specific structural property, as the need for exponential indexing time to achieve sub-quadratic time queries constitutes another conditional lower bound for the problem¬†. Thus, if we want to achieve better performances, we have to make more assumptions on the structure of the input, so that the problem might become tractable. Following this line, a possible solution consists in identifying special classes of graphs\nthat, while still able to represent any MSA, have a more limited amount of recombination, thus allowing for fast matching or fast indexing. This is the case for Elastic Degenerate Strings (EDSs)     , which can represent an MSA as a sequence of sets of strings, in which a match can span consecutive sets, using any one string in each of these (see Figure¬†1(b), graph in the center). The advantage of this structure is that it is possible to perform expected-case subquadratic time queries . However, EDSs are still hard to index¬†5, and there is a lack of results on how to derive a ‚Äúsuitable‚Äù EDS from an MSA. In this context, we propose a generalization of an EDS to what we call an Elastic Founder Graph (EFG). An EFG is a DAG that, as an EDS, represents an MSA as a sequence of sets of strings; each set is called a block, and each string inside a block is represented as a labeled node. The difference with EDSs is that the nodes of two consecutive blocks are not forced to be fully connected. This means that, while in an EDS a match can always pair any string of a set with any string of the next set, in an EFG it might be the case that only some of these pairings are allowed. Figure¬†1(b) illustrates these differences. Allowing for more selective connectivity between consecutive blocks also means that finding a match for a string in an EFG is harder than in an EDS. This is because EDSs are a special case of EFGs, hence the hardness results for the former carry to the latter. Specifically, a previous work  showed that, under the Orthogonal Vectors Hypothesis (OVH), no index for EDSs constructed in polynomial time can provide queries in time O‚Äã(|Q|+|T~|Œ¥‚Äã|Q|Œ≤)ùëÇùëÑsuperscript~ùëáùõøsuperscriptùëÑùõΩO(|Q|+|\\widetilde{T}|^{\\delta}|Q|^{\\beta}), where |T~|~ùëá|\\widetilde{T}| is the number of sets of strings, |Q|ùëÑ|Q| is the length of the pattern and Œ≤<1ùõΩ1\\beta<1 or Œ¥<1ùõø1\\delta<1. Nevertheless, in this work we present an even tighter quadratic lower bound for EFGs, proving that, under OVH, an index built in time O‚Äã(|E|Œ±)ùëÇsuperscriptùê∏ùõºO(|E|^{\\alpha}) cannot provide queries in time O‚Äã(|Q|+|E|Œ¥‚Äã|Q|Œ≤)ùëÇùëÑsuperscriptùê∏ùõøsuperscriptùëÑùõΩO(|Q|+|E|^{\\delta}|Q|^{\\beta}), where |E|ùê∏|E| is the number of edges and Œ≤<1ùõΩ1\\beta<1 or Œ¥<1ùõø1\\delta<1. Notice that |T~|~ùëá|\\widetilde{T}| could even be o‚Äã(|E|)ùëúùê∏o(|E|) (e.g. an EFG of two fully connected blocks), hence our lower bound more closely relates to the total size of an EFG. Additionally, the earlier lower bound  naturally applies only to indexing EDSs, and is obtained by performing many hypothetical fast queries; ours is derived by first proving a quadratic OVH-based lower bound for the online string matching problem in EFGs, and then using a general result  to simply translate this into an indexing lower bound. Then, in order to break through these lower bounds, we identify two natural classes of EFGs, which respect what we call repeat-free and semi-repeat-free properties. The repeat-free property (Figure¬†1(c)) forces each string in each block to occur only once in the entire graph, and the semi-repeat-free property (Figure¬†1(d)) is a weaker form of this requirement. Thanks to these properties, we can more easily locate substrings of a query string in repeat-free EFGs and semi-repeat-free EFGs. In particular, (semi-)repeat-free EFGs and EDSs can be indexed in polynomial time for linear time string matching. One might think that these time speedups come with a significant cost in terms of flexibility. Instead, the special structure of these EFGs do not hinder their expressive power. Indeed, we show that an MSA can be ‚Äúoptimally‚Äù segmented into blocks inducing a repeat-free or semi-repeat-free EFG. Clearly, this depends on how one chooses to define optimality. We consider three optimality notions: maximum number of blocks, minimum maximum block height, and minimum maximum block length. In Figure¬†1(d), the first score is 3, second is 3, and the third is 5. The two latter notions stem from the earlier work on segmentations¬†2 , now combined with the (semi)-repeat-free constraint. The first is the simplest optimality notion, now making sense combined with the (semi)-repeat-free constraint. For each of these optimality notions, we give a polynomial-time dynamic programming algorithm that converts an MSA into an optimal (semi-)repeat-free EFG if such exists. For the first and the third notion combined with the semi-repeat-free constraint, we derive more involved solutions with almost optimal O‚Äã(m‚Äãn‚Äãlog‚Å°m)ùëÇùëöùëõùëöO(mn\\log m) and O‚Äã(m‚Äãn‚Äãlog‚Å°m+n‚Äãlog‚Å°log‚Å°n)ùëÇùëöùëõùëöùëõùëõO(mn\\log m+n\\log\\log n) running time, respectively. Futhermore, we give an (optimal) O‚Äã(m‚Äãn)ùëÇùëöùëõO(mn) time solution for the special case of MSA without gap symbols. The algorithm for the special case uses a monotonicity property not holding with gaps. With general MSAs we delve into the combinatorial properties of repetitive string collections synchronized with gaps and show how to use string data structures in this setting. The techniques can be easily adapted for other notions of optimality. Another class of graphs that admits efficient indexing are Wheeler graphs¬†, which offer an alternative way to model an EFG and thus a MSA. However, it is NP-complete to recognize if a given graph is a Wheeler graph¬†, and thus, to use the efficient algorithmic machinery around Wheeler graphs¬† one needs to limit the focus on indexable graphs that admit efficient construction. Indeed, we show that any EFG that respects the repeat-free property can be reduced to a Wheeler graph in polynomial time.\nInterestingly, we were not able to modify this reduction to cover the semi-repeat-free case, leaving it open if these two notions of graph indexability have indeed different expressive power, and whether there are more graph classes with distinctive properties in this context. The paper is structured as follows. At the high level, we first focus on gapless MSAs, and then we extend the results to the general case. In more detail, Section¬† 2 defines the founder graph concepts and explores some basic techniques. Section¬†3 gives the first indexing results using just classical data structures as a warm up. Section¬†4 covers linear time construction of repeat-free (non-elastic) founder graphs from gapless MSAs. Section¬†5 improves over the basic indexing results using succinct data structures. Section¬†6 gives the proof of conditional indexing hardness when moving from the gapless case to the general case of EFGs. Indexing results are generalized to (semi-)repeat-free EFGs in Section¬†7.\nConstruction results are generalized to (semi-)repeat-free EFGs in Section¬†8. Connection to Wheeler graphs is considered in Section¬†9. Implementation is discussed in Section¬†10. Finally, future directions are discussed in Section¬†11.\n\nReference markers found: [37]\n\nContext windows for each [ref]:\n[ref]37: In this graph, a path whose concatenation of node labels matches a given string represents a match in the original MSA (ignoring gaps). Refinements of this approach are mostly used in bioinformatics¬†[ref]37, where recombination is a desired feature, and it is realized by the fact that the resulting graph encodes a super-set of the strings of the original MSA. Aligning a sequence against a graph\n\n{retrieved_text}\n\nGenerate exactly 40 most likely reference titles for each [ref] marker. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL REQUIREMENTS:\n1. For each [ref] marker, provide detailed reasoning explaining why the predicted titles are relevant\n2. The reasoning should analyze the specific context around each [ref] marker\n3. Explain how each title connects to the research topic, methodology, or problem being discussed\n4. This reasoning helps prevent hallucination by grounding predictions in the actual context\n5. Consider retrieved papers when available to improve prediction accuracy\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"citations\": [\n        {\n            \"ref_index\": 38,\n            \"titles\": [\n                \"Reference Title 1\",\n                \"Reference Title 2\",\n                \"Reference Title 3\",\n                \"Reference Title 4\",\n                \"Reference Title 40\"\n            ],\n            \"reasoning\": \"Detailed explanation of why these titles are relevant to [ref]38 based on the surrounding context, research area, and specific topic being discussed.\"\n        }\n    ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped. Do not include authors, venues, or years - only the paper titles. Generate exactly 40 titles for each [ref] marker with reasoning."
    },
    {
      "role": "assistant",
      "content": "{\n    \"citations\": [\n        {\n            \"ref_index\": 37,\n            \"titles\": [\n                \"FM-index of Alignment with Gaps\",\n                \"Efficient string matching: An aid to bibliographic search\",\n                \"Regular languages meet prefix sorting\",\n                \"Comparing degenerate strings\",\n                \"Pattern matching in hypertext\",\n                \"Faster Online Elastic Degenerate String Matching\",\n                \"Fully-functional bidirectional burrows-wheeler indexes and infinite-order de bruijn graphs\",\n                \"Versatile succinct representations of the bidirectional burrows-wheeler transform\",\n                \"Linear-time string indexing and analysis in small space\",\n                \"Even Faster Elastic-Degenerate String Matching via Fast Matrix Multiplication\",\n                \"Pattern matching on elastic-degenerate text with errors\",\n                \"Approximate pattern matching on elastic-degenerate text\",\n                \"A block-sorting lossless data compression algorithm\",\n                \"Linear time maximum segmentation problems in column stream model\",\n                \"Multiple sequence alignment modeling: methods and applications\",\n                \"A framework for space-efficient variable-order markov models\",\n                \"File searching using variable length keys\",\n                \"On the complexity of string matching for graphs\",\n                \"Graphs cannot be indexed in polynomial time for sub-quadratic time string matching, unless SETH fails\",\n                \"Algorithms and complexity on indexing elastic founder graphs\",\n                \"Optimal suffix tree construction with large alphabets\",\n                \"Scaling and related techniques for geometry problems\",\n                \"Wheeler graphs: A framework for bwt-based data structures\",\n                \"Compressed indexes for repetitive textual datasets\",\n                \"Fully functional suffix trees and optimal text searching in bwt-runs bounded space\",\n                \"An efficient elastic-degenerate text index? not likely\",\n                \"On the Hardness and Inapproximability of Recognizing Wheeler Graphs\",\n                \"High-order entropy-compressed text indexes\",\n                \"Efficient pattern matching in elastic-degenerate texts\",\n                \"Truly subquadratic-time extension queries and periodicity detection in strings with uncertainties\",\n                \"On the complexity of SAT\",\n                \"Space-efficient static trees and graphs\",\n                \"The complexity of some problems on subsequences and supersequences\",\n                \"Linear time construction of indexable founder block graphs\",\n                \"Storage and retrieval of highly repetitive sequence collections\",\n                \"Approximate string matching with arbitrary costs for text and hypertext\",\n                \"Suffix arrays: A new method for on-line string searches\",\n                \"Computational pan-genomics: status, promises and challenges\",\n                \"FM-index of alignment: A compressed index for similar strings\",\n                \"Suffix tree of alignment: An efficient index for similar data\"\n            ],\n            \"reasoning\": \"Selected these 40 citations for [ref]37 based on the context and research area of Algorithms and Complexity on Indexing Founder GraphsThis is a preprint of the extended full version of conference papers in WABI 2020 [33] and ISAAC 2021 [19]. An earlier version of this preprint has also been reviewed and presented at RECOMB-seq 2021 highlights track.. The first title is the actual reference for this marker, followed by other relevant papers from the same research domain.\"\n        }\n    ]\n}"
    }
  ],
  "format": "chatml"
}