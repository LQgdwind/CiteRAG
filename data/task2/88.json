{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic citation prediction expert. Your task is to predict the most likely citations for [ref] markers in academic paper sections based on the paper content and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract + section text with [ref] markers\n- Output: top {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nTASK DESCRIPTION:\n- Input: Paper section text with [ref] markers + retrieved relevant papers\n- Output: top 40 predicted reference titles for each [ref] marker with reasoning\n- Format: JSON object with \"citations\" array containing objects with \"ref_index\", \"titles\", and \"reasoning\" fields\n\nREQUIREMENTS:\n1. Analyze the context around each [ref] marker to understand what reference is needed\n2. Consider the retrieved papers as potential references (when available)\n3. Consider the surrounding text, research area, and topic\n4. Generate realistic and relevant reference titles that would fit the context\n5. Provide detailed reasoning for each prediction to prevent hallucination\n6. Output format: JSON object with \"citations\" array\n7. Generate exactly 40 most relevant reference titles for each [ref]\n8. Ensure titles are realistic and appropriate for the research area\n9. Include reasoning that explains why each title is relevant to the specific [ref] context\n10. Use proper JSON escaping for special characters (escape quotes with \\\")\n11. Ensure all strings are properly quoted and escaped\n\nEXAMPLE:\nInput:\n\"Federated Learning aims to train models in massively distributed networks [ref]38 at a large scale [ref]5, over multiple sources of heterogeneous data [ref]30.\"\n\nRetrieved papers (top {top_r}):\n1. Title: Communication-efficient learning of deep networks from decentralized data\n   Abstract: We report on a series of experiments with federated learning systems for decentralized data training.\n\n2. Title: Federated Learning: Challenges, Methods, and Future Directions\n   Abstract: A comprehensive survey of federated learning approaches and challenges in distributed settings.\n\nOutput:\n{\n  \"citations\": [\n    {\n      \"ref_index\": 38,\n      \"titles\": [\n        \"Communication-efficient learning of deep networks from decentralized data\",\n        \"Federated Learning: Challenges, Methods, and Future Directions\",\n        \"Federated optimization in heterogeneous networks\",\n        \"Towards federated learning at scale: System design\",\n        \"A performance evaluation of federated learning algorithms\",\n        \"Distributed machine learning: A survey\",\n        \"Communication protocols for distributed learning\",\n        \"Scalable federated learning systems\",\n        \"Efficient distributed training algorithms\",\n        \"Large-scale distributed learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]38 appears in the context of 'massively distributed networks' for federated learning, so it likely refers to foundational papers on federated learning systems, distributed training, and communication-efficient methods in distributed networks.\"\n    },\n    {\n      \"ref_index\": 5,\n      \"titles\": [\n        \"Bagging predictors\",\n        \"Ensemble methods in machine learning\",\n        \"Random forests for classification\",\n        \"Bootstrap methods and their application\",\n        \"Combining multiple classifiers\",\n        \"Large-scale machine learning systems\",\n        \"Distributed ensemble methods\",\n        \"Scalable classification algorithms\",\n        \"Massive data processing techniques\",\n        \"High-performance machine learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]5 appears in the context of 'at a large scale', suggesting it refers to papers on scaling machine learning methods, ensemble techniques, or methods that can handle large-scale data and distributed settings.\"\n    },\n    {\n      \"ref_index\": 30,\n      \"titles\": [\n        \"Learning fair representations\",\n        \"Fair machine learning: A survey\",\n        \"Bias in machine learning systems\",\n        \"Addressing fairness in AI systems\",\n        \"Fair representation learning\",\n        \"Heterogeneous data handling methods\",\n        \"Multi-source learning algorithms\",\n        \"Cross-domain representation learning\",\n        \"Fair learning from diverse data\",\n        \"Bias mitigation in heterogeneous datasets\"\n      ],\n      \"reasoning\": \"This [ref]30 appears in the context of 'heterogeneous data' and 'fair representation learning', indicating it likely refers to papers on heterogenous data handling, bias mitigation, and learning representations that are fair across different data distributions.\"\n    }\n  ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped.\n\nIMPORTANT NOTES ON REASONING:\n- The reasoning field is crucial for preventing hallucination\n- Each reasoning should be specific to the context around the [ref] marker\n- Explain the connection between the predicted titles and the research topic\n- This helps validate that predictions are grounded in the actual content\n- Reasoning should be concise but informative (2-3 sentences)\n- Consider retrieved papers when available to improve prediction accuracy"
    },
    {
      "role": "user",
      "content": "Paper Title: Gradient tracking and variance reduction for decentralized optimization and machine learning\n\nPaper Abstract: \n\nPaper Section Text:\nGT-SVRG, formally described in Algorithm 4, is a double-loop method, where the outer loop index is k𝑘k and the inner loop index is t𝑡t, that builds upon the centralized SVRG. At every outer loop, each node i𝑖i computes a local batch gradient and proceeds to a finite number T𝑇T of inner loop iterations; in the inner loop, each node i𝑖i performs GT-DSGD (type) iterations in addition to updating the local gradient estimate 𝐯tisuperscriptsubscript𝐯𝑡𝑖\\mathbf{v}_{t}^{i} (Algorithm 4: Step 7). It can be verified that 𝐯tisuperscriptsubscript𝐯𝑡𝑖\\mathbf{v}_{t}^{i} is an unbiased estimator of the corresponding local batch gradient at node i𝑖i. In practice, all options (a)-(c) work similarly well. For example, under option (a), it is shown in  that with α=𝒪​((1−λ)2L​κ)𝛼𝒪superscript1𝜆2𝐿𝜅\\alpha=\\mathcal{O}\\left(\\frac{(1-\\lambda)^{2}}{L\\kappa}\\right) and T=𝒪​(κ2​log⁡κ(1−λ)2)𝑇𝒪superscript𝜅2𝜅superscript1𝜆2T=\\mathcal{O}\\left(\\frac{\\kappa^{2}\\log\\kappa}{(1-\\lambda)^{2}}\\right), the outer loop of GT-SVRG follows: for some U>0𝑈0U>0. This argument implies that GT-SVRG achieves ϵitalic-ϵ\\epsilon-accuracy of 𝜽∗superscript𝜽\\boldsymbol{\\theta}^{*} in 𝒪​(log⁡1ϵ)𝒪1italic-ϵ\\mathcal{O}\\left(\\log\\frac{1}{\\epsilon}\\right) outer loop iterations. We further note that each outer-loop update requires each node i𝑖i to compute mi+2​Tsubscript𝑚𝑖2𝑇m_{i}+2T local component gradients. GT-SVRG thus achieves ϵitalic-ϵ\\epsilon-accuracy of 𝜽∗superscript𝜽\\boldsymbol{\\theta}^{*} in totally parallel local component gradient computations. Both GT-SAGA and GT-SVRG have a low per-iteration computation cost and converge linearly to 𝛉∗superscript𝛉\\boldsymbol{\\theta}^{*}, i.e., they reach ϵitalic-ϵ\\epsilon-accuracy of 𝛉∗superscript𝛉\\boldsymbol{\\theta}^{*} respectively in 𝒪​(max⁡{M,Mm​κ2(1−λ)2}​log⁡1ϵ)𝒪𝑀𝑀𝑚superscript𝜅2superscript1𝜆21italic-ϵ\\mathcal{O}\\left(\\max\\left\\{M,\\frac{M}{m}\\frac{\\kappa^{2}}{(1-\\lambda)^{2}}\\right\\}\\log\\frac{1}{\\epsilon}\\right) and 𝒪​((M+κ2​log⁡κ(1−λ)2)​log⁡1ϵ)𝒪𝑀superscript𝜅2𝜅superscript1𝜆21italic-ϵ\\mathcal{O}\\left(\\left(M+\\frac{\\kappa^{2}\\log\\kappa}{(1-\\lambda)^{2}}\\right)\\log\\frac{1}{\\epsilon}\\right) parallel local component gradient computations. Interestingly, when the data sets at the nodes are large and balanced such that M≈m≫κ21−λ2𝑀𝑚much-greater-thansuperscript𝜅21superscript𝜆2M\\approx m\\gg\\frac{\\kappa^{2}}{1-\\lambda^{2}}, the complexities of GT-SAGA and GT-SVRG become 𝒪​(M​log⁡1ϵ)𝒪𝑀1italic-ϵ\\mathcal{O}(M\\log\\frac{1}{\\epsilon}), independent of the network, and are n𝑛n times faster than that of centralized SAGA and SVRG. Clearly, in this “big-data” regime, GT-SAGA and GT-SVRG each acts effectively as a means for parallel computation and achieves a linear speed-up compared with its centralized counterpart. It can also be observed that when data samples are distributed over the network in an unbalanced way, i.e., Mm𝑀𝑚\\frac{M}{m} is large, GT-SVRG may achieve a lower complexity than GT-SAGA in terms of number of component gradient evaluations. However, from a practical implementation standpoint, an unbalanced data distribution may lead to a longer wall-clock time in GT-SVRG. This is because the next inner loop cannot be executed until all nodes finish their local batch gradient computations and nodes with a large amount of data take longer to finish this computation, leading to an overall increase in runtime. Clearly, there is an inherent trade-off between network synchrony, latency, and the storage of gradients as far as the relative implementation complexities of GT-SAGA and GT-SVRG are concerned. If each node is capable of storing all local component gradients, then GT-SAGA is preferable due to its flexibility of implementation and faster convergence in practice. On the other hand, for large-scale optimization problems where each node holds a very large number of data samples, storing all component gradients may be infeasible and therefore GT-SVRG may be preferred. Existing decentralized VR methods include DSA [ref]30 that combines EXTRA  with SAGA , diffusion-AVRG that combines exact diffusion [ref]28 and AVRG [ref]31, DSBA  that adds proximal mapping  to each iteration of DSA, ADFS  that applies an accelerated randomized proximal coordinate gradient method  to the dual formulation of Problem P3, and Network-SVRG/SARAH  that implements variance-reduction in the decentralized DANE framework based on gradient tracking. We note that in large-scale scenarios where M≈m𝑀𝑚M\\approx m is very large, both GT-SAGA and GT-SVRG improve upon the convergence rate of these methods in terms of the joint dependence on κ𝜅\\kappa and M≈m𝑀𝑚M\\approx m, with the exception of DSBA and ADFS. Both DSBA and ADFS achieve better iteration complexity, however, at the expense of computing the proximal mapping of a component function at each iteration. Although the computation of this proximal mapping is efficient for certain function classes, it can be very expensive for general functions. We now compare the communication complexities of the decentralized algorithms discussed in this article. Since the node deployment is not necessarily deterministic, we provide the expected number of communication rounds per node required to achieve an ϵitalic-ϵ\\epsilon-accurate solution (each communication is over a p𝑝p-dimensional vector). Note that DSGD, GT-DSGD, and GT-SAGA all incur 𝒪​(dexp)𝒪subscript𝑑exp\\mathcal{O}(d_{\\mbox{\\footnotesize exp}}) expected number of communication rounds per node, at each iteration, where dexpsubscript𝑑expd_{\\mbox{\\footnotesize exp}} is the expected degree of the (possibly random) communication graph 𝒢𝒢\\mathcal{G}. Thus, their expected communication complexity is their iteration complexity scaled by dexpsubscript𝑑expd_{\\mbox{\\footnotesize exp}} and is given by 𝒪​(dexp​1ϵ)𝒪subscript𝑑exp1italic-ϵ\\mathcal{O}(d_{\\mbox{\\footnotesize exp}}\\frac{1}{\\epsilon}), 𝒪​(dexp​1ϵ)𝒪subscript𝑑exp1italic-ϵ\\mathcal{O}(d_{\\mbox{\\footnotesize exp}}\\frac{1}{\\epsilon}), and 𝒪​(max⁡{M,Mm​κ2(1−λ)2}​dexp​log⁡1ϵ)𝒪𝑀𝑀𝑚superscript𝜅2superscript1𝜆2subscript𝑑exp1italic-ϵ\\mathcal{O}\\left(\\max\\left\\{M,\\frac{M}{m}\\frac{\\kappa^{2}}{(1-\\lambda)^{2}}\\right\\}d_{\\mbox{\\footnotesize exp}}\\log\\frac{1}{\\epsilon}\\right), respectively. For GT-SVRG, we note that a total number of 𝒪​(log⁡1ϵ)𝒪1italic-ϵ\\mathcal{O}(\\log\\frac{1}{\\epsilon}) outer-loop iterations are required, where each corresponding inner loop incurs 𝒪​(T)=𝒪​(κ2​log⁡κ(1−λ)2​dexp)𝒪𝑇𝒪superscript𝜅2𝜅superscript1𝜆2subscript𝑑exp\\mathcal{O}(T)=\\mathcal{O}\\left(\\frac{\\kappa^{2}\\log\\kappa}{(1-\\lambda)^{2}}d_{\\mbox{\\footnotesize exp}}\\right) rounds of communication, resulting into to a total communication complexity of 𝒪​(κ2​log⁡κ(1−λ)2​dexp​log⁡1ϵ)𝒪superscript𝜅2𝜅superscript1𝜆2subscript𝑑exp1italic-ϵ\\mathcal{O}\\left(\\frac{\\kappa^{2}\\log\\kappa}{(1-\\lambda)^{2}}d_{\\mbox{\\footnotesize exp}}\\log\\frac{1}{\\epsilon}\\right). Clearly, GT-SAGA and GT-SVRG, due to their fast linear convergence, improve upon the communication complexities of DSGD and GT-DSGD. It is further interesting to observe that in the big-data regime where each node has a large number of data samples, GT-SVRG achieves a lower communication complexity than GT-SAGA. Finally, we note that all gradient-tracking based algorithms require two consecutive rounds of communication per stochastic gradient evaluation with neighboring nodes to update the estimate 𝛉kisuperscriptsubscript𝛉𝑘𝑖\\boldsymbol{\\theta}_{k}^{i} and the gradient tracker 𝐝kisuperscriptsubscript𝐝𝑘𝑖\\mathbf{d}_{k}^{i}, respectively. This may increase the communication burden of the network especially when 𝛉kisuperscriptsubscript𝛉𝑘𝑖\\boldsymbol{\\theta}_{k}^{i} is of high dimension. We note that, for the sake of completeness, we add dexpsubscript𝑑expd_{\\mbox{\\footnotesize exp}} to the communication complexities, which is a function of the underlying graph 𝒢𝒢\\mathcal{G}; in particular, dexp=𝒪​(1)subscript𝑑exp𝒪1d_{\\mbox{\\footnotesize exp}}\\!=\\!\\mathcal{O}(1) for random geometric graphs (assuming constant density of deployment of nodes) and dexp=𝒪​(log⁡n)subscript𝑑exp𝒪𝑛d_{\\mbox{\\footnotesize exp}}\\!=\\!\\mathcal{O}(\\log n) for exponential graphs, see also Section: Numerical Illustrations on these graphs.\n\nReference markers found: [30]\n\nContext windows for each [ref]:\n[ref]30: where each node holds a very large number of data samples, storing all component gradients may be infeasible and therefore GT-SVRG may be preferred. Existing decentralized VR methods include DSA [ref]30 that combines EXTRA  with SAGA , diffusion-AVRG that combines exact diffusion [ref]28 and AVRG [ref]31, DSBA  that adds proximal mapping  to each iteration of DSA, ADFS  that applies an\n\n{retrieved_text}\n\nGenerate exactly 40 most likely reference titles for each [ref] marker. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL REQUIREMENTS:\n1. For each [ref] marker, provide detailed reasoning explaining why the predicted titles are relevant\n2. The reasoning should analyze the specific context around each [ref] marker\n3. Explain how each title connects to the research topic, methodology, or problem being discussed\n4. This reasoning helps prevent hallucination by grounding predictions in the actual context\n5. Consider retrieved papers when available to improve prediction accuracy\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"citations\": [\n        {\n            \"ref_index\": 38,\n            \"titles\": [\n                \"Reference Title 1\",\n                \"Reference Title 2\",\n                \"Reference Title 3\",\n                \"Reference Title 4\",\n                \"Reference Title 40\"\n            ],\n            \"reasoning\": \"Detailed explanation of why these titles are relevant to [ref]38 based on the surrounding context, research area, and specific topic being discussed.\"\n        }\n    ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped. Do not include authors, venues, or years - only the paper titles. Generate exactly 40 titles for each [ref] marker with reasoning."
    },
    {
      "role": "assistant",
      "content": "{\n    \"citations\": [\n        {\n            \"ref_index\": 30,\n            \"titles\": [\n                \"Variance-Reduced Stochastic Learning under Random Reshuffling\",\n                \"Optimization Methods for Large-Scale Machine Learning\",\n                \"Pattern Recognition and Machine Learning\",\n                \"Lectures on convex optimization, vol. 137\",\n                \"Stochastic gradient descent, weighted sampling, and the randomized Kaczmarz algorithm\",\n                \"SGD: General analysis and improved rates\",\n                \"Minimizing finite sums with the stochastic average gradient\",\n                \"SAGA: A fast incremental gradient method with support for non-strongly convex composite objectives\",\n                \"Accelerating stochastic gradient descent using predictive variance reduction\",\n                \"SARAH: A Novel Method for Machine Learning Problems Using Stochastic Recursive Gradient\",\n                \"Consensus and cooperation in networked multi-agent systems\",\n                \"Network topology and communication-computation tradeoffs in decentralized optimization\",\n                \"Matrix analysis\",\n                \"Distributed subgradient methods for multi-agent optimization\",\n                \"Diffusion adaptation strategies for distributed optimization and learning over networks\",\n                \"Distributed stochastic subgradient projection algorithms for convex optimization\",\n                \"On the performance of exact diffusion over adaptive networks\",\n                \"Convergence rates for distributed stochastic optimization over random networks\",\n                \"A non-asymptotic analysis of network independence for distributed stochastic gradient descent\",\n                \"NEXT: In-Network Nonconvex Optimization\",\n                \"Augmented distributed gradient methods for multi-agent optimization under uncoordinated constant stepsizes\",\n                \"Harnessing smoothness to accelerate distributed optimization\",\n                \"Achieving geometric convergence for distributed optimization over time-varying graphs\",\n                \"A linear algorithm for optimization over directed graphs with geometric convergence\",\n                \"Discrete-time dynamic average consensus\",\n                \"A linearly convergent proximal gradient algorithm for decentralized optimization\",\n                \"A Distributed Stochastic Gradient Tracking Method\",\n                \"EXTRA: An exact first-order algorithm for decentralized consensus optimization\",\n                \"Exact diffusion for distributed optimization and learning—Part I: Algorithm development\",\n                \"Variance-Reduced Decentralized Stochastic Optimization with Accelerated Convergence\",\n                \"DSA: Decentralized double stochastic averaging gradient algorithm\",\n                \"Towards More Efficient Stochastic Decentralized Learning: Faster Convergence and Sparse Communication\",\n                \"A Simple Practical Accelerated Method for Finite Sums\",\n                \"Asynchronous accelerated proximal stochastic gradient for strongly convex distributed finite sums\",\n                \"An accelerated randomized proximal coordinate gradient method and its application to regularized empirical risk minimization\",\n                \"Communication-efficient distributed optimization in networks with gradient tracking\",\n                \"The mnist database of handwritten digits\",\n                \"Variance-Reduced Stochastic Learning by Networked Agents under Random Reshuffling\",\n                \"Gossip-based computation of aggregate information\",\n                \"Stochastic Gradient Push for Distributed Deep Learning\"\n            ],\n            \"reasoning\": \"Selected these 40 citations for [ref]30 based on the context and research area of Gradient tracking and variance reduction for decentralized optimization and machine learning. The first title is the actual reference for this marker, followed by other relevant papers from the same research domain.\"\n        }\n    ]\n}"
    }
  ],
  "format": "chatml"
}