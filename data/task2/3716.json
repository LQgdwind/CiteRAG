{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic citation prediction expert. Your task is to predict the most likely citations for [ref] markers in academic paper sections based on the paper content and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract + section text with [ref] markers\n- Output: top {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nTASK DESCRIPTION:\n- Input: Paper section text with [ref] markers + retrieved relevant papers\n- Output: top 40 predicted reference titles for each [ref] marker with reasoning\n- Format: JSON object with \"citations\" array containing objects with \"ref_index\", \"titles\", and \"reasoning\" fields\n\nREQUIREMENTS:\n1. Analyze the context around each [ref] marker to understand what reference is needed\n2. Consider the retrieved papers as potential references (when available)\n3. Consider the surrounding text, research area, and topic\n4. Generate realistic and relevant reference titles that would fit the context\n5. Provide detailed reasoning for each prediction to prevent hallucination\n6. Output format: JSON object with \"citations\" array\n7. Generate exactly 40 most relevant reference titles for each [ref]\n8. Ensure titles are realistic and appropriate for the research area\n9. Include reasoning that explains why each title is relevant to the specific [ref] context\n10. Use proper JSON escaping for special characters (escape quotes with \\\")\n11. Ensure all strings are properly quoted and escaped\n\nEXAMPLE:\nInput:\n\"Federated Learning aims to train models in massively distributed networks [ref]38 at a large scale [ref]5, over multiple sources of heterogeneous data [ref]30.\"\n\nRetrieved papers (top {top_r}):\n1. Title: Communication-efficient learning of deep networks from decentralized data\n   Abstract: We report on a series of experiments with federated learning systems for decentralized data training.\n\n2. Title: Federated Learning: Challenges, Methods, and Future Directions\n   Abstract: A comprehensive survey of federated learning approaches and challenges in distributed settings.\n\nOutput:\n{\n  \"citations\": [\n    {\n      \"ref_index\": 38,\n      \"titles\": [\n        \"Communication-efficient learning of deep networks from decentralized data\",\n        \"Federated Learning: Challenges, Methods, and Future Directions\",\n        \"Federated optimization in heterogeneous networks\",\n        \"Towards federated learning at scale: System design\",\n        \"A performance evaluation of federated learning algorithms\",\n        \"Distributed machine learning: A survey\",\n        \"Communication protocols for distributed learning\",\n        \"Scalable federated learning systems\",\n        \"Efficient distributed training algorithms\",\n        \"Large-scale distributed learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]38 appears in the context of 'massively distributed networks' for federated learning, so it likely refers to foundational papers on federated learning systems, distributed training, and communication-efficient methods in distributed networks.\"\n    },\n    {\n      \"ref_index\": 5,\n      \"titles\": [\n        \"Bagging predictors\",\n        \"Ensemble methods in machine learning\",\n        \"Random forests for classification\",\n        \"Bootstrap methods and their application\",\n        \"Combining multiple classifiers\",\n        \"Large-scale machine learning systems\",\n        \"Distributed ensemble methods\",\n        \"Scalable classification algorithms\",\n        \"Massive data processing techniques\",\n        \"High-performance machine learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]5 appears in the context of 'at a large scale', suggesting it refers to papers on scaling machine learning methods, ensemble techniques, or methods that can handle large-scale data and distributed settings.\"\n    },\n    {\n      \"ref_index\": 30,\n      \"titles\": [\n        \"Learning fair representations\",\n        \"Fair machine learning: A survey\",\n        \"Bias in machine learning systems\",\n        \"Addressing fairness in AI systems\",\n        \"Fair representation learning\",\n        \"Heterogeneous data handling methods\",\n        \"Multi-source learning algorithms\",\n        \"Cross-domain representation learning\",\n        \"Fair learning from diverse data\",\n        \"Bias mitigation in heterogeneous datasets\"\n      ],\n      \"reasoning\": \"This [ref]30 appears in the context of 'heterogeneous data' and 'fair representation learning', indicating it likely refers to papers on heterogenous data handling, bias mitigation, and learning representations that are fair across different data distributions.\"\n    }\n  ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped.\n\nIMPORTANT NOTES ON REASONING:\n- The reasoning field is crucial for preventing hallucination\n- Each reasoning should be specific to the context around the [ref] marker\n- Explain the connection between the predicted titles and the research topic\n- This helps validate that predictions are grounded in the actual content\n- Reasoning should be concise but informative (2-3 sentences)\n- Consider retrieved papers when available to improve prediction accuracy"
    },
    {
      "role": "user",
      "content": "Paper Title: On 𝑑-stable locally checkable problems parameterized by mim-width\n\nPaper Abstract: \n\nPaper Section Text:\nIn this section we give a more straightforward algorithm to solve d𝑑d-stable locally checkable problems with size and connectivity constraints.\nIts complexity is slightly better than the one obtained with the DN logic formulation.\nTo be precise, we will show the following theorem:\n\nSee 1.2 We first define some necessary terms and notation.\nLet d𝑑d be a positive integer.\nWe define an equivalence relation =dsubscript𝑑=_{d} on the natural numbers, where two non-negative integers i𝑖i and j𝑗j are equivalent if and only if min⁡(d,i)=min⁡(d,j)𝑑𝑖𝑑𝑗\\min(d,i)=\\min(d,j).\nFor a binary decomposition tree (T,δ)𝑇𝛿(T,\\delta) of a graph G𝐺G and a node v∈V​(T)𝑣𝑉𝑇v\\in V(T),\nwe make use of the equivalence relation ≡dvsuperscriptsubscript𝑑𝑣\\equiv_{d}^{v} presented in .\nIt is defined on subsets of Tvsubscript𝑇𝑣T_{v} where two subsets S,S′⊆Tv𝑆superscript𝑆′subscript𝑇𝑣S,S^{\\prime}\\subseteq T_{v} are equivalent if and only if for any y∈Tv¯𝑦subscript𝑇¯𝑣y\\in T_{\\overline{v}} we have |N​(y)∩S|=d|N​(y)∩S′|subscript𝑑𝑁𝑦𝑆𝑁𝑦superscript𝑆′|N(y)\\cap S|=_{d}|N(y)\\cap S^{\\prime}|.\nIntuitively, from a perspective of locally checkable problems, we could say that two subsets of Tvsubscript𝑇𝑣T_{v} are equivalent if replacing one for the other would not influence the output of any d𝑑d-stable check function when applied to any vertex y𝑦y in Tv¯subscript𝑇¯𝑣T_{\\overline{v}}.\nThe idea behind this is that we do not want to save all partial solutions in a dynamic programming algorithm, and (roughly speaking) it is enough to save one representative for each equivalence class.\nOne of the key ideas when working with this equivalence class is then to give an upper bound for the number of equivalence classes which then leads to an upper bound of the number of partial solutions that we have to save.\nSuch an upper bound in terms of the mim-width of the decomposition of the graph was given in , where it was shown that the number of equivalence classes of ≡dvsuperscriptsubscript𝑑𝑣\\equiv_{d}^{v} is at most O​(nd⋅m​i​m​w​(G))𝑂superscript𝑛⋅𝑑𝑚𝑖𝑚𝑤𝐺O(n^{d\\cdot mimw(G)}). Based on ≡dvsuperscriptsubscript𝑑𝑣\\equiv_{d}^{v}, we\ndefine the equivalence relation ≡d,qvsuperscriptsubscript𝑑𝑞𝑣\\equiv_{d,q}^{v} on q𝑞q-tuples of subsets of Tvsubscript𝑇𝑣T_{v}, where two q𝑞q-tuples X,X′∈(𝒫​(Tv))q𝑋superscript𝑋′superscript𝒫subscript𝑇𝑣𝑞X,X^{\\prime}\\in(\\mathcal{P}(T_{v}))^{q} are equivalent if and only if they are entry-wise equivalent according to ≡dvsuperscriptsubscript𝑑𝑣\\equiv_{d}^{v}.\nAnalogously, we define the equivalence relations ≡dv¯superscriptsubscript𝑑¯𝑣\\equiv_{d}^{\\overline{v}} and ≡d,qv¯superscriptsubscript𝑑𝑞¯𝑣\\equiv_{d,q}^{\\overline{v}} where subsets S,S′𝑆superscript𝑆′S,S^{\\prime} of Tv¯subscript𝑇¯𝑣T_{\\overline{v}} are equivalent if for every vertex w𝑤w in Tvsubscript𝑇𝑣T_{v} we have |N​(w)∩S|=d|N​(w)∩S′|subscript𝑑𝑁𝑤𝑆𝑁𝑤superscript𝑆′|N(w)\\cap S|=_{d}|N(w)\\cap S^{\\prime}|, and analogously for tuples in (𝒫​(Tv¯))qsuperscript𝒫subscript𝑇¯𝑣𝑞(\\mathcal{P}(T_{\\overline{v}}))^{q}.\nWe will mainly use these relations when referring to partitions of Tvsubscript𝑇𝑣T_{v} and not arbitrary tuples of subsets. For an equivalence relation ≡\\equiv on a set S𝑆S and X∈S𝑋𝑆X\\in S, we denote by [X]≡superscriptdelimited-[]𝑋[X]^{\\equiv} the equivalence class which consists of all elements X′∈Ssuperscript𝑋′𝑆X^{\\prime}\\in S such that X′≡Xsuperscript𝑋′𝑋X^{\\prime}\\equiv X.\nWhen the equivalence relation is clear from context, we will drop the superscript and only write [X]delimited-[]𝑋[X].\nWe denote by ℛdvsuperscriptsubscriptℛ𝑑𝑣\\mathcal{R}_{d}^{v} and ℛd,qvsuperscriptsubscriptℛ𝑑𝑞𝑣\\mathcal{R}_{d,q}^{v} the set of all equivalence classes of the relations ≡dvsuperscriptsubscript𝑑𝑣\\equiv_{d}^{v} and ≡d,qvsuperscriptsubscript𝑑𝑞𝑣\\equiv_{d,q}^{v}, respectively, and analogously for v¯¯𝑣\\overline{v}.\nIf R∈ℛd,qv𝑅superscriptsubscriptℛ𝑑𝑞𝑣R\\in\\mathcal{R}_{d,q}^{v} and X∈(𝒫​(Tv))q𝑋superscript𝒫subscript𝑇𝑣𝑞X\\in(\\mathcal{P}(T_{v}))^{q} we write X≡d,qvRsuperscriptsubscript𝑑𝑞𝑣𝑋𝑅X\\equiv_{d,q}^{v}R if X𝑋X is contained in the equivalence class R𝑅R and say that X𝑋X is a representative of R𝑅R (and analogously for v¯¯𝑣\\overline{v}).\nIf R∈ℛdv𝑅superscriptsubscriptℛ𝑑𝑣R\\in\\mathcal{R}_{d}^{v} and w∈Tv¯𝑤subscript𝑇¯𝑣w\\in T_{\\overline{v}} we define |N​(w)∩R|𝑁𝑤𝑅|N(w)\\cap R| to be the unique number i∈{0,…,d}𝑖0…𝑑i\\in\\left\\{0,\\ldots,d\\right\\} such that i=d|N​(w)∩S|subscript𝑑𝑖𝑁𝑤𝑆i=_{d}|N(w)\\cap S| for some S⊆Tv𝑆subscript𝑇𝑣S\\subseteq T_{v} with S≡dvRsuperscriptsubscript𝑑𝑣𝑆𝑅S\\equiv_{d}^{v}R.\nThis notion is well-defined by the definition of ≡dvsuperscriptsubscript𝑑𝑣\\equiv_{d}^{v}.\nWe say that w𝑤w is adjacent to R𝑅R if |N​(w)∩R|≥1𝑁𝑤𝑅1|N(w)\\cap R|\\geq 1 and we say that a set S⊆Tv¯𝑆subscript𝑇¯𝑣S\\subseteq T_{\\overline{v}} is adjacent to R𝑅R if it contains a vertex which is adjacent to R𝑅R.\nIf C⊆[q]𝐶delimited-[]𝑞C\\subseteq[q] and X∈(𝒫​(Tv))q𝑋superscript𝒫subscript𝑇𝑣𝑞X\\in(\\mathcal{P}(T_{v}))^{q}, we denote by XCsubscript𝑋𝐶X_{C} the set ⋃i∈CXi⊆Tvsubscript𝑖𝐶subscript𝑋𝑖subscript𝑇𝑣\\bigcup_{i\\in C}X_{i}\\subseteq T_{v} and we also define the equivalence class [X]Csubscriptdelimited-[]𝑋𝐶[X]_{C} of the relation ≡dvsuperscriptsubscript𝑑𝑣\\equiv_{d}^{v} by setting [X]C=[XC]subscriptdelimited-[]𝑋𝐶delimited-[]subscript𝑋𝐶[X]_{C}=[X_{C}].\nWe do everything analogously for Tv¯subscript𝑇¯𝑣T_{\\overline{v}}.\nWe define snecd​(T)=maxv∈V​(T)⁡(max⁡{|ℛdv|,|ℛdv¯|})subscriptsnec𝑑𝑇subscript𝑣𝑉𝑇superscriptsubscriptℛ𝑑𝑣superscriptsubscriptℛ𝑑¯𝑣\\textrm{snec}_{d}(T)=\\max_{v\\in V(T)}(\\max\\{|\\mathcal{R}_{d}^{v}|,|\\mathcal{R}_{d}^{\\overline{v}}|\\}) and snecd,q​(T)=maxv∈V​(T)⁡(max⁡{|ℛd,qv|,|ℛd,qv¯|})subscriptsnec𝑑𝑞𝑇subscript𝑣𝑉𝑇superscriptsubscriptℛ𝑑𝑞𝑣superscriptsubscriptℛ𝑑𝑞¯𝑣\\textrm{snec}_{d,q}(T)=\\max_{v\\in V(T)}(\\max\\{|\\mathcal{R}_{d,q}^{v}|,|\\mathcal{R}_{d,q}^{\\overline{v}}|\\}). It was shown in [22, Lemma 1] that for a node v𝑣v of T𝑇T we can compute a list which contains exactly one representative of each equivalence class of ≡dvsuperscriptsubscript𝑑𝑣\\equiv_{d}^{v}, in time O​(snecd​(T)​log⁡(snecd​(T))​|V​(G)|2)𝑂subscriptsnec𝑑𝑇subscriptsnec𝑑𝑇superscript𝑉𝐺2O(\\textrm{snec}_{d}(T)\\log(\\textrm{snec}_{d}(T))|V(G)|^{2}).\nThe same applies to ≡dv¯superscriptsubscript𝑑¯𝑣\\equiv_{d}^{\\overline{v}}.\nBy [10, Lemma 2], snecd​(T)≤nd⋅m​i​m​w​(T,δ)subscriptsnec𝑑𝑇superscript𝑛⋅𝑑𝑚𝑖𝑚𝑤𝑇𝛿\\textrm{snec}_{d}(T)\\leq n^{d\\cdot mimw(T,\\delta)}.\nSince the equivalence classes of ≡d,qvsuperscriptsubscript𝑑𝑞𝑣\\equiv_{d,q}^{v} and ≡d,qv¯superscriptsubscript𝑑𝑞¯𝑣\\equiv_{d,q}^{\\overline{v}} are q𝑞q-tuples of equivalence classes of ≡dvsuperscriptsubscript𝑑𝑣\\equiv_{d}^{v} and ≡dv¯superscriptsubscript𝑑¯𝑣\\equiv_{d}^{\\overline{v}}, respectively, their representatives are simply the q𝑞q-tuples of the representatives of ≡dvsuperscriptsubscript𝑑𝑣\\equiv_{d}^{v} and ≡dv¯superscriptsubscript𝑑¯𝑣\\equiv_{d}^{\\overline{v}}, respectively.\nThus, we can also efficiently compute a list of representatives and snecd,q​(T)≤nq⋅d⋅m​i​m​w​(T,δ)subscriptsnec𝑑𝑞𝑇superscript𝑛⋅𝑞𝑑𝑚𝑖𝑚𝑤𝑇𝛿\\textrm{snec}_{d,q}(T)\\leq n^{q\\cdot d\\cdot mimw(T,\\delta)}. The next lemma shows that it is possible to solve, in polynomial time for graphs of bounded mim-width with a given suitable binary decomposition tree, a locally checkable problem with a d𝑑d-stable check function, a d𝑑d-stable weight function, a set of positive connectivity constraints 𝒞⊆𝒫​([q])𝒞𝒫delimited-[]𝑞\\mathcal{C}\\subseteq\\mathcal{P}([q]) and a size constraint 𝒦𝒦\\mathcal{K} with |𝒦|=1𝒦1|\\mathcal{K}|=1.\nWe will later explain how this result can be easily extended to a set 𝒦𝒦\\mathcal{K} of several size constraints and to negative connectivity constraints.\nFor the complexity analysis, we will use the fact that d𝑑d and q𝑞q are constants and that |𝒞|≤2q𝒞superscript2𝑞|\\mathcal{C}|\\leq 2^{q} (and hence is bounded by a constant). Let d,q𝑑𝑞d,q be integers, with q≥2𝑞2q\\geq 2.\nConsider a d𝑑d-stable locally checkable problem ΠΠ\\Pi with q𝑞q colors, a set 𝒦𝒦\\mathcal{K} containing only one size constraint K𝐾K, and a set of positive connectivity constraints 𝒞𝒞\\mathcal{C}.\nThen, for an input graph G𝐺G with an associated binary decomposition tree (T,δ)𝑇𝛿(T,\\delta), we can solve ΠΠ\\Pi in\nO​(n2​q⋅snecd,q​(T)6​|𝒞|+6⋅(n2+snecd,q​(T)ω−1))𝑂⋅⋅superscript𝑛2𝑞subscriptsnec𝑑𝑞superscript𝑇6𝒞6superscript𝑛2subscriptsnec𝑑𝑞superscript𝑇𝜔1O\\left(n^{2q}\\cdot\\textrm{snec}_{d,q}(T)^{6|\\mathcal{C}|+6}\\cdot\\left(n^{2}+\\textrm{snec}_{d,q}(T)^{\\omega-1}\\right)\\right)\ntime,\nwhere n=|V​(G)|𝑛𝑉𝐺n=|V(G)| and ω𝜔\\omega is the matrix multiplication exponent (ω<2.4𝜔2.4\\omega<2.4, ). This proof closely follows the ones given in  and [ref]15.\nOur focus will be on highlighting that the d𝑑d-stability of the check function is enough to guarantee the correctness of the output, and how the weight function and the restriction on the size of color classes can be implemented. First of all, notice that finding a coloring c𝑐c of G𝐺G with q𝑞q colors {a1,…,aq}subscript𝑎1…subscript𝑎𝑞\\{a_{1},\\ldots,a_{q}\\} is equivalent to finding a q𝑞q-partition (X1,…,Xq)subscript𝑋1…subscript𝑋𝑞(X_{1},\\ldots,X_{q}) of V​(G)𝑉𝐺V(G), where Xj=c−1​(aj)subscript𝑋𝑗superscript𝑐1subscript𝑎𝑗X_{j}=c^{-1}(a_{j}) for all j∈[q]𝑗delimited-[]𝑞j\\in[q].\nWe will therefore show how to compute a q𝑞q-partition X∈partq​(V​(G))𝑋subscriptpart𝑞𝑉𝐺X\\in\\textrm{part}_{q}(V(G)) such that\nc​h​e​c​k​(v,a,|N​(v)∩X1|,…,|N​(v)∩Xq|)=True𝑐ℎ𝑒𝑐𝑘𝑣𝑎𝑁𝑣subscript𝑋1…𝑁𝑣subscript𝑋𝑞Truecheck(v,a,|N(v)\\cap X_{1}|,\\ldots,|N(v)\\cap X_{q}|)=\\textsc{True} for all v∈V​(G)𝑣𝑉𝐺v\\in V(G) and a∈Colors𝑎Colorsa\\in\\textsc{Colors},\n|X|=K𝑋𝐾|X|=K and\nG​[XC]𝐺delimited-[]subscript𝑋𝐶G[X_{C}] is connected for all C∈𝒞𝐶𝒞C\\in\\mathcal{C}.\nWe will assume that G𝐺G does not contain isolated vertices (if it did, we could solve the locally checkable problem independently in each connected component). For every v∈V​(T)𝑣𝑉𝑇v\\in V(T), X∈partq​(Tv)𝑋subscriptpart𝑞subscript𝑇𝑣X\\in\\textrm{part}_{q}(T_{v}) and R′∈ℛd,qv¯superscript𝑅′superscriptsubscriptℛ𝑑𝑞¯𝑣R^{\\prime}\\in\\mathcal{R}_{d,q}^{\\overline{v}} and some Y∈partq​(Tv¯)𝑌subscriptpart𝑞subscript𝑇¯𝑣Y\\in\\textrm{part}_{q}(T_{\\overline{v}}) with Y≡d,qv¯R′superscriptsubscript𝑑𝑞¯𝑣𝑌superscript𝑅′Y\\equiv_{d,q}^{\\overline{v}}R^{\\prime} we define the weight of X𝑋X when complemented with Y𝑌Y, w​(X,Y)w𝑋𝑌\\textsc{w}(X,Y), as We define w​(X,[Y])=w​(X,Y)w𝑋delimited-[]𝑌w𝑋𝑌\\textsc{w}(X,[Y])=\\textsc{w}(X,Y).\nIt follows from the d𝑑d-stability of w and the definition of the equivalence relation ≡d,qv¯superscriptsubscript𝑑𝑞¯𝑣\\equiv_{d,q}^{\\overline{v}} that this notion is well-defined. We say that a tuple (X,Y)∈partq​(Tv)×partq​(Tv¯)𝑋𝑌subscriptpart𝑞subscript𝑇𝑣subscriptpart𝑞subscript𝑇¯𝑣(X,Y)\\in\\textrm{part}_{q}(T_{v})\\times\\textrm{part}_{q}(T_{\\overline{v}}) is Tvsubscript𝑇𝑣T_{v}-valid if for any vertex w∈Tv𝑤subscript𝑇𝑣w\\in T_{v} we have c​h​e​c​k​(w,jw,|N​(w)∩(X1∪Y1)|,…,|N​(w)∩(Xq∪Yq)|)=True𝑐ℎ𝑒𝑐𝑘𝑤subscript𝑗𝑤𝑁𝑤subscript𝑋1subscript𝑌1…𝑁𝑤subscript𝑋𝑞subscript𝑌𝑞Truecheck(w,j_{w},|N(w)\\cap(X_{1}\\cup Y_{1})|,\\ldots,|N(w)\\cap(X_{q}\\cup Y_{q})|)=\\textsc{True}, where jwsubscript𝑗𝑤j_{w} is such that w∈Xjw𝑤subscript𝑋subscript𝑗𝑤w\\in X_{j_{w}}, |X|+|Y|=K𝑋𝑌𝐾|X|+|Y|=K and G​[XC∪YC]𝐺delimited-[]subscript𝑋𝐶subscript𝑌𝐶G[X_{C}\\cup Y_{C}] is connected for each C∈𝒞𝐶𝒞C\\in\\mathcal{C}.\nWe say that a tuple (X,R′)∈partq​(Tv)×ℛd,qv¯𝑋superscript𝑅′subscriptpart𝑞subscript𝑇𝑣superscriptsubscriptℛ𝑑𝑞¯𝑣(X,R^{\\prime})\\in\\textrm{part}_{q}(T_{v})\\times\\mathcal{R}_{d,q}^{\\overline{v}} is Tvsubscript𝑇𝑣T_{v}-partially valid if for any vertex w∈Tv𝑤subscript𝑇𝑣w\\in T_{v} and for a representative Y≡d,qv¯R′superscriptsubscript𝑑𝑞¯𝑣𝑌superscript𝑅′Y\\equiv_{d,q}^{\\overline{v}}R^{\\prime} we have c​h​e​c​k​(w,jw,|N​(w)∩(X1∪Y1)|,…,|N​(w)∩(Xq∪Yq)|)=True𝑐ℎ𝑒𝑐𝑘𝑤subscript𝑗𝑤𝑁𝑤subscript𝑋1subscript𝑌1…𝑁𝑤subscript𝑋𝑞subscript𝑌𝑞Truecheck(w,j_{w},|N(w)\\cap(X_{1}\\cup Y_{1})|,\\ldots,|N(w)\\cap(X_{q}\\cup Y_{q})|)=\\textsc{True}, where jwsubscript𝑗𝑤j_{w} is such that w∈Xjw𝑤subscript𝑋subscript𝑗𝑤w\\in X_{j_{w}}.\nObserve that all of these notions are well-defined by the definition of the equivalence relation ≡d,qvsuperscriptsubscript𝑑𝑞𝑣\\equiv_{d,q}^{v}. We now explain the general idea of the algorithm.\nFor every node v∈V​(T)𝑣𝑉𝑇v\\in V(T) and for every R∈ℛd,qv𝑅superscriptsubscriptℛ𝑑𝑞𝑣R\\in\\mathcal{R}_{d,q}^{v}, R′∈ℛd,qv¯superscript𝑅′superscriptsubscriptℛ𝑑𝑞¯𝑣R^{\\prime}\\in\\mathcal{R}_{d,q}^{\\overline{v}}, K′∈partq​(|Tv|)superscript𝐾′subscriptpart𝑞subscript𝑇𝑣K^{\\prime}\\in\\textrm{part}_{q}(|T_{v}|), we will compute a set Mv​[R,R′,K′]⊆partq​(Tv)subscript𝑀𝑣𝑅superscript𝑅′superscript𝐾′subscriptpart𝑞subscript𝑇𝑣M_{v}[R,R^{\\prime},K^{\\prime}]\\subseteq\\textrm{part}_{q}(T_{v}) such that |Mv​[R,R′,K′]|≤2|𝒞|​snecd,q​(T)2​|𝒞|subscript𝑀𝑣𝑅superscript𝑅′superscript𝐾′superscript2𝒞subscriptsnec𝑑𝑞superscript𝑇2𝒞|M_{v}[R,R^{\\prime},K^{\\prime}]|\\leq 2^{|\\mathcal{C}|}\\textrm{snec}_{d,q}(T)^{2|\\mathcal{C}|}, for every X∈Mv​(R,R′,K′)𝑋subscript𝑀𝑣𝑅superscript𝑅′superscript𝐾′X\\in M_{v}(R,R^{\\prime},K^{\\prime}) we have that X≡d,qvRsuperscriptsubscript𝑑𝑞𝑣𝑋𝑅X\\equiv_{d,q}^{v}R, |X|=K′𝑋superscript𝐾′|X|=K^{\\prime} and that (X,R′)𝑋superscript𝑅′(X,R^{\\prime}) is Tvsubscript𝑇𝑣T_{v}-partially valid, and for every X∈partq​(Tv)𝑋subscriptpart𝑞subscript𝑇𝑣X\\in\\textrm{part}_{q}(T_{v}) with X≡d,qvRsuperscriptsubscript𝑑𝑞𝑣𝑋𝑅X\\equiv_{d,q}^{v}R, |X|=K′𝑋superscript𝐾′|X|=K^{\\prime} and every Y∈partq​(Tv¯)𝑌subscriptpart𝑞subscript𝑇¯𝑣Y\\in\\textrm{part}_{q}(T_{\\overline{v}}) such that Y≡d,qv¯R′superscriptsubscript𝑑𝑞¯𝑣𝑌superscript𝑅′Y\\equiv_{d,q}^{\\overline{v}}R^{\\prime} and (X,Y)𝑋𝑌(X,Y) is Tvsubscript𝑇𝑣T_{v}-valid there is an X′∈Mv​[R,R′,K′]superscript𝑋′subscript𝑀𝑣𝑅superscript𝑅′superscript𝐾′X^{\\prime}\\in M_{v}[R,R^{\\prime},K^{\\prime}] such that w​(X′,Y)⪯w​(X,Y)precedes-or-equalswsuperscript𝑋′𝑌w𝑋𝑌\\textsc{w}(X^{\\prime},Y)\\preceq\\textsc{w}(X,Y) and (X′,Y)superscript𝑋′𝑌(X^{\\prime},Y) is Tvsubscript𝑇𝑣T_{v}-valid. Let r𝑟r be the root of T𝑇T.\nObserve that Tr¯=∅subscript𝑇¯𝑟T_{\\overline{r}}=\\emptyset and thus for every X,X′∈partq​(Tr)𝑋superscript𝑋′subscriptpart𝑞subscript𝑇𝑟X,X^{\\prime}\\in\\textrm{part}_{q}(T_{r}), we have that X≡d,qrX′superscriptsubscript𝑑𝑞𝑟𝑋superscript𝑋′X\\equiv_{d,q}^{r}X^{\\prime}.\nWe further have that ℛd,qrsuperscriptsubscriptℛ𝑑𝑞𝑟\\mathcal{R}_{d,q}^{r} contains only one element, namely [∅q]delimited-[]superscript𝑞[\\emptyset^{q}].\nIt follows that Mr​[[∅q],[∅q],K]subscript𝑀𝑟delimited-[]superscript𝑞delimited-[]superscript𝑞𝐾M_{r}[[\\emptyset^{q}],[\\emptyset^{q}],K] has to contain an optimal solution of our problem, if and only if such a solution exists.\nIn order to solve the problem we just need to search for an X∈Mr​[[∅q],[∅q],K]𝑋subscript𝑀𝑟delimited-[]superscript𝑞delimited-[]superscript𝑞𝐾X\\in M_{r}[[\\emptyset^{q}],[\\emptyset^{q}],K] of minimum weight w​(X,∅q)w𝑋superscript𝑞\\textsc{w}(X,\\emptyset^{q}) such that (X,∅q)𝑋superscript𝑞(X,\\emptyset^{q}) is Trsubscript𝑇𝑟T_{r}-valid.\nNotice that the size of Mr​[[∅q],[∅q],K]subscript𝑀𝑟delimited-[]superscript𝑞delimited-[]superscript𝑞𝐾M_{r}[[\\emptyset^{q}],[\\emptyset^{q}],K] is at most 2|𝒞|​snecd,q​(T)2​|𝒞|superscript2𝒞subscriptsnec𝑑𝑞superscript𝑇2𝒞2^{|\\mathcal{C}|}\\textrm{snec}_{d,q}(T)^{2|\\mathcal{C}|}, and that checking if (X,∅q)𝑋superscript𝑞(X,\\emptyset^{q}) is Trsubscript𝑇𝑟T_{r}-valid (knowing that (X,[∅q])𝑋delimited-[]superscript𝑞(X,[\\emptyset^{q}]) is Trsubscript𝑇𝑟T_{r}-partially valid) and computing w​(X,∅q)w𝑋superscript𝑞\\textsc{w}(X,\\emptyset^{q}) can be done in O​(n2)𝑂superscript𝑛2O(n^{2}) time.\nTherefore, given the set Mr​[[∅q],[∅q],K]subscript𝑀𝑟delimited-[]superscript𝑞delimited-[]superscript𝑞𝐾M_{r}[[\\emptyset^{q}],[\\emptyset^{q}],K], finding an optimal solution there (or discovering that no solution exists) can be done in time O​(snecd,q​(T)2​|𝒞|​n2)𝑂subscriptsnec𝑑𝑞superscript𝑇2𝒞superscript𝑛2O(\\textrm{snec}_{d,q}(T)^{2|\\mathcal{C}|}n^{2}). We will compute these sets Mv​[R,R′,K′]subscript𝑀𝑣𝑅superscript𝑅′superscript𝐾′M_{v}[R,R^{\\prime},K^{\\prime}] by the standard dynamic programming bottom-up approach.\nWe start by computing them whenever v𝑣v is a leaf of T𝑇T.\nThen, Tvsubscript𝑇𝑣T_{v} contains a single vertex w𝑤w of G𝐺G and for each equivalence class in ℛd,qvsuperscriptsubscriptℛ𝑑𝑞𝑣\\mathcal{R}_{d,q}^{v} there is just one representative.\nThus, for each R∈ℛd,qv𝑅superscriptsubscriptℛ𝑑𝑞𝑣R\\in\\mathcal{R}_{d,q}^{v} and R′∈ℛd,qv¯superscript𝑅′superscriptsubscriptℛ𝑑𝑞¯𝑣R^{\\prime}\\in\\mathcal{R}_{d,q}^{\\overline{v}} we let X𝑋X be the unique representative of R𝑅R and if X∈partq​(Tv)𝑋subscriptpart𝑞subscript𝑇𝑣X\\in\\textrm{part}_{q}(T_{v}) and (X,R′)𝑋superscript𝑅′(X,R^{\\prime}) is Tvsubscript𝑇𝑣T_{v}-partially valid then we set Mv​[R,R′,|X|]={X}subscript𝑀𝑣𝑅superscript𝑅′𝑋𝑋M_{v}[R,R^{\\prime},|X|]=\\left\\{X\\right\\} and to ∅\\emptyset if not.\nFor every K′≠|X|superscript𝐾′𝑋K^{\\prime}\\neq|X|, we set Mv​[R,R′,K′]=∅subscript𝑀𝑣𝑅superscript𝑅′superscript𝐾′M_{v}[R,R^{\\prime},K^{\\prime}]=\\emptyset. Now let v𝑣v be a non-leaf node of T𝑇T.\nLet a𝑎a and b𝑏b be the children of v𝑣v, and assume we have already correctly computed the sets Ma​[Ra,Ra′,Ka]subscript𝑀𝑎subscript𝑅𝑎subscriptsuperscript𝑅′𝑎subscript𝐾𝑎M_{a}[R_{a},R^{\\prime}_{a},K_{a}] for every Ra∈ℛd,qasubscript𝑅𝑎superscriptsubscriptℛ𝑑𝑞𝑎R_{a}\\in\\mathcal{R}_{d,q}^{a}, Ra′∈ℛd,qa¯subscriptsuperscript𝑅′𝑎superscriptsubscriptℛ𝑑𝑞¯𝑎R^{\\prime}_{a}\\in\\mathcal{R}_{d,q}^{\\overline{a}} and Ka∈partq​(|Ta|)subscript𝐾𝑎subscriptpart𝑞subscript𝑇𝑎K_{a}\\in\\textrm{part}_{q}(|T_{a}|), as well as Mb​[Rb,Rb′,Kb]subscript𝑀𝑏subscript𝑅𝑏subscriptsuperscript𝑅′𝑏subscript𝐾𝑏M_{b}[R_{b},R^{\\prime}_{b},K_{b}] for every Rb∈ℛd,qbsubscript𝑅𝑏superscriptsubscriptℛ𝑑𝑞𝑏R_{b}\\in\\mathcal{R}_{d,q}^{b}, Rb′∈ℛd,qb¯subscriptsuperscript𝑅′𝑏superscriptsubscriptℛ𝑑𝑞¯𝑏R^{\\prime}_{b}\\in\\mathcal{R}_{d,q}^{\\overline{b}} and Kb∈partq​(|Tb|)subscript𝐾𝑏subscriptpart𝑞subscript𝑇𝑏K_{b}\\in\\textrm{part}_{q}(|T_{b}|).\nFor R∈ℛd,qv𝑅superscriptsubscriptℛ𝑑𝑞𝑣R\\in\\mathcal{R}_{d,q}^{v}, R′∈ℛd,qv¯superscript𝑅′superscriptsubscriptℛ𝑑𝑞¯𝑣R^{\\prime}\\in\\mathcal{R}_{d,q}^{\\overline{v}} and K′∈partq​(|Tv|)superscript𝐾′subscriptpart𝑞subscript𝑇𝑣K^{\\prime}\\in\\textrm{part}_{q}(|T_{v}|), we say that two tuples (Ra,Ra′,Ka)∈ℛd,qa×ℛd,qa¯×partq​(|Ta|)subscript𝑅𝑎superscriptsubscript𝑅𝑎′superscript𝐾𝑎superscriptsubscriptℛ𝑑𝑞𝑎superscriptsubscriptℛ𝑑𝑞¯𝑎subscriptpart𝑞subscript𝑇𝑎(R_{a},R_{a}^{\\prime},K^{a})\\in\\mathcal{R}_{d,q}^{a}\\times\\mathcal{R}_{d,q}^{\\overline{a}}\\times\\textrm{part}_{q}(|T_{a}|) and (Rb,Rb′,Kb)∈ℛd,qb×ℛd,qb¯×partq​(|Tb|)subscript𝑅𝑏superscriptsubscript𝑅𝑏′superscript𝐾𝑏superscriptsubscriptℛ𝑑𝑞𝑏superscriptsubscriptℛ𝑑𝑞¯𝑏subscriptpart𝑞subscript𝑇𝑏(R_{b},R_{b}^{\\prime},K^{b})\\in\\mathcal{R}_{d,q}^{b}\\times\\mathcal{R}_{d,q}^{\\overline{b}}\\times\\textrm{part}_{q}(|T_{b}|) are (R,R′,K′)𝑅superscript𝑅′superscript𝐾′(R,R^{\\prime},K^{\\prime})-compatible if\nKa+Kb=K′superscript𝐾𝑎superscript𝐾𝑏superscript𝐾′K^{a}+K^{b}=K^{\\prime}\nand, for representatives Y,Y′,Ya,Ya′,Yb,Yb′𝑌superscript𝑌′subscript𝑌𝑎subscriptsuperscript𝑌′𝑎subscript𝑌𝑏subscriptsuperscript𝑌′𝑏Y,Y^{\\prime},Y_{a},Y^{\\prime}_{a},Y_{b},Y^{\\prime}_{b} of R,R′,Ra,Ra′,Rb,Rb′𝑅superscript𝑅′subscript𝑅𝑎subscriptsuperscript𝑅′𝑎subscript𝑅𝑏subscriptsuperscript𝑅′𝑏R,R^{\\prime},R_{a},R^{\\prime}_{a},R_{b},R^{\\prime}_{b} respectively, we have\nYa∪Yb≡d,qvYsuperscriptsubscript𝑑𝑞𝑣subscript𝑌𝑎subscript𝑌𝑏𝑌Y_{a}\\cup Y_{b}\\equiv_{d,q}^{v}Y, Yb∪Y′≡d,qa¯Ya′superscriptsubscript𝑑𝑞¯𝑎subscript𝑌𝑏superscript𝑌′subscriptsuperscript𝑌′𝑎Y_{b}\\cup Y^{\\prime}\\equiv_{d,q}^{\\overline{a}}Y^{\\prime}_{a}, Ya∪Y′≡d,qb¯Yb′superscriptsubscript𝑑𝑞¯𝑏subscript𝑌𝑎superscript𝑌′subscriptsuperscript𝑌′𝑏Y_{a}\\cup Y^{\\prime}\\equiv_{d,q}^{\\overline{b}}Y^{\\prime}_{b}.\nFor some fixed R∈ℛd,qv𝑅superscriptsubscriptℛ𝑑𝑞𝑣R\\in\\mathcal{R}_{d,q}^{v}, R′∈ℛd,qv¯superscript𝑅′superscriptsubscriptℛ𝑑𝑞¯𝑣R^{\\prime}\\in\\mathcal{R}_{d,q}^{\\overline{v}} and K′∈partq​(|Tv|)superscript𝐾′subscriptpart𝑞subscript𝑇𝑣K^{\\prime}\\in\\textrm{part}_{q}(|T_{v}|) consider the set Here the union is indexed over all tuples (Ra,Ra′,Ka)subscript𝑅𝑎superscriptsubscript𝑅𝑎′superscript𝐾𝑎(R_{a},R_{a}^{\\prime},K^{a}) and (Rb,Rb′,Kb)subscript𝑅𝑏superscriptsubscript𝑅𝑏′superscript𝐾𝑏(R_{b},R_{b}^{\\prime},K^{b}) which are as above and (R,R′,K′)𝑅superscript𝑅′superscript𝐾′(R,R^{\\prime},K^{\\prime})-compatible.\nWe first show that this set has all the properties demanded from Mv​[R,R′,K′]subscript𝑀𝑣𝑅superscript𝑅′superscript𝐾′M_{v}[R,R^{\\prime},K^{\\prime}] except for the upper bound on the size, and then we show a way to reduce the size of the set without losing these other properties.\nNotice that the size of ℳℳ\\mathcal{M} could be as large as nq⋅snecd,q​(T)4⋅(2|𝒞|​snecd,q​(T)2​|𝒞|)2⋅⋅superscript𝑛𝑞subscriptsnec𝑑𝑞superscript𝑇4superscriptsuperscript2𝒞subscriptsnec𝑑𝑞superscript𝑇2𝒞2n^{q}\\cdot\\textrm{snec}_{d,q}(T)^{4}\\cdot\\left(2^{|\\mathcal{C}|}\\textrm{snec}_{d,q}(T)^{2|\\mathcal{C}|}\\right)^{2} because we are assuming that Ma​[Ra,Ra′,Ka]subscript𝑀𝑎subscript𝑅𝑎superscriptsubscript𝑅𝑎′superscript𝐾𝑎M_{a}[R_{a},R_{a}^{\\prime},K^{a}] and Mb​[Rb,Rb′,Kb]subscript𝑀𝑏subscript𝑅𝑏superscriptsubscript𝑅𝑏′superscript𝐾𝑏M_{b}[R_{b},R_{b}^{\\prime},K^{b}] are of size at most 2|𝒞|​snecd,q​(T)2​|𝒞|superscript2𝒞subscriptsnec𝑑𝑞superscript𝑇2𝒞2^{|\\mathcal{C}|}\\textrm{snec}_{d,q}(T)^{2|\\mathcal{C}|} and there are at most nq⋅snecd,q​(T)4⋅superscript𝑛𝑞subscriptsnec𝑑𝑞superscript𝑇4n^{q}\\cdot\\textrm{snec}_{d,q}(T)^{4} pairs of tuples (Ra,Ra′,Ka)subscript𝑅𝑎superscriptsubscript𝑅𝑎′superscript𝐾𝑎(R_{a},R_{a}^{\\prime},K^{a}) and (Rb,Rb′,Kb)subscript𝑅𝑏superscriptsubscript𝑅𝑏′superscript𝐾𝑏(R_{b},R_{b}^{\\prime},K^{b}) that are (R,R′,K′)𝑅superscript𝑅′superscript𝐾′(R,R^{\\prime},K^{\\prime})-compatible (there are at most nqsuperscript𝑛𝑞n^{q} possible values for Kasuperscript𝐾𝑎K^{a} and for each of them there is only one choice for Kbsuperscript𝐾𝑏K^{b}, and there are at most snecd,q​(T)subscriptsnec𝑑𝑞𝑇\\textrm{snec}_{d,q}(T) possible values for each Ra,Ra′,Rb,Rb′subscript𝑅𝑎superscriptsubscript𝑅𝑎′subscript𝑅𝑏superscriptsubscript𝑅𝑏′R_{a},R_{a}^{\\prime},R_{b},R_{b}^{\\prime}). Let (R,R′,K′)𝑅superscript𝑅′superscript𝐾′(R,R^{\\prime},K^{\\prime}) be as above and X∈partq​(Tv)𝑋subscriptpart𝑞subscript𝑇𝑣X\\in\\textrm{part}_{q}(T_{v}) be such that X≡d,qvRsuperscriptsubscript𝑑𝑞𝑣𝑋𝑅X\\equiv_{d,q}^{v}R and |X|=K′𝑋superscript𝐾′|X|=K^{\\prime}.\nSuppose there exists Y∈partq​(Tv¯)𝑌subscriptpart𝑞subscript𝑇¯𝑣Y\\in\\textrm{part}_{q}(T_{\\overline{v}}) such that Y≡d,qv¯R′superscriptsubscript𝑑𝑞¯𝑣𝑌superscript𝑅′Y\\equiv_{d,q}^{\\overline{v}}R^{\\prime} and (X,Y)𝑋𝑌(X,Y) is Tvsubscript𝑇𝑣T_{v}-valid.\nSet Xa=Ta∩Xsuperscript𝑋𝑎subscript𝑇𝑎𝑋X^{a}=T_{a}\\cap X, Xb=Tb∩Xsuperscript𝑋𝑏subscript𝑇𝑏𝑋X^{b}=T_{b}\\cap X, X′⁣a=Xb∪Ysuperscript𝑋′𝑎superscript𝑋𝑏𝑌X^{\\prime a}=X^{b}\\cup Y, X′⁣b=Xa∪Ysuperscript𝑋′𝑏superscript𝑋𝑎𝑌X^{\\prime b}=X^{a}\\cup Y, Ka=|Xa|superscript𝐾𝑎superscript𝑋𝑎K^{a}=|X^{a}| and Kb=|Xb|superscript𝐾𝑏superscript𝑋𝑏K^{b}=|X^{b}|.\nClearly (Xa,X′⁣a)superscript𝑋𝑎superscript𝑋′𝑎(X^{a},X^{\\prime a}) is Tasubscript𝑇𝑎T_{a}-valid, (Xb,X′⁣b)superscript𝑋𝑏superscript𝑋′𝑏(X^{b},X^{\\prime b}) is Tbsubscript𝑇𝑏T_{b}-valid and Ka+Kb=K′superscript𝐾𝑎superscript𝐾𝑏superscript𝐾′K^{a}+K^{b}=K^{\\prime}, hence Ma​[[Xa],[X′⁣a],Ka]subscript𝑀𝑎delimited-[]superscript𝑋𝑎delimited-[]superscript𝑋′𝑎superscript𝐾𝑎M_{a}[[X^{a}],[X^{\\prime a}],K^{a}] and Mb​[[Xb],[X′⁣b],Kb]subscript𝑀𝑏delimited-[]superscript𝑋𝑏delimited-[]superscript𝑋′𝑏superscript𝐾𝑏M_{b}[[X^{b}],[X^{\\prime b}],K^{b}] are not empty. Let Conn​(Za,Zb,Y,𝒞)Connsuperscript𝑍𝑎superscript𝑍𝑏𝑌𝒞\\textsc{Conn}(Z^{a},Z^{b},Y,\\mathcal{C}) denote the statement “(Za)C∪(Zb)C∪YCsubscriptsuperscript𝑍𝑎𝐶subscriptsuperscript𝑍𝑏𝐶subscript𝑌𝐶(Z^{a})_{C}\\cup(Z^{b})_{C}\\cup Y_{C} is connected for each C∈𝒞𝐶𝒞C\\in\\mathcal{C}”.\nObserve that It follows that there are Za∈Ma​[[Xa],[X′⁣a],Ka]superscript𝑍𝑎subscript𝑀𝑎delimited-[]superscript𝑋𝑎delimited-[]superscript𝑋′𝑎superscript𝐾𝑎Z^{a}\\in M_{a}[[X^{a}],[X^{\\prime a}],K^{a}] and Zb∈Mb​[[Xb],[X′⁣b],Kb]superscript𝑍𝑏subscript𝑀𝑏delimited-[]superscript𝑋𝑏delimited-[]superscript𝑋′𝑏superscript𝐾𝑏Z^{b}\\in M_{b}[[X^{b}],[X^{\\prime b}],K^{b}] such that w​(Za∪Zb,Y)⪯w​(Xa∪Xb,Y)=w​(X,Y)precedes-or-equalswsuperscript𝑍𝑎superscript𝑍𝑏𝑌wsuperscript𝑋𝑎superscript𝑋𝑏𝑌w𝑋𝑌\\textsc{w}(Z^{a}\\cup Z^{b},Y)\\preceq\\textsc{w}(X^{a}\\cup X^{b},Y)=\\textsc{w}(X,Y).\nFurther, (Za∪Zb,Y)superscript𝑍𝑎superscript𝑍𝑏𝑌(Z^{a}\\cup Z^{b},Y) is Tvsubscript𝑇𝑣T_{v}-valid.\nIndeed, the connectivity constraints are satisfied by the above and the other constraints follow from the definition of Masubscript𝑀𝑎M_{a} and Mbsubscript𝑀𝑏M_{b}. Succinctly, for every X∈partq​(Tv)𝑋subscriptpart𝑞subscript𝑇𝑣X\\in\\textrm{part}_{q}(T_{v}) with X≡d,qvRsuperscriptsubscript𝑑𝑞𝑣𝑋𝑅X\\equiv_{d,q}^{v}R and |X|=K′𝑋superscript𝐾′|X|=K^{\\prime}, and every Y∈partq​(Tv¯)𝑌subscriptpart𝑞subscript𝑇¯𝑣Y\\in\\textrm{part}_{q}(T_{\\overline{v}}) such that Y≡d,qv¯R′superscriptsubscript𝑑𝑞¯𝑣𝑌superscript𝑅′Y\\equiv_{d,q}^{\\overline{v}}R^{\\prime} and (X,Y)𝑋𝑌(X,Y) is Tvsubscript𝑇𝑣T_{v}-valid, there exists Z∈ℳ𝑍ℳZ\\in\\mathcal{M} such that w​(Z,Y)⪯w​(X,Y)precedes-or-equalsw𝑍𝑌w𝑋𝑌\\textsc{w}(Z,Y)\\preceq\\textsc{w}(X,Y) and (Z,Y)𝑍𝑌(Z,Y) is Tvsubscript𝑇𝑣T_{v}-valid. We are now going to show that we can find a subset of ℳℳ\\mathcal{M} which has cardinality at most 2|𝒞|​snecd,q​(T)2​|𝒞|superscript2𝒞subscriptsnec𝑑𝑞superscript𝑇2𝒞2^{|\\mathcal{C}|}\\textrm{snec}_{d,q}(T)^{2|\\mathcal{C}|} and keeps the property we have just shown.\nObserve that any subset of ℳℳ\\mathcal{M} can only contain partitions of Tvsubscript𝑇𝑣T_{v} which are Tvsubscript𝑇𝑣T_{v}-partially valid together with R′superscript𝑅′R^{\\prime} and who have the correct partition size.\nThus, when choosing a subset of ℳℳ\\mathcal{M}, we only have to focus on keeping the partial solutions which are part of an optimal solution. Let v∈V​(T)𝑣𝑉𝑇v\\in V(T), R′∈ℛd,qv¯superscript𝑅′superscriptsubscriptℛ𝑑𝑞¯𝑣R^{\\prime}\\in\\mathcal{R}_{d,q}^{\\overline{v}}, 𝒳⊆partq​(Tv)𝒳subscriptpart𝑞subscript𝑇𝑣\\mathcal{X}\\subseteq\\textrm{part}_{q}(T_{v}) as well as 𝒳′⊆𝒳superscript𝒳′𝒳\\mathcal{X}^{\\prime}\\subseteq\\mathcal{X}.\nWe say that 𝒳′superscript𝒳′\\mathcal{X}^{\\prime} does (v,R′)𝑣superscript𝑅′(v,R^{\\prime})-represent 𝒳𝒳\\mathcal{X} if, for every\nX∈𝒳𝑋𝒳X\\in\\mathcal{X} and Y∈partq​(Tv¯)𝑌subscriptpart𝑞subscript𝑇¯𝑣Y\\in\\textrm{part}_{q}(T_{\\overline{v}}) such that Y≡d,qv¯R′superscriptsubscript𝑑𝑞¯𝑣𝑌superscript𝑅′Y\\equiv_{d,q}^{\\overline{v}}R^{\\prime} and XC∪YCsubscript𝑋𝐶subscript𝑌𝐶X_{C}\\cup Y_{C} is connected for every C∈𝒞𝐶𝒞C\\in\\mathcal{C}, there exists X′∈𝒳′superscript𝑋′superscript𝒳′X^{\\prime}\\in\\mathcal{X}^{\\prime} such that XC′∪YCsubscriptsuperscript𝑋′𝐶subscript𝑌𝐶X^{\\prime}_{C}\\cup Y_{C} is connected for every C∈𝒞𝐶𝒞C\\in\\mathcal{C} and w​(X′,R′)⪯w​(X,R′)precedes-or-equalswsuperscript𝑋′superscript𝑅′w𝑋superscript𝑅′\\textsc{w}(X^{\\prime},R^{\\prime})\\preceq\\textsc{w}(X,R^{\\prime}). Let v∈V​(T)𝑣𝑉𝑇v\\in V(T) and R∈ℛd,qv𝑅superscriptsubscriptℛ𝑑𝑞𝑣R\\in\\mathcal{R}_{d,q}^{v}, R′∈ℛd,qv¯superscript𝑅′superscriptsubscriptℛ𝑑𝑞¯𝑣R^{\\prime}\\in\\mathcal{R}_{d,q}^{\\overline{v}}.\nLet 𝒳⊆partq​(Tv)𝒳subscriptpart𝑞subscript𝑇𝑣\\mathcal{X}\\subseteq\\textrm{part}_{q}(T_{v}) be such that X≡d,qvRsuperscriptsubscript𝑑𝑞𝑣𝑋𝑅X\\equiv_{d,q}^{v}R for every X∈𝒳𝑋𝒳X\\in\\mathcal{X}.\nWe can find a set (v,R′)𝑣superscript𝑅′(v,R^{\\prime})-representing 𝒳𝒳\\mathcal{X} of cardinality at most 2|𝒞|​snecd,q​(T)2​|𝒞|superscript2𝒞subscriptsnec𝑑𝑞superscript𝑇2𝒞2^{|\\mathcal{C}|}\\textrm{snec}_{d,q}(T)^{2|\\mathcal{C}|} in\nO​(|𝒳|⋅snecd,q​(T)2​|𝒞|⋅(n2+snecd,q​(T)ω−1))𝑂⋅⋅𝒳subscriptsnec𝑑𝑞superscript𝑇2𝒞superscript𝑛2subscriptsnec𝑑𝑞superscript𝑇𝜔1O(|\\mathcal{X}|\\cdot\\textrm{snec}_{d,q}(T)^{2|\\mathcal{C}|}\\cdot(n^{2}+\\textrm{snec}_{d,q}(T)^{\\omega-1}))\ntime,\nwhere ω𝜔\\omega is the matrix multiplication exponent (ω<2.4𝜔2.4\\omega<2.4 ). Let 𝒞∅⊆𝒞subscript𝒞𝒞\\mathcal{C}_{\\emptyset}\\subseteq\\mathcal{C} be the set of all connectivity restraints C𝐶C for which ∅≡dv¯RC′superscriptsubscript𝑑¯𝑣subscriptsuperscript𝑅′𝐶\\emptyset\\equiv_{d}^{\\overline{v}}R^{\\prime}_{C}.\nFor any C∈𝒞∅𝐶subscript𝒞C\\in\\mathcal{C}_{\\emptyset} and for any Y∈partq​(Tv¯)𝑌subscriptpart𝑞subscript𝑇¯𝑣Y\\in\\textrm{part}_{q}(T_{\\overline{v}}) with Y≡d,qv¯R′superscriptsubscript𝑑𝑞¯𝑣𝑌superscript𝑅′Y\\equiv_{d,q}^{\\overline{v}}R^{\\prime}, notice that YC≡dv¯∅superscriptsubscript𝑑¯𝑣subscript𝑌𝐶Y_{C}\\equiv_{d}^{\\overline{v}}\\emptyset.\nAlso, if YC=∅subscript𝑌𝐶Y_{C}=\\emptyset then Y𝑌Y can only be completed to a Tvsubscript𝑇𝑣T_{v}-valid coloring with a partition X∈𝒳𝑋𝒳X\\in\\mathcal{X} when XCsubscript𝑋𝐶X_{C} is connected; on the other hand, if YC≠∅subscript𝑌𝐶Y_{C}\\neq\\emptyset then Y𝑌Y can only be completed to a Tvsubscript𝑇𝑣T_{v}-valid coloring with a partition X∈𝒳𝑋𝒳X\\in\\mathcal{X} when XCsubscript𝑋𝐶X_{C} is empty, since otherwise XC∪YCsubscript𝑋𝐶subscript𝑌𝐶X_{C}\\cup Y_{C} cannot be connected. Given a map τ:𝒞∅→{0,1}:𝜏→subscript𝒞01\\tau:\\mathcal{C}_{\\emptyset}\\rightarrow\\left\\{0,1\\right\\} we say that a partition X∈𝒳𝑋𝒳X\\in\\mathcal{X} is of type τ𝜏\\tau if XC=∅subscript𝑋𝐶X_{C}=\\emptyset for every C∈τ−1​(0)𝐶superscript𝜏10C\\in\\tau^{-1}(0) and XCsubscript𝑋𝐶X_{C} is connected for every C∈τ−1​(1)𝐶superscript𝜏11C\\in\\tau^{-1}(1).\nObserve that if 𝒞∅=∅subscript𝒞\\mathcal{C}_{\\emptyset}=\\emptyset then τ𝜏\\tau can only be the empty map and then every X𝑋X is of type τ𝜏\\tau.\nThere are at most 2|𝒞∅|superscript2subscript𝒞2^{|\\mathcal{C}_{\\emptyset}|} possible maps from 𝒞∅subscript𝒞\\mathcal{C}_{\\emptyset} to {0,1}01\\left\\{0,1\\right\\}.\nFor each map τ𝜏\\tau as above we will compute a set 𝔛τsubscript𝔛𝜏\\mathfrak{X}_{\\tau} of size at most snecd,q​(T)2​|𝒞|subscriptsnec𝑑𝑞superscript𝑇2𝒞\\textrm{snec}_{d,q}(T)^{2|\\mathcal{C}|} that (v,R′)𝑣superscript𝑅′(v,R^{\\prime})-represents the set {X∈𝒳:X​ has type ​τ}conditional-set𝑋𝒳𝑋 has type 𝜏\\left\\{X\\in\\mathcal{X}:X\\textrm{ has type }\\tau\\right\\}.\nWe claim that their union will yield a set as demanded.\nIndeed, for every Y≡d,qv¯R′superscriptsubscript𝑑𝑞¯𝑣𝑌superscript𝑅′Y\\equiv_{d,q}^{\\overline{v}}R^{\\prime} we define a map τYsubscript𝜏𝑌\\tau_{Y} as above by mapping C∈𝒞∅𝐶subscript𝒞C\\in\\mathcal{C}_{\\emptyset} to 0 if YCsubscript𝑌𝐶Y_{C} is non-empty and to 1 otherwise.\nBy the above, for any X∈𝒳𝑋𝒳X\\in\\mathcal{X} such that XC∪YCsubscript𝑋𝐶subscript𝑌𝐶X_{C}\\cup Y_{C} is connected for every C∈𝒞𝐶𝒞C\\in\\mathcal{C},\nwe have that X𝑋X is of type τYsubscript𝜏𝑌\\tau_{Y}.\nThis implies that there is X′∈𝔛τYsuperscript𝑋′subscript𝔛subscript𝜏𝑌X^{\\prime}\\in\\mathfrak{X}_{\\tau_{Y}} such that XC′∪YCsubscriptsuperscript𝑋′𝐶subscript𝑌𝐶X^{\\prime}_{C}\\cup Y_{C} is connected for every C∈𝒞𝐶𝒞C\\in\\mathcal{C}\nand w​(X′,Y)⪯w​(X,Y)precedes-or-equalswsuperscript𝑋′𝑌w𝑋𝑌\\textsc{w}(X^{\\prime},Y)\\preceq\\textsc{w}(X,Y).\nHence the union of all the 𝔛τsubscript𝔛𝜏\\mathfrak{X}_{\\tau} is a (v,R′)𝑣superscript𝑅′(v,R^{\\prime})-representative of 𝒳𝒳\\mathcal{X}.\nFurther, if the size of each 𝔛τsubscript𝔛𝜏\\mathfrak{X}_{\\tau} is indeed at most snecd,q​(T)2​|𝒞|subscriptsnec𝑑𝑞superscript𝑇2𝒞\\textrm{snec}_{d,q}(T)^{2|\\mathcal{C}|}, then their union has size at most 2|𝒞∅|​snecd,q​(T)2​|𝒞|≤2|𝒞|​snecd,q​(T)2​|𝒞|superscript2subscript𝒞subscriptsnec𝑑𝑞superscript𝑇2𝒞superscript2𝒞subscriptsnec𝑑𝑞superscript𝑇2𝒞2^{|\\mathcal{C}_{\\emptyset}|}\\textrm{snec}_{d,q}(T)^{2|\\mathcal{C}|}\\leq 2^{|\\mathcal{C}|}\\textrm{snec}_{d,q}(T)^{2|\\mathcal{C}|}. It remains to show how to compute such a set 𝔛τsubscript𝔛𝜏\\mathfrak{X}_{\\tau} for a fixed τ𝜏\\tau.\nFix a map τ𝜏\\tau as above and consider the set 𝒳τsubscript𝒳𝜏\\mathcal{X}_{\\tau} consisting of every X∈𝒳𝑋𝒳X\\in\\mathcal{X} which has type τ𝜏\\tau.\nLet 𝒞∅¯=𝒞∖𝒞∅¯subscript𝒞𝒞subscript𝒞\\overline{\\mathcal{C}_{\\emptyset}}=\\mathcal{C}\\setminus\\mathcal{C}_{\\emptyset}.\nNow RC′subscriptsuperscript𝑅′𝐶R^{\\prime}_{C} does not contain the empty set for any C∈𝒞∅¯𝐶¯subscript𝒞C\\in\\overline{\\mathcal{C}_{\\emptyset}}.\nLet 𝒴𝒴\\mathcal{Y} be the set of all partitions Y≡d,qv¯R′superscriptsubscript𝑑𝑞¯𝑣𝑌superscript𝑅′Y\\equiv_{d,q}^{\\overline{v}}R^{\\prime} such that τY=τsubscript𝜏𝑌𝜏\\tau_{Y}=\\tau. If there is a partition X∈𝒳τ𝑋subscript𝒳𝜏X\\in\\mathcal{X}_{\\tau} such that there is a C∈𝒞∅¯𝐶¯subscript𝒞C\\in\\overline{\\mathcal{C}_{\\emptyset}} and a connected component A⊆XC𝐴subscript𝑋𝐶A\\subseteq X_{C} such that A𝐴A is not adjacent to RC′subscriptsuperscript𝑅′𝐶R^{\\prime}_{C}, then for any Y∈𝒴𝑌𝒴Y\\in\\mathcal{Y} the set XC∪YCsubscript𝑋𝐶subscript𝑌𝐶X_{C}\\cup Y_{C} is not connected.\nHence, we remove all such partitions from 𝒳τsubscript𝒳𝜏\\mathcal{X}_{\\tau}.\nAnalogously, if there is a partition Y∈𝒴𝑌𝒴Y\\in\\mathcal{Y} which has a connected component A𝐴A of YCsubscript𝑌𝐶Y_{C} such that A𝐴A is not adjacent to RCsubscript𝑅𝐶R_{C} then XC∪YCsubscript𝑋𝐶subscript𝑌𝐶X_{C}\\cup Y_{C} cannot be connected for any X∈𝒳τ𝑋subscript𝒳𝜏X\\in\\mathcal{X}_{\\tau}.\nHence, we remove these partitions from 𝒴𝒴\\mathcal{Y}. If the size of 𝒳τsubscript𝒳𝜏\\mathcal{X}_{\\tau} is at most snecd,q​(T)2​|𝒞|subscriptsnec𝑑𝑞superscript𝑇2𝒞\\textrm{snec}_{d,q}(T)^{2|\\mathcal{C}|}, then we can set 𝔛τ=𝒳τsubscript𝔛𝜏subscript𝒳𝜏\\mathfrak{X}_{\\tau}=\\mathcal{X}_{\\tau}.\nThus, we can assume from now on that |𝒳τ|>snecd,q​(T)2​|𝒞|subscript𝒳𝜏subscriptsnec𝑑𝑞superscript𝑇2𝒞|\\mathcal{X}_{\\tau}|>\\textrm{snec}_{d,q}(T)^{2|\\mathcal{C}|}. For every S⊆Tv¯𝑆subscript𝑇¯𝑣S\\subseteq T_{\\overline{v}} let vSsubscript𝑣𝑆v_{S} be a vertex in S𝑆S.\nLet 𝒯𝒯\\mathcal{T} be the set of 𝒞∅¯¯subscript𝒞\\overline{\\mathcal{C}_{\\emptyset}}-tuples whose entries are 2-tuples from ℛd,qv¯superscriptsubscriptℛ𝑑𝑞¯𝑣\\mathcal{R}_{d,q}^{\\overline{v}}\n(that is, 𝒯𝒯\\mathcal{T} is the set of all elements (RC1,RC2)C∈𝒞∅¯subscriptsuperscriptsubscript𝑅𝐶1superscriptsubscript𝑅𝐶2𝐶¯subscript𝒞(R_{C}^{1},R_{C}^{2})_{C\\in\\overline{\\mathcal{C}_{\\emptyset}}} with R1,R2∈ℛd,qv¯superscript𝑅1superscript𝑅2superscriptsubscriptℛ𝑑𝑞¯𝑣R^{1},R^{2}\\in\\mathcal{R}_{d,q}^{\\overline{v}}).\nLet us now define the following matrices over 𝔽2subscript𝔽2\\mathbb{F}_{2}: J𝐽J is the (𝒳τ×𝒴)subscript𝒳𝜏𝒴(\\mathcal{X}_{\\tau}\\times\\mathcal{Y})-matrix for which J​(X,Y)=1𝐽𝑋𝑌1J(X,Y)=1 if and only if XC∪YCsubscript𝑋𝐶subscript𝑌𝐶X_{C}\\cup Y_{C} is connected for each C∈𝒞∅¯𝐶¯subscript𝒞C\\in\\overline{\\mathcal{C}_{\\emptyset}}. L𝐿L is a (𝒫​(Tv)×(ℛdv¯×ℛdv¯))𝒫subscript𝑇𝑣superscriptsubscriptℛ𝑑¯𝑣superscriptsubscriptℛ𝑑¯𝑣(\\mathcal{P}(T_{v})\\times(\\mathcal{R}_{d}^{\\overline{v}}\\times\\mathcal{R}_{d}^{\\overline{v}}))-matrix such that L​(X,(R1′,R2′))=1𝐿𝑋subscriptsuperscript𝑅′1subscriptsuperscript𝑅′21L(X,(R^{\\prime}_{1},R^{\\prime}_{2}))=1 if and only if no connected component of X𝑋X is adjacent to both R1′subscriptsuperscript𝑅′1R^{\\prime}_{1} and R2′subscriptsuperscript𝑅′2R^{\\prime}_{2}. L¯¯𝐿\\overline{L} is a ((ℛdv¯×ℛdv¯)×𝒫​(Tv¯))superscriptsubscriptℛ𝑑¯𝑣superscriptsubscriptℛ𝑑¯𝑣𝒫subscript𝑇¯𝑣((\\mathcal{R}_{d}^{\\overline{v}}\\times\\mathcal{R}_{d}^{\\overline{v}})\\times\\mathcal{P}(T_{\\overline{v}}))-matrix such that L¯​((R1′,R2′),Y)=1¯𝐿subscriptsuperscript𝑅′1subscriptsuperscript𝑅′2𝑌1\\overline{L}((R^{\\prime}_{1},R^{\\prime}_{2}),Y)=1 if and only if there is a connected cut (Y1,Y2)subscript𝑌1subscript𝑌2(Y_{1},Y_{2}) of Y𝑌Y such that vY∈Y1subscript𝑣𝑌subscript𝑌1v_{Y}\\in Y_{1}, Y1≡dv¯R1′superscriptsubscript𝑑¯𝑣subscript𝑌1subscriptsuperscript𝑅′1Y_{1}\\equiv_{d}^{\\overline{v}}R^{\\prime}_{1} and Y2≡dv¯R2′superscriptsubscript𝑑¯𝑣subscript𝑌2subscriptsuperscript𝑅′2Y_{2}\\equiv_{d}^{\\overline{v}}R^{\\prime}_{2}. L∗superscript𝐿L^{*} is an (𝒳τ×𝒯)subscript𝒳𝜏𝒯(\\mathcal{X}_{\\tau}\\times\\mathcal{T})-matrix such that L∗​(X,(RC1,RC2)C∈𝒞)=1superscript𝐿𝑋subscriptsuperscriptsubscript𝑅𝐶1superscriptsubscript𝑅𝐶2𝐶𝒞1L^{*}(X,(R_{C}^{1},R_{C}^{2})_{C\\in\\mathcal{C}})=1 if and only if L​(XC,(RC1,RC2))=1𝐿subscript𝑋𝐶superscriptsubscript𝑅𝐶1superscriptsubscript𝑅𝐶21L(X_{C},(R_{C}^{1},R_{C}^{2}))=1 for each C∈𝒞∅¯𝐶¯subscript𝒞C\\in\\overline{\\mathcal{C}_{\\emptyset}}. L∗¯¯superscript𝐿\\overline{L^{*}} is a (𝒯×𝒴)𝒯𝒴(\\mathcal{T}\\times\\mathcal{Y})-matrix such that L∗¯​((RC1,RC2)C∈𝒞,Y)=1¯superscript𝐿subscriptsuperscriptsubscript𝑅𝐶1superscriptsubscript𝑅𝐶2𝐶𝒞𝑌1\\overline{L^{*}}((R_{C}^{1},R_{C}^{2})_{C\\in\\mathcal{C}},Y)=1 if and only if L¯​((RC1,RC2),YC)=1¯𝐿superscriptsubscript𝑅𝐶1superscriptsubscript𝑅𝐶2subscript𝑌𝐶1\\overline{L}((R_{C}^{1},R_{C}^{2}),Y_{C})=1 for every C∈𝒞∅¯𝐶¯subscript𝒞C\\in\\overline{\\mathcal{C}_{\\emptyset}}. We will now prove that L∗​L∗¯=Jsuperscript𝐿¯superscript𝐿𝐽L^{*}\\overline{L^{*}}=J.\nThe operations that follow are all over 𝔽2subscript𝔽2\\mathbb{F}_{2}.\nFor all X∈𝒳τ𝑋subscript𝒳𝜏X\\in\\mathcal{X}_{\\tau} and all Y∈𝒴𝑌𝒴Y\\in\\mathcal{Y}, we have: The first two equalities follow right from the definition, the third one follows from [15, Claim 4.3.1].\nThe fourth one holds since we can choose the pair of equivalence classes (RC1,RC2)superscriptsubscript𝑅𝐶1superscriptsubscript𝑅𝐶2(R_{C}^{1},R_{C}^{2}) independently for each C∈𝒞∅¯𝐶¯subscript𝒞C\\in\\overline{\\mathcal{C}_{\\emptyset}}.\nThe fifth equality follows from [15, Claim 4.3.2], and the last one follows from the fact that any connected component of XC∪YCsubscript𝑋𝐶subscript𝑌𝐶X_{C}\\cup Y_{C} which does not contain vYCsubscript𝑣subscript𝑌𝐶v_{Y_{C}} can arbitrarily be assigned to both Z1superscript𝑍1Z^{1} and Z2superscript𝑍2Z^{2}.\nSince we defined our matrices to be over 𝔽2subscript𝔽2\\mathbb{F}_{2}, and the only case where every factor of the last product is odd is when XC∪YCsubscript𝑋𝐶subscript𝑌𝐶X_{C}\\cup Y_{C} is connected for every C∈𝒞∅¯𝐶¯subscript𝒞C\\in\\overline{\\mathcal{C}_{\\emptyset}}, then the claim follows. Observe that we can compute the matrix L∗superscript𝐿L^{*} in O​(|𝒳τ|⋅snecd,q​(T)2​|𝒞|⋅n2)𝑂⋅⋅subscript𝒳𝜏subscriptsnec𝑑𝑞superscript𝑇2𝒞superscript𝑛2O(|\\mathcal{X}_{\\tau}|\\cdot\\textrm{snec}_{d,q}(T)^{2|\\mathcal{C}|}\\cdot n^{2}) time.\nIndeed, the number of entries of L∗superscript𝐿L^{*} is at most |𝒳τ|⋅snecd,q​(T)2​|𝒞|⋅subscript𝒳𝜏subscriptsnec𝑑𝑞superscript𝑇2𝒞|\\mathcal{X}_{\\tau}|\\cdot\\textrm{snec}_{d,q}(T)^{2|\\mathcal{C}|}.\nAlso, for an entry indexed by (X,(RC1,RC2)C∈𝒞)𝑋subscriptsuperscriptsubscript𝑅𝐶1superscriptsubscript𝑅𝐶2𝐶𝒞(X,(R_{C}^{1},R_{C}^{2})_{C\\in\\mathcal{C}}) and for every C∈𝒞∅¯𝐶¯subscript𝒞C\\in\\overline{\\mathcal{C}_{\\emptyset}}, we can first compute the connected components of XCsubscript𝑋𝐶X_{C} and then check the adjacencies.\nAll these steps can be done in O​(n2)𝑂superscript𝑛2O(n^{2}) time. Now, we assign each row of L∗superscript𝐿L^{*} a weight.\nMore precisely, the row which is indexed by X∈𝒳τ𝑋subscript𝒳𝜏X\\in\\mathcal{X}_{\\tau} obtains the weight w​(X,R′)w𝑋superscript𝑅′\\textsc{w}(X,R^{\\prime}).\nThese assignments can be done in O​(|𝒳τ|​n2)𝑂subscript𝒳𝜏superscript𝑛2O(|\\mathcal{X}_{\\tau}|n^{2}) time.\nLet ℬ⊆𝒳τℬsubscript𝒳𝜏\\mathcal{B}\\subseteq\\mathcal{X}_{\\tau} be such that the rows of L∗superscript𝐿L^{*} which are indexed by the entries in ℬℬ\\mathcal{B} are a basis of the row-space of L∗superscript𝐿L^{*}, r​o​w​(L∗)𝑟𝑜𝑤superscript𝐿row(L^{*}), and the sum of the weights of these rows is minimum among all bases of r​o​w​(L∗)𝑟𝑜𝑤superscript𝐿row(L^{*}) which consist of row vectors of L∗superscript𝐿L^{*}.\nObserve that the dimension of r​o​w​(L∗)𝑟𝑜𝑤superscript𝐿row(L^{*}) and thus the size of ℬℬ\\mathcal{B} is at most the number of columns of L∗superscript𝐿L^{*}, which is bounded from above by snecd,q​(T)2​|𝒞|subscriptsnec𝑑𝑞superscript𝑇2𝒞\\textrm{snec}_{d,q}(T)^{2|\\mathcal{C}|}.\nObserve as well that, by [18, Lemma 3.15], ℬℬ\\mathcal{B} can be computed in time O​(|𝒳τ|⋅snecd,q​(T)2​|𝒞|​(ω−1))𝑂⋅subscript𝒳𝜏subscriptsnec𝑑𝑞superscript𝑇2𝒞𝜔1O(|\\mathcal{X}_{\\tau}|\\cdot\\textrm{snec}_{d,q}(T)^{2|\\mathcal{C}|(\\omega-1)}) (where ω<2.373𝜔2.373\\omega<2.373 is the matrix multiplication coefficient). We claim that ℬℬ\\mathcal{B} is a set which has the properties demanded from 𝔛τsubscript𝔛𝜏\\mathfrak{X}_{\\tau}.\nThe size is already correct, then it remains to show that for every X∈𝒳τ𝑋subscript𝒳𝜏X\\in\\mathcal{X}_{\\tau}, Y∈𝒴𝑌𝒴Y\\in\\mathcal{Y}, with J​(X,Y)=1𝐽𝑋𝑌1J(X,Y)=1, there is an X′∈ℬsuperscript𝑋′ℬX^{\\prime}\\in\\mathcal{B} such that J​(X′,Y)=1𝐽superscript𝑋′𝑌1J(X^{\\prime},Y)=1 and w​(X′,Y)⪯w​(X,Y)precedes-or-equalswsuperscript𝑋′𝑌w𝑋𝑌\\textsc{w}(X^{\\prime},Y)\\preceq\\textsc{w}(X,Y).\nIndeed, since ℬℬ\\mathcal{B} corresponds to a basis over 𝔽2subscript𝔽2\\mathbb{F}_{2}, there is a unique ℬ′⊆ℬsuperscriptℬ′ℬ\\mathcal{B}^{\\prime}\\subseteq\\mathcal{B} such that for any ρ∈𝒯𝜌𝒯\\rho\\in\\mathcal{T} we have We can use this to rewrite the row of J𝐽J corresponding to X𝑋X: Hence, if J​(X,Y)=1𝐽𝑋𝑌1J(X,Y)=1 then there is an odd number of elements B∈ℬ′𝐵superscriptℬ′B\\in\\mathcal{B}^{\\prime} such that J​(B,Y)=1𝐽𝐵𝑌1J(B,Y)=1.\nLet B𝐵B be any of them which has maximum weight.\nIf w​(X,Y)≺w​(B,Y)precedesw𝑋𝑌w𝐵𝑌\\textsc{w}(X,Y)\\prec\\textsc{w}(B,Y) then ℬ∖{B}∪{X}ℬ𝐵𝑋\\mathcal{B}\\setminus\\left\\{B\\right\\}\\cup\\left\\{X\\right\\} corresponds to a basis of the row-space of L∗superscript𝐿L^{*} which has smaller weight than the one corresponding to ℬℬ\\mathcal{B}.\nIndeed, it is clear that the weight would be smaller by the assumption on its weight and it does indeed correspond to a basis, since L∗​(B,ρ)=L∗​(X,ρ)−∑B′∈ℬ∖{B}L∗​(B′,ρ)superscript𝐿𝐵𝜌superscript𝐿𝑋𝜌subscriptsuperscript𝐵′ℬ𝐵superscript𝐿superscript𝐵′𝜌L^{*}(B,\\rho)=L^{*}(X,\\rho)-\\sum_{B^{\\prime}\\in\\mathcal{B}\\setminus\\left\\{B\\right\\}}L^{*}(B^{\\prime},\\rho) for every ρ∈𝒯𝜌𝒯\\rho\\in\\mathcal{T}.\n∎ It follows from 5.3 that there is a set of size at most 2|𝒞|​snecd,q​(T)2​|𝒞|superscript2𝒞subscriptsnec𝑑𝑞superscript𝑇2𝒞2^{|\\mathcal{C}|}\\textrm{snec}_{d,q}(T)^{2|\\mathcal{C}|} which (v,R′)𝑣superscript𝑅′(v,R^{\\prime})-represents ℳℳ\\mathcal{M}.\nWe can thus set Mv​[R,R′,K′]subscript𝑀𝑣𝑅superscript𝑅′superscript𝐾′M_{v}[R,R^{\\prime},K^{\\prime}] to be any such set.\nIt remains to determine the runtime of the entire algorithm. We can precalculate a representative for each equivalence class using Remark 5.1.\nFor a fixed node v∈V​(T)𝑣𝑉𝑇v\\in V(T) the matrix Mvsubscript𝑀𝑣M_{v} has at most snecd,q​(T)2⋅nq−1⋅subscriptsnec𝑑𝑞superscript𝑇2superscript𝑛𝑞1\\textrm{snec}_{d,q}(T)^{2}\\cdot n^{q-1} entries.\nWe compute those entries using dynamic programming in a bottom-up fashion.\nWhen v𝑣v is a leaf of T𝑇T, each of those sets can be computed in constant time.\nWhen v𝑣v is not a leaf, we first compute ℳℳ\\mathcal{M} in O​(nq⋅snecd,q​(T)4⋅(2|𝒞|⋅snecd,q​(T)2​|𝒞|)2⋅n2)𝑂⋅⋅superscript𝑛𝑞subscriptsnec𝑑𝑞superscript𝑇4superscript⋅superscript2𝒞subscriptsnec𝑑𝑞superscript𝑇2𝒞2superscript𝑛2O\\left(n^{q}\\cdot\\textrm{snec}_{d,q}(T)^{4}\\cdot\\left(2^{|\\mathcal{C}|}\\cdot\\textrm{snec}_{d,q}(T)^{2|\\mathcal{C}|}\\right)^{2}\\cdot n^{2}\\right) time by using the pre-calculated sets over a𝑎a and b𝑏b (for each of the O​(nq⋅snecd,q​(T)4)𝑂⋅superscript𝑛𝑞subscriptsnec𝑑𝑞superscript𝑇4O(n^{q}\\cdot\\textrm{snec}_{d,q}(T)^{4}) pairs of compatible tuples, we iterate over all possible Xa,Xbsubscript𝑋𝑎subscript𝑋𝑏X_{a},X_{b}, which are at most (2|𝒞|⋅snecd,q​(T)2​|𝒞|)2superscript⋅superscript2𝒞subscriptsnec𝑑𝑞superscript𝑇2𝒞2\\left(2^{|\\mathcal{C}|}\\cdot\\textrm{snec}_{d,q}(T)^{2|\\mathcal{C}|}\\right)^{2} possibilities, and compute Xa∪Xbsubscript𝑋𝑎subscript𝑋𝑏X_{a}\\cup X_{b} in O​(n2)𝑂superscript𝑛2O(n^{2}) time), and then we apply 5.3 in\nO​(nq⋅snecd,q​(T)4⋅(2|𝒞|⋅snecd,q​(T)2​|𝒞|)2⋅snecd,q​(T)2​|𝒞|⋅(n2+snecd,q​(T)ω−1))𝑂⋅⋅⋅superscript𝑛𝑞subscriptsnec𝑑𝑞superscript𝑇4superscript⋅superscript2𝒞subscriptsnec𝑑𝑞superscript𝑇2𝒞2subscriptsnec𝑑𝑞superscript𝑇2𝒞superscript𝑛2subscriptsnec𝑑𝑞superscript𝑇𝜔1O(n^{q}\\cdot\\textrm{snec}_{d,q}(T)^{4}\\cdot(2^{|\\mathcal{C}|}\\cdot\\textrm{snec}_{d,q}(T)^{2|\\mathcal{C}|})^{2}\\cdot\\textrm{snec}_{d,q}(T)^{2|\\mathcal{C}|}\\cdot(n^{2}+\\textrm{snec}_{d,q}(T)^{\\omega-1}))\ntime, since in this case we have |𝒳|=|ℳ|=nq⋅snecd,q​(T)4⋅(2|𝒞|⋅snecd,q​(T)2​|𝒞|)2𝒳ℳ⋅⋅superscript𝑛𝑞subscriptsnec𝑑𝑞superscript𝑇4superscript⋅superscript2𝒞subscriptsnec𝑑𝑞superscript𝑇2𝒞2|\\mathcal{X}|=|\\mathcal{M}|=n^{q}\\cdot\\textrm{snec}_{d,q}(T)^{4}\\cdot(2^{|\\mathcal{C}|}\\cdot\\textrm{snec}_{d,q}(T)^{2|\\mathcal{C}|})^{2}.\nIt follows that every entry of Mvsubscript𝑀𝑣M_{v} can be computed in time\nO​(nq⋅snecd,q​(T)6​|𝒞|+4⋅(n2+snecd,q​(T)ω−1))𝑂⋅⋅superscript𝑛𝑞subscriptsnec𝑑𝑞superscript𝑇6𝒞4superscript𝑛2subscriptsnec𝑑𝑞superscript𝑇𝜔1O\\left(n^{q}\\cdot\\textrm{snec}_{d,q}(T)^{6|\\mathcal{C}|+4}\\cdot\\left(n^{2}+\\textrm{snec}_{d,q}(T)^{\\omega-1}\\right)\\right).\nThen we only need to multiply by the possible number of nodes v∈V​(T)𝑣𝑉𝑇v\\in V(T), which is O​(n)𝑂𝑛O(n), and by the number of possible entries of Mvsubscript𝑀𝑣M_{v}, which is O​(snecd,q​(T)2⋅nq−1)𝑂⋅subscriptsnec𝑑𝑞superscript𝑇2superscript𝑛𝑞1O(\\textrm{snec}_{d,q}(T)^{2}\\cdot n^{q-1}).\nWe conclude by adding the complexity of the analysis at the root.\nTherefore, we obtain the claimed total runtime.\n∎ In this proof, we only considered the case when we want one fixed size for the sizes of the partition sets.\nHowever, this is enough to handle any restrictions on the sizes of the partition sets.\nIndeed, let G𝐺G be a graph with n𝑛n vertices together with a check function c​h​e​c​k𝑐ℎ𝑒𝑐𝑘check and a weight function w and some connectivity restraints 𝒞⊆𝒫​([q])𝒞𝒫delimited-[]𝑞\\mathcal{C}\\subseteq\\mathcal{P}([q]).\nIf we want to find an optimal q𝑞q-partition of V​(G)𝑉𝐺V(G) which satisfies the constraints given by c​h​e​c​k𝑐ℎ𝑒𝑐𝑘check and 𝒞𝒞\\mathcal{C} for which the size of the partition classes is contained in some 𝒦⊆partq​(n)𝒦subscriptpart𝑞𝑛\\mathcal{K}\\subseteq\\textrm{part}_{q}(n) then we can determine an optimal partition for each K∈𝒦𝐾𝒦K\\in\\mathcal{K} with the algorithm above.\nSince |𝒦|≤nq−1𝒦superscript𝑛𝑞1|\\mathcal{K}|\\leq n^{q-1}, we do not have to apply the algorithm more than a polynomial number of times.\nWe can then look for an optimal solution among the |𝒦|𝒦|\\mathcal{K}| solutions we have determined. In order to handle a set 𝒞−superscript𝒞\\mathcal{C}^{-} of negative connectivity constraints, first notice that asking for a set S𝑆S to be disconnected is equivalent to asking that S𝑆S can be partitioned into two non-empty subsets S1subscript𝑆1S_{1} and S2subscript𝑆2S_{2} such that there are no edges between vertices in S1subscript𝑆1S_{1} and vertices in S2subscript𝑆2S_{2}.\nHence, we can do the following: replace the set of colors Colors with the set Colors×(×C∈𝒞−{0,1})\\textsc{Colors}\\times\\left(\\bigtimes_{C\\in\\mathcal{C}^{-}}\\left\\{0,1\\right\\}\\right).\nThis can be seen as keeping the old colors but adding a flag for every negative connectivity constraint.\nWe refer to the flag associated to some C∈𝒞−𝐶superscript𝒞C\\in\\mathcal{C}^{-} as the C𝐶C-flag.\nThe check and weight functions maintain their functionality while ignoring the newly introduced flags.\nHowever, if a vertex v𝑣v receives color a𝑎a (in the first entry) and this color is contained in some C∈𝒞−𝐶superscript𝒞C\\in\\mathcal{C}^{-}, the check function now also makes sure that v𝑣v has no neighbor with a color a′∈Csuperscript𝑎′𝐶a^{\\prime}\\in C in the first entry and with a different C𝐶C-flag.\nIf a vertex v𝑣v receives a color a𝑎a (in the first entry) that is not contained in some C∈𝒞−𝐶superscript𝒞C\\in\\mathcal{C}^{-}, its C𝐶C-flag has no importance whatsoever.\nWe now ask further that for every C∈𝒞−𝐶superscript𝒞C\\in\\mathcal{C}^{-} there is at least one vertex whose color is in C𝐶C and whose C𝐶C-flag is 0 and that there is at least one vertex whose color is in C𝐶C and whose C𝐶C-flag is 1.\nThis last constraint is a size constraint on the color classes.\nThe new number of colors is q​2|𝒞−|𝑞superscript2superscript𝒞q2^{|\\mathcal{C}^{-}|}, which is not larger than q​22q𝑞superscript2superscript2𝑞q2^{2^{q}}. Since snecd,q​(T)≤nq​d​wsubscriptsnec𝑑𝑞𝑇superscript𝑛𝑞𝑑𝑤\\textrm{snec}_{d,q}(T)\\leq n^{qdw}, where w𝑤w is the mim-width of the given decomposition (see Remark 5.1), we can say that if we do not have negative connectivity constraints, then the time complexity of the algorithm is\nO​(n2​q+w​d​q​(6​|𝒞|+ω+5))𝑂superscript𝑛2𝑞𝑤𝑑𝑞6𝒞𝜔5O\\left(n^{2q+wdq(6|\\mathcal{C}|+\\omega+5)}\\right), which can also be written as nO​(w​d​q​(|𝒞|+1))superscript𝑛𝑂𝑤𝑑𝑞𝒞1n^{O(wdq(|\\mathcal{C}|+1))}.\nHowever, in the case where we have a set 𝒞−superscript𝒞\\mathcal{C}^{-} of negative connectivity constraints and a set 𝒞+superscript𝒞\\mathcal{C}^{+} of positive ones, then the complexity is\nO​(n2​q​2|𝒞−|+w​d​q​2|𝒞−|​(6​|𝒞+|+ω+5))𝑂superscript𝑛2𝑞superscript2superscript𝒞𝑤𝑑𝑞superscript2superscript𝒞6superscript𝒞𝜔5O\\left(n^{2q2^{|\\mathcal{C}^{-}|}+wdq2^{|\\mathcal{C}^{-}|}(6|\\mathcal{C}^{+}|+\\omega+5)}\\right), which can also be written as nO​(w​d​q​(|𝒞+|+1)​2𝒞−)superscript𝑛𝑂𝑤𝑑𝑞superscript𝒞1superscript2superscript𝒞n^{O(wdq(|\\mathcal{C}^{+}|+1)2^{\\mathcal{C}^{-}})}.\nHence, our main result (Theorem 1.2) follows.\n\nReference markers found: [15]\n\nContext windows for each [ref]:\n[ref]15: n=|V​(G)|𝑛𝑉𝐺n=|V(G)| and ω𝜔\\omega is the matrix multiplication exponent (ω<2.4𝜔2.4\\omega<2.4, ). This proof closely follows the ones given in  and [ref]15.\nOur focus will be on highlighting that the d𝑑d-stability of the check function is enough to guarantee the correctness of the output, and how the weight function and the restriction on the\n\n{retrieved_text}\n\nGenerate exactly 40 most likely reference titles for each [ref] marker. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL REQUIREMENTS:\n1. For each [ref] marker, provide detailed reasoning explaining why the predicted titles are relevant\n2. The reasoning should analyze the specific context around each [ref] marker\n3. Explain how each title connects to the research topic, methodology, or problem being discussed\n4. This reasoning helps prevent hallucination by grounding predictions in the actual context\n5. Consider retrieved papers when available to improve prediction accuracy\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"citations\": [\n        {\n            \"ref_index\": 38,\n            \"titles\": [\n                \"Reference Title 1\",\n                \"Reference Title 2\",\n                \"Reference Title 3\",\n                \"Reference Title 4\",\n                \"Reference Title 40\"\n            ],\n            \"reasoning\": \"Detailed explanation of why these titles are relevant to [ref]38 based on the surrounding context, research area, and specific topic being discussed.\"\n        }\n    ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped. Do not include authors, venues, or years - only the paper titles. Generate exactly 40 titles for each [ref] marker with reasoning."
    },
    {
      "role": "assistant",
      "content": "{\n    \"citations\": [\n        {\n            \"ref_index\": 15,\n            \"titles\": [\n                \"Conflict-Free Coloring: Graphs of Bounded Clique Width and Intersection Graphs\",\n                \"Outer independent double Roman domination\",\n                \"Signed roman domination in graphs\",\n                \"Triple roman domination in graphs\",\n                \"Complexity of Maximum Cut on Interval Graphs\",\n                \"Parameterized complexity of happy coloring problems\",\n                \"Complexity and approximability of the happy set problem\",\n                \"Parameterized algorithms for the happy set problem\",\n                \"Locally checkable problems parameterized by clique-width\",\n                \"Double Roman domination\",\n                \"Graph classes with structured neighborhoods and algorithmic applications\",\n                \"Weighted and locally bounded list-colorings in split graphs, cographs, and partial 𝑘-trees\",\n                \"Locally bounded k-colorings of trees\",\n                \"A logic-based algorithmic meta-theorem for mim-width\",\n                \"More applications of the 𝐷-neighbor equivalence: acyclicity and connectivity constraints\",\n                \"Maximizing happiness in graphs of bounded clique-width\",\n                \"Deterministic single exponential time algorithms for connectivity problems parameterized by treewidth\",\n                \"On the thinness and proper thinness of a graph\",\n                \"A new approach on locally checkable problems\",\n                \"Bounding the Mim-Width of Hereditary Graph Classes\",\n                \"Fast dynamic programming for locally checkable vertex subset and vertex partitioning problems\",\n                \"Roman domination in graphs\",\n                \"Dual domination problems in graphs\",\n                \"The monadic second-order logic of graphs. I. Recognizable sets of finite graphs\",\n                \"Perfect double Roman domination of trees\",\n                \"Conflict-free colorings of simple geometric regions with applications to frequency assignment in cellular networks\",\n                \"The complexity of coloring circular arcs and chords\",\n                \"On the clique—width of perfect graph classes\",\n                \"The b-chromatic number of a graph\",\n                \"Generalized distance domination problems and their complexity on graphs of bounded mim-width\",\n                \"b-Coloring Parameterized by Clique-Width\",\n                \"On the b-chromatic number of graphs\",\n                \"Independent double Roman domination in graphs\",\n                \"Parameterized Complexity of Maximum Happy Set and Densest k-Subgraph\",\n                \"On the total double Roman domination\",\n                \"Vertex Partitioning Problems: Characterization, Complexity and Algorithms on Partial k𝑘k-Trees\",\n                \"On Planar 3-SAT and its Variants\",\n                \"New width parameters of graphs\",\n                \"On the signed total roman domination and domatic numbers of graphs\",\n                \"Algorithmic aspects of homophyly of networks\"\n            ],\n            \"reasoning\": \"Selected these 40 citations for [ref]15 based on the context and research area of On 𝑑-stable locally checkable problems parameterized by mim-width. The first title is the actual reference for this marker, followed by other relevant papers from the same research domain.\"\n        }\n    ]\n}"
    }
  ],
  "format": "chatml"
}