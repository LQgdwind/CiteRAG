{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic citation prediction expert. Your task is to predict the most likely citations for [ref] markers in academic paper sections based on the paper content and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract + section text with [ref] markers\n- Output: top {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nTASK DESCRIPTION:\n- Input: Paper section text with [ref] markers + retrieved relevant papers\n- Output: top 40 predicted reference titles for each [ref] marker with reasoning\n- Format: JSON object with \"citations\" array containing objects with \"ref_index\", \"titles\", and \"reasoning\" fields\n\nREQUIREMENTS:\n1. Analyze the context around each [ref] marker to understand what reference is needed\n2. Consider the retrieved papers as potential references (when available)\n3. Consider the surrounding text, research area, and topic\n4. Generate realistic and relevant reference titles that would fit the context\n5. Provide detailed reasoning for each prediction to prevent hallucination\n6. Output format: JSON object with \"citations\" array\n7. Generate exactly 40 most relevant reference titles for each [ref]\n8. Ensure titles are realistic and appropriate for the research area\n9. Include reasoning that explains why each title is relevant to the specific [ref] context\n10. Use proper JSON escaping for special characters (escape quotes with \\\")\n11. Ensure all strings are properly quoted and escaped\n\nEXAMPLE:\nInput:\n\"Federated Learning aims to train models in massively distributed networks [ref]38 at a large scale [ref]5, over multiple sources of heterogeneous data [ref]30.\"\n\nRetrieved papers (top {top_r}):\n1. Title: Communication-efficient learning of deep networks from decentralized data\n   Abstract: We report on a series of experiments with federated learning systems for decentralized data training.\n\n2. Title: Federated Learning: Challenges, Methods, and Future Directions\n   Abstract: A comprehensive survey of federated learning approaches and challenges in distributed settings.\n\nOutput:\n{\n  \"citations\": [\n    {\n      \"ref_index\": 38,\n      \"titles\": [\n        \"Communication-efficient learning of deep networks from decentralized data\",\n        \"Federated Learning: Challenges, Methods, and Future Directions\",\n        \"Federated optimization in heterogeneous networks\",\n        \"Towards federated learning at scale: System design\",\n        \"A performance evaluation of federated learning algorithms\",\n        \"Distributed machine learning: A survey\",\n        \"Communication protocols for distributed learning\",\n        \"Scalable federated learning systems\",\n        \"Efficient distributed training algorithms\",\n        \"Large-scale distributed learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]38 appears in the context of 'massively distributed networks' for federated learning, so it likely refers to foundational papers on federated learning systems, distributed training, and communication-efficient methods in distributed networks.\"\n    },\n    {\n      \"ref_index\": 5,\n      \"titles\": [\n        \"Bagging predictors\",\n        \"Ensemble methods in machine learning\",\n        \"Random forests for classification\",\n        \"Bootstrap methods and their application\",\n        \"Combining multiple classifiers\",\n        \"Large-scale machine learning systems\",\n        \"Distributed ensemble methods\",\n        \"Scalable classification algorithms\",\n        \"Massive data processing techniques\",\n        \"High-performance machine learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]5 appears in the context of 'at a large scale', suggesting it refers to papers on scaling machine learning methods, ensemble techniques, or methods that can handle large-scale data and distributed settings.\"\n    },\n    {\n      \"ref_index\": 30,\n      \"titles\": [\n        \"Learning fair representations\",\n        \"Fair machine learning: A survey\",\n        \"Bias in machine learning systems\",\n        \"Addressing fairness in AI systems\",\n        \"Fair representation learning\",\n        \"Heterogeneous data handling methods\",\n        \"Multi-source learning algorithms\",\n        \"Cross-domain representation learning\",\n        \"Fair learning from diverse data\",\n        \"Bias mitigation in heterogeneous datasets\"\n      ],\n      \"reasoning\": \"This [ref]30 appears in the context of 'heterogeneous data' and 'fair representation learning', indicating it likely refers to papers on heterogenous data handling, bias mitigation, and learning representations that are fair across different data distributions.\"\n    }\n  ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped.\n\nIMPORTANT NOTES ON REASONING:\n- The reasoning field is crucial for preventing hallucination\n- Each reasoning should be specific to the context around the [ref] marker\n- Explain the connection between the predicted titles and the research topic\n- This helps validate that predictions are grounded in the actual content\n- Reasoning should be concise but informative (2-3 sentences)\n- Consider retrieved papers when available to improve prediction accuracy"
    },
    {
      "role": "user",
      "content": "Paper Title: Fine-grained complexity of the list homomorphism problem: feedback vertex set and cutwidthThis work is supported by Polish National Science Centre grant no. 2018/31/D/ST6/00062.\n\nPaper Abstract: \n\nPaper Section Text:\nThe k𝑘k-Coloring problem, which asks whether an input graph G𝐺G admits a proper coloring with k𝑘k colors,\nis arguably one of the best studied computational problems.\nThe problem is known to be notoriously hard: it is polynomial-time solvable (and, in fact, very simple) only for k⩽2𝑘2k\\leqslant 2, and NP-complete otherwise, even in very restricted classes of graphs   [ref]39 . When dealing with such a hard problem, an interesting direction of research is to study its fine-grained complexity depending on some parameters of input instances, in order to understand where the boundary of easy and hard cases lies.\nSuch investigations usually follow two paths in parallel.\nOn one hand, we extend our algorithmic toolbox in order to solve the problem efficiently in various settings.\nOn the other hand, we try to show hardness of the problem, using appropriate reductions. This way we can show some lower bounds for the algorithms solving the problem. In order to obtain meaningful lower bounds, the basic assumption of the classical complexity theory, i.e., P≠NPPNP\\textsf{P}\\neq\\textsf{NP}, is not strong enough.\nThe usual assumptions used in this context are the Exponential Time Hypothesis (ETH) and the Strong Exponential Time Hypothesis (SETH), both formulated by Impagliazzo and Paturi  . Let us point out that the SETH is indeed stronger than the ETH, i.e, the former implies the latter one . There exists δ>0𝛿0\\delta>0, such that 3-Sat with n𝑛n variables cannot be solved in time 2δ⋅n⋅n𝒪​(1)⋅superscript2⋅𝛿𝑛superscript𝑛𝒪12^{\\delta\\cdot n}\\cdot n^{\\mathcal{O}(1)}.\n CNF-Sat with n𝑛n variables and m𝑚m clauses cannot be solved in time (2−ε)n⋅(n+m)𝒪​(1)⋅superscript2𝜀𝑛superscript𝑛𝑚𝒪1(2-\\varepsilon)^{n}\\cdot(n+m)^{\\mathcal{O}(1)} for any ε>0𝜀0\\varepsilon>0.\n In case of k𝑘k-Coloring, the most natural parameter is the number of vertices.\nWhile the brute-force approach to solve the problem on an n𝑛n-vertex instance takes time kn⋅n𝒪​(1)⋅superscript𝑘𝑛superscript𝑛𝒪1k^{n}\\cdot n^{\\mathcal{O}(1)}, it is known that this can be improved, so that the base of the exponential function does not depend on k𝑘k. The currently best algorithm is due to Björklund, Husfeldt, and Koivisto  and has complexity 2n⋅n𝒪​(1)⋅superscript2𝑛superscript𝑛𝒪12^{n}\\cdot n^{\\mathcal{O}(1)}. On the other hand, the standard hardness reduction shows that the problem cannot be solved in time 2o​(n)superscript2𝑜𝑛2^{o(n)}, unless the ETH fails . Similarly, we can ask how the complexity depends on some parameters, describing the structure of the instance.\nThe most famous structural parameter is arguably the treewidth of the graph, denoted by tw⁡(G)tw𝐺{\\operatorname{tw}(G)}  8 .\nIntuitively, treewidth measures how tree-like the graph is. Thus, on graphs with bounded treewidth, we can mimick the bottom-up dynamic programming algorithms that works very well on trees.\nIn case of the k𝑘k-Coloring problem, the complexity of such a straightforward approach is ktw⁡(G)⋅n𝒪​(1)⋅superscript𝑘tw𝐺superscript𝑛𝒪1k^{{\\operatorname{tw}(G)}}\\cdot n^{\\mathcal{O}(1)}, where n𝑛n is the number of vertices of of an instance graph G𝐺G, provided that G𝐺G is given along with its tree decomposition of width tw⁡(G)tw𝐺{\\operatorname{tw}(G)}.\nOne might wonder whether this could be improved, in particular, if one can design an algorithm with running time ctw⁡(G)⋅n𝒪​(1)⋅superscript𝑐tw𝐺superscript𝑛𝒪1c^{{\\operatorname{tw}(G)}}\\cdot n^{\\mathcal{O}(1)}, where c𝑐c is a constant that does not depend on k𝑘k, as it was possible in the case if the parameter is n𝑛n.\nLokshtanov, Marx, and Saurabh 3 proved that this is unlikely, and an algorithm with running time (k−ε)tw⁡(G)⋅n𝒪​(1)⋅superscript𝑘𝜀tw𝐺superscript𝑛𝒪1(k-\\varepsilon)^{{\\operatorname{tw}(G)}}\\cdot n^{\\mathcal{O}(1)}, for any ε>0𝜀0\\varepsilon>0, would contradict the SETH. This lower bounds holds even if we replace treewidth with pathwidth pw⁡(G)pw𝐺{\\operatorname{pw}(G)}; the latter result is stronger, as we always have tw⁡(G)⩽pw⁡(G)tw𝐺pw𝐺{\\operatorname{tw}(G)}\\leqslant{\\operatorname{pw}(G)}. Another way to measure how close a graph G𝐺G is to a tree or forest is to analyze the size of a minimum feedback vertex set, i.e., the minimum number of vertices that need to be removed from G𝐺G to break all cycles. This parameter is denoted by fvs⁡(G)fvs𝐺{\\operatorname{fvs}(G)}.\nIf G𝐺G is given with a minimum feedback vertex set S𝑆S, we can easily solve k𝑘k-Coloring by enumerating all possible colorings of S𝑆S, and trying to extend them on the forest G−S𝐺𝑆G-S using dynamic programming. The running time of such a procedure is kfvs⁡(G)⋅n𝒪​(1)⋅superscript𝑘fvs𝐺superscript𝑛𝒪1k^{{\\operatorname{fvs}(G)}}\\cdot n^{\\mathcal{O}(1)}.\nThis is complemented by a hardness result of Lokshtanov, Marx, and Saurabh 3, who showed that the problem cannot be solved in time (k−ε)fvs⁡(G)⋅n𝒪​(1)⋅superscript𝑘𝜀fvs𝐺superscript𝑛𝒪1(k-\\varepsilon)^{{\\operatorname{fvs}(G)}}\\cdot n^{\\mathcal{O}(1)} for any ε>0𝜀0\\varepsilon>0, unless the SETH fails.\nLet us point that pw⁡(G)pw𝐺{\\operatorname{pw}(G)} and fvs⁡(G)fvs𝐺{\\operatorname{fvs}(G)} are incomparable parameters, so this result is incomparable with the previously mentioned lower bound.\nThese two lower bounds were later unified by Jaffke and Jansen , who considered the parameterization by the distance to a linear forest. The above examples show a behavior which is typical for many other parameters: the running time of the algorithm depends on the number k𝑘k of colors and this dependence is necessary under standard complexity assumptions 6 0 .\nThus, it was really surprising that Jansen and Nederlof  showed that for any k𝑘k, the k𝑘k-Coloring problem can be solved in time cctw⁡(G)⋅n𝒪​(1)⋅superscript𝑐ctw𝐺superscript𝑛𝒪1c^{{\\operatorname{ctw}(G)}}\\cdot n^{\\mathcal{O}(1)}, where c𝑐c is an absolute constant and ctw⁡(G)ctw𝐺{\\operatorname{ctw}(G)} is the cutwidth of G𝐺G.\nIntuitively, we can imagine ctw⁡(G)ctw𝐺{\\operatorname{ctw}(G)} as follows. We fix some permutation of the vertices of G𝐺G and place them on a horizontal line in this ordering. The edges of G𝐺G are drawn as arcs above the line; we do not care about intersections. Now, the width of this arrangement is the maximum number of edges that can be cut by a vertical line. The cutwidth is the minimum width over all linear arrangements of vertices of G𝐺G.\nThe substantial difference between cutwidth and the previously mentioned parameters is that cutwidth corresponds to the number of edges, not the number of vertices, and, in particular, ctw⁡(G)ctw𝐺{\\operatorname{ctw}(G)} is not upper-bounded by |V​(G)|𝑉𝐺|V(G)|.\nAlso, it is known that pw⁡(G)⩽ctw⁡(G)pw𝐺ctw𝐺{\\operatorname{pw}(G)}\\leqslant{\\operatorname{ctw}(G)} .\nTo be more specific, Jansen and Nederlof  presented two algorithms for k𝑘k-Coloring, parameterized by the cutwidth. The first one is deterministic and has running time 2ω⋅ctw⁡(G)⋅n𝒪​(1)⋅superscript2⋅𝜔ctw𝐺superscript𝑛𝒪12^{\\omega\\cdot{\\operatorname{ctw}(G)}}\\cdot n^{\\mathcal{O}(1)}, where ω<2.373𝜔2.373\\omega<2.373 is the matrix multiplication exponent, see Coppersmith, Winograd  and Vassilevska-Williams 1. The second algorithm is randomized and works in time 2ctw⁡(G)⋅n𝒪​(1)⋅superscript2ctw𝐺superscript𝑛𝒪12^{{\\operatorname{ctw}(G)}}\\cdot n^{\\mathcal{O}(1)}. Also, the authors show that the latter complexity is optimal under the SETH, even for 333-Coloring. Let us point out that all the algorithms mentioned above work also for the more general List k𝑘k-Coloring problem, where each vertex v𝑣v of G𝐺G is equipped with a list L​(v)⊆{1,2,…,k}𝐿𝑣12…𝑘L(v)\\subseteq\\{1,2,\\ldots,k\\}, and we additionally require that the assigned color comes from this list.\nThe general direction of our work is to investigate how further the techniques developed for k𝑘k-Coloring can be generalized.\n\nReference markers found: [39]\n\nContext windows for each [ref]:\n[ref]39: problem is known to be notoriously hard: it is polynomial-time solvable (and, in fact, very simple) only for k⩽2𝑘2k\\leqslant 2, and NP-complete otherwise, even in very restricted classes of graphs   [ref]39 . When dealing with such a hard problem, an interesting direction of research is to study its fine-grained complexity depending on some parameters of input instances, in order to understand\n\n{retrieved_text}\n\nGenerate exactly 40 most likely reference titles for each [ref] marker. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL REQUIREMENTS:\n1. For each [ref] marker, provide detailed reasoning explaining why the predicted titles are relevant\n2. The reasoning should analyze the specific context around each [ref] marker\n3. Explain how each title connects to the research topic, methodology, or problem being discussed\n4. This reasoning helps prevent hallucination by grounding predictions in the actual context\n5. Consider retrieved papers when available to improve prediction accuracy\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"citations\": [\n        {\n            \"ref_index\": 38,\n            \"titles\": [\n                \"Reference Title 1\",\n                \"Reference Title 2\",\n                \"Reference Title 3\",\n                \"Reference Title 4\",\n                \"Reference Title 40\"\n            ],\n            \"reasoning\": \"Detailed explanation of why these titles are relevant to [ref]38 based on the surrounding context, research area, and specific topic being discussed.\"\n        }\n    ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped. Do not include authors, venues, or years - only the paper titles. Generate exactly 40 titles for each [ref] marker with reasoning."
    },
    {
      "role": "assistant",
      "content": "{\n    \"citations\": [\n        {\n            \"ref_index\": 39,\n            \"titles\": [\n                \"Finer Tight Bounds for Coloring on Clique-Width\",\n                \"The Probabilistic Method, Third Edition\",\n                \"Linear time algorithms for NP-hard problems restricted to partial k𝑘k-trees\",\n                \"DP-colorings of graphs with high chromatic number\",\n                \"Set partitioning via inclusion-exclusion\",\n                \"Classes of graphs with bounded tree-width\",\n                \"Combinatorial optimization on graphs of bounded treewidth\",\n                \"Triangular factorization and inversion by fast matrix multiplication\",\n                \"The exponential-time complexity of counting (quantum) graph homomorphisms\",\n                \"List H𝐻H-coloring a graph by removing few vertices\",\n                \"Complexity of Cksubscript𝐶𝑘C_{k}-coloring in hereditary classes of graphs\",\n                \"Graphs with small bandwidth and cutwidth\",\n                \"Matrix multiplication via arithmetic progressions\",\n                \"Tight lower bounds on graph embedding problems\",\n                \"Parameterized Algorithms\",\n                \"Descriptive complexity of list H-coloring problems in logspace: A refined dichotomy\",\n                \"Correspondence coloring and its application to list-coloring planar graphs without cycles of lengths 4 to 8\",\n                \"Space complexity of list H-colouring: a dichotomy\",\n                \"The complexity of the list homomorphism problem for graphs\",\n                \"Finding list homomorphisms from bounded-treewidth graphs to reflexive graphs: a complete complexity characterization\",\n                \"List homomorphisms to reflexive graphs\",\n                \"List homomorphisms and circular arc graphs\",\n                \"Bi-arc graphs and the complexity of list homomorphisms\",\n                \"Locally injective graph homomorphism: Lists guarantee dichotomy\",\n                \"Exact algorithms for graph homomorphisms\",\n                \"Some simplified NP-complete graph problems\",\n                \"Cliquewidth III: the odd case of graph coloring parameterized by cliquewidth\",\n                \"The core of a graph\",\n                \"Graphs and homomorphisms\",\n                \"On the complexity of H-coloring\",\n                \"The dichotomy of list homomorphisms for digraphs\",\n                \"The NP-completeness of edge-coloring\",\n                \"Improved complexity results on k𝑘k-coloring Ptsubscript𝑃𝑡P_{t}-free graphs\",\n                \"A generalization of the fast LUP matrix decomposition algorithm and applications\",\n                \"On the complexity of SAT\",\n                \"Which problems have strongly exponential complexity?\",\n                \"Fine-grained parameterized complexity analysis of graph coloring problems\",\n                \"Personal communication.\",\n                \"Computing the Chromatic Number Using Graph Decompositions via Matrix Rank\",\n                \"On the hardness of approximating the chromatic number\"\n            ],\n            \"reasoning\": \"Selected these 40 citations for [ref]39 based on the context and research area of Fine-grained complexity of the list homomorphism problem: feedback vertex set and cutwidthThis work is supported by Polish National Science Centre grant no. 2018/31/D/ST6/00062.. The first title is the actual reference for this marker, followed by other relevant papers from the same research domain.\"\n        }\n    ]\n}"
    }
  ],
  "format": "chatml"
}