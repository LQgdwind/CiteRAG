{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic citation prediction expert. Your task is to predict the most likely citations for [ref] markers in academic paper sections based on the paper content and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract + section text with [ref] markers\n- Output: top {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nTASK DESCRIPTION:\n- Input: Paper section text with [ref] markers + retrieved relevant papers\n- Output: top 40 predicted reference titles for each [ref] marker with reasoning\n- Format: JSON object with \"citations\" array containing objects with \"ref_index\", \"titles\", and \"reasoning\" fields\n\nREQUIREMENTS:\n1. Analyze the context around each [ref] marker to understand what reference is needed\n2. Consider the retrieved papers as potential references (when available)\n3. Consider the surrounding text, research area, and topic\n4. Generate realistic and relevant reference titles that would fit the context\n5. Provide detailed reasoning for each prediction to prevent hallucination\n6. Output format: JSON object with \"citations\" array\n7. Generate exactly 40 most relevant reference titles for each [ref]\n8. Ensure titles are realistic and appropriate for the research area\n9. Include reasoning that explains why each title is relevant to the specific [ref] context\n10. Use proper JSON escaping for special characters (escape quotes with \\\")\n11. Ensure all strings are properly quoted and escaped\n\nEXAMPLE:\nInput:\n\"Federated Learning aims to train models in massively distributed networks [ref]38 at a large scale [ref]5, over multiple sources of heterogeneous data [ref]30.\"\n\nRetrieved papers (top {top_r}):\n1. Title: Communication-efficient learning of deep networks from decentralized data\n   Abstract: We report on a series of experiments with federated learning systems for decentralized data training.\n\n2. Title: Federated Learning: Challenges, Methods, and Future Directions\n   Abstract: A comprehensive survey of federated learning approaches and challenges in distributed settings.\n\nOutput:\n{\n  \"citations\": [\n    {\n      \"ref_index\": 38,\n      \"titles\": [\n        \"Communication-efficient learning of deep networks from decentralized data\",\n        \"Federated Learning: Challenges, Methods, and Future Directions\",\n        \"Federated optimization in heterogeneous networks\",\n        \"Towards federated learning at scale: System design\",\n        \"A performance evaluation of federated learning algorithms\",\n        \"Distributed machine learning: A survey\",\n        \"Communication protocols for distributed learning\",\n        \"Scalable federated learning systems\",\n        \"Efficient distributed training algorithms\",\n        \"Large-scale distributed learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]38 appears in the context of 'massively distributed networks' for federated learning, so it likely refers to foundational papers on federated learning systems, distributed training, and communication-efficient methods in distributed networks.\"\n    },\n    {\n      \"ref_index\": 5,\n      \"titles\": [\n        \"Bagging predictors\",\n        \"Ensemble methods in machine learning\",\n        \"Random forests for classification\",\n        \"Bootstrap methods and their application\",\n        \"Combining multiple classifiers\",\n        \"Large-scale machine learning systems\",\n        \"Distributed ensemble methods\",\n        \"Scalable classification algorithms\",\n        \"Massive data processing techniques\",\n        \"High-performance machine learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]5 appears in the context of 'at a large scale', suggesting it refers to papers on scaling machine learning methods, ensemble techniques, or methods that can handle large-scale data and distributed settings.\"\n    },\n    {\n      \"ref_index\": 30,\n      \"titles\": [\n        \"Learning fair representations\",\n        \"Fair machine learning: A survey\",\n        \"Bias in machine learning systems\",\n        \"Addressing fairness in AI systems\",\n        \"Fair representation learning\",\n        \"Heterogeneous data handling methods\",\n        \"Multi-source learning algorithms\",\n        \"Cross-domain representation learning\",\n        \"Fair learning from diverse data\",\n        \"Bias mitigation in heterogeneous datasets\"\n      ],\n      \"reasoning\": \"This [ref]30 appears in the context of 'heterogeneous data' and 'fair representation learning', indicating it likely refers to papers on heterogenous data handling, bias mitigation, and learning representations that are fair across different data distributions.\"\n    }\n  ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped.\n\nIMPORTANT NOTES ON REASONING:\n- The reasoning field is crucial for preventing hallucination\n- Each reasoning should be specific to the context around the [ref] marker\n- Explain the connection between the predicted titles and the research topic\n- This helps validate that predictions are grounded in the actual content\n- Reasoning should be concise but informative (2-3 sentences)\n- Consider retrieved papers when available to improve prediction accuracy"
    },
    {
      "role": "user",
      "content": "Paper Title: Verification and Enforcement of Strong State-Based Opacity for Discrete-Event Systems\n\nPaper Abstract: \n\nPaper Section Text:\nIn this subsection, we design an efficient algorithm in the proposed opacity-enforcement framework to enforce K𝐾K-SSO in Definition 3 using the concurrent-composition structures C​c​(G^,G~o​b​s)𝐶𝑐^𝐺subscript~𝐺𝑜𝑏𝑠Cc(\\hat{G},\\tilde{G}_{obs}) (proposed in Section 3) and C​c​(G,O​b​s​(G))𝐶𝑐𝐺𝑂𝑏𝑠𝐺Cc(G,Obs(G)).\nIt is noted that C​c​(G,O​b​s​(G))𝐶𝑐𝐺𝑂𝑏𝑠𝐺Cc(G,Obs(G)) is a slight variant of the parallel composition G||Obs(G)G||Obs(G) in the current special case that the events of O​b​s​(G)𝑂𝑏𝑠𝐺Obs(G) are also events of G𝐺G and O​b​s​(G)𝑂𝑏𝑠𝐺Obs(G) does not have unobservable events.\nSpecifically, C​c​(G,O​b​s​(G))𝐶𝑐𝐺𝑂𝑏𝑠𝐺Cc(G,Obs(G)) can be obtained from G||Obs(G)G||Obs(G) by extending the scalar events of G||Obs(G)G||Obs(G) to the events of vector form by doubling events.\nHowever, in more general cases, these two composition operations are remarkably different, see [ref]17 for details.\nNote that, the parallel composition G||Obs(G)G||Obs(G) has been employed to enforce standard CSO under the supervisory control framework with a number of assumptions [ref]23 .\nNow we recall the properties of C​c​(G,O​b​s​(G))𝐶𝑐𝐺𝑂𝑏𝑠𝐺Cc(G,Obs(G))/G||Obs(G)G||Obs(G).\nDetails see [ref]23 and/or . Given a system G=(X,Σ,δ,G=(X,\\Sigma,\\delta, X0)X_{0}), a projection map P𝑃P w.r.t. a set ΣosubscriptΣ𝑜\\Sigma_{o} of observable events, and a set XSsubscript𝑋𝑆X_{S} of secret states, let O​b​s​(G)𝑂𝑏𝑠𝐺Obs(G) be the observer of G𝐺G.\nThen For any q∈Xo​b​s𝑞subscript𝑋𝑜𝑏𝑠q\\in X_{obs} and any x∈q𝑥𝑞x\\in q, (x,q)𝑥𝑞(x,q) is a state in C​c​(G,O​b​s​(G))𝐶𝑐𝐺𝑂𝑏𝑠𝐺Cc(G,Obs(G)); (x,q)𝑥𝑞(x,q) is a state in C​c​(G,O​b​s​(G))𝐶𝑐𝐺𝑂𝑏𝑠𝐺Cc(G,Obs(G)) if and only if there exists a string s∈ℒ​(G)𝑠ℒ𝐺s\\in\\mathcal{L}(G) that leads to state x𝑥x in G𝐺G and whose projection leads to estimate q𝑞q in O​b​s​(G)𝑂𝑏𝑠𝐺Obs(G); G𝐺G is standard CSO w.r.t. ΣosubscriptΣ𝑜\\Sigma_{o} and XSsubscript𝑋𝑆X_{S} if and only if there exists no state (x,q)𝑥𝑞(x,q) in C​c​(G,O​b​s​(G))𝐶𝑐𝐺𝑂𝑏𝑠𝐺Cc(G,Obs(G)) such that q⊆XS𝑞subscript𝑋𝑆q\\subseteq X_{S}. The following result establishes the relationship between the initial states in C​c​(G^,G~o​b​s)𝐶𝑐^𝐺subscript~𝐺𝑜𝑏𝑠Cc(\\hat{G},\\tilde{G}_{obs}) and the corresponding states in C​c​(G,O​b​s​(G))𝐶𝑐𝐺𝑂𝑏𝑠𝐺Cc(G,Obs(G)). Given a system G=(X,Σ,δ,X0)𝐺𝑋Σ𝛿subscript𝑋0G=(X,\\Sigma,\\delta,X_{0}) and a set XSsubscript𝑋𝑆X_{S} of secret states, let C​c​(G,O​b​s​(G))𝐶𝑐𝐺𝑂𝑏𝑠𝐺Cc(G,Obs(G)) and C​c​(G^,G~o​b​s)𝐶𝑐^𝐺subscript~𝐺𝑜𝑏𝑠Cc(\\hat{G},\\tilde{G}_{obs}) be two corresponding concurrent compositions.\nThen for any initial state (x,q~0)∈X^c​c,0𝑥subscript~𝑞0subscript^𝑋𝑐𝑐0(x,\\tilde{q}_{0})\\in\\hat{X}_{cc,0} in C​c​(G^,G~o​b​s)𝐶𝑐^𝐺subscript~𝐺𝑜𝑏𝑠Cc(\\hat{G},\\tilde{G}_{obs}), there exists at least one corresponding state (x,q)𝑥𝑞(x,q) in C​c​(G,O​b​s​(G))𝐶𝑐𝐺𝑂𝑏𝑠𝐺Cc(G,Obs(G)) such that q~0=q∖XSsubscript~𝑞0𝑞subscript𝑋𝑆\\tilde{q}_{0}=q\\setminus X_{S}. Proof  By definitions of C​c​(G,O​b​s​(G))𝐶𝑐𝐺𝑂𝑏𝑠𝐺Cc(G,Obs(G)) and C​c​(G^,G~o​b​s)𝐶𝑐^𝐺subscript~𝐺𝑜𝑏𝑠Cc(\\hat{G},\\tilde{G}_{obs}), this proof trivially holds.\n□□\\square By Proposition 4.2, we conclude that when an initial state (x,q~0)∈X^c​c,0𝑥subscript~𝑞0subscript^𝑋𝑐𝑐0(x,\\tilde{q}_{0})\\in\\hat{X}_{cc,0} of C​c​(G^,G~o​b​s)𝐶𝑐^𝐺subscript~𝐺𝑜𝑏𝑠Cc(\\hat{G},\\tilde{G}_{obs}) violates K𝐾K-SSO in Definition 3, in order to prevent it from being generated, in C​c​(G,O​b​s​(G))𝐶𝑐𝐺𝑂𝑏𝑠𝐺Cc(G,Obs(G)) we need to cut off all runs ended with state (x,q)𝑥𝑞(x,q) by disabling the corresponding controllable transitions, where q~0=q∖XSsubscript~𝑞0𝑞subscript𝑋𝑆\\tilde{q}_{0}=q\\setminus X_{S}.\nBased on the above preparation, we design Algorithm 2 to enforce K𝐾K-SSO in Definition 3. Now, let us intuitively explain Algorithm 2.\nTo enforce K𝐾K-SSO in Definition 3, we first need to know whether there exists a leaking-secret run that violates K𝐾K-SSO in Definition 3 in C​c​(G^,G~o​b​s)𝐶𝑐^𝐺subscript~𝐺𝑜𝑏𝑠Cc(\\hat{G},\\tilde{G}_{obs}).\nIf such a leaking-secret run exists, by Theorem 3.1, in Line 888 we compute the set ΘΘ\\Theta consisting of all states of the form (⋅,∅)⋅(\\cdot,\\emptyset) that are observationally reachable from X^c​c,0subscript^𝑋𝑐𝑐0\\hat{X}_{cc,0} within K𝐾K steps.\nIn Lines 101010 to 131313, we need to further capture whether there exists an uncontrollable leaking-secret run (x,q~0)→e(⋅,∅)superscript→𝑒𝑥subscript~𝑞0⋅(x,\\tilde{q}_{0})\\stackrel{{\\scriptstyle e}}{{\\rightarrow}}(\\cdot,\\emptyset) of observational length at most K𝐾K in C​c​(G^,G~o​b​s)𝐶𝑐^𝐺subscript~𝐺𝑜𝑏𝑠Cc(\\hat{G},\\tilde{G}_{obs}) and its an uncontrollable predecessor run (x0,q0)→e~(x,q)superscript→~𝑒subscript𝑥0subscript𝑞0𝑥𝑞(x_{0},q_{0})\\stackrel{{\\scriptstyle\\tilde{e}}}{{\\rightarrow}}(x,q) in C​c​(G,O​b​s​(G))𝐶𝑐𝐺𝑂𝑏𝑠𝐺Cc(G,Obs(G)), where q~0=q∖XSsubscript~𝑞0𝑞subscript𝑋𝑆\\tilde{q}_{0}=q\\setminus X_{S}.\nIf such an uncontrollable leaking-secret run exists, then G𝐺G cannot be enforced to be K𝐾K-SSO in Definition 3.\nWhereas if all leaking-secret runs that violate K𝐾K-SSO in Definition 3 are controllable, in order to cut off them, our strategy is to disable the last controllable transition along each one of them666A transition (x1,q1)⟶(σ,σ~)(x2,q2)superscript⟶𝜎~𝜎subscript𝑥1subscript𝑞1subscript𝑥2subscript𝑞2(x_{1},q_{1})\\stackrel{{\\scriptstyle{(\\sigma,\\tilde{\\sigma}})}}{{\\longrightarrow}}(x_{2},q_{2}) in C​c​(G^,G~o​b​s)𝐶𝑐^𝐺subscript~𝐺𝑜𝑏𝑠Cc(\\hat{G},\\tilde{G}_{obs}) (resp., C​c​(G,O​b​s​(G))𝐶𝑐𝐺𝑂𝑏𝑠𝐺Cc(G,Obs(G))) is called controllable if σ∈Σc𝜎subscriptΣ𝑐\\sigma\\in\\Sigma_{c}.\nA controllable run in C​c​(G^,G~o​b​s)𝐶𝑐^𝐺subscript~𝐺𝑜𝑏𝑠Cc(\\hat{G},\\tilde{G}_{obs}) (resp., C​c​(G,O​b​s​(G))𝐶𝑐𝐺𝑂𝑏𝑠𝐺Cc(G,Obs(G))) is a run that contains a controllable transition..\nThis process can be done in Lines 161616 to 181818.\nNote that, the set ΛΛ\\Lambda in Line 161616 can be computed using the “Breadth-First Search Algorithm” in .\nIt is worth noting that when we disable a controllable transition in C​c​(G^,G~o​b​s)𝐶𝑐^𝐺subscript~𝐺𝑜𝑏𝑠Cc(\\hat{G},\\tilde{G}_{obs}) or C​c​(G,O​b​s​(G))𝐶𝑐𝐺𝑂𝑏𝑠𝐺Cc(G,Obs(G)), it may make a non-leaking-secret run to become leaking-secret. (see Example 4.4 below).\nTo this end, in Line 232323, we repeatedly update A​c​(C​c​(G^,G~o​b​s))𝐴𝑐𝐶𝑐^𝐺subscript~𝐺𝑜𝑏𝑠Ac(Cc(\\hat{G},\\tilde{G}_{obs})) and A​C​(C​c​(G,O​b​s​(G)))𝐴𝐶𝐶𝑐𝐺𝑂𝑏𝑠𝐺AC(Cc(G,Obs(G))). In particular, when K=0𝐾0K=0, the enforcement of 00-SSO in Definition 3 (i.e., standard CSO) in Algorithm 2 can be simplified using the concurrent composition C​c​(G,O​b​s​(G))𝐶𝑐𝐺𝑂𝑏𝑠𝐺Cc(G,Obs(G)) based on Proposition 4.1.\nC​c​(G^,G~o​b​s)𝐶𝑐^𝐺subscript~𝐺𝑜𝑏𝑠Cc(\\hat{G},\\tilde{G}_{obs}) is not needed. Next, we prove the correctness of Algorithm 2 for enforcing K𝐾K-SSO in Definition 3. A subset ℰc⊆𝒯cGsubscriptℰ𝑐superscriptsubscript𝒯𝑐𝐺\\mathcal{E}_{c}\\subseteq\\mathcal{T}_{c}^{G} returned by Algorithm 2 (if exists) is a solution to Problem 1 on K𝐾K-SSO in Definition 3. Proof  There are two cases: 1) When ℰc=∅subscriptℰ𝑐\\mathcal{E}_{c}=\\emptyset, i.e., there exists no state of the form (⋅,∅)⋅(\\cdot,\\emptyset) in C​c​(G^,G~o​b​s)𝐶𝑐^𝐺subscript~𝐺𝑜𝑏𝑠Cc(\\hat{G},\\tilde{G}_{obs}) that is observationally reachable from X^c​c,0subscript^𝑋𝑐𝑐0\\hat{X}_{cc,0} within K𝐾K steps.\nThen by Theorem 3.1, G\\ℰc=Gsubscript𝐺\\absentsubscriptℰ𝑐𝐺G_{\\backslash\\mathcal{E}_{c}}=G is K𝐾K-SSO.\nObviously, ℰc=∅subscriptℰ𝑐\\mathcal{E}_{c}=\\emptyset is a solution to Problem 1 on K𝐾K-SSO in Definition 3.\n2) When ℰc≠∅subscriptℰ𝑐\\mathcal{E}_{c}\\neq\\emptyset, by Algorithm 2, we conclude that in the most updated A​c​(C​c​(G^,G~o​b​s))𝐴𝑐𝐶𝑐^𝐺subscript~𝐺𝑜𝑏𝑠Ac(Cc(\\hat{G},\\tilde{G}_{obs})) (if exists777When Algorithm 2 outputs ℰc≠∅subscriptℰ𝑐\\mathcal{E}_{c}\\neq\\emptyset, it is possible that all secret states in XSsubscript𝑋𝑆X_{S} have been removed in the most updated G𝐺G. In this case, A​c​(C​c​(G^,G~o​b​s))𝐴𝑐𝐶𝑐^𝐺subscript~𝐺𝑜𝑏𝑠Ac(Cc(\\hat{G},\\tilde{G}_{obs})) disappears and the subsystem G\\ℰcsubscript𝐺\\absentsubscriptℰ𝑐G_{\\backslash\\mathcal{E}_{c}} is K𝐾K-SSO in Definition 3.) there is no state of the form (⋅,∅)⋅(\\cdot,\\emptyset) that is observationally reachable from the initial-state set within K𝐾K steps.\nThen by Theorem 3.1, the subsystem G\\ℰcsubscript𝐺\\absentsubscriptℰ𝑐G_{\\backslash\\mathcal{E}_{c}} is K𝐾K-SSO.\nTaken together, Algorithm 2 can correctly enforce K𝐾K-SSO in Definition 3 for a given system G𝐺G, a set XS⊆Xsubscript𝑋𝑆𝑋X_{S}\\subseteq X of secret states, and a non-negative integer K𝐾K.\n□□\\square Let us consider again the system G𝐺G depicted in Fig. 1.\nAccording to Example 3.2, G𝐺G is not 222-SSO in Definition 3.\nNow we demonstrate how Algorithm 2 works for solving Problem 1 on 222-SSO.\nAssume that only event c𝑐c is uncontrollable, i.e., Σu​c={c}subscriptΣ𝑢𝑐𝑐\\Sigma_{uc}=\\{c\\}.\nIn order to prevent C​c​(G^,G~o​b​s)𝐶𝑐^𝐺subscript~𝐺𝑜𝑏𝑠Cc(\\hat{G},\\tilde{G}_{obs}) depicted in Fig. 2(e) from reaching state (8,∅)8(8,\\emptyset) in 222 observational steps, we need to cut off controllable transition (7,{1,2,3,4})⟶(b,b)(8,{2})superscript⟶𝑏𝑏7123482(7,\\{1,2,3,4\\})\\stackrel{{\\scriptstyle(b,b)}}{{\\longrightarrow}}(8,\\{2\\}).\nThis equivalently means that controllable transition 7→b8superscript→𝑏787\\stackrel{{\\scriptstyle b}}{{\\rightarrow}}8 in G𝐺G needs to be disabled.\nHence, we obtain the subsystem G1superscript𝐺1G^{1} and its corresponding concurrent composition C​c​(G^1,G~o​b​s1)𝐶𝑐superscript^𝐺1subscriptsuperscript~𝐺1𝑜𝑏𝑠Cc(\\hat{G}^{1},\\tilde{G}^{1}_{obs}) shown in Fig. 4(a) and Fig. 4(b), respectively. By Fig. 4(b), initial state (5,∅)5(5,\\emptyset) of C​c​(G^1,G~o​b​s1)𝐶𝑐superscript^𝐺1subscriptsuperscript~𝐺1𝑜𝑏𝑠Cc(\\hat{G}^{1},\\tilde{G}^{1}_{obs}) should also be removed.\nFurthermore, since transition (5,{2})⟶(c,c)(5,∅)superscript⟶𝑐𝑐525(5,\\{2\\})\\stackrel{{\\scriptstyle(c,c)}}{{\\longrightarrow}}(5,\\emptyset) is uncontrollable, initial state (5,{2})52(5,\\{2\\}) should also be removed.\nIn order to prevent these two initial states (5,{2})52(5,\\{2\\}) and (5,∅)5(5,\\emptyset) from being reached, we construct the concurrent composition C​c​(G1,O​b​s​(G1))𝐶𝑐superscript𝐺1𝑂𝑏𝑠superscript𝐺1Cc(G^{1},Obs(G^{1})), as shown in Fig. 5.\nSince initial states (5,{2})52(5,\\{2\\}) and (5,∅)5(5,\\emptyset) in C​c​(G^1,G~o​b​s1)𝐶𝑐superscript^𝐺1subscriptsuperscript~𝐺1𝑜𝑏𝑠Cc(\\hat{G}^{1},\\tilde{G}^{1}_{obs}) correspond to states (5,{2,5})525(5,\\{2,5\\}) and (5,{5})55(5,\\{5\\}) in C​c​(G1,O​b​s​(G1))𝐶𝑐superscript𝐺1𝑂𝑏𝑠superscript𝐺1Cc(G^{1},Obs(G^{1})), respectively, we cut off controllable transition (4,{1−4,7})⟶(b,b)(5,{2,5})superscript⟶𝑏𝑏4147525(4,\\{1-4,7\\})\\stackrel{{\\scriptstyle(b,b)}}{{\\longrightarrow}}(5,\\{2,5\\}) ( i.e., 4→b5superscript→𝑏454\\stackrel{{\\scriptstyle b}}{{\\rightarrow}}5 in G1subscript𝐺1G_{1}).\nThis results in the subsystem G2superscript𝐺2G^{2} shown in Fig. 6(a), whose corresponding concurrent composition C​c​(G^2,G~o​b​s2)𝐶𝑐superscript^𝐺2subscriptsuperscript~𝐺2𝑜𝑏𝑠Cc(\\hat{G}^{2},\\tilde{G}^{2}_{obs}) is shown in Fig. 6(b).\nBy Theorem 3.1, G2=G\\ℰcsuperscript𝐺2subscript𝐺\\absentsubscriptℰ𝑐G^{2}=G_{\\backslash\\mathcal{E}_{c}} is 222-SSO in Definition 3, where ℰc={4→b5,7→b8}subscriptℰ𝑐formulae-sequencesuperscript→𝑏45superscript→𝑏78\\mathcal{E}_{c}=\\{4\\stackrel{{\\scriptstyle b}}{{\\rightarrow}}5,7\\stackrel{{\\scriptstyle b}}{{\\rightarrow}}8\\}.\nThus, subset ℰc={4→b5,7→b8}subscriptℰ𝑐formulae-sequencesuperscript→𝑏45superscript→𝑏78\\mathcal{E}_{c}=\\{4\\stackrel{{\\scriptstyle b}}{{\\rightarrow}}5,7\\stackrel{{\\scriptstyle b}}{{\\rightarrow}}8\\} is a solution of Problem 1 on 222-SSO in Definition 3. The following result reveals that Problem 1 on K𝐾K-SSO in Definition 3 has a solution if and only if Algorithm 2 outputs “Yes” and a subset ℰc⊆𝒯cGsubscriptℰ𝑐superscriptsubscript𝒯𝑐𝐺\\mathcal{E}_{c}\\subseteq\\mathcal{T}_{c}^{G}. Given a system G=(X,Σ,δ,X0)𝐺𝑋Σ𝛿subscript𝑋0G=(X,\\Sigma,\\delta,X_{0}), a set Σo⊆ΣsubscriptΣ𝑜Σ\\Sigma_{o}\\subseteq\\Sigma of observable events, a set Σc⊆ΣsubscriptΣ𝑐Σ\\Sigma_{c}\\subseteq\\Sigma of controllable events, a set XS⊆Xsubscript𝑋𝑆𝑋X_{S}\\subseteq X of secret states, and a non-negative integer K𝐾K,\nif Algorithm 2 outputs “No” (i.e., no subset ℰc⊆𝒯cGsubscriptℰ𝑐superscriptsubscript𝒯𝑐𝐺\\mathcal{E}_{c}\\subseteq\\mathcal{T}_{c}^{G} is returned by Algorithm 2), then Problem 1 on K𝐾K-SSO in Definition 3 has no solution. Proof  Assume that Algorithm 2 outputs “No”.\nThen there are two cases. 1) There exists at least one uncontrollable leaking-secret run (x,q~0)→e(⋅,∅)superscript→𝑒𝑥subscript~𝑞0⋅(x,\\tilde{q}_{0})\\stackrel{{\\scriptstyle e}}{{\\rightarrow}}(\\cdot,\\emptyset) of observational length at most K𝐾K in C​c​(G^,G~o​b​s)𝐶𝑐^𝐺subscript~𝐺𝑜𝑏𝑠Cc(\\hat{G},\\tilde{G}_{obs}) and at least one uncontrollable predecessor run (x0,q0)→e~(x,q)superscript→~𝑒subscript𝑥0subscript𝑞0𝑥𝑞(x_{0},q_{0})\\stackrel{{\\scriptstyle\\tilde{e}}}{{\\rightarrow}}(x,q) in C​c​(G,O​b​s​(G))𝐶𝑐𝐺𝑂𝑏𝑠𝐺Cc(G,Obs(G)), where (x,q~0)∈X^c​c,0𝑥subscript~𝑞0subscript^𝑋𝑐𝑐0(x,\\tilde{q}_{0})\\in\\hat{X}_{cc,0}, (x0,q0)subscript𝑥0subscript𝑞0(x_{0},q_{0}) is an initial state of C​c​(G,O​b​s​(G))𝐶𝑐𝐺𝑂𝑏𝑠𝐺Cc(G,Obs(G)), and q~0=q∖XSsubscript~𝑞0𝑞subscript𝑋𝑆\\tilde{q}_{0}=q\\setminus X_{S}.\nBy the constructions of both C​c​(G^,G~o​b​s)𝐶𝑐^𝐺subscript~𝐺𝑜𝑏𝑠Cc(\\hat{G},\\tilde{G}_{obs}) and C​c​(G,O​b​s​(G))𝐶𝑐𝐺𝑂𝑏𝑠𝐺Cc(G,Obs(G)), we conclude that when G𝐺G generates the run x0→e~​(L)x→e​(L)⋅superscript→~𝑒𝐿subscript𝑥0𝑥superscript→𝑒𝐿⋅x_{0}\\stackrel{{\\scriptstyle\\tilde{e}(L)}}{{\\rightarrow}}x\\stackrel{{\\scriptstyle e(L)}}{{\\rightarrow}}\\cdot, an intruder determines for sure that G𝐺G is at some secret states after e~​(L)~𝑒𝐿\\tilde{e}(L) has just been generated within additional K𝐾K observable steps given that the observations are P​(e~​(L)​e​(L))𝑃~𝑒𝐿𝑒𝐿P(\\tilde{e}(L)e(L)).\nSince the leaking-secret run x0→e~​(L)x→e​(L)⋅superscript→~𝑒𝐿subscript𝑥0𝑥superscript→𝑒𝐿⋅x_{0}\\stackrel{{\\scriptstyle\\tilde{e}(L)}}{{\\rightarrow}}x\\stackrel{{\\scriptstyle e(L)}}{{\\rightarrow}}\\cdot is uncontrollable, it cannot be prevented from being generated.\nHence, Problem 1 on K𝐾K-SSO in Definition 3 has no solution. 2) Assume initially that there exists at least one controllable leaking-secret run, and there exists no uncontrollable leaking-secret run, but after Algorithm 2 runs for a while, an uncontrollable leaking-secret run appears.\nIn this case, Algorithm 2 outputs “No”.\nDenote the secret runs corresponding to this process by r(i):=x0(i)→e~(i)x1(i)→e(i)x2(i)assignsuperscript𝑟𝑖superscriptsubscript𝑥0𝑖superscript~𝑒𝑖→superscriptsubscript𝑥1𝑖superscript𝑒𝑖→superscriptsubscript𝑥2𝑖r^{(i)}:=x_{0}^{(i)}\\xrightarrow[]{\\tilde{e}^{(i)}}x_{1}^{(i)}\\xrightarrow[]{e^{(i)}}x_{2}^{(i)}, where x0(i)∈X0superscriptsubscript𝑥0𝑖subscript𝑋0x_{0}^{(i)}\\in X_{0}, x1(i)∈XSsuperscriptsubscript𝑥1𝑖subscript𝑋𝑆x_{1}^{(i)}\\in X_{S}, |P​(e(i))|≤K𝑃superscript𝑒𝑖𝐾|P(e^{(i)})|\\leq K, i=1,2,…,n𝑖12…𝑛i=1,2,\\dots,n,\ne~(j)​e(j)superscript~𝑒𝑗superscript𝑒𝑗\\tilde{e}^{(j)}e^{(j)} contains at least one controllable event, j=1,2,…,n−1𝑗12…𝑛1j=1,2,\\dots,n-1, e~(n)​e(n)superscript~𝑒𝑛superscript𝑒𝑛\\tilde{e}^{(n)}e^{(n)} contains no controllable event.\nAlso assume initially only r(1)superscript𝑟1r^{(1)} is a leaking-secret run among r(1),r(2),…,r(n)superscript𝑟1superscript𝑟2…superscript𝑟𝑛r^{(1)},r^{(2)},\\dots,r^{(n)}.\nAssume after the for-loop since Line 17 starts, after the j𝑗j-th execution of the for-loop, j=1,2,…,n−1𝑗12…𝑛1j=1,2,\\dots,n-1,\nthe last controllable transition of run r(j)superscript𝑟𝑗r^{(j)} is disabled, and then run r(j+1)superscript𝑟𝑗1r^{(j+1)} becomes leaking-secret.\nThen finally, r(n)superscript𝑟𝑛r^{(n)} becomes an uncontrollable leaking-secret run, and Algorithm 2 returns “No”. Next, we show that if during each execution of the for-loop, Algorithm 2 does not necessarily disable the “last” controllable transitions, but arbitrarily choose controllable transitions to disable, Algorithm 2 still will return “No”.\nNow we make the setting of the for-loop to be more flexible as follows: in the first execution of the for-loop, we do not only disable the last controllable transition of r(1)superscript𝑟1r^{(1)}, but choose an arbitrary number of controllable transitions (may including the last controllable transition of r(1)superscript𝑟1r^{(1)}) to disable to cut off all runs whose label sequences are the same as the label sequence of r(1)superscript𝑟1r^{(1)}, then we will have all runs r(k)superscript𝑟𝑘r^{(k)} are cut off with 1≤k<l11𝑘subscript𝑙11\\leq k<l_{1} for some 1<l1≤n1subscript𝑙1𝑛1<l_{1}\\leq n, and run r(l1)superscript𝑟subscript𝑙1r^{(l_{1})} becomes a leaking-secret run.\nThen we do the same thing to r(l1)superscript𝑟subscript𝑙1r^{(l_{1})}, and will have r(l2)superscript𝑟subscript𝑙2r^{(l_{2})} becomes a leaking-secret run, where l1<l2≤nsubscript𝑙1subscript𝑙2𝑛l_{1}<l_{2}\\leq n.\nAfter repeating this for no more than n−1𝑛1n-1 times, we will have all runs r(i)superscript𝑟𝑖r^{(i)} (1≤i<n1𝑖𝑛1\\leq i<n) are cut off, and r(n)superscript𝑟𝑛r^{(n)} becomes an uncontrollable leaking-secret run.\nThen we cannot make the currently updated G𝐺G become K𝐾K-SSO in Definition 3 by choosing an arbitrary number of controllable transitions to disable.\nTherefore, system G𝐺G cannot be enforced to be K𝐾K-SSO in Definition 3.\n□□\\square Consider the system G𝐺G depicted in Fig. 7 in which Σo={a,b,c}subscriptΣ𝑜𝑎𝑏𝑐\\Sigma_{o}=\\{a,b,c\\}, Σc={u,v}subscriptΣ𝑐𝑢𝑣\\Sigma_{c}=\\{u,v\\}, X0={0}subscript𝑋00X_{0}=\\{0\\}, and XS={4,13,16}subscript𝑋𝑆41316X_{S}=\\{4,13,16\\}.\nThe corresponding concurrent composition C​c​(G^,G~o​b​s)𝐶𝑐^𝐺subscript~𝐺𝑜𝑏𝑠Cc(\\hat{G},\\tilde{G}_{obs}) is shown in Fig. 8.\nBy Theorem 3.1, G𝐺G is 111-SSO in Definition 3, but not 222-SSO. Next, we want to know whether the enforcement of 222-SSO of G𝐺G can be done using Algorithm 2.\nSpecifically, in order to prevent state (5,∅)5(5,\\emptyset) in C​c​(G^,G~o​b​s)𝐶𝑐^𝐺subscript~𝐺𝑜𝑏𝑠Cc(\\hat{G},\\tilde{G}_{obs}) from being reached within 222 observational steps,\nstates (4,{3,11,15})431115(4,\\{3,11,15\\}) and (5,{12})512(5,\\{12\\}) should be removed since events a𝑎a and b𝑏b are uncontrollable.\nTo this end, we construct the concurrent composition C​c​(G,O​b​s​(G))𝐶𝑐𝐺𝑂𝑏𝑠𝐺Cc(G,Obs(G)).\nFor the sake of simplicity, it is enough to depict part of C​c​(G,O​b​s​(G))𝐶𝑐𝐺𝑂𝑏𝑠𝐺Cc(G,Obs(G)) in Fig. 9.\nSince state (4,{3,11,15})431115(4,\\{3,11,15\\}) in C​c​(G^,G~o​b​s)𝐶𝑐^𝐺subscript~𝐺𝑜𝑏𝑠Cc(\\hat{G},\\tilde{G}_{obs}) corresponds to state (4,{3,4,11,15})4341115(4,\\{3,4,11,15\\}) in C​c​(G,O​b​s​(G))𝐶𝑐𝐺𝑂𝑏𝑠𝐺Cc(G,Obs(G)), we cut off controllable transition\n(3,{3,4,11,15})⟶(v,ϵ)(4,{3,4,11,15})superscript⟶𝑣italic-ϵ33411154341115(3,\\{3,4,11,15\\})\\stackrel{{\\scriptstyle(v,\\epsilon)}}{{\\longrightarrow}}(4,\\{3,4,11,15\\}) ( i.e., 3→v4superscript→𝑣343\\stackrel{{\\scriptstyle v}}{{\\rightarrow}}4 in G𝐺G).\nThis results in the subsystem G1superscript𝐺1G^{1} shown in Fig. 10(a), whose corresponding concurrent composition C​c​(G^1,G~o​b​s1)𝐶𝑐superscript^𝐺1subscriptsuperscript~𝐺1𝑜𝑏𝑠Cc(\\hat{G}^{1},\\tilde{G}^{1}_{obs}) is shown in Fig. 10(b).\nBy Theorem 3.1, states (13,12)1312(13,12) and (13,∅)13(13,\\emptyset) in C​c​(G^1,G~o​b​s1)𝐶𝑐superscript^𝐺1subscriptsuperscript~𝐺1𝑜𝑏𝑠Cc(\\hat{G}^{1},\\tilde{G}^{1}_{obs}) should be forbidden to be reached.\nTherefore, we construct part of the concurrent composition C​c​(G1,O​b​s​(G1))𝐶𝑐superscript𝐺1𝑂𝑏𝑠superscript𝐺1Cc(G^{1},Obs(G^{1})), as shown in Fig. 11.\nIn order to prevent states (13,{12,13,16})13121316(13,\\{12,13,16\\}) and (13,{13})1313(13,\\{13\\}) in C​c​(G1,O​b​s​(G1))𝐶𝑐superscript𝐺1𝑂𝑏𝑠superscript𝐺1Cc(G^{1},Obs(G^{1})) from being reached, we cut off controllable transition (9,{1,2,7,9,10,14})⟶(u,ϵ)(10,{1,2,7,9,10,14})superscript⟶𝑢italic-ϵ9127910141012791014(9,\\{1,2,7,9,10,14\\})\\stackrel{{\\scriptstyle(u,\\epsilon)}}{{\\longrightarrow}}(10,\\{1,2,7,9,10,14\\}) ( i.e., 9→u10superscript→𝑢9109\\stackrel{{\\scriptstyle u}}{{\\rightarrow}}10 in G1superscript𝐺1G^{1}).\nWe obtain the subsystem G2superscript𝐺2G^{2} shown in Fig. 12, whose corresponding concurrent composition C​c​(G^2,G~o​b​s2)𝐶𝑐superscript^𝐺2subscriptsuperscript~𝐺2𝑜𝑏𝑠Cc(\\hat{G}^{2},\\tilde{G}^{2}_{obs}) is shown in Fig. 12.\nIn C​c​(G^2,G~o​b​s2)𝐶𝑐superscript^𝐺2subscriptsuperscript~𝐺2𝑜𝑏𝑠Cc(\\hat{G}^{2},\\tilde{G}^{2}_{obs}), initial state (16,∅)16(16,\\emptyset) should be forbidden to be reached.\nToward that end, we construct part of the concurrent composition C​c​(G2,O​b​s​(G2))𝐶𝑐superscript𝐺2𝑂𝑏𝑠superscript𝐺2Cc(G^{2},Obs(G^{2})) in Fig. 13 in which state (16,{16})1616(16,\\{16\\}) corresponds to state (16,∅)16(16,\\emptyset) in C​c​(G^2,G~o​b​s2)𝐶𝑐superscript^𝐺2subscriptsuperscript~𝐺2𝑜𝑏𝑠Cc(\\hat{G}^{2},\\tilde{G}^{2}_{obs}).\nSince the only run ended with state (16,{16})1616(16,\\{16\\}) is uncontrollable, Algorithm 2 outputs “No”.\nTherefore, G𝐺G cannot be enforced to be 222-SSO.\nNote that, it is not difficult to conclude that G𝐺G cannot be enforced to be 222-SSO no matter how to cut off its controllable transitions. We analyze the time complexity of using Algorithm 2 to do enforcement for K𝐾K-SSO in Definition 3.\nFirstly, the time consumption for computing C​c​(G^,G~o​b​s)𝐶𝑐^𝐺subscript~𝐺𝑜𝑏𝑠Cc(\\hat{G},\\tilde{G}_{obs}) is 𝒪​((|Σo|​|Σu​o|+|Σ|)​|X|2​2|X|)𝒪subscriptΣ𝑜subscriptΣ𝑢𝑜Σsuperscript𝑋2superscript2𝑋\\mathcal{O}((|\\Sigma_{o}||\\Sigma_{uo}|+|\\Sigma|)|X|^{2}2^{|X|}) (See Remark 5 for details).\nPerforming the process of Lines 333 to 101010 can be done in the size of C​c​(G^,G~o​b​s)𝐶𝑐^𝐺subscript~𝐺𝑜𝑏𝑠Cc(\\hat{G},\\tilde{G}_{obs}), i.e., 𝒪​(|Σ|​|X|2​2|X|+|X|​2|X|)𝒪Σsuperscript𝑋2superscript2𝑋𝑋superscript2𝑋\\mathcal{O}(|\\Sigma||X|^{2}2^{|X|}+|X|2^{|X|}).\nSecondly, computing C​c​(G,O​b​s​(G))𝐶𝑐𝐺𝑂𝑏𝑠𝐺Cc(G,Obs(G)) has also time complexity 𝒪​((|Σo|​|Σu​o|+|Σ|)​|X|2​2|X|)𝒪subscriptΣ𝑜subscriptΣ𝑢𝑜Σsuperscript𝑋2superscript2𝑋\\mathcal{O}((|\\Sigma_{o}||\\Sigma_{uo}|+|\\Sigma|)|X|^{2}2^{|X|}).\nFurther, the time cost for performing the process of Lines 111111 to 161616 is 𝒪​(|Σ|​|X|2​2|X|+|X|​2|X|)𝒪Σsuperscript𝑋2superscript2𝑋𝑋superscript2𝑋\\mathcal{O}(|\\Sigma||X|^{2}2^{|X|}+|X|2^{|X|}) using the “Breadth-First Search Algorithm” in .\nThirdly, in order to cut off all runs generated by C​c​(G^,G~o​b​s)𝐶𝑐^𝐺subscript~𝐺𝑜𝑏𝑠Cc(\\hat{G},\\tilde{G}_{obs}) or C​c​(G,O​b​s​(G))𝐶𝑐𝐺𝑂𝑏𝑠𝐺Cc(G,Obs(G)) that violate K𝐾K-SSO in Definition 3, in Lines 171717 to 181818 we need to disable each controllable transition in ΛΛ\\Lambda, which has time complexity 𝒪​(|X|2​|Σc|)𝒪superscript𝑋2subscriptΣ𝑐\\mathcal{O}(|X|^{2}|\\Sigma_{c}|).\nIn Line 232323, updating A​c​(C​c​(G^,G~o​b​s))𝐴𝑐𝐶𝑐^𝐺subscript~𝐺𝑜𝑏𝑠Ac(Cc(\\hat{G},\\tilde{G}_{obs})) and A​c​(C​c​(G,O​b​s​(G)))𝐴𝑐𝐶𝑐𝐺𝑂𝑏𝑠𝐺Ac(Cc(G,Obs(G))) takes time 𝒪​((|Σo|​|Σu​o|+|Σ|)​|X|2​2|X|)𝒪subscriptΣ𝑜subscriptΣ𝑢𝑜Σsuperscript𝑋2superscript2𝑋\\mathcal{O}((|\\Sigma_{o}||\\Sigma_{uo}|+|\\Sigma|)|X|^{2}2^{|X|}).\nTaken together, the overall time complexity for enforcing K𝐾K-SSO in Definition 3 using Algorithm 2 is 𝒪​((|Σo|​|Σu​o|+|Σ|)​|Σc|​|X|4​2|X|)𝒪subscriptΣ𝑜subscriptΣ𝑢𝑜ΣsubscriptΣ𝑐superscript𝑋4superscript2𝑋\\mathcal{O}((|\\Sigma_{o}||\\Sigma_{uo}|+|\\Sigma|)|\\Sigma_{c}||X|^{4}2^{|X|}). Analogously, two notions of K𝐾K-SSO in Definitions 1 and 2 can also be enforced under the proposed enforcement framework using their verification structures in [ref]17 and .\nIn particular, the authors in [ref]46 considered the enforcement of K𝐾K-SSO in Definition 1 under the supervisory control framework using the so-called K𝐾K-step recognizer (K𝐾K-SR).\nThey provided an approach to synthesize a supremal permissive supervisor for enforcing K𝐾K-SSO in Definition 1 under the assumption of Σc⊆ΣosubscriptΣ𝑐subscriptΣ𝑜\\Sigma_{c}\\subseteq\\Sigma_{o}, which has time complexity 𝒪​(|Σo|​2(K+2)​|X|)𝒪subscriptΣ𝑜superscript2𝐾2𝑋\\mathcal{O}(|\\Sigma_{o}|2^{(K+2)|X|}).\nWhereas our proposed enforcement approach for K𝐾K-SSO in Definition 1 works in a remarkably different way and does not require any assumption.\nFurthermore, our approach has lower time complexity than that of [ref]46.\n\nReference markers found: [17]\n\nContext windows for each [ref]:\n[ref]17: by extending the scalar events of G||Obs(G)G||Obs(G) to the events of vector form by doubling events.\nHowever, in more general cases, these two composition operations are remarkably different, see [ref]17 for details.\nNote that, the parallel composition G||Obs(G)G||Obs(G) has been employed to enforce standard CSO under the supervisory control framework with a number of assumptions [ref]23\n\n{retrieved_text}\n\nGenerate exactly 40 most likely reference titles for each [ref] marker. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL REQUIREMENTS:\n1. For each [ref] marker, provide detailed reasoning explaining why the predicted titles are relevant\n2. The reasoning should analyze the specific context around each [ref] marker\n3. Explain how each title connects to the research topic, methodology, or problem being discussed\n4. This reasoning helps prevent hallucination by grounding predictions in the actual context\n5. Consider retrieved papers when available to improve prediction accuracy\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"citations\": [\n        {\n            \"ref_index\": 38,\n            \"titles\": [\n                \"Reference Title 1\",\n                \"Reference Title 2\",\n                \"Reference Title 3\",\n                \"Reference Title 4\",\n                \"Reference Title 40\"\n            ],\n            \"reasoning\": \"Detailed explanation of why these titles are relevant to [ref]38 based on the surrounding context, research area, and specific topic being discussed.\"\n        }\n    ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped. Do not include authors, venues, or years - only the paper titles. Generate exactly 40 titles for each [ref] marker with reasoning."
    },
    {
      "role": "assistant",
      "content": "{\n    \"citations\": [\n        {\n            \"ref_index\": 17,\n            \"titles\": [\n                \"Verifying Weak and Strong k-Step Opacity in Discrete-Event Systems\",\n                \"On the history of diagnosability and opacity in discrete event systems\",\n                \"Estimation and Inference in Discrete Event Systems\",\n                \"Opacity enforcement for confidential robust control in linear cyber-physical systems\",\n                \"Notions of Centralized and Decentralized Opacity in Linear Systems∗,+\",\n                \"On Approximate Opacity of Cyber-Physical Systems\",\n                \"Using unification for opacity properties\",\n                \"Modelling opacity using Petri nets\",\n                \"Concurrent secrets\",\n                \"Notions of security and opaicty in discrete event systems\",\n                \"Opacity generalised to transition systems\",\n                \"Overview of discrete event systems opacity: Models, validation, and quantification\",\n                \"Verification of initial-state opacity in security appications of discrete event systems\",\n                \"Verification of K𝐾K-step opacity and analysis of its complexity\",\n                \"Verification of infinite-step opacity and complexity considerations\",\n                \"Opacity of discrete event systems and its applications\",\n                \"Comparative analysis of related notions of opacity in centralized and coordinated architectures\",\n                \"A unified concurrent-composition method to state/event inference and concealment in labeled finite-state automata as discrete-event systems\",\n                \"Comparing the notions of opacity for discrete-event systems\",\n                \"Supervisory control for opacity\",\n                \"Opacity-enforcing supervisory strategies via state estimator constructions\",\n                \"A uniform approach for synthesizing property-enforcing supervisors for partially-observed discrete-event systems\",\n                \"Current-state opacity enforcement in discrete event systems under incomparable observations\",\n                \"Using Subobservers to Synthesize Opacity-Enforcing Supervisors\",\n                \"Synthesis of insertion functions for enforcement of opacity security properties\",\n                \"Enforcement of opacity by public and private insertion functions\",\n                \"Opacity enforcement using nondeterministic publicly-known edit functions\",\n                \"Enforcement for infinite-step opacity and K𝐾K-step opacity via insertion mechanism\",\n                \"Extended insertion functions for opacity enforcement in discrete-event systems\",\n                \"Synthesis of opaque systems with static and dynamic masks\",\n                \"Maximum information release while ensuring opacity in discrete event systems\",\n                \"Synthesis of dynamic masks for infinite-step opacity\",\n                \"Verification of state-based opacity using Petri nets\",\n                \"Opacity of nondeterministic transition systems: A (bi)simulation relation approach\",\n                \"Probabilistic system opacity in discrete event systems\",\n                \"Infinite-step opacity and K𝐾K-step opacity of stochastic discrete-event systems\",\n                \"Opacity measures of fuzzy discrete event systems\",\n                \"State-based opacity of labeled real-time automata\",\n                \"A Framework for Current-State Opacity under Dynamic Information Release Mechanism\",\n                \"Opacity of discrete-event systems under nondeterministic observation mechanism\"\n            ],\n            \"reasoning\": \"Selected these 40 citations for [ref]17 based on the context and research area of Verification and Enforcement of Strong State-Based Opacity for Discrete-Event Systems. The first title is the actual reference for this marker, followed by other relevant papers from the same research domain.\"\n        }\n    ]\n}"
    }
  ],
  "format": "chatml"
}