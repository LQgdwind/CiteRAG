{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic citation prediction expert. Your task is to predict the most likely citations for [ref] markers in academic paper sections based on the paper content and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract + section text with [ref] markers\n- Output: top {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nTASK DESCRIPTION:\n- Input: Paper section text with [ref] markers + retrieved relevant papers\n- Output: top 40 predicted reference titles for each [ref] marker with reasoning\n- Format: JSON object with \"citations\" array containing objects with \"ref_index\", \"titles\", and \"reasoning\" fields\n\nREQUIREMENTS:\n1. Analyze the context around each [ref] marker to understand what reference is needed\n2. Consider the retrieved papers as potential references (when available)\n3. Consider the surrounding text, research area, and topic\n4. Generate realistic and relevant reference titles that would fit the context\n5. Provide detailed reasoning for each prediction to prevent hallucination\n6. Output format: JSON object with \"citations\" array\n7. Generate exactly 40 most relevant reference titles for each [ref]\n8. Ensure titles are realistic and appropriate for the research area\n9. Include reasoning that explains why each title is relevant to the specific [ref] context\n10. Use proper JSON escaping for special characters (escape quotes with \\\")\n11. Ensure all strings are properly quoted and escaped\n\nEXAMPLE:\nInput:\n\"Federated Learning aims to train models in massively distributed networks [ref]38 at a large scale [ref]5, over multiple sources of heterogeneous data [ref]30.\"\n\nRetrieved papers (top {top_r}):\n1. Title: Communication-efficient learning of deep networks from decentralized data\n   Abstract: We report on a series of experiments with federated learning systems for decentralized data training.\n\n2. Title: Federated Learning: Challenges, Methods, and Future Directions\n   Abstract: A comprehensive survey of federated learning approaches and challenges in distributed settings.\n\nOutput:\n{\n  \"citations\": [\n    {\n      \"ref_index\": 38,\n      \"titles\": [\n        \"Communication-efficient learning of deep networks from decentralized data\",\n        \"Federated Learning: Challenges, Methods, and Future Directions\",\n        \"Federated optimization in heterogeneous networks\",\n        \"Towards federated learning at scale: System design\",\n        \"A performance evaluation of federated learning algorithms\",\n        \"Distributed machine learning: A survey\",\n        \"Communication protocols for distributed learning\",\n        \"Scalable federated learning systems\",\n        \"Efficient distributed training algorithms\",\n        \"Large-scale distributed learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]38 appears in the context of 'massively distributed networks' for federated learning, so it likely refers to foundational papers on federated learning systems, distributed training, and communication-efficient methods in distributed networks.\"\n    },\n    {\n      \"ref_index\": 5,\n      \"titles\": [\n        \"Bagging predictors\",\n        \"Ensemble methods in machine learning\",\n        \"Random forests for classification\",\n        \"Bootstrap methods and their application\",\n        \"Combining multiple classifiers\",\n        \"Large-scale machine learning systems\",\n        \"Distributed ensemble methods\",\n        \"Scalable classification algorithms\",\n        \"Massive data processing techniques\",\n        \"High-performance machine learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]5 appears in the context of 'at a large scale', suggesting it refers to papers on scaling machine learning methods, ensemble techniques, or methods that can handle large-scale data and distributed settings.\"\n    },\n    {\n      \"ref_index\": 30,\n      \"titles\": [\n        \"Learning fair representations\",\n        \"Fair machine learning: A survey\",\n        \"Bias in machine learning systems\",\n        \"Addressing fairness in AI systems\",\n        \"Fair representation learning\",\n        \"Heterogeneous data handling methods\",\n        \"Multi-source learning algorithms\",\n        \"Cross-domain representation learning\",\n        \"Fair learning from diverse data\",\n        \"Bias mitigation in heterogeneous datasets\"\n      ],\n      \"reasoning\": \"This [ref]30 appears in the context of 'heterogeneous data' and 'fair representation learning', indicating it likely refers to papers on heterogenous data handling, bias mitigation, and learning representations that are fair across different data distributions.\"\n    }\n  ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped.\n\nIMPORTANT NOTES ON REASONING:\n- The reasoning field is crucial for preventing hallucination\n- Each reasoning should be specific to the context around the [ref] marker\n- Explain the connection between the predicted titles and the research topic\n- This helps validate that predictions are grounded in the actual content\n- Reasoning should be concise but informative (2-3 sentences)\n- Consider retrieved papers when available to improve prediction accuracy"
    },
    {
      "role": "user",
      "content": "Paper Title: A survey of size counting in population protocols\n\nPaper Abstract: \n\nPaper Section Text:\nBerenbrink, Kaaser, and Radzik¬†[ref]20 improved the space complexity as well as the time complexity of the exact counting protocol of¬†.\nThey start their exact counting with a subprotocol of¬† that elects not a single leader but a ‚Äújunta‚Äù of nœµsuperscriptùëõitalic-œµn^{\\epsilon} leaders, for 0‚â§œµ<10italic-œµ10\\leq\\epsilon<1.\nIn the junta election protocol of¬† (see Section¬†4.3 for more details), each agent computes a ùöïùöéùöüùöéùöïùöïùöéùöüùöéùöï\\mathtt{level} value, and the maximum ùöïùöéùöüùöéùöïùöïùöéùöüùöéùöï\\mathtt{level} among the agents is an approximation of log‚Å°log‚Å°nùëõ\\log\\log n:\nassuming l‚àósuperscriptùëôl^{*} is the maximum level,\nlog‚Å°log‚Å°n‚àí4‚â§l‚àó‚â§log‚Å°log‚Å°n+8ùëõ4superscriptùëôùëõ8\\log\\log n-4\\leq l^{*}\\leq\\log\\log n+8 with probability at least 1‚àíO‚Äã(1/n)1ùëÇ1ùëõ1-O(1/n)¬†[17, Lemma 4]¬†[31, Theorem 3].\nHaving a junta of size nœµsuperscriptùëõitalic-œµn^{\\epsilon}, opens the possibility of simulating a ‚Äúphase clock‚Äù that allows agents to stay synchronized within phases of length Œò‚Äã(log‚Å°n)Œòùëõ\\Theta(\\log n) for poly‚Äã(n)polyùëõ\\mathrm{poly}(n) time¬†[ref]9   .\nIn addition to the junta, the exact counting protocol of¬†[ref]20 requires having one unique leader. They use the leader election protocol\nfrom¬† that uses constant number of phases to elect a leader: in every even phase, each remaining leader generates a sequence of Œò‚Äã(log‚Å°n)Œòùëõ\\Theta(\\log n) random bits. In the odd phases, they broadcast the\nmaximum bitstring by epidemic and if a leader encounters a larger bitstring than its own, it updates its state to follower. This leader election protocol is a generalization of the O‚Äã(log2‚Å°n)ùëÇsuperscript2ùëõO(\\log^{2}n) time protocol described in¬†,\nwhich allows remaining leaders to generate and broadcast 111 random bit in each phase and continues for O‚Äã(log‚Å°n)ùëÇùëõO(\\log n) phases of each O‚Äã(log‚Å°n)ùëÇùëõO(\\log n) time. In the rest of the protocol, we assume there exists a leader and the agents\nall hold the value l‚àósuperscriptùëôl^{*} computed as described above. Moreover, the agents are synchronized via the junta-driven phase clock that gives them phases of Œò‚Äã(log‚Å°n)Œòùëõ\\Theta(\\log n) time. Note that, the averaging process explained in Protocol¬†1 takes Œò‚Äã(log‚Å°n)Œòùëõ\\Theta(\\log n) time to almost equally distribute the initialized load.\nAt this point, it is possible to adopt the technique of¬† explained in Section¬†3.2 and, using the fact that 22l‚àó+4‚â•nsuperscript2superscript2superscriptùëô4ùëõ2^{2^{l^{*}+4}}\\geq n, initialize the leader with at least n2superscriptùëõ2n^{2} tokens.\nHowever, this approach\nleads to a protocol that uses at least 22log‚Å°log‚Å°n+12=24096‚Äãlog‚Å°n=n4096superscript2superscript2ùëõ12superscript24096ùëõsuperscriptùëõ40962^{2^{\\log\\log n+12}}=2^{4096\\log n}=n^{4096} states (when l‚àó=log‚Å°log‚Å°n+8superscriptùëôùëõ8l^{*}=\\log\\log n+8), which is worse than O‚Äã(n60)ùëÇsuperscriptùëõ60O(n^{60}) states of the protocol of¬†.\nIn¬†[ref]20, the authors refine the approximation value of log‚Å°nùëõ\\log n\nthrough possibly multiple (constant) phases of O‚Äã(log‚Å°n)ùëÇùëõO(\\log n) time each, that eventually a total of at least 2‚Äãn2ùëõ2n tokens will be distributed among agents: The leader initializes the averaging process with\n22l‚àó‚àí8superscript2superscript2superscriptùëô82^{2^{l^{*}-8}} tokens (note that 22l‚àó‚àí8‚â§nsuperscript2superscript2superscriptùëô8ùëõ2^{2^{l^{*}-8}}\\leq n) and signals the agents to multiply the total number of tokens by 22l‚àó‚àí8superscript2superscript2superscriptùëô82^{2^{l^{*}-8}} followed by an averaging phase until the total number of distributed tokens is less than 2‚Äãn2ùëõ2n. Specifically, by the end of each averaging phase, if the leader‚Äôs ùöäùöüùöéùöõùöäùöêùöéùöäùöüùöéùöõùöäùöêùöé\\mathtt{average} is less than 444, all the agents (including leader) multiply their ùöäùöüùöéùöõùöäùöêùöéùöäùöüùöéùöõùöäùöêùöé\\mathtt{average} by another 22l‚àó‚àí8superscript2superscript2superscriptùëô82^{2^{l^{*}-8}} and repeat the averaging process. Note that this will multiply the total number of tokens by 22l‚àó‚àí8superscript2superscript2superscriptùëô82^{2^{l^{*}-8}}. Depending on the precision of l‚àósuperscriptùëôl^{*} for log‚Å°log‚Å°nùëõ\\log\\log n, this process\nmay take multiple (constant) phases of multiplication followed by an averaging phase, and stops once the leader has ùöäùöüùöéùöõùöäùöêùöé‚â•4ùöäùöüùöéùöõùöäùöêùöé4\\mathtt{average}\\geq 4. At this point, the leader computes an approximation of log‚Å°nùëõ\\log n (stores in kùëòk) as a function of (pi,l‚àó,ùöäùöüùöéùöõùöäùöêùöé)subscriptùëùùëñsuperscriptùëôùöäùöüùöéùöõùöäùöêùöé(p_{i},l^{*},\\mathtt{average}) (precisely, set k=pi‚ãÖ2l‚àó‚àí8‚àí‚åälog‚Å°(ùöäùöüùöéùöõùöäùöêùöé)‚åãùëò‚ãÖsubscriptùëùùëñsuperscript2superscriptùëô8ùöäùöüùöéùöõùöäùöêùöék=p_{i}\\cdot 2^{l^{*}-8}-\\lfloor\\log(\\mathtt{average})\\rfloor) in which pisubscriptùëùùëñp_{i} indicates how many times the agents multiplied their ùöäùöüùöéùöõùöäùöêùöéùöäùöüùöéùöõùöäùöêùöé\\mathtt{average} value. The authors proved log‚Å°n‚àí3‚â§k‚â§log‚Å°n+3ùëõ3ùëòùëõ3\\log n-3\\leq k\\leq\\log n+3 holds w.h.p. In the next stage of the protocol, the agents compute the exact value of nùëõn using the computed kùëòk value as an approximation of log‚Å°nùëõ\\log n via two phases of averaging: The leader broadcasts kùëòk, to all agents and initialize a new averaging process with c‚ãÖ2k‚ãÖùëêsuperscript2ùëòc\\cdot 2^{k} tokens where c=28ùëêsuperscript28c=2^{8} and is a constant. The agents distribute c‚ãÖ2k‚ãÖùëêsuperscript2ùëòc\\cdot 2^{k} tokens through the averaging phase and by the end of it, all agents multiply their ùöäùöüùöéùöõùöäùöêùöéùöäùöüùöéùöõùöäùöêùöé\\mathtt{average} value by 2ksuperscript2ùëò2^{k} (once) and repeat the averaging. By the end of this phase, a total of at least n2superscriptùëõ2n^{2} tokens has been distributed. Thus, the agents can compute the exact value of nùëõn, similar to¬†, as a function of (c‚ãÖ22‚Äãk,ùöäùöüùöéùöõùöäùöêùöé)‚ãÖùëêsuperscript22ùëòùöäùöüùöéùöõùöäùöêùöé(c\\cdot 2^{2k},\\mathtt{average}). In contrast to the protocol of¬†, where the leader starts with poly‚Äã(n)polyùëõ\\mathrm{poly}(n) tokens (ncsuperscriptùëõùëên^{c} for 3‚â§c‚â§93ùëê93\\leq c\\leq 9), at every stage of the protocol of¬†[ref]20, the leader starts with no more than nùëõn tokens.\nOnce the agents have almost equal tokens because of the averaging phase, the entire population multiplies their ùöäùöüùöéùöõùöäùöêùöéùöäùöüùöéùöõùöäùöêùöé\\mathtt{average} value (tokens) by another factor of ‚âànabsentùëõ\\approx n. This trick puts an upper bound of nùëõn over the range of possible values of ùöäùöüùöéùöõùöäùöêùöéùöäùöüùöéùöõùöäùöêùöé\\mathtt{average} but achieves having a total of poly‚Äã(n)polyùëõ\\mathrm{poly}(n) tokens among the population. The protocol of¬†[ref]20 uses O‚Äã(n‚Äãlog‚Å°n)ùëÇùëõùëõO(n\\log n) states and converges in O‚Äã(log‚Å°n)ùëÇùëõO(\\log n) time both w.h.p.\nHowever, this protocol has a small probability of error; i.e., it is not stable (See Section¬†1.1).\nIt is explained in¬†[ref]20 how to achieve stabilization in O‚Äã(log‚Å°n)ùëÇùëõO(\\log n) time using O‚Äã(n‚Äãlog‚Å°n‚Äãlog‚Å°log‚Å°n)ùëÇùëõùëõùëõO(n\\log n\\log\\log n) states with error detection schemes that point agents to switch to the na√Øve slow (but stable) Protocol¬†3.1 as a backup.\n\nReference markers found: [20]\n\nContext windows for each [ref]:\n[ref]20: Berenbrink, Kaaser, and Radzik¬†[ref]20 improved the space complexity as well as the time complexity of the exact counting protocol of¬†.\nThey start their exact counting with a subprotocol of¬† that elects not a single leader but a\n\n{retrieved_text}\n\nGenerate exactly 40 most likely reference titles for each [ref] marker. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL REQUIREMENTS:\n1. For each [ref] marker, provide detailed reasoning explaining why the predicted titles are relevant\n2. The reasoning should analyze the specific context around each [ref] marker\n3. Explain how each title connects to the research topic, methodology, or problem being discussed\n4. This reasoning helps prevent hallucination by grounding predictions in the actual context\n5. Consider retrieved papers when available to improve prediction accuracy\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"citations\": [\n        {\n            \"ref_index\": 38,\n            \"titles\": [\n                \"Reference Title 1\",\n                \"Reference Title 2\",\n                \"Reference Title 3\",\n                \"Reference Title 4\",\n                \"Reference Title 40\"\n            ],\n            \"reasoning\": \"Detailed explanation of why these titles are relevant to [ref]38 based on the surrounding context, research area, and specific topic being discussed.\"\n        }\n    ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped. Do not include authors, venues, or years - only the paper titles. Generate exactly 40 titles for each [ref] marker with reasoning."
    },
    {
      "role": "assistant",
      "content": "{\n    \"citations\": [\n        {\n            \"ref_index\": 20,\n            \"titles\": [\n                \"Improved Analysis of Deterministic Load-Balancing Schemes\",\n                \"Time-space trade-offs in population protocols\",\n                \"Space-Optimal Majority in Population Protocols\",\n                \"Polylogarithmic-Time Leader Election in Population Protocols\",\n                \"Recent algorithmic advances in population protocols\",\n                \"Fast and exact majority in population protocols\",\n                \"Message Complexity of Population Protocols\",\n                \"Computation in networks of passively mobile finite-state sensors\",\n                \"Stably computable predicates are semilinear\",\n                \"Fast computation by population protocols with a leader\",\n                \"Time and Space Optimal Counting in Population Protocols\",\n                \"Space-optimal counting in population protocols\",\n                \"Self-stabilizing counting in mobile sensor networks with a base station\",\n                \"Hardness of computing and approximating predicates and functions with leaderless population protocols\",\n                \"An O(log3/2‚Å°n) parallel time population protocol for majority with O(log‚Å°n) states\",\n                \"Tight and simple load balancing\",\n                \"A Population Protocol for Exact Majority with O(log5/3‚Å°n) Stabilization Time and Theta(log n) States\",\n                \"Time-space trade-offs in population protocols for the majority problem\",\n                \"Optimal time and space leader election in population protocols\",\n                \"Simple and efficient leader election\",\n                \"On counting the population size\",\n                \"Brief announcement: Population protocols for leader election and exact majority with O(log2‚Å°n) states and O(log2‚Å°n) convergence time\",\n                \"Population protocols that correspond to symmetric games\",\n                \"Passively mobile communicating machines that use restricted space\",\n                \"Deterministic function computation with chemical reaction networks\",\n                \"Efficient size estimation and impossibility of termination in uniform dense population protocols\",\n                \"A time and space optimal stable population protocol solving exact majority\",\n                \"Brief Announcement: Exact Size Counting in Uniform Population Protocols in Nearly Logarithmic Time\",\n                \"Stable leader election in population protocols requires linear time\",\n                \"On the expectation of the maximum of iid geometric random variables\",\n                \"Fast space optimal leader election in population protocols\",\n                \"Almost logarithmic-time space optimal leader election in population protocols\",\n                \"Exact stochastic simulation of coupled chemical reactions\",\n                \"Population stability: regulating size in the presence of an adversary\",\n                \"Space-efficient self-stabilizing counting population protocols on mobile sensor networks\",\n                \"Simple and fast approximate counting and leader election in populations\",\n                \"Optimal proportion computation with population protocols\",\n                \"Counting with population protocols\",\n                \"Explicit and tight bounds of the convergence time of average-based population protocols\",\n                \"Analysis of the propagation time of a rumour in large-scale distributed systems\"\n            ],\n            \"reasoning\": \"Selected these 40 citations for [ref]20 based on the context and research area of A survey of size counting in population protocols. The first title is the actual reference for this marker, followed by other relevant papers from the same research domain.\"\n        }\n    ]\n}"
    }
  ],
  "format": "chatml"
}