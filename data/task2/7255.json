{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic citation prediction expert. Your task is to predict the most likely citations for [ref] markers in academic paper sections based on the paper content and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract + section text with [ref] markers\n- Output: top {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nTASK DESCRIPTION:\n- Input: Paper section text with [ref] markers + retrieved relevant papers\n- Output: top 40 predicted reference titles for each [ref] marker with reasoning\n- Format: JSON object with \"citations\" array containing objects with \"ref_index\", \"titles\", and \"reasoning\" fields\n\nREQUIREMENTS:\n1. Analyze the context around each [ref] marker to understand what reference is needed\n2. Consider the retrieved papers as potential references (when available)\n3. Consider the surrounding text, research area, and topic\n4. Generate realistic and relevant reference titles that would fit the context\n5. Provide detailed reasoning for each prediction to prevent hallucination\n6. Output format: JSON object with \"citations\" array\n7. Generate exactly 40 most relevant reference titles for each [ref]\n8. Ensure titles are realistic and appropriate for the research area\n9. Include reasoning that explains why each title is relevant to the specific [ref] context\n10. Use proper JSON escaping for special characters (escape quotes with \\\")\n11. Ensure all strings are properly quoted and escaped\n\nEXAMPLE:\nInput:\n\"Federated Learning aims to train models in massively distributed networks [ref]38 at a large scale [ref]5, over multiple sources of heterogeneous data [ref]30.\"\n\nRetrieved papers (top {top_r}):\n1. Title: Communication-efficient learning of deep networks from decentralized data\n   Abstract: We report on a series of experiments with federated learning systems for decentralized data training.\n\n2. Title: Federated Learning: Challenges, Methods, and Future Directions\n   Abstract: A comprehensive survey of federated learning approaches and challenges in distributed settings.\n\nOutput:\n{\n  \"citations\": [\n    {\n      \"ref_index\": 38,\n      \"titles\": [\n        \"Communication-efficient learning of deep networks from decentralized data\",\n        \"Federated Learning: Challenges, Methods, and Future Directions\",\n        \"Federated optimization in heterogeneous networks\",\n        \"Towards federated learning at scale: System design\",\n        \"A performance evaluation of federated learning algorithms\",\n        \"Distributed machine learning: A survey\",\n        \"Communication protocols for distributed learning\",\n        \"Scalable federated learning systems\",\n        \"Efficient distributed training algorithms\",\n        \"Large-scale distributed learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]38 appears in the context of 'massively distributed networks' for federated learning, so it likely refers to foundational papers on federated learning systems, distributed training, and communication-efficient methods in distributed networks.\"\n    },\n    {\n      \"ref_index\": 5,\n      \"titles\": [\n        \"Bagging predictors\",\n        \"Ensemble methods in machine learning\",\n        \"Random forests for classification\",\n        \"Bootstrap methods and their application\",\n        \"Combining multiple classifiers\",\n        \"Large-scale machine learning systems\",\n        \"Distributed ensemble methods\",\n        \"Scalable classification algorithms\",\n        \"Massive data processing techniques\",\n        \"High-performance machine learning frameworks\"\n      ],\n      \"reasoning\": \"This [ref]5 appears in the context of 'at a large scale', suggesting it refers to papers on scaling machine learning methods, ensemble techniques, or methods that can handle large-scale data and distributed settings.\"\n    },\n    {\n      \"ref_index\": 30,\n      \"titles\": [\n        \"Learning fair representations\",\n        \"Fair machine learning: A survey\",\n        \"Bias in machine learning systems\",\n        \"Addressing fairness in AI systems\",\n        \"Fair representation learning\",\n        \"Heterogeneous data handling methods\",\n        \"Multi-source learning algorithms\",\n        \"Cross-domain representation learning\",\n        \"Fair learning from diverse data\",\n        \"Bias mitigation in heterogeneous datasets\"\n      ],\n      \"reasoning\": \"This [ref]30 appears in the context of 'heterogeneous data' and 'fair representation learning', indicating it likely refers to papers on heterogenous data handling, bias mitigation, and learning representations that are fair across different data distributions.\"\n    }\n  ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped.\n\nIMPORTANT NOTES ON REASONING:\n- The reasoning field is crucial for preventing hallucination\n- Each reasoning should be specific to the context around the [ref] marker\n- Explain the connection between the predicted titles and the research topic\n- This helps validate that predictions are grounded in the actual content\n- Reasoning should be concise but informative (2-3 sentences)\n- Consider retrieved papers when available to improve prediction accuracy"
    },
    {
      "role": "user",
      "content": "Paper Title: A Study on Training and Developing Large Language Models for Behavior Tree Generation\n\nPaper Abstract: \n\nPaper Section Text:\nBehavior tree is a typical control architecture (CA) that is widely used in computer games and robotics to describe the behaviors of AI and robots [ref]1. It can flexibly control task switching between different autonomic agents, such as robots or virtual entities in computer games, and has explicit support for task hierarchy, action sequencing, and reactivity . BT provides a structured and systematic approach to model the behaviors of agents and bridges the gap between abstract goals and concrete implementation of those goals. One of the key advantages of BT is its flexibility in controlling the actions of agents. It offers a modular and hierarchical representation, where each task or behavior can be encapsulated as a separate node in the tree. This allows for feasible modification and extension of the behaviors of agents without disrupting the overall architecture of the system. Compared with other control architectures, BT has the advantages of modularity, hierarchy, reactivity, readability, and reusability [ref]3. The researches on BT have been rapidly growing due to its potential in improving complex decision-making processes and enabling more efficient planning and execution of tasks . Existing research can be categorized into several areas. One area focuses on enhancing the implementation of BT itself, such as improving node efficiency  and robustness . Another area explores methods for efficient BT generation, including learning-based approaches     and planning-based approaches    . Additionally, there are studies aiming to expand the application scope of BT in various fields     . In this paper, we mainly focus on the problem of BT generation. Currently, the vast majority of BTs applied to the real world are manually designed by human experts, which requires rich experience and domain knowledge.\nHowever, with the increasing complexity and variety of tasks, designing BTs by hand will be a very complex and time-consuming task, which has led to research on automatic BT generation  0 [ref]3. Typical automatic BT generation methods include\nplanning-based methods 1 2 3 \nand learning-based methods 4 5 6 7 8.\nHowever, the above methods still have limitations in understanding tasks, especially the ability to generate BTs according to complex task descriptions is still insufficient. To meet the challenges faced by traditional BT generation methods, we need a method with strong adaptability, generality, and interpretability. LLMs represented by ChatGPT 9 and LLaMA  are developing explosively, showing strong complex reasoning ability, intelligent emergence ability, and interpretability. The advancement of LLMs presents a promising avenue for streamlining the generation of practical BTs. By harnessing the abilities of these models, it becomes possible to minimize the knowledge requirements associated with this process. Leveraging the power of LLMs can potentially alleviate the burden of extensive task knowledge and intricate sensor coding details that have traditionally been mandatory in the generation of practical BTs. Research on BT generation based on LLM is still in the early stages. In , a BT embedded approach was proposed to solve the task-level knowledge representation problem. Based on this, a BT generation method based on LLM was proposed, which realizes BT generation according to target task descriptions and few-shot examples through phase-step prompt design 8. In , 8.5k self-instruct BT instructor-following data was generated by text-davinchi-003 and used to fine-tune another LLM (Stanford Alpaca 7B) for BT generation. In general, training and developing LLMs for BT generation is very important.\nHowever, it is still in its infancy.\nTherefore, in this paper, we aim to examine the key technologies involved in various steps.\nThe main contributions are summarized as follows: To the best of our knowledge, limited works focus on training and developing LLMs for BT generation.\nThis paper delves into this area to efficiently obtain high-quality BTs. We introduce a new BT data generation method using Monte Carlo tree search (MCTS) with state representation and operator libraries, improved with a knowledge base and node library constraints, and optimized with verification feedback for reliable the BT generation. We propose a training pipeline based on the foundation LLM and collected BT data set, including pretraining and supervised fine-tuning training, to enhance the abilities of BTGen model in the specialized BT applications. We propose a BT generation framework, named BTGen Agent, to deploy the trained BTGen model in real-world scenarios, which aims to mitigate common issues such as hallucination, data bias, limited out-of-domain knowledge, and issues with less explainability and transparency.\nIt comprises four main modules: memory module, action module, planning module, and profile module.\nIn addition to these modules, it also incorporates a refinement mechanism to ensure usability. We propose a verification and validation (V&V) driven pipeline to generate high-quality BTs, which runs through all steps in training and developing the BTGen model.\nIt ensures that the functions correctly and meets the specified requirements, as well as provides feedback to improve the quality of the BT generation further. The rest of the paper is organized as follows.\nFirst, Section 2 summarizes the methodology of this paper.\nThen, Section 3 introduces existing foundation models and the required abilities for LLMs.\nSection 4 shows the basic information of collected BTs for training.\nSection 5 and Section 6 show the pipelines for training BTGen model and developing it, respectively.\nSection 7 analyzes the V&V on BTGen model and the generated BTs.\nLast, Section 8 summarizes the open questions.\nSection 9 makes conclusions.\n\nReference markers found: [1]\n\nContext windows for each [ref]:\n[ref]1: Behavior tree is a typical control architecture (CA) that is widely used in computer games and robotics to describe the behaviors of AI and robots [ref]1. It can flexibly control task switching between different autonomic agents, such as robots or virtual entities in computer games, and has explicit support for task hierarchy, action\n\n{retrieved_text}\n\nGenerate exactly 40 most likely reference titles for each [ref] marker. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL REQUIREMENTS:\n1. For each [ref] marker, provide detailed reasoning explaining why the predicted titles are relevant\n2. The reasoning should analyze the specific context around each [ref] marker\n3. Explain how each title connects to the research topic, methodology, or problem being discussed\n4. This reasoning helps prevent hallucination by grounding predictions in the actual context\n5. Consider retrieved papers when available to improve prediction accuracy\n\nCRITICAL FORMAT REQUIREMENT: You must respond with ONLY valid JSON. Do not include any explanatory text, markdown formatting, or other content outside the JSON structure.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"citations\": [\n        {\n            \"ref_index\": 38,\n            \"titles\": [\n                \"Reference Title 1\",\n                \"Reference Title 2\",\n                \"Reference Title 3\",\n                \"Reference Title 4\",\n                \"Reference Title 40\"\n            ],\n            \"reasoning\": \"Detailed explanation of why these titles are relevant to [ref]38 based on the surrounding context, research area, and specific topic being discussed.\"\n        }\n    ]\n}\n\nCRITICAL: Return ONLY the JSON object. Do not include any text before or after the JSON. Do not use markdown formatting. Ensure all quotes and special characters are properly escaped. Do not include authors, venues, or years - only the paper titles. Generate exactly 40 titles for each [ref] marker with reasoning."
    },
    {
      "role": "assistant",
      "content": "{\n    \"citations\": [\n        {\n            \"ref_index\": 1,\n            \"titles\": [\n                \"Combining Planning and Learning of Behavior Trees for Robotic Assembly\",\n                \"micros.bt: An event-driven behavior tree framework for swarm robots\",\n                \"Behavior trees in robotics and AI: An introduction\",\n                \"An expressiveness hierarchy of Behavior Trees and related architectures\",\n                \"Improving the Parallel Execution of Behavior Trees\",\n                \"Adding Neural Network Controllers to Behavior Trees without Destroying Performance Guarantees\",\n                \"Autonomous acquisition of behavior trees for robot control\",\n                \"Learning behavior trees from demonstration\",\n                \"Ql-bt: Enhancing behaviour tree design and implementation with q-learning\",\n                \"Re: Bt-espresso: Improving interpretability and expressivity of behavior trees learned from robot demonstrations\",\n                \"Synthesis of correct-by-construction behavior trees\",\n                \"Representing Robot Task Plans as Robust Logical-Dynamical Systems\",\n                \"Towards Blended Reactive Planning and Acting using Behavior Trees\",\n                \"An autonomous task algorithm based on behavior trees for robot\",\n                \"CoSTAR: Instructing Collaborative Robots with Behavior Trees and Vision\",\n                \"A behavior tree cognitive assistant system for emergency medical services\",\n                \"Simulation and real time analysis of network protection tripping strategy based on behavior trees\",\n                \"Adaptive human behavior modeling for air combat simulation\",\n                \"Modeling, learning, and simulating human activities of daily living with behavior trees\",\n                \"A survey of behavior trees in robotics and ai\",\n                \"Autonomous task planning and acting for micro aerial vehicles\",\n                \"Extended behavior trees for quick definition of flexible robotic tasks\",\n                \"Tree-structured Policy Planning with Learned Behavior Models\",\n                \"Learning to adapt the parameters of behavior trees and motion generators to task variations\",\n                \"Dream to Control: Learning Behaviors by Latent Imagination\",\n                \"Behavior tree design of intelligent behavior of non-player character (npc) based on unity3d\",\n                \"Robot Behavior-Tree-Based Task Generation with Large Language Models\",\n                \"GPT-4 Technical Report\",\n                \"LLaMA: Open and Efficient Foundation Language Models\",\n                \"Behavior-tree embeddings for robot task-level knowledge\",\n                \"LLM-BRAIn: AI-driven Fast Generation of Robot Behaviour Tree based on Large Language Model\",\n                \"A Survey of Large Language Models\",\n                \"Glm: General language model pretraining with autoregressive blank infilling\",\n                \"StarCoder: may the source be with you!\",\n                \"CodeFuse-13B: A Pretrained Multi-lingual Code Large Language Model\",\n                \"Deep Learning\",\n                \"Understanding deep learning (still) requires rethinking generalization\",\n                \"On the opportunities and risks of foundation models\",\n                \"What Language Model to Train if You Have One Million GPU Hours?\",\n                \"Language models are unsupervised multitask learners\"\n            ],\n            \"reasoning\": \"Selected these 40 citations for [ref]1 based on the context and research area of A Study on Training and Developing Large Language Models for Behavior Tree Generation. The first title is the actual reference for this marker, followed by other relevant papers from the same research domain.\"\n        }\n    ]\n}"
    }
  ],
  "format": "chatml"
}