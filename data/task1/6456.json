{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 53 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Multi-node Acceleration for Large-scale GCNs\n\nPaper Abstract: Abstract Limited by the memory capacity and compute power, singe-node graph convolutional neural network (GCN) accelerators cannot complete the execution of GCNs within a reasonable amount of time, due to the explosive size of graphs nowadays. Thus, large-scale GCNs call for a multi-node acceleration system (MultiAccSys) like TPU-Pod for large-scale neural networks. In this work, we aim to scale up single-node GCN accelerators to accelerate GCNs on large-scale graphs. We first identify the communication pattern and challenges of multi-node acceleration for GCNs on large-scale graphs. We observe that (1) coarse-grained communication patterns exist in the execution of GCNs in MultiAccSys, which introduces massive amount of redundant network transmissions and off-chip memory accesses; (2) overall, the acceleration of GCNs in MultiAccSys is bandwidth-bound and latency-tolerant. Guided by these two observations, we then propose MultiGCN, the first MultiAccSys for large-scale GCNs that trades network latency for network bandwidth. Specifically, by leveraging the network latency tolerance, we first propose a topology-aware multicast mechanism with a one put per multicast message-passing model to reduce transmissions and alleviate network bandwidth requirements. Second, we introduce a scatter-based round execution mechanism which cooperates with the multicast mechanism and reduces redundant off-chip memory accesses. Compared to the baseline MultiAccSys, MultiGCN achieves 4∼similar-to\\sim12×\\times speedup using only 28%∼similar-to\\sim68% energy, while reducing 32% transmissions and 73% off-chip memory accesses on average. It not only achieves 2.5∼similar-to\\sim8×\\times speedup over the state-of-the-art multi-GPU solution, but also scales to large-scale graphs as opposed to single-node GCN accelerators.\n\n{retrieved_text}\n\nGenerate exactly 53 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 53\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Aligraph: A comprehensive graph neural network platform\",\n        \"A comprehensive survey on graph neural networks\",\n        \"Graph neural networks: A review of methods and applications\",\n        \"Deep learning on graphs: A survey\",\n        \"Geometric deep learning: going beyond euclidean data\",\n        \"Modeling relational data with graph convolutional networks\",\n        \"Graph convolutional neural networks for web-scale recommender systems\",\n        \"Iterative visual reasoning beyond convolutions\",\n        \"Traffic prediction with advanced graph neural networks\",\n        \"High performance graph convolutionai networks with applications in testability analysis\",\n        \"Hygcn: A gcn accelerator with hybrid architecture\",\n        \"Characterizing and understanding gcns on gpu\",\n        \"Nvidia tesla: A unified graphics and computing architecture\",\n        \"Graphact: Accelerating gcn training on cpu-fpga heterogeneous platforms\",\n        \"Awb-gcn: A graph convolutional network accelerator with runtime workload rebalancing\",\n        \"Engn: A high-throughput and energy-efficient accelerator for large graph neural networks\",\n        \"Gcnax: A flexible and energy-efficient accelerator for graph convolutional neural networks\",\n        \"Open graph benchmark: Datasets for machine learning on graphs\",\n        \"A domain-specific supercomputer for training deep neural networks\",\n        \"A scalable processing-in-memory accelerator for parallel graph processing\",\n        \"Graphp: Reducing communication for pim-based graph processing with efficient data partition\",\n        \"Evaluating modern gpu interconnect: Pcie, nvlink, nv-sli, nvswitch and gpudirect\",\n        \"Dyxy: A proximity congestion-aware deadlock-free dynamic routing method for network on chip\",\n        \"Ramulator: A fast and extensible dram simulator\",\n        \"Highlights of the high-bandwidth memory (hbm) standard\",\n        \"Pump up the volume: Processing large data on gpus with fast interconnects\",\n        \"Gtc china 2020 keynote\",\n        \"SNAP Datasets: Stanford large network dataset collection\",\n        \"Fast graph representation learning with PyTorch Geometric\",\n        \"Gnnadvisor: An adaptive and efficient runtime system for {{\\\\{GNN}}} acceleration on gpus\",\n        \"Semi-supervised classification with graph convolutional networks\",\n        \"How powerful are graph neural networks?\",\n        \"Inductive representation learning on large graphs\",\n        \"Alleviating irregularity in graph analytics acceleration: A hardware/software co-design approach\",\n        \"Graphicionado: A high-performance and energy-efficient accelerator for graph analytics\",\n        \"Deep graph library\",\n        \"Dorylus: affordable, scalable, and accurate gnn training with distributed cpu servers and serverless threads\",\n        \"P3: Distributed deep graph learning at scale\",\n        \"Understanding gnn computational graph: A coordinated computation, io, and memory perspective\",\n        \"Architectural implications of graph neural networks\",\n        \"Characterizing and understanding hgnns on gpus\",\n        \"Characterizing and understanding distributed gnn training on gpus\",\n        \"Understanding and bridging the gaps in current GNN performance optimizations\",\n        \"Rubik: A hierarchical architecture for efficient graph neural network training\",\n        \"Boostgcn: A framework for optimizing gcn inference on fpga\",\n        \"Gnnerator: A hardware/software framework for accelerating graph neural networks\",\n        \"Gnnie: Gnn inference engine with load-balancing and graph-specific caching\",\n        \"Blockgnn: Towards efficient GNN acceleration using block-circulant weight matrices\",\n        \"I-gcn: A graph convolutional network accelerator with runtime locality enhancement through islandization\",\n        \"Hardware acceleration of graph neural networks\",\n        \"Hardware acceleration of large scale gcn inference\",\n        \"Accelerating graph convolutional networks using crossbar-based processing-in-memory architectures\",\n        \"Graphq: Scalable pim-based graph processing\"\n    ],\n    \"reasoning\": \"Selected these 53 references because they represent foundational work and recent advances in Multi-node Acceleration for Large-scale GCNs, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}