{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 54 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Factor Windows: Cost-based Query Rewriting for Optimizing Correlated Window Aggregates\n\nPaper Abstract: Abstract Window aggregates are ubiquitous in stream processing. In Azure Stream Analytics (ASA), a stream processing service hosted by Microsoft’s Azure cloud, we see many customer queries that contain aggregate functions (such as MIN and MAX) over multiple correlated windows (e.g., tumbling windows of length five minutes and ten minutes) defined on the same event stream. In this paper, we present a cost-based optimization framework for optimizing such queries by sharing computation among multiple windows. In particular, we introduce the notion of factor windows, which are auxiliary windows that are not in the input query but may nevertheless help reduce the overall computation cost, and our cost-based optimizer can produce rewritten query plans that have lower costs than the original query plan by utilizing factor windows. Since our optimization techniques are at the level of query (plan) rewriting, they can be implemented on any stream processing system that supports a declarative, SQL-like query language without changing the underlying query execution engine. We formalize the shared computation problem, present the optimization techniques in detail, and report evaluation results over both synthetic and real datasets. Our results show that, compared to the original query plans, the rewritten plans output by our cost-based optimizer can yield significantly higher (up to 16.8×\\times) throughput.\n\n{retrieved_text}\n\nGenerate exactly 54 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 54\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Amazon kinesis\",\n        \"Apache flink datastream api\",\n        \"Azure iot central\",\n        \"Azure stream analytics\",\n        \"Github repository of scotty\",\n        \"Google cloud dataflow\",\n        \"Millwheel: Fault-tolerant stream processing at internet scale\",\n        \"The dataflow model: A practical approach to balancing correctness, latency, and cost in massive-scale, unbounded, out-of-order data processing\",\n        \"The CQL continuous query language: semantic foundations and query execution\",\n        \"Structured streaming: A declarative API for real-time applications in apache spark\",\n        \"Eddies: Continuously adaptive query processing\",\n        \"Static optimization of conjunctive queries with sliding windows over infinite streams\",\n        \"Consistent streaming through time: A vision for event stream processing\",\n        \"Disco: Efficient distributed window aggregation\",\n        \"Serverless event-stream processing over virtual actors\",\n        \"An improved lp-based approximation for steiner tree\",\n        \"Optimization of threshold functions over streams\",\n        \"Apache flink™: Stream and batch processing in a single engine\",\n        \"Stream window aggregation semantics and optimization\",\n        \"Cutty: Aggregate sharing for user-defined windows\",\n        \"Quill: Efficient, transferable, and rich analytics at scale\",\n        \"Accurate latency estimation in a distributed event processing system\",\n        \"Trill: A high-performance incremental query processor for diverse analytics\",\n        \"Introduction to algorithms\",\n        \"Lifting the burden of history from adaptive query processing\",\n        \"Dhalion: Self-regulating stream processing in heron\",\n        \"Data cube: A relational aggregation operator generalizing group-by, cross-tab, and sub totals\",\n        \"Grizzly: Efficient stream processing through adaptive query compilation\",\n        \"Testing the accuracy of query optimizers\",\n        \"Optimized processing of multiple aggregate continuous queries\",\n        \"Three-level processing of multiple aggregate continuous queries\",\n        \"A catalog of stream processing optimizations\",\n        \"The DEBS 2012 grand challenge\",\n        \"Benchmarking distributed stream data processing systems\",\n        \"Reducibility among combinatorial problems\",\n        \"On-the-fly sharing for streamed aggregation\",\n        \"No pane, no gain: efficient evaluation of sliding-window aggregates over data streams\",\n        \"Semantics and evaluation techniques for window aggregates in data streams\",\n        \"Chi: A scalable and programmable control plane for distributed stream processing systems\",\n        \"Self-tuning query mesh for adaptive multi-route query processing\",\n        \"Multi-route query processing and optimization\",\n        \"Using state modules for adaptive query processing\",\n        \"Improved steiner tree approximation in graphs\",\n        \"Access path selection in a relational database management system\",\n        \"General incremental sliding-window aggregation\",\n        \"Lightsaber: Efficient window aggregation on multi-core processors\",\n        \"Storm@twitter\",\n        \"Efficient window aggregation with general stream slicing\",\n        \"Scotty: General and efficient open-source window aggregation for stream processing systems\",\n        \"Drizzle: Fast and adaptable stream processing at scale\",\n        \"Rate-based query optimization for streaming information sources\",\n        \"A note on operator-level query execution cost modeling\",\n        \"Uncertainty aware query execution time prediction\",\n        \"Discretized streams: fault-tolerant streaming computation at scale\"\n    ],\n    \"reasoning\": \"Selected these 54 references because they represent foundational work and recent advances in Factor Windows: Cost-based Query Rewriting for Optimizing Correlated Window Aggregates, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}