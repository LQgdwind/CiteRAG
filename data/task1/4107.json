{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 48 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Worst-Case Efficient Dynamic Geometric Independent Set\n\nPaper Abstract: Abstract We consider the problem of maintaining an approximate maximum independent set of geometric objects under insertions and deletions. We present data structures that maintain a constant-factor approximate maximum independent set for broad classes of fat objects in dùëëd dimensions, where dùëëd is assumed to be a constant, in sublinear worst-case update time. This gives the first results for dynamic independent set in a wide variety of geometric settings, such as disks, fat polygons, and their high-dimensional equivalents. Our result is obtained via a two-level approach. First, we develop a dynamic data structure which stores all objects and provides an approximate independent set when queried, with output-sensitive running time. We show that via standard methods such a structure can be used to obtain a dynamic algorithm with amortized update time bounds. Then, to obtain worst-case update time algorithms, we develop a generic deamortization scheme that with each insertion/deletion keeps (i) the update time bounded and (ii) the number of changes in the independent set constant. We show that such a scheme is applicable to fat objects by showing an appropriate generalization of a separator theorem. Interestingly, we show that our deamortization scheme is also necessary in order to obtain worst-case update bounds: If for a class of objects our scheme is not applicable, then no constant-factor approximation with sublinear worst-case update time is possible. We show that such a lower bound applies even for seemingly simple classes of geometric objects including axis-aligned rectangles in the plane.\n\n{retrieved_text}\n\nGenerate exactly 48 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 48\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Dynamic set cover: improved algorithms and lower bounds\",\n        \"Approximation schemes for maximum weight independent set of rectangles\",\n        \"Dynamic geometric set cover and hitting set\",\n        \"Label placement by maximum independent set in rectangles\",\n        \"Fully dynamic maximal independent set with sublinear update time\",\n        \"Fully dynamic maximal independent set with sublinear in n update time\",\n        \"Fully dynamic maximal independent set with polylogarithmic update time\",\n        \"Multidimensional binary search trees used for associative searching\",\n        \"Improved approximation algorithms for rectangle tiling and packing\",\n        \"A new deterministic algorithm for dynamic set cover\",\n        \"Dynamic set cover: Improved amortized and worst-case update time\",\n        \"Deterministically maintaining a (2+œµ)2italic-œµ(2+\\\\epsilon)-approximate minimum vertex cover in o‚Äã(1/œµ2)ùëú1superscriptitalic-œµ2o(1/{\\\\epsilon}^{2}) amortized update time\",\n        \"Dynamic geometric independent set\",\n        \"Time bounds for selection\",\n        \"Worst-case efficient dynamic geometric independent set\",\n        \"Maximum independent set of rectangles\",\n        \"Coloring and maximum weight independent set of rectangles\",\n        \"Polynomial-time approximation schemes for packing and piercing fat objects\",\n        \"Approximation algorithms for maximum independent set of pseudo-disks\",\n        \"More dynamic data structures for geometric set cover with sublinear update time\",\n        \"Fractional cascading: I. A data structuring technique\",\n        \"Fractional cascading: II. applications\",\n        \"Fully dynamic maximal independent set in expected poly-log update time\",\n        \"On approximating maximum independent set of rectangles\",\n        \"New partitioning techniques and faster algorithms for approximate interval scheduling\",\n        \"Introduction to Algorithms, 3rd Edition\",\n        \"Dynamic data structures for fat objects and their applications\",\n        \"Polynomial-time approximation schemes for geometric intersection graphs\",\n        \"Optimal packing and covering in the plane are np-complete\",\n        \"A 4-approximation algorithm for maximum independent set of rectangles\",\n        \"Algorithms for minimum coloring, maximum clique, minimum covering by cliques, and maximum independent set of a chordal graph\",\n        \"Dynamic algorithms for monotonic interval scheduling problem\",\n        \"Online and dynamic algorithms for set cover\",\n        \"On intersection searching problems involving curved objects\",\n        \"Clique is hard to approximate within n1‚àíœµsuperscriptùëõ1italic-œµn^{1-\\\\epsilon}\",\n        \"Dynamic approximate maximum independent set of intervals, hypercubes and hyperrectangles\",\n        \"Approximation schemes for covering and packing problems in image processing and VLSI\",\n        \"On approximating rectangle tiling and packing\",\n        \"Simple heuristics for unit disk graphs\",\n        \"On the optimality of planar and geometric approximation schemes\",\n        \"Efficient partition trees\",\n        \"Dynamic fractional cascading\",\n        \"Approximating maximum independent set for rectangles in the plane\",\n        \"The Design of Dynamic Data Structures, volume 156 of Lecture Notes in Computer Science\",\n        \"Dynamization of decomposable searching problems yielding good worsts-case bounds\",\n        \"Geometric separator theorems & applications\",\n        \"An optimisation algorithm for maximum independent set with applications in map labelling\",\n        \"Linear degree extractors and the inapproximability of max clique and chromatic number\"\n    ],\n    \"reasoning\": \"Selected these 48 references because they represent foundational work and recent advances in Worst-Case Efficient Dynamic Geometric Independent Set, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}