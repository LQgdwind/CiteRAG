{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 51 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Finite-Choice Logic Programming\n\nPaper Abstract: Abstract. Logic programming, as exemplified by datalog, defines the meaning of a program as the canonical smallest model derived from deductive closure over its inference rules. However, many problems call for an enumeration of models that vary along some set of choices while maintaining structural and logical constraints—there is no single canonical model. The notion of stable models has successfully captured programmer intuition about the set of valid solutions for such problems, giving rise to a family of programming languages and associated solvers collectively known as answer set programming. Unfortunately, the definition of a stable model is frustratingly indirect, especially in the presence of rules containing free variables. We propose a new formalism, called finite-choice logic programming, for which the set of stable models can be characterized as the least fixed point of an immediate consequence operator. Our formalism allows straightforward expression of common idioms in both datalog and answer set programming, gives meaning to a new and useful class of programs, enjoys a constructive and direct operational semantics, and admits a predictive cost semantics, which we demonstrate through our implementation.\n\n{retrieved_text}\n\nGenerate exactly 51 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 51\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"A declarative semantics for Dedalus\",\n        \"Dedalus: Datalog in time and space\",\n        \"Design and Implementation of the LogicBlox System\",\n        \"QuickCheck: a lightweight tool for random testing of Haskell programs\",\n        \"Negation as Failure\",\n        \"Domain-Specific Heuristics in Answer Set Programming: A Declarative Non-Monotonic Approach\",\n        \"Generating explorable narrative spaces with answer set programming\",\n        \"Exploring Consequences of Privacy Policies with Narrative Generation via Answer Set Programming\",\n        \"GASP: Answer Set Programming with Lazy Grounding\",\n        \"OMiGA : An Open Minded Grounding On-The-Fly Answer Set Solver\",\n        \"Generating missions and spaces for adaptable play experiences\",\n        \"Time-and-Space-Efficient Weighted Deduction\",\n        \"Disjunctive datalog\",\n        \"Multi-shot ASP solving with clingo\",\n        \"Potassco: The Potsdam answer set solving collection\",\n        \"The Stable Model Semantics for Logic Programming\",\n        \"Semantics and Expressive Power of Nondeterministic Constructs in Deductive Databases\",\n        \"Reflecting on Random Generation\",\n        \"Parsing randomness\",\n        \"Greedy algorithms in Datalog\",\n        \"CatSAT: A Practical, Embedded, SAT Language for Runtime PCG\",\n        \"The Choice Construct in the Soufflé Language\",\n        \"A theory of nondeterminism\",\n        \"Sound and Complete SLD-Resolution for Bilattice-Based Annotated Logic Programs\",\n        \"Non-Deterministic Choice in Datalog\",\n        \"LVars: lattice-based data structures for deterministic parallelism\",\n        \"Generating good generators for inductive relations\",\n        \"ASPeRiX, a first-order forward chaining approach for answer set computing\",\n        \"Disjunctive stable models: Unfounded sets, fixpoint semantics, and computation\",\n        \"Answer set programming\",\n        \"On the complexity analysis of static analyses\",\n        \"Uniform proofs as a foundation for logic programming\",\n        \"Procedural level generation with answer set programming for general video game playing\",\n        \"Computing correctly with inductive relations\",\n        \"A powerdomain construction\",\n        \"On the Declarative Semantics of Deductive Databases and Logic Programs\",\n        \"Stable semantics for disjunctive programs\",\n        \"Stable models and non-determinism in logic programs with negation\",\n        \"Domains for denotational semantics\",\n        \"Type targeted testing\",\n        \"Procedural content generation in games\",\n        \"Procedural generation in game design\",\n        \"Linear Logical Algorithms\",\n        \"A logical approach to building dungeons: Answer set programming for hierarchical procedural content generation in roguelike games\",\n        \"Quantifying over play: Constraining undesirable solutions in puzzle design\",\n        \"Answer set programming for procedural content generation: A design space approach\",\n        \"Powerdomains\",\n        \"Gemini: Bidirectional generation and analysis of games via ASP\",\n        \"A lattice-theoretical fixpoint theorem and its applications\",\n        \"The Well-Founded Semantics for General Logic Programs\",\n        \"Blending Lazy-Grounding and CDNL Search for Answer-Set Solving\"\n    ],\n    \"reasoning\": \"Selected these 51 references because they represent foundational work and recent advances in Finite-Choice Logic Programming, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}