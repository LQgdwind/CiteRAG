{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 51 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: FusionANNS: An Efficient CPU/GPU Cooperative Processing Architecture for Billion-scale Approximate Nearest Neighbor Search\n\nPaper Abstract: Abstract Approximate nearest neighbor search (ANNS) has emerged as a crucial component of database and AI infrastructure. Ever-increasing vector datasets pose significant challenges in terms of performance, cost, and accuracy for ANNS services. None of modern ANNS systems can address these issues simultaneously. We present FusionANNS, a high-throughput, low-latency, cost-efficient, and high-accuracy ANNS system for billion-scale datasets using SSDs and only one entry-level GPU. The key idea of FusionANNS lies in CPU/GPU collaborative filtering and re-ranking mechanisms, which significantly reduce I/O operations across CPUs, GPU, and SSDs to break through the I/O performance bottleneck. Specifically, we propose three novel designs: (1) multi-tiered indexing to avoid data swapping between CPUs and GPU, (2) heuristic re-ranking to eliminate unnecessary I/Os and computations while guaranteeing high accuracy, and (3) redundant-aware I/O deduplication to further improve I/O efficiency. We implement FusionANNS and compare it with the state-of-the-art SSD-based ANNS system–SPANN and GPU-accelerated in-memory ANNS system–RUMMY. Experimental results show that FusionANNS achieves 1) 9.4-13.1×\\times higher query per second (QPS) and 5.7-8.8×\\times higher cost efficiency compared with SPANN; 2) and 2-4.9×\\times higher QPS and 2.3-6.8×\\times higher cost efficiency compared with RUMMY, while guaranteeing low latency and high accuracy.\n\n{retrieved_text}\n\nGenerate exactly 51 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 51\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"AnnexML: Approximate Nearest Neighbor Search for Extreme Multi-Label Classification\",\n        \"Uni-retriever: Towards learning the unified embedding based retriever in bing sponsored search\",\n        \"Visual search at alibaba\",\n        \"Embedding-based retrieval in facebook search\",\n        \"Chatlaw: Open-source legal large language model with integrated external knowledge bases. arxiv preprint arxiv:2306.16092\",\n        \"A study on the implementation of generative ai services using an enterprise data-based llm application architecture. arxiv preprint arxiv:2309.01105\",\n        \"Chathome: Development and evaluation of a domain-specific language model for home renovation. arxiv preprint arxiv:2307.15290\",\n        \"Xuanyuan 2.0: A large chinese financial chat model with hundreds of billions parameters. arxiv preprint arxiv:2305.12002\",\n        \"Fast vector query processing for large datasets beyond GPU memory with reordered pipelining\",\n        \"Bang: Billion-scale approximate nearest neighbor search using a single gpu. arxiv preprint arxiv: 2401.11324\",\n        \"Df-gas: a distributed fpga-as-a-service architecture towards billion-scale graph-based approximate nearest neighbor search\",\n        \"Parlayann: Scalable and deterministic parallel graph-based approximate nearest neighbor search algorithms\",\n        \"iqan: Fast and accurate vector search with efficient intra-query parallelism on multi-core architectures\",\n        \"Spfresh: Incremental in-place update for billion-scale vector search\",\n        \"SPANN: highly-efficient billion-scale approximate nearest neighborhood search\",\n        \"The inverted multi-index\",\n        \"Efficient and robust approximate nearest neighbor search using hierarchical navigable small world graphs\",\n        \"Ragcache: Efficient knowledge caching for retrieval-augmented generation\",\n        \"Scalable billion-point approximate nearest neighbor search using SmartSSDs\",\n        \"Billion-scale similarity search with gpus\",\n        \"Juno: Optimizing high-dimensional approximate nearest neighbour search with sparsity-aware algorithm and ray-tracing core mapping\",\n        \"DiskANN: Fast accurate billion-point nearest neighbor search on a single node\",\n        \"Retrieval-augmented generation for large language models: A survey\",\n        \"GGNN: graph-based GPU nearest neighbor search\",\n        \"Gpu-accelerated proximity graph approximate nearest neighbor search and construction\",\n        \"SONG: approximate nearest neighbor search on GPU\",\n        \"Approximate nearest neighbors: Towards removing the curse of dimensionality\",\n        \"idec: Indexable distance estimating codes for approximate nearest neighbor search\",\n        \"Query-aware locality-sensitive hashing for approximate nearest neighbor search\",\n        \"Optimised kd-trees for fast image descriptor matching\",\n        \"Revisiting the inverted indices for billion-scale approximate nearest neighbors\",\n        \"Product quantization for nearest neighbor search\",\n        \"Fast approximate nearest neighbor search with the navigating spreading-out graph\",\n        \"Algorithm as 136: A k-means clustering algorithm\",\n        \"Characterizing the dilemma of performance and index size in billion-scale vector search and breaking it with second-tier memory\",\n        \"SPTAG: A library for fast approximate nearest neighbor search\",\n        \"Faiss: A library for efficient similarity search\",\n        \"rkt-io: a direct i/o stack for shielded execution\",\n        \"Combining buffered I/O and direct I/O in distributed file systems\",\n        \"Partitioned elias-fano indexes\",\n        \"Starling: An i/o-efficient disk-resident graph index framework for high-dimensional vector similarity search on data segment\",\n        \"BIG ANN-Benchmarks\",\n        \"HM-ANN: efficient billion-point nearest neighbor search on heterogeneous memory\",\n        \"CXL-ANNS: software-hardware collaborative memory disaggregation and computation for billion-scale approximate nearest neighbor search\",\n        \"Results of the NeurIPS’21 Challenge on Billion-Scale Approximate Nearest Neighbor Search\",\n        \"GRIP: Multi-store capacity-optimized high-performance nearest neighbor search for vector search engine\",\n        \"Cagra: Highly parallel graph construction and approximate nearest neighbor search for gpus\",\n        \"Product quantization with dual codebooks for approximate nearest neighbor search\",\n        \"Co-design hardware and algorithm for vector search\",\n        \"ANNA: specialized architecture for approximate nearest neighbor search\",\n        \"Efficient large-scale approximate nearest neighbor search on opencl FPGA\"\n    ],\n    \"reasoning\": \"Selected these 51 references because they represent foundational work and recent advances in FusionANNS: An Efficient CPU/GPU Cooperative Processing Architecture for Billion-scale Approximate Nearest Neighbor Search, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}