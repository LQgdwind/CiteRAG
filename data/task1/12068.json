{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 54 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: CodeSAM: Source Code Representation Learning by Infusing Self-Attention with Multi-Code-View Graphs\n\nPaper Abstract: Abstract Machine Learning (ML) for software engineering (SE) has gained prominence due to its ability to significantly enhance the performance of various SE applications. This progress is largely attributed to the development of generalizable source code representations that effectively capture the syntactic and semantic characteristics of code. In recent years, pre-trained transformer-based models, inspired by natural language processing (NLP), have shown remarkable success in SE tasks. However, source code contains structural and semantic properties embedded within its grammar, which can be extracted from structured code-views like the Abstract Syntax Tree (AST), Data-Flow Graph (DFG), and Control-Flow Graph (CFG). These code-views can complement NLP techniques, further improving SE tasks. Unfortunately, there are no flexible frameworks to infuse arbitrary code-views into existing transformer-based models effectively. Therefore, in this work, we propose CodeSAM, a novel scalable framework to infuse multiple code-views into transformer-based models by creating self-attention masks. We use CodeSAM to fine-tune a small language model (SLM) like CodeBERT on the downstream SE tasks of semantic code search, code clone detection, and program classification. Experimental results show that by using this technique, we improve downstream performance when compared to SLMs like GraphCodeBERT and CodeBERT on all three tasks by utilizing individual code-views or a combination of code-views during fine-tuning. We believe that these results are indicative that techniques like CodeSAM can help create compact yet performant code SLMs that fit in resource constrained settings.\n\n{retrieved_text}\n\nGenerate exactly 54 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 54\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Compilers: principles, techniques, and tools\",\n        \"A survey of machine learning for big code and naturalness\",\n        \"A convolutional attention network for extreme summarization of source code\",\n        \"Structural language models of code\",\n        \"code2vec: Learning distributed representations of code\",\n        \"Exploration of convolutional neural network models for source code classification\",\n        \"Longformer: The long-document transformer\",\n        \"Static prediction of runtime errors by learning to execute programs with external resource descriptions\",\n        \"A library for representing python programs as graphs for machine learning\",\n        \"Learning to execute programs with instruction pointer attention graph neural networks\",\n        \"COMEX: A tool for generating customized source code representations\",\n        \"Path-based function embedding and its application to specification mining\",\n        \"Pre-training code representation with semantic flow graph for effective bug localization\",\n        \"Functional code clone detection with syntax and semantics fusion learning\",\n        \"Codebert: A pre-trained model for programming and natural languages\",\n        \"Code structure–guided transformer for source code summarization\",\n        \"Ethics in the mining of software repositories\",\n        \"Code search: A survey of techniques for finding code\",\n        \"Graphcodebert: Pre-training code representations with data flow\",\n        \"Codesearchnet challenge: Evaluating the state of semantic code search\",\n        \"Project codenet\",\n        \"Deckard: Scalable and accurate tree-based detection of code clones\",\n        \"A learned performance model for tensor processing units\",\n        \"Neural network based refactoring area identification in software system with object oriented metrics\",\n        \"Code prediction by feeding trees to transformers\",\n        \"Pathminer: a library for mining of path-based representations of code\",\n        \"Bigclonebench considered harmful for machine learning\",\n        \"Improving bug detection via context-based code representation learning and attention-based neural networks\",\n        \"A comparative study of deep learning-based vulnerability detection system\",\n        \"Roberta: A robustly optimized bert pretraining approach\",\n        \"Multi-view graph representation for programming language processing: An investigation into algorithm detection\",\n        \"Natural language models for predicting programming comments\",\n        \"Codegen: An open large language model for code with multi-turn program synthesis\",\n        \"Evilcoder: automated bug insertion\",\n        \"Evaluating how developers use general-purpose web-search for code retrieval\",\n        \"Automated vulnerability detection in source code using deep representation learning\",\n        \"Towards a big data curated benchmark of inter-project code clones\",\n        \"Bigclonebench\",\n        \"On the impact of multiple source code representations on software engineering tasks—an empirical study\",\n        \"Learning and fusing multi-view code representations for function vulnerability detection\",\n        \"Enhancing vulnerability detection via ast decomposition and neural sub-tree encoding\",\n        \"Soot - a java bytecode optimization framework\",\n        \"Learning semantic representations to verify hardware designs\",\n        \"Attention is all you need\",\n        \"Detecting code clones with graph neural networkand flow-augmented abstract syntax tree\",\n        \"Code completion by modeling flattened abstract syntax trees as graphs\",\n        \"Supervised deep features for software functional clone detection by exploiting lexical and syntactical information in source code\",\n        \"Deep learning code fragments for code clone detection\",\n        \"A systematic evaluation of large language models of code\",\n        \"Modeling and discovering vulnerabilities with code property graphs\",\n        \"A survey of automatic source code summarization\",\n        \"A novel neural source code representation based on abstract syntax tree\",\n        \"Deepsim: deep learning code functional similarity\",\n        \"Language-agnostic representation learning of source code from structure and context\"\n    ],\n    \"reasoning\": \"Selected these 54 references because they represent foundational work and recent advances in CodeSAM: Source Code Representation Learning by Infusing Self-Attention with Multi-Code-View Graphs, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}