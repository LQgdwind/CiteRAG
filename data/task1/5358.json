{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 45 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: What Do They Capture? - A Structural Analysis of Pre-Trained Language Models for Source Code\n\nPaper Abstract: Abstract. Recently, many pre-trained language models for source code have been proposed to model the context of code and serve as a basis for downstream code intelligence tasks such as code completion, code search, and code summarization. These models leverage masked pre-training and Transformer and have achieved promising results. However, currently there is still little progress regarding interpretability of existing pre-trained code models. It is not clear why these models work and what feature correlations they can capture. In this paper, we conduct a thorough structural analysis aiming to provide an interpretation of pre-trained language models for source code (e.g., CodeBERT, and GraphCodeBERT) from three distinctive perspectives: (1) attention analysis, (2) probing on the word embedding, and (3) syntax tree induction. Through comprehensive analysis, this paper reveals several insightful findings that may inspire future studies: (1) Attention aligns strongly with the syntax structure of code. (2) Pre-training language models of code can preserve the syntax structure of code in the intermediate representations of each Transformer layer. (3) The pre-trained models of code have the ability of inducing syntax trees of code. Theses findings suggest that it may be helpful to incorporate the syntax structure of code into the process of pre-training for better code representations.\n\n{retrieved_text}\n\nGenerate exactly 45 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 45\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"code2seq: Generating Sequences from Structured Representations of Code\",\n        \"code2vec: Learning distributed representations of code\",\n        \"Empirical study of transformers for source code\",\n        \"What Does BERT Look at? An Analysis of BERTâ€™s Attention\",\n        \"ELECTRA: Pre-training Text Encoders as Discriminators Rather Than Generators\",\n        \"What you can cram into a single vector: Probing sentence embeddings for linguistic properties\",\n        \"Nonparametric statistics: A step-by-step approach\",\n        \"BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding\",\n        \"Unified Language Model Pre-training for Natural Language Understanding and Generation\",\n        \"How Contextual are Contextualized Word Representations? Comparing the Geometry of BERT, ELMo, and GPT-2 Embeddings\",\n        \"CodeBERT: A Pre-Trained Model for Programming and Natural Languages\",\n        \"Deep code search\",\n        \"GraphCodeBERT: Pre-training Code Representations with Data Flow\",\n        \"A Structural Probe for Finding Syntax in Word Representations\",\n        \"exBERT: A Visual Analysis Tool to Explore Learned Representations in Transformer Models\",\n        \"Do Attention Heads in BERT Track Syntactic Dependencies?\",\n        \"CodeSearchNet Challenge: Evaluating the State of Semantic Code Search\",\n        \"Learning and Evaluating Contextual Embedding of Source Code\",\n        \"Assessing the Generalizability of Code2vec Token Embeddings\",\n        \"Are Pre-trained Language Models Aware of Phrases? Simple but Strong Baselines for Grammar Induction\",\n        \"Revealing the Dark Secrets of BERT\",\n        \"Asymptotics in statistics: some basic concepts\",\n        \"Linguistic Knowledge and Transferability of Contextual Representations\",\n        \"RoBERTa: A Robustly Optimized BERT Pretraining Approach\",\n        \"Foundations of statistical natural language processing\",\n        \"What do you mean, BERT? Assessing BERT as a Distributional Semantics Model\",\n        \"Efficient Estimation of Word Representations in Vector Space\",\n        \"Distributed Representations of Words and Phrases and their Compositionality\",\n        \"Deep Contextualized Word Representations\",\n        \"Code completion with statistical language models\",\n        \"A primer in bertology: What we know about how bert works\",\n        \"Neural Machine Translation of Rare Words with Subword Units\",\n        \"Straight to the Tree: Constituency Parsing with Neural Syntactic Distance\",\n        \"MASS: Masked Sequence to Sequence Pre-training for Language Generation\",\n        \"Flow2vec: Value-flow-based precise code embedding\",\n        \"ERNIE: Enhanced Representation through Knowledge Integration\",\n        \"Sequence to sequence learning with neural networks\",\n        \"BERT Rediscovers the Classical NLP Pipeline\",\n        \"Attention is all you need\",\n        \"Analyzing the Structure of Attention in a Transformer Language Model\",\n        \"BERTology Meets Biology: Interpreting Attention in Protein Language Models\",\n        \"NaturalCC: An Open-Source Toolkit for Code Intelligence\",\n        \"Multi-modal Attention Network Learning for Semantic Source Code Retrieval\",\n        \"Improving automatic source code summarization via deep reinforcement learning\",\n        \"Retrieval-based neural source code summarization\"\n    ],\n    \"reasoning\": \"Selected these 45 references because they represent foundational work and recent advances in What Do They Capture? - A Structural Analysis of Pre-Trained Language Models for Source Code, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}