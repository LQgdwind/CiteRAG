{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 49 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Program of Thoughts Prompting: Disentangling Computation from Reasoning for Numerical Reasoning Tasks\n\nPaper Abstract: Abstract Recently, there has been significant progress in teaching language models to perform step-by-step reasoning to solve complex numerical reasoning tasks. Chain-of-thoughts prompting (CoT) is the state-of-art method for many of these tasks. CoT uses language models to produce text describing reasoning, and computation, and finally the answer to a question. Here we propose ‘Program of Thoughts’ (PoT), which uses language models (mainly Codex) to generate text and programming language statements, and finally an answer. In PoT, the computation can be delegated to a program interpreter, which is used to execute the generated program, thus decoupling complex computation from reasoning and language understanding. We evaluate PoT on five math word problem datasets and three financial-QA datasets in both few-shot and zero-shot settings. We find that PoT has an average performance gain over CoT of around 12% across all datasets. By combining PoT with self-consistency decoding, we can achieve extremely strong performance on all the math datasets and financial datasets. All of our data and code will be released.\n\n{retrieved_text}\n\nGenerate exactly 49 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 49\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Mathqa: Towards interpretable math word problem solving with operation-based formalisms\",\n        \"Program synthesis with large language models\",\n        \"Language models are few-shot learners\",\n        \"Evaluating large language models trained on code\",\n        \"Large language models are few (1)-shot table reasoners\",\n        \"Finqa: A dataset of numerical reasoning over financial data\",\n        \"Convfinqa: Exploring the chain of numerical reasoning in conversational finance question answering\",\n        \"Binding language models in symbolic languages\",\n        \"Palm: Scaling language modeling with pathways\",\n        \"Training verifiers to solve math word problems\",\n        \"Compositional semantic parsing with large language models\",\n        \"Glam: Efficient scaling of language models with mixture-of-experts\",\n        \"Drop: A reading comprehension benchmark requiring discrete reasoning over paragraphs\",\n        \"Pal: Program-aided language models\",\n        \"Critic: Large language models can self-correct with tool-interactive critiquing\",\n        \"Measuring mathematical problem solving with the math dataset\",\n        \"Learning to solve arithmetic word problems with verb categorization\",\n        \"Scaling laws for neural language models\",\n        \"Large language models are zero-shot reasoners\",\n        \"Parsing algebraic word problems into equations\",\n        \"Answering numerical reasoning questions in table-text hybrid contents with graph-based encoder and tree-based decoder\",\n        \"Program induction by rationale generation: Learning to solve and explain algebraic word problems\",\n        \"Dynamic prompt learning via policy gradient for semi-structured mathematical reasoning\",\n        \"A diverse corpus for evaluating and developing english math word problem solvers\",\n        \"Rethinking the role of demonstrations: What makes in-context learning work?\",\n        \"Lila: A unified benchmark for mathematical reasoning\",\n        \"Codegen: An open large language model for code with multi-turn program synthesis\",\n        \"Show your work: Scratchpads for intermediate computation with language models\",\n        \"Gpt-4 technical report\",\n        \"Art: Automatic multi-step reasoning and tool-use for large language models\",\n        \"Are NLP models really able to solve simple math word problems?\",\n        \"Scaling language models: Methods, analysis & insights from training gopher\",\n        \"Solving general arithmetic word problems\",\n        \"Mapping to declarative knowledge for word problem solving\",\n        \"Analysing mathematical reasoning abilities of neural models\",\n        \"Toolformer: Language models can teach themselves to use tools\",\n        \"Using deepspeed and megatron to train megatron-turing nlg 530b, a large-scale generative language model\",\n        \"Challenging big-bench tasks and whether chain-of-thought can solve them\",\n        \"Lamda: Language models for dialog applications\",\n        \"A numerical reasoning question answering system with fine-grained retriever and the ensemble of multiple generators for finqa\",\n        \"Plan-and-solve prompting: Improving zero-shot chain-of-thought reasoning by large language models\",\n        \"Self-consistency improves chain of thought reasoning in language models\",\n        \"Codet5+: Open code large language models for code understanding and generation\",\n        \"Chain of thought prompting elicits reasoning in large language models\",\n        \"An explanation of in-context learning as implicit bayesian inference\",\n        \"Decomposition enhances reasoning via self-evaluation guided decoding\",\n        \"React: Synergizing reasoning and acting in language models\",\n        \"Least-to-most prompting enables complex reasoning in large language models\",\n        \"Tat-qa: A question answering benchmark on a hybrid of tabular and textual content in finance\"\n    ],\n    \"reasoning\": \"Selected these 49 references because they represent foundational work and recent advances in Program of Thoughts Prompting: Disentangling Computation from Reasoning for Numerical Reasoning Tasks, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}