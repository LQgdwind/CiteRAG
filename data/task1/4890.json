{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 47 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Revisiting local branching with a machine learning lens This work is an extension of Liu_Fischetti_Lodi_2022\n\nPaper Abstract: Abstract Finding high-quality solutions to mixed-integer linear programming problems (MILPs) is of great importance for many practical applications. In this respect, the refinement heuristic local branching (LB) has been proposed to produce improving solutions and has been highly influential for the development of local search methods in MILP. The algorithm iteratively explores a sequence of solution neighborhoods defined by the so-called local branching constraint, namely, a linear inequality limiting the distance from a reference solution. For a LB algorithm, the choice of the neighborhood size is critical to performance. In this work, we study the relation between the size of the search neighborhood and the behavior of the underlying LB algorithm, and we devise a leaning based framework for predicting the best size for the specific instance to be solved. Furthermore, we have also investigated the relation between the time limit for exploring the LB neighborhood and the actual performance of LB scheme, and devised a strategy for adapting the time limit. We computationally show that the neighborhood size and time limit can indeed be learned, leading to improved performances and that the overall algorithm generalizes well both with respect to the instance size and, remarkably, across instances.\n\n{retrieved_text}\n\nGenerate exactly 47 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 47\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Derivative-Free and Blackbox Optimization\",\n        \"Set covering algorithms using cutting planes, heuristics, and subgradient optimization: a computational study\",\n        \"Learning to branch\",\n        \"Neural combinatorial optimization with reinforcement learning\",\n        \"Machine learning for combinatorial optimization: a methodological tour dâ€™horizon\",\n        \"Decision diagrams for optimization, vol. 1\",\n        \"A feasibility pump heuristic for general mixed-integer problems\",\n        \"Primal heuristics for mixed integer programs\",\n        \"Measuring the impact of primal heuristics\",\n        \"Rens\",\n        \"Learning to schedule heuristics in branch-and-bound\",\n        \"The generalized independent set problem: Polyhedral analysis and solution approaches\",\n        \"Exploring relaxation induced neighborhoods to improve mip solutions\",\n        \"Accelerating primal solution findings for mixed integer programs based on solution prediction\",\n        \"Fast graph representation learning with pytorch geometric\",\n        \"The feasibility pump\",\n        \"Local branching\",\n        \"Heuristics in mixed integer programming\",\n        \"Proximity search for 0-1 mixed-integer convex programming\",\n        \"The SCIP Optimization Suite 7.0\",\n        \"Exact combinatorial optimization with graph convolutional neural networks\",\n        \"Handbook of metaheuristics, vol. 2\",\n        \"Miplib 2017: data-driven compilation of the 6th mixed-integer programming library\",\n        \"A new model for learning in graph domains\",\n        \"Representation learning on graphs: Methods and applications\",\n        \"Learning to search in branch and bound algorithms\",\n        \"Adaptive large neighborhood search for mixed integer programming\",\n        \"Forest harvesting and minimum cuts: a new approach to handling spatial constraints\",\n        \"Neural large neighborhood search for the capacitated vehicle routing problem\",\n        \"Dynamic programming and markov processes\",\n        \"Learning combinatorial optimization algorithms over graphs\",\n        \"Learning to branch in mixed integer programming\",\n        \"Learning to run heuristics in tree search\",\n        \"Attention, learn to solve routing problems!\",\n        \"An automatic method for solving discrete programming problems\",\n        \"Towards a universal test suite for combinatorial auction algorithms\",\n        \"Learning to search in local branching\",\n        \"Learning chordal extensions\",\n        \"PySCIPOpt: Mathematical programming in python with the SCIP optimization suite\",\n        \"Solving mixed integer programs using neural networks\",\n        \"Reinforcement learning for solving the vehicle routing problem\",\n        \"Pytorch: An imperative style, high-performance deep learning library\",\n        \"A general large neighborhood search framework for solving integer linear programs\",\n        \"Learning a large neighborhood search algorithm for mixed integer programs\",\n        \"Introduction to reinforcement learning, vol. 135\",\n        \"Policy gradient methods for reinforcement learning with function approximation\",\n        \"Reinforcement learning for integer programming: Learning to cut\"\n    ],\n    \"reasoning\": \"Selected these 47 references because they represent foundational work and recent advances in Revisiting local branching with a machine learning lens This work is an extension of Liu_Fischetti_Lodi_2022, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}