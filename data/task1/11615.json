{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 55 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Cage: Hardware-Accelerated Safe WebAssembly\n\nPaper Abstract: Abstract. WebAssembly (WASM) is an immensely versatile and increasingly popular compilation target. It executes applications written in several languages (e.g., C/C++) with near-native performance in various domains (e.g., mobile, edge, cloud). Despite WASM’s sandboxing feature, which isolates applications from other instances and the host platform, WASM does not inherently provide any memory safety guarantees for applications written in low-level, unsafe languages. To this end, we propose Cage, a hardware-accelerated toolchain for WASM that supports unmodified applications compiled to WASM and utilizes diverse Arm hardware features aiming to enrich the memory safety properties of WASM. Precisely, Cage leverages Arm’s Memory Tagging Extension (MTE) to (i) provide spatial and temporal memory safety for heap and stack allocations and (ii) improve the performance of WASM’s sandboxing mechanism. Cage further employs Arm’s Pointer Authentication (PAC) to prevent leaked pointers from being reused by other WASM instances, thus enhancing WASM’s security properties. We implement our system based on 64-bit WASM. We provide a WASM compiler and runtime with support for Arm’s MTE and PAC. On top of that, Cage’s LLVM-based compiler toolchain transforms unmodified applications to provide spatial and temporal memory safety for stack and heap allocations and prevent function pointer reuse. Our evaluation on real hardware shows that Cage incurs minimal runtime (<5.8%absentpercent5.8<5.8\\,\\%) and memory (<3.7%absentpercent3.7<3.7\\,\\%) overheads and can improve the performance of WASM’s sandboxing mechanism, achieving a speedup of over 5.1%percent5.15.1\\,\\%, while offering efficient memory safety guarantees.\n\n{retrieved_text}\n\nGenerate exactly 55 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 55\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Docker docs - Wasm workloads (Beta)\",\n        \"Memory Safety\",\n        \"CVE-2023-26489\",\n        \"WebAssembly - Security\",\n        \"WebAssembly Use Cases\",\n        \"Control-flow integrity principles, implementations, and applications\",\n        \"Baggy Bounds Checking: An Efficient and Backwards-Compatible Defense against Out-of-Bounds Errors.\",\n        \"Wasm memcheck\",\n        \"Wasmtime\",\n        \"Arm Architecture Reference Manual for A-profile architecture\",\n        \"ArmV8.5-A Memory Tagging Extension\",\n        \"SafePM: A sanitizer for persistent memory\",\n        \"Introduction to Intel(R) Memory Protection Extensions\",\n        \"The Performance Cost of Shadow Stacks and Stack Canaries\",\n        \"SAFECode: enforcing alias analysis for weakly typed languages\",\n        \"Position paper: Progressive memory safety for webassembly\",\n        \"Heap bounds protection with low fat pointers\",\n        \"Stack Bounds Protection with Low Fat Pointers\",\n        \"Memory64: 64-bit Memory Indexing for WebAssembly\",\n        \"WebAssembly System Interface - WASI\",\n        \"Bringing the web up to speed with WebAssembly\",\n        \"Light-Weight Bounds Checking\",\n        \"ISO/IEC 9899:2018 Programming languages – C\",\n        \"ISO/IEC 14882:2020 Programming languages – C++\",\n        \"Cyclone: a safe dialect of C.\",\n        \"Spectre attacks: Exploiting speculative execution\",\n        \"The redshirt operating system\",\n        \"Delta pointers: buffer overflow checks without the checks\",\n        \"SGXBOUNDS: Memory Safety for Shielded Execution\",\n        \"Code-pointer integrity\",\n        \"Kwast: Rust operating system running WebAssembly as userspace in ring 0\",\n        \"LLVM: A compilation framework for lifelong program analysis & transformation\",\n        \"Everything old is new again: Binary security of WebAssembly\",\n        \"{{{PAC}}} it up: Towards pointer integrity using {{{ARM}}} pointer authentication\",\n        \"Mswasm: Soundly enforcing memory-safe execution of unsafe code\",\n        \"New Kid on the Web: A Study on the Prevalence of WebAssembly in the Wild\",\n        \"SoftBound: Highly compatible and complete spatial memory safety for C\",\n        \"CCured: Type-safe retrofitting of legacy code\",\n        \"Valgrind: a framework for heavyweight dynamic binary instrumentation\",\n        \"RichWasm: Bringing Safe, Fine-Grained, Shared-Memory Interoperability Down to WebAssembly\",\n        \"Types and programming languages\",\n        \"A structural approach to operational semantics\",\n        \"Polybench: The polyhedral benchmark suite\",\n        \"Pointer Authentication on ArmV8.3: Design and Analysis of the New Software Security Instructions\",\n        \"AddressSanitizer: A fast address sanity checker\",\n        \"GWP-ASan: Sampling-Based Detection of Memory-Safety Bugs in Production\",\n        \"Memory Tagging and how it improves C/C++ memory safety\",\n        \"Sok: Eternal war in memory\",\n        \"Leaps and bounds: Analyzing WebAssembly’s performance with a focus on bounds checking\",\n        \"A proactive approach to more secure code\",\n        \"Queue the Hardening Enhancements\",\n        \"Efficient software-based fault isolation\",\n        \"CHERI C/C++ Programming Guide\",\n        \"Wasmachine: Bring IoT up to Speed with A WebAssembly OS\",\n        \"The CHERI capability model: Revisiting RISC in an age of risk\"\n    ],\n    \"reasoning\": \"Selected these 55 references because they represent foundational work and recent advances in Cage: Hardware-Accelerated Safe WebAssembly, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}