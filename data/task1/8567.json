{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 47 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Harnessing Deep Learning and HPC Kernels via High-Level Loop and Tensor Abstractions on CPU Architectures\n\nPaper Abstract: Abstract. During the past decade, Deep Learning (DL) algorithms, programming systems and hardware have converged with the High Performance Computing (HPC) counterparts. Nevertheless, the programming methodology of DL and HPC systems is stagnant, relying on highly-optimized, yet platform-specific and inflexible vendor-optimized libraries. Such libraries provide close-to-peak performance on specific platforms, kernels and shapes thereof that vendors have dedicated optimizations efforts, while they underperform in the remaining use-cases, yielding non-portable codes with performance glass-jaws. This work introduces a framework to develop efficient, portable DL and HPC kernels for modern CPU architectures. We decompose the kernel development in two steps: 1) Expressing the computational core using Tensor Processing Primitives (TPPs): a compact, versatile set of 2D-tensor operators, 2) Expressing the logical loops around TPPs in a high-level, declarative fashion whereas the exact instantiation (ordering, tiling, parallelization) is determined via simple knobs. We demonstrate the efficacy of our approach using standalone kernels and end-to-end workloads that outperform state-of-the-art implementations on diverse CPU platforms.\n\n{retrieved_text}\n\nGenerate exactly 47 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 47\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Image classification with deep convolutional neural networks\",\n        \"Going deeper with convolutions\",\n        \"Very deep convolutional networks for large-scale image recognition\",\n        \"Feature learning in deep neural networks-studies on speech recognition tasks\",\n        \"Google’s neural machine translation system: Bridging the gap between human and machine translation\",\n        \"Wide & deep learning for recommender systems\",\n        \"Transformers: State-of-the-art natural language processing\",\n        \"Deep learning in drug discovery\",\n        \"Deep learning for computational chemistry\",\n        \"A survey of deep learning for scientific discovery\",\n        \"High-performance tensor computations in scientific computing and data science\",\n        \"Tensor processing primitives: A programming abstraction for efficiency and portability in deep learning workloads\",\n        \"Machine learning systems are stuck in a rut\",\n        \"Stripe: Tensor compilation via the nested polyhedral model\",\n        \"{{{TVM}}}: An automated end-to-end optimizing compiler for deep learning\",\n        \"Tensor comprehensions: Framework-agnostic high-performance machine learning abstractions\",\n        \"Ansor: Generating high-performance tensor programs for deep learning\",\n        \"Snowflake: a lightweight portable stencil dsl\",\n        \"Halide: a language and compiler for optimizing parallelism, locality, and recomputation in image processing pipelines\",\n        \"Anatomy of high-performance deep learning convolutions on SIMD architectures\",\n        \"Harnessing deep learning via a single building block\",\n        \"Deep residual learning for image recognition\",\n        \"Bert: Pre-training of deep bidirectional transformers for language understanding\",\n        \"Parallel programming in OpenMP\",\n        \"Intel® threading building blocks\",\n        \"Pthreads programming: A POSIX standard for better multiprocessing\",\n        \"Anatomy of high-performance matrix multiplication\",\n        \"Opentuner: An extensible framework for program autotuning\",\n        \"Polydl: Polyhedral optimizations for creation of high-performance dl primitives\",\n        \"Language models are few-shot learners\",\n        \"Deep learning recommendation model for personalization and recommendation systems\",\n        \"LIBXSMM: Accelerating small matrix multiplications by runtime code generation\",\n        \"The arm scalable vector extension\",\n        \"Parallel efficient sparse matrix-matrix multiplication on multicore platforms\",\n        \"Sparsity in deep learning: Pruning and growth for efficient inference and training in neural networks\",\n        \"Block pruning for faster transformers\",\n        \"Optimizing deep learning rnn topologies on intel architecture\",\n        \"Deepcpu: Serving rnn-based deep learning models 10x faster\",\n        \"Intel oneDNN\",\n        \"ARM\",\n        \"Hugging Faces\",\n        \"Intel Extension for PyTorch\",\n        \"ML Commons\",\n        \"IREE\",\n        \"A survey on domain-specific languages for machine learning in big data\",\n        \"CUTLASS\",\n        \"Composable Kernel\"\n    ],\n    \"reasoning\": \"Selected these 47 references because they represent foundational work and recent advances in Harnessing Deep Learning and HPC Kernels via High-Level Loop and Tensor Abstractions on CPU Architectures, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}