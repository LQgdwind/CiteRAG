{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 52 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: From {Solution} Synthesis to {Student Attempt} Synthesis for Block-Based Visual Programming TasksThis article is a longer version of the paper from the EDM 2022 conference. Authors are listed alphabetically.\n\nPaper Abstract: Abstract Block-based visual programming environments are increasingly used to introduce computing concepts to beginners. Given that programming tasks are open-ended and conceptual, novice students often struggle when learning in these environments. AI-driven programming tutors hold great promise in automatically assisting struggling students, and need several components to realize this potential. We investigate the crucial component of student modeling, in particular, the ability to automatically infer students‚Äô misconceptions for predicting (synthesizing) their behavior. We introduce a novel benchmark, StudentSyn, centered around the following challenge: For a given student, synthesize the student‚Äôs attempt on a new target task after observing the student‚Äôs attempt on a fixed reference task. This challenge is akin to that of program synthesis; however, instead of synthesizing a {solution} (i.e., program an expert would write), the goal here is to synthesize a {student attempt} (i.e., program that a given student would write). We first show that human experts (TutorSS) can achieve high performance on the benchmark, whereas simple baselines perform poorly. Then, we develop two neuro/symbolic techniques (NeurSS and SymSS) in a quest to close this gap with TutorSS.\n\n{retrieved_text}\n\nGenerate exactly 52 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 52\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Synthesizing Tasks for Block-based Programming\",\n        \"Concept-Aware Deep Knowledge Tracing and Exercise Recommendation in an Online Learning System\",\n        \"Leveraging Grammar and Reinforcement Learning for Neural Program Synthesis\",\n        \"Execution-Guided Neural Program Synthesis\",\n        \"On Certain Formal Properties of Grammars\",\n        \"The œáùúí\\\\chi2 Test of Goodness of Fit\",\n        \"Early Prediction of Conceptual Understanding in Interactive Simulations\",\n        \"Code.org ‚Äì Learn Computer Science\",\n        \"Hour of Code ‚Äì Classic Maze Challenge\",\n        \"Hour of Code Initiative\",\n        \"Knowledge Tracing: Modeling the Acquisition of Procedural Knowledge\",\n        \"Modeling Student Knowledge: Cognitive Tutors in High School and College\",\n        \"Neural Program Meta-Induction\",\n        \"Robustfill: Neural Program Learning under Noisy I/O\",\n        \"Zero-shot Learning of Hint Policy via Reinforcement Learning and Program Synthesis\",\n        \"Write, Execute, Assess: Program Synthesis with a REPL\",\n        \"Dreamcoder: Growing Generalizable, Interpretable Knowledge with Wake-Sleep Bayesian Program Learning\",\n        \"Cluster-Based Analysis of Novice Coding Misconceptions in Block-Based Programming\",\n        \"Adaptive Scaffolding in Block-based Programming via Synthesizing New Tasks as Pop Quizzes\",\n        \"Program Synthesis\",\n        \"Quizzing Policy Using Reinforcement Learning for Inferring the Student Knowledge State\",\n        \"Teaching Multiple Concepts to a Forgetful Learner\",\n        \"Modeling and Analyzing Inquiry Strategies in Open-Ended Learning Environments\",\n        \"Human-level Concept Learning through Probabilistic Program Induction\",\n        \"Competition-Level Code Generation with AlphaCode\",\n        \"Generative Grading: Near Human-level Accuracy for Automated Feedback on Richly Structured Problems\",\n        \"Introduction to Languages and the Theory of Computation, volume 4\",\n        \"Aligning Superhuman AI with Human Behavior: Chess as a Model System\",\n        \"Detecting Individual Decision-Making Style: Exploring Behavioral Stylometry in Chess\",\n        \"Learning Compositional Rules via Neural Program Synthesis\",\n        \"The Continuous Hint Factory - Providing Hints in Continuous and Infinite Spaces\",\n        \"Neuro-Symbolic Program Synthesis\",\n        \"Deep Knowledge Tracing\",\n        \"Learning Program Embeddings to Propagate Feedback on Student Code\",\n        \"Autonomously Generating Hints by Inferring Problem Solving Policies\",\n        \"Methods for Language Learning Assessment at Scale: Duolingo Case Study\",\n        \"Position paper: Block-based Programming Should Offer Intelligent Support for Learners\",\n        \"iSnap: Towards Intelligent Tutoring in Novice Programming Environments\",\n        \"Evaluation of a Data-driven Feedback Algorithm for Open-ended Programming\",\n        \"Using Inverse Planning for Personalized Feedback\",\n        \"Scratch: Programming for All\",\n        \"A Trainable Spaced Repetition Model for Language Learning\",\n        \"Student Strategy Prediction using a Neuro-Symbolic Approach\",\n        \"Toward Semi-Automatic Misconception Discovery Using Code Embeddings\",\n        \"Automated Feedback Generation for Introductory Programming Assignments\",\n        \"Reinforcement Learning for Education: Opportunities and Challenges\",\n        \"Learning to Synthesize Programs as Interpretable and Generalizable policies\",\n        \"Comparing Individual Means in the Analysis of Variance\",\n        \"Learning to Represent Student Knowledge on Programming Exercises Using Deep Learning\",\n        \"Comparing Block-based and Text-based Programming in High School Computer Science Classrooms\",\n        \"Zero Shot Learning for Code Education: Rubric Sampling with Deep Learning Inference\",\n        \"A Feasibility Study of Using Automated Program Repair for Introductory Programming Assignments\"\n    ],\n    \"reasoning\": \"Selected these 52 references because they represent foundational work and recent advances in From {Solution} Synthesis to {Student Attempt} Synthesis for Block-Based Visual Programming TasksThis article is a longer version of the paper from the EDM 2022 conference. Authors are listed alphabetically., providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}