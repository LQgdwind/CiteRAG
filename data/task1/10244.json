{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 49 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Evolving Code with A Large Language Model\n\nPaper Abstract: Abstract Algorithms that use Large Language Models (LLMs) to evolve code arrived on the Genetic Programming (GP) scene very recently. We present LLM_GP, a formalized LLM-based evolutionary algorithm designed to evolve code. Like GP, it uses evolutionary operators, but its designs and implementations of those operators radically differ from GP’s because they enlist an LLM, using prompting and the LLM’s pre-trained pattern matching and sequence completion capability. We also present a demonstration-level variant of LLM_GP and share its code. By addressing algorithms that range from the formal to hands-on, we cover design and LLM-usage considerations as well as the scientific challenges that arise when using an LLM for genetic programming.\n\n{retrieved_text}\n\nGenerate exactly 49 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 49\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Attention is all you need\",\n        \"Policy shaping: Integrating human feedback with reinforcement learning\",\n        \"The openelm library: Leveraging progress in language models for novel evolutionary algorithms\",\n        \"Evoprompting: Language models for code-level neural architecture search\",\n        \"Fully autonomous programming with large language models\",\n        \"Open issues in genetic programming\",\n        \"Automatic programming: The open issue?\",\n        \"Pre-train, prompt, and predict: A systematic survey of prompting methods in natural language processing\",\n        \"Language models are unsupervised multitask learners\",\n        \"Language Models are Few-Shot Learners\",\n        \"GPT-4 Technical Report\",\n        \"Formal algorithms for transformers\",\n        \"Survey of hallucination in natural language generation\",\n        \"Energy and policy considerations for modern deep learning research\",\n        \"Carbon emissions and large neural network training\",\n        \"Sustainable ai: Environmental implications, challenges and opportunities\",\n        \"Aligning artificial intelligence with climate change mitigation\",\n        \"Teaching algorithmic reasoning via in-context learning\",\n        \"Few-shot learning with retrieval augmented language models\",\n        \"Chain of thought prompting elicits reasoning in large language models\",\n        \"Self-Consistency Improves Chain of Thought Reasoning in Language Models\",\n        \"Synthetic prompting: Generating chain-of-thought demonstrations for large language models\",\n        \"Tree of thoughts: Deliberate problem solving with large language models\",\n        \"Saving Face: Investigating the Ethical Concerns of Facial Recognition Auditing\",\n        \"Generative ai has an intellectual property problem. april 07, 2023.\",\n        \"How is chatgpt’s behavior changing over time?\",\n        \"Improving factuality and reasoning in language models through multiagent debate\",\n        \"The reversal curse: Llms trained on\\\" a is b\\\" fail to learn\\\" b is a\\\"\",\n        \"The ConceptARC Benchmark: Evaluating Understanding and Generalization in the ARC Domain\",\n        \"Fluid transformers and creative analogies: Exploring large language models’ capacity for augmenting cross-domain analogical creativity\",\n        \"On Evaluating Understanding and Generalization in the ARC Domain.\",\n        \"Connectionists: Chomsky’s apple.\",\n        \"Code llama: Open foundation models for code.\",\n        \"Preparatory Steps of Genetic Programming.\",\n        \"Evolutionary Verbalizer Search for Prompt-based Few Shot Text Classification\",\n        \"Self-Taught Optimizer (STOP): Recursively Self-Improving Code Generation\",\n        \"Evolution through large models.\",\n        \"Language Model Crossover: Variation through Few-Shot Prompting\",\n        \"Eureka: Human-level reward design via coding large language models.\",\n        \"Llmatic: Neural architecture search via large language models and quality-diversity optimization.\",\n        \"Connecting Large Language Models with Evolutionary Algorithms Yields Powerful Prompt Optimizers\",\n        \"Promptbreeder: Self-Referential Self-Improvement Via Prompt Evolution\",\n        \"Wizardlm: Empowering large language models to follow complex instructions.\",\n        \"Chatgpt and other large language models as evolutionary engines for online interactive collaborative game design.\",\n        \"MarioGPT: Open-Ended Text2Level Generation through Large Language Models\",\n        \"Applying genetic programming to psb2: the next generation program synthesis benchmark suite.\",\n        \"ReAct: Synergizing Reasoning and Acting in Language Models\",\n        \"Do prompt-based models really understand the meaning of their prompts?\",\n        \"Evaluating statistical language models as pragmatic reasoners\"\n    ],\n    \"reasoning\": \"Selected these 49 references because they represent foundational work and recent advances in Evolving Code with A Large Language Model, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}