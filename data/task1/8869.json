{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 45 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Can Transformers Learn to Solve Problems Recursively?\n\nPaper Abstract: Abstract Neural networks have in recent years shown promise for helping software engineers write programs and even formally verify them. While semantic information plays a crucial part in these processes, it remains unclear to what degree popular neural architectures like transformers are capable of modeling that information. This paper examines the behavior of neural networks learning algorithms relevant to programs and formal verification proofs through the lens of mechanistic interpretability, focusing in particular on structural recursion. Structural recursion is at the heart of tasks on which symbolic tools currently outperform neural models, like inferring semantic relations between datatypes and emulating program behavior. We evaluate the ability of transformer models to learn to emulate the behavior of structurally recursive functions from input-output examples. Our evaluation includes empirical and conceptual analyses of the limitations and capabilities of transformer models in approximating these functions, as well as reconstructions of the “shortcut” algorithms the model learns. By reconstructing these algorithms, we are able to correctly predict 91% of failure cases for one of the approximated functions. Our work provides a new foundation for understanding the behavior of neural networks that fail to solve the very tasks they are trained for.\n\n{retrieved_text}\n\nGenerate exactly 45 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 45\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Proofster: Automated Formal Verification\",\n        \"SantaCoder: don’t reach for the stars!\",\n        \"Neurosymbolic programming\",\n        \"Evaluating Large Language Models Trained on Code\",\n        \"PaLM: Scaling Language Modeling with Pathways\",\n        \"A Toy Model of Universality: Reverse Engineering How Networks Learn Group Operations\",\n        \"Towards Automated Circuit Discovery for Mechanistic Interpretability\",\n        \"Inductive logic programming at 30\",\n        \"Universal Transformers\",\n        \"Neural Networks and the Chomsky Hierarchy\",\n        \"A mathematical framework for transformer circuits\",\n        \"Diversity-Driven Automated Formal Verification\",\n        \"Baldur: Whole-Proof Generation and Repair with Large Language Models\",\n        \"Transformer Feed-Forward Layers Are Key-Value Memories\",\n        \"Program Synthesis\",\n        \"DeepFix: Fixing Common C Language Errors by Deep Learning\",\n        \"Evolving Algebras 1993: Lipari Guide\",\n        \"Theoretical Limitations of Self-Attention in Neural Sequence Models\",\n        \"Inductive Synthesis of Structurally Recursive Functional Programs from Non-Recursive Expressions\",\n        \"StarCoder: may the source be with you!\",\n        \"Competition-Level Code Generation with AlphaCode\",\n        \"Transformers Learn Shortcuts to Automata\",\n        \"Changing Data Structures in Type Theory:A Study of Natural Numbers\",\n        \"Locating and Editing Factual Associations in GPT\",\n        \"Transformers Can Be Expressed In First-Order Logic with Majority\",\n        \"Synthesizing Symmetric Lenses\",\n        \"Progress measures for grokking via mechanistic interpretability\",\n        \"Show your work: Scratchpads for intermediate computation with language models\",\n        \"Type-and-Example-Directed Program Synthesis\",\n        \"Attention is Turing-Complete\",\n        \"On the Turing Completeness of Modern Neural Network Architectures\",\n        \"Formal Algorithms for Transformers\",\n        \"Proof Repair\",\n        \"Proof Repair across Type Equivalences\",\n        \"ELIXIR: Effective object oriented program repair\",\n        \"Generating Correctness Proofs with Neural Networks\",\n        \"Passport: Improving Automated Formal Verification Using Identifiers\",\n        \"Attention is All you Need\",\n        \"Interpretability in the Wild: a Circuit for Indirect Object Identification in GPT-2 small\",\n        \"Chain of thought prompting elicits reasoning in large language models\",\n        \"Automated program repair in the era of large pre-trained language models\",\n        \"Learning to prove theorems via interacting with proof assistants\",\n        \"Self-Attention Networks Can Process Bounded Hierarchical Languages\",\n        \"Pointer Value Retrieval: A new benchmark for understanding the limits of neural network generalization\",\n        \"Unveiling Transformers with LEGO: a synthetic reasoning task\"\n    ],\n    \"reasoning\": \"Selected these 45 references because they represent foundational work and recent advances in Can Transformers Learn to Solve Problems Recursively?, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}