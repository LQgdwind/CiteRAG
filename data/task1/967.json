{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 51 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: CoT: Decentralized Elastic Caches for Cloud Environments\n\nPaper Abstract: Abstract Distributed caches are widely deployed to serve social networks and web applications at billion-user scales. However, typical workload skew results in load-imbalance among caching servers. This load-imbalance decreases the request throughput and increases the request latency reducing the benefit of caching. Recent work has theoretically shown that a small perfect cache at the front-end has a big positive effect on distributed caches load-balance. However, determining the cache size and the replacement policy that achieve near perfect caching at front-end servers is challenging especially for dynamically changing and evolving workloads. This paper presents Cache-on-Track (CoT), a decentralized, elastic, and predictive caching framework for cloud environments. CoT is the answer to the following question: What is the necessary front-end cache size that achieves load-balancing at the caching server side? CoT proposes a new cache replacement policy specifically tailored for small front-end caches that serve skewed workloads. Front-end servers use a heavy hitter tracking algorithm to continuously track the top-k hot keys. CoT dynamically caches the hottest C keys out of the tracked keys. In addition, each front-end server independently monitors its effect on caching servers load-imbalance and adjusts its tracker and cache sizes accordingly. Our experiments show that CoT’s replacement policy consistently outperforms the hit-rates of LRU, LFU, and ARC for the same cache size on different skewed workloads. Also, CoT slightly outperforms the hit-rate of LRU-2 when both policies are configured with the same tracking (history) size. CoT achieves server size load-balance with 50% to 93.75% less front-end cache in comparison to other replacement policies. Finally, our experiments show that CoT’s resizing algorithm successfully auto-configures the tracker and cache sizes to achieve back-end load-balance in the presence of workload distribution changes.\n\n{retrieved_text}\n\nGenerate exactly 51 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 51\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Amazon elasticache in-memory data store and cache\",\n        \"Azure redis cache\",\n        \"Facebook company info\",\n        \"Memcached. a distributed memory object caching system\",\n        \"Redis\",\n        \"A simple, asynchronous, single-threaded memcached client written in java\",\n        \"Twitter: number of active users 2010-2018\",\n        \"Centrifuge: Integrated lease management and partitioning for cloud services\",\n        \"Slicer: Auto-sharding for datacenter applications\",\n        \"Workload analysis of a large-scale key-value store\",\n        \"LHD: Improving cache hit rate by maximizing hit density\",\n        \"Web caching and zipf-like distributions: Evidence and implications\",\n        \"Tao: Facebook’s distributed data store for the social graph\",\n        \"Bigtable: A distributed storage system for structured data\",\n        \"An in-memory object caching framework with adaptive load balancing\",\n        \"Dynacache: Dynamic cloud caching\",\n        \"Cliffhanger: Scaling performance cliffs in web memory caches\",\n        \"Maintaining time-decaying stream aggregates\",\n        \"Benchmarking cloud serving systems with ycsb\",\n        \"Exponentially decayed aggregates on data streams\",\n        \"Forward decay: A practical time decay model for streaming systems\",\n        \"Caching with dual costs\",\n        \"Memc3: Compact and concurrent memcache with dumber caching and smarter hashing\",\n        \"Small cache, big effect: Provable load balancing for randomly partitioned cluster services\",\n        \"Scale-out ccNUMA: exploiting skew with strongly consistent caching\",\n        \"Rejig: a scalable online algorithm for cache server configuration changes\",\n        \"Design, implementation, and evaluation of write-back policy with cache augmented data stores\",\n        \"The stretched exponential distribution of internet media access patterns\",\n        \"Understanding and mitigating the impact of load imbalance in the memory caching tier\",\n        \"Characterizing load imbalance in real-world networked caches\",\n        \"Adaptive performance-aware distributed memory caching\",\n        \"Lirs: an efficient low inter-reference recency set replacement policy to improve buffer cache performance\",\n        \"Netcache: Balancing key-value stores with fast in-network caching\",\n        \"X3: A low overhead high performance buffer management replacement algorithm\",\n        \"Consistent hashing and random trees: Distributed caching protocols for relieving hot spots on the world wide web\",\n        \"Lrfu: A spectrum of policies that subsumes the least recently used and least frequently used policies\",\n        \"Mica: a holistic approach to fast in-memory key-value storage\",\n        \"Caching data stores: High performance at low cost\",\n        \"Cost/performance in modern data stores: how data caching systems succeed\",\n        \"Data caching systems win the cost/performance game\",\n        \"The snow theorem and latency-optimal read-only transactions\",\n        \"Arc: A self-tuning, low overhead replacement cache\",\n        \"Efficient computation of frequent and top-k elements in data streams\",\n        \"Scaling memcache at facebook\",\n        \"The lru-k page replacement algorithm for database disk buffering\",\n        \"An optimality proof of the lru-k page replacement algorithm\",\n        \"Cuckoo hashing\",\n        \"Autoscaling tiered cloud storage in anna\",\n        \"Caching at the web scale\",\n        \"In-memory big data management and processing: A survey\",\n        \"The multi-queue replacement algorithm for second level buffer caches\"\n    ],\n    \"reasoning\": \"Selected these 51 references because they represent foundational work and recent advances in CoT: Decentralized Elastic Caches for Cloud Environments, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}