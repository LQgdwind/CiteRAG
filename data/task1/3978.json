{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 49 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: HPTMT: Operator-Based Architecture for Scalable High-Performance Data-Intensive Frameworks\n\nPaper Abstract: Abstract Data-intensive applications impact many domains, and their steadily increasing size and complexity demands high-performance, highly usable environments. We integrate a set of ideas developed in various data science and data engineering frameworks. They employ a set of operators on specific data abstractions that include vectors, matrices, tensors, graphs, and tables. Our key concepts are inspired from systems like MPI, HPF (High-Performance Fortran), NumPy, Pandas, Spark, Modin, PyTorch, TensorFlow, RAPIDS(NVIDIA), and OneAPI (Intel). Further, it is crucial to support different languages in everyday use in the Big Data arena, including Python, R, C++, and Java. We note the importance of Apache Arrow and Parquet for enabling language agnostic high performance and interoperability. In this paper, we propose High-Performance Tensors, Matrices and Tables (HPTMT), an operator-based architecture for data-intensive applications, and identify the fundamental principles needed for performance and usability success. We illustrate these principles by a discussion of examples using our software environments, Cylon and Twister2 that embody HPTMT.\n\n{retrieved_text}\n\nGenerate exactly 49 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 49\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Spark: Cluster computing with working sets\",\n        \"Pytorch: An imperative style, high-performance deep learning library\",\n        \"High performance data engineering everywhere\",\n        \"Components and rationale of a big data toolkit spanning hpc, grid, edge and cloud computing\",\n        \"Sourcebook of parallel computing\",\n        \"Hpjava: data parallel extensions to java\",\n        \"Hpc++ experiments with the parallel standard template library\",\n        \"Parallel programmability and the chapel language\",\n        \"The fortress language specification\",\n        \"X10: an object-oriented approach to non-uniform cluster computing\",\n        \"Habanero-java library: a java 8 framework for multicore programming\",\n        \"Mapreduce: simplified data processing on large clusters\",\n        \"Apache Flink: Stream and batch processing in a single engine\",\n        \"Tensorflow: A system for large-scale machine learning\",\n        \"Deep learning with Keras\",\n        \"The numpy array: a structure for efficient numerical computation\",\n        \"ScaLAPACK users’ guide\",\n        \"Accelerate Fast Math with Intel® oneAPI Math Kernel Library.\",\n        \"Open GPU Data Science.\",\n        \"Towards scalable dataframe systems\",\n        \"dask: Parallel computation with blocked algorithms and task scheduling\",\n        \"ray: A distributed framework for emerging AI applications\",\n        \"Apache Arrow.\",\n        \"Apache Parquet.\",\n        \"Parallel computing works!\",\n        \"Major technical advancements in apache hive\",\n        \"Parsl: Scalable parallel scripting in python.\",\n        \"Swift: A language for distributed parallel scripting\",\n        \"Pegasus, a workflow management system for science automation\",\n        \"Borg, omega, and kubernetes\",\n        \"MPI: A Message-Passing Interface Standard Version 3.0\",\n        \"A survey of methods for collective communication optimization and tuning\",\n        \"pandas: a foundational python library for data analysis and statistics\",\n        \"Distributed join algorithms on thousands of cores\",\n        \"Upc++: a pgas extension for c++\",\n        \"Hadoop: The definitive guide\",\n        \"Storm@ twitter\",\n        \"Twister:net - communication library for big data processing in hpc and cloud environments\",\n        \"Ucx: an open source framework for hpc network apis and beyond\",\n        \"A taxonomy of scientific workflow systems for grid computing\",\n        \"Scientific workflow management and the kepler system\",\n        \"Twister2: Tset high-performance iterative dataflow\",\n        \"Spidal java: High performance data analytics with java and mpi on large multicore hpc clusters\",\n        \"Java thread and process performance for parallel machine learning on multicore hpc clusters\",\n        \"Anatomy of machine learning algorithm implementations in MPI, Spark, and Flink\",\n        \"Data engineering for hpc with python\",\n        \"horovod: fast and easy distributed deep learning in tensorflow\",\n        \"Hands-on machine learning with Scikit-Learn, Keras, and TensorFlow: Concepts, tools, and techniques to build intelligent systems\",\n        \"Nccl 2.0\"\n    ],\n    \"reasoning\": \"Selected these 49 references because they represent foundational work and recent advances in HPTMT: Operator-Based Architecture for Scalable High-Performance Data-Intensive Frameworks, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}