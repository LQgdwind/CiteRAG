{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 45 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: MurTree: Optimal Decision Trees via Dynamic Programming and Search\n\nPaper Abstract: Abstract 111The paper has been published in JMLR’22: https://jmlr.csail.mit.edu/beta/papers/v23/20-520.html. Decision tree learning is a widely used approach in machine learning, favoured in applications that require concise and interpretable models. Heuristic methods are traditionally used to quickly produce models with reasonably high accuracy. A commonly criticised point, however, is that the resulting trees may not necessarily be the best representation of the data in terms of accuracy and size. In recent years, this motivated the development of optimal classification tree algorithms that globally optimise the decision tree in contrast to heuristic methods that perform a sequence of locally optimal decisions. We follow this line of work and provide a novel algorithm for learning optimal classification trees based on dynamic programming and search. Our algorithm supports constraints on the depth of the tree and number of nodes. The success of our approach is attributed to a series of specialised techniques that exploit properties unique to classification trees. Whereas algorithms for optimal classification trees have traditionally been plagued by high runtimes and limited scalability, we show in a detailed experimental study that our approach uses only a fraction of the time required by the state-of-the-art and can handle datasets with tens of thousands of instances, providing several orders of magnitude improvements and notably contributing towards the practical use of optimal decision trees.\n\n{retrieved_text}\n\nGenerate exactly 45 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 45\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Learning optimal and fair decision trees for non-discriminative decision-making\",\n        \"Learning optimal classification trees: Strong max-flow formulations\",\n        \"Learning optimal decision trees using caching branch-and-bound search\",\n        \"Pydl8. 5: a library for learning optimal decision trees\",\n        \"Learning certifiably optimal rule lists for categorical data\",\n        \"dtcontrol: decision tree learning algorithms for controller representation\",\n        \"Efficient inference of optimal decision trees\",\n        \"Verifiable reinforcement learning via policy extraction\",\n        \"Optimal classification trees\",\n        \"Classification and regression via integer optimization\",\n        \"Minimising decision tree size as combinatorial optimisation\",\n        \"Provable guarantees for decision tree induction: the agnostic setting\",\n        \"Sparsity in optimal randomized classification trees\",\n        \"Classification and regression trees\",\n        \"Mathematical optimization in classification and regression trees,\",\n        \"Optimal decision trees for nonlinear metrics\",\n        \"Decision trees for decision-making under the predict-then-optimize framework\",\n        \"Multi-interval discretization of continuous-valued attributes for classification learning\",\n        \"Optimal binary identification procedures\",\n        \"End-to-end learning of decision trees and forests\",\n        \"Learning optimal decision trees with maxsat and its integration in adaboost\",\n        \"Optimal sparse decision trees\",\n        \"Constructing optimal binary decision trees is NP-complete\",\n        \"Sat-based encodings for optimal decision trees with explicit paths\",\n        \"Discrimination aware decision tree learning\",\n        \"Package ‘discretization’ in cran-r\",\n        \"Deep neural decision forests\",\n        \"Generalized and scalable optimal sparse decision trees\",\n        \"Learning optimal decision trees with SAT\",\n        \"Mining optimal decision trees from itemset lattices\",\n        \"Optimal constraint-based decision tree induction from itemset lattices\",\n        \"Parameterized complexity of small decision tree learning\",\n        \"Scikit-learn: Machine learning in Python\",\n        \"C4.5: Programs for Machine Learning\",\n        \"Sat-based decision tree learning for large data sets\",\n        \"Adaptive neural trees\",\n        \"Learning optimal decision trees using constraint programming\",\n        \"Learning decision trees with flexible constraints and objectives using integer optimization\",\n        \"Learning optimal classification trees using a binary linear program formulation\",\n        \"Born-again tree ensembles\",\n        \"Weighted oblique decision trees\",\n        \"Fast vertical mining using diffsets\",\n        \"Scalable algorithms for association mining\",\n        \"A scalable mip-based method for learning optimal multivariate decision trees\",\n        \"Cluster-grouping: from subgroup discovery to clustering\"\n    ],\n    \"reasoning\": \"Selected these 45 references because they represent foundational work and recent advances in MurTree: Optimal Decision Trees via Dynamic Programming and Search, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}