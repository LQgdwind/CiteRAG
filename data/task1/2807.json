{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 44 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: A Reinforcement Learning Based R-Tree for Spatial Data Indexing in Dynamic Environments\n\nPaper Abstract: Abstract. Learned indices have been proposed to replace classic index structures like B-Tree with machine learning (ML) models. They require to replace both the indices and query processing algorithms currently deployed by the databases, and such a radical departure is likely to encounter challenges and obstacles. In contrast, we propose a fundamentally different way of using ML techniques to improve on the query performance of the classic R-Tree without the need of changing its structure or query processing algorithms. Specifically, we develop reinforcement learning (RL) based models to decide how to choose a subtree for insertion and how to split a node when building an R-Tree, instead of relying on hand-crafted heuristic rules currently used by R-Tree and its variants. Experiments on real and synthetic datasets with up to more than 100 million spatial objects clearly show that our RL based index outperforms R-Tree and its variants in terms of query processing time.\n\n{retrieved_text}\n\nGenerate exactly 44 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 44\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"The priority R-tree: A practically efficient and worst-case optimal R-tree\",\n        \"The R*-tree: an efficient and robust access method for points and rectangles\",\n        \"A revised r*-tree in comparison with related index structures\",\n        \"Multidimensional binary search trees used for associative searching\",\n        \"The ML-Index: A Multidimensional, Learned Index for Point, Range, and Nearest-Neighbor Queries.\",\n        \"ALEX: an updatable adaptive learned index\",\n        \"Tsunami: A learned multi-dimensional index for correlated data and skewed workloads\",\n        \"Multiattribute hashing using gray codes\",\n        \"Fractals for secondary key retrieval\",\n        \"The PGM-index: a fully-dynamic compressed learned index with provable worst-case bounds\",\n        \"Quad trees a data structure for retrieval on composite keys\",\n        \"A greedy algorithm for bulk loading R-trees\",\n        \"An implementation and performance analysis of spatial data access methods\",\n        \"R-trees: A dynamic index structure for spatial searching\",\n        \"iDistance: An adaptive B+-tree based indexing method for nearest neighbor search\",\n        \"On packing R-trees\",\n        \"Indexing non-uniform spatial data\",\n        \"RadixSpline: a single-pass learned index\",\n        \"Self-normalizing neural networks\",\n        \"The case for learned index structures\",\n        \"STR: A simple and efficient algorithm for R-tree packing\",\n        \"LISA: A learned index structure for spatial data\",\n        \"Neural packet classification\",\n        \"Opportunistic view materialization with deep reinforcement learning\",\n        \"Human-level control through deep reinforcement learning\",\n        \"Learning multi-dimensional indexes\",\n        \"Spatial query processing in an object-oriented database system\",\n        \"The case for learned spatial indexes\",\n        \"QUASII: query-aware spatial incremental index\",\n        \"Markov decision processes: discrete stochastic dynamic programming\",\n        \"Effectively learning spatial indices\",\n        \"Theoretically optimal and empirically efficient r-trees with strong parallelizability\",\n        \"Cost-based unbalanced R-trees\",\n        \"Nearest neighbor queries\",\n        \"Direct spatial search on pictorial databases using packed R-trees\",\n        \"Online index selection using deep reinforcement learning for a cluster database\",\n        \"The R+-Tree: A Dynamic Index for Multi-Dimensional Objects\",\n        \"Skinnerdb: Regret-bounded query evaluation via reinforcement learning\",\n        \"Learned Index for Spatial Queries\",\n        \"Efficient and effective similar subtrajectory search with deep reinforcement learning\",\n        \"Updatable Learned Index with Precise Positions\",\n        \"Qd-tree: Learning data layouts for big data analytics\",\n        \"Reinforcement learning with tree-lstm for join order selection\",\n        \"An end-to-end automatic cloud database tuning system using deep reinforcement learning\"\n    ],\n    \"reasoning\": \"Selected these 44 references because they represent foundational work and recent advances in A Reinforcement Learning Based R-Tree for Spatial Data Indexing in Dynamic Environments, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}