{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 45 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Transformer-Based Language Models for Software Vulnerability Detection\n\nPaper Abstract: Abstract. The large transformer-based language models demonstrate excellent performance in natural language processing. By considering the transferability of the knowledge gained by these models in one domain to other related domains, and the closeness of natural languages to high-level programming languages, such as C/C++, this work studies how to leverage (large) transformer-based language models in detecting software vulnerabilities and how good are these models for vulnerability detection tasks. In this regard, firstly, a systematic (cohesive) framework that details source code translation, model preparation, and inference is presented. Then, an empirical analysis is performed with software vulnerability datasets with C/C++ source codes having multiple vulnerabilities corresponding to the library function call, pointer usage, array usage, and arithmetic expression. Our empirical results demonstrate the good performance of the language models in vulnerability detection. Moreover, these language models have better performance metrics, such as F1-score, than the contemporary models, namely bidirectional long short term memory and bidirectional gated recurrent unit. Experimenting with the language models is always challenging due to the requirement of computing resources, platforms, libraries, and dependencies. Thus, this paper also analyses the popular platforms to efficiently fine-tune these models and present recommendations while choosing the platforms.\n\n{retrieved_text}\n\nGenerate exactly 45 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 45\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Unified Pre-training for Program Understanding and Generation\",\n        \"Anaconda\",\n        \"Learning Phrase Representations using RNN Encoder-Decoder for Statistical Machine Translation\",\n        \"Coverity\",\n        \"BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding\",\n        \"VulSniper: Focus Your Attention to Shoot Fine-Grained Vulnerabilities\",\n        \"Transformers: State-of-the-art Machine Learning for JAX, PyTorch and TensorFlow\",\n        \"CodeBERT: A Pre-Trained Model for Programming and Natural Languages\",\n        \"Horovod\",\n        \"The Pile: An 800GB Dataset of Diverse Text for Language Modeling\",\n        \"Atheris\",\n        \"GraphCodeBERT: Pre-training Code Representations with Data Flow\",\n        \"Towards a Scalable and Distributed Infrastructure for Deep Learning Applications\",\n        \"Long short-term memory\",\n        \"Tokenizer summary\",\n        \"CodeSearchNet Challenge: Evaluating the State of Semantic Code Search\",\n        \"VUDDY: A Scalable Approach for Vulnerable Code Clone Discovery\",\n        \"BART: Denoising Sequence-to-Sequence Pre-training for Natural Language Generation, Translation, and Comprehension\",\n        \"Automated Vulnerability Detection in Source Code Using Minimum Intermediate Representation Learning\",\n        \"VulDeeLocator: A Deep Learning-based Fine-grained Vulnerability Detector\",\n        \"VulPecker: an automated vulnerability detection system based on code similarity analysis\",\n        \"SySeVR: A framework for using deep learning to detect software vulnerabilities\",\n        \"VulDeePecker: A Deep Learning-Based System for Vulnerability Detection\",\n        \"RoBERTa: A Robustly Optimized BERT Pretraining Approach\",\n        \"DeepSpeed\",\n        \"Dynamic Taint Analysis for Automatic Detection, Analysis, and Signature Generation of Exploits on Commodity Software\",\n        \"Improving Language Understanding by Generative Pre-Training\",\n        \"Language Models are Unsupervised Multitask Learners\",\n        \"A Primer in BERTology: What We Know About How BERT Works\",\n        \"Automated Vulnerability Detection in Source Code Using Deep Representation Learning\",\n        \"DistilBERT, a distilled version of BERT: smaller, faster, cheaper and lighter\",\n        \"Megatron-LM: Training Multi-Billion Parameter Language Models Using Model Parallelism\",\n        \"Fuzzing: Brute Force Vulnerability Discovery\",\n        \"TIOBE Index for May 2022\",\n        \"Attention is all you need\",\n        \"Apple macOS USD File buffer overflow\",\n        \"Facebook WhatsApp on Android Video Stream buffer overflow\",\n        \"NVIDIA Shield TV up to 8.2.1 NVDEC buffer overflow\",\n        \"Database of ”VulDeePecker: A Deep Learning-Based System for Vulnerability Detection”\",\n        \"Flawfinder\",\n        \"Modeling and discovering vulnerabilities with code property graphs\",\n        \"Devign: Effective Vulnerability Identification by Learning Comprehensive Program Semantics via Graph Neural Networks\",\n        \"Aligning Books and Movies: Towards Story-like Visual Explanations by Watching Movies and Reading Books\",\n        \"Security Vulnerability Detection Using Deep Learning Natural Language Processing\",\n        \"µVulDeePecker: A deep learning-based system for multiclass vulnerability detection\"\n    ],\n    \"reasoning\": \"Selected these 45 references because they represent foundational work and recent advances in Transformer-Based Language Models for Software Vulnerability Detection, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}