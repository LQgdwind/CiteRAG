{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 47 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Static Detection of Uninitialized Stack Variables in Binary Code\n\nPaper Abstract: Abstract More than two decades after the first stack smashing attacks, memory corruption vulnerabilities utilizing stack anomalies are still prevalent and play an important role in practice. Among such vulnerabilities, uninitialized variables play an exceptional role due to their unpleasant property of unpredictability: as compilers are tailored to operate fast, costly interprocedural analysis procedures are not used in practice to detect such vulnerabilities. As a result, complex relationships that expose uninitialized memory reads remain undiscovered in binary code. Recent vulnerability reports show the versatility on how uninitialized memory reads are utilized in practice, especially for memory disclosure and code execution. Research in recent years proposed detection and prevention techniques tailored to source code. To date, however, there has not been much attention for these types of software bugs within binary executables. In this paper, we present a static analysis framework to find uninitialized variables in binary executables. We developed methods to lift the binaries into a knowledge representation which builds the base for specifically crafted algorithms to detect uninitialized reads. Our prototype implementation is capable of detecting uninitialized memory errors in complex binaries such as web browsers and OS kernels, and we detected 7 novel bugs.\n\n{retrieved_text}\n\nGenerate exactly 47 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 47\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Program Analysis and Specialization for the C Programming Language\",\n        \"An in-depth analysis of disassembly on full-scale x86/x64 binaries\",\n        \"Practical memory checking with dr. memory\",\n        \"Pwn2Own: Day 2 and Event Wrap-Up\",\n        \"What you always wanted to know about datalog (and never dared to ask)\",\n        \"Who allocated my memory? detecting custom memory allocators in c binaries\",\n        \"StackArmor: Comprehensive Protection from Stack-based Memory Error Vulnerabilities for Binaries\",\n        \"On the detection of custom memory allocators in c binaries\",\n        \"CVE-2012-1889: Vulnerability in microsoft xml core services\",\n        \"CVE-2014-6355: Graphics component information disclosure vulnerability\",\n        \"CVE-2015-0061: Tiff processing information disclosure vulnerability\",\n        \"CVE-Statistics-Chrome: Google Chrome Vulnerability Statistics\",\n        \"CVE-Statistics-Firefox: Mozilla Firefox Vulnerability Statistics\",\n        \"CVE-Statistics-IE: Microsoft Internet Explorer Vulnerability Statistics\",\n        \"Efficiently computing static single assignment form and the control dependence graph\",\n        \"Control jujutsu: On the weaknesses of fine-grained control flow integrity\",\n        \"Goanna a static model checker\",\n        \"Attacks on uninitialized local variables\",\n        \"Practical automated vulnerability monitoring using program state invariants\",\n        \"MemPick: data structure detection in C/C++ binaries\",\n        \"VMware Exploitation through Uninitialized Buffers\",\n        \"Demand interprocedural dataflow analysis, vol. 20\",\n        \"Recovering c++ objects from binaries using inter-procedural data-flow analysis\",\n        \"Generalized symbolic execution for model checking and testing\",\n        \"Taming Undefined Behavior in LLVM\",\n        \"In Defense of Soundiness: A Manifesto\",\n        \"Unisan: Proactive kernel memory initialization to eliminate data leakages\",\n        \"Unleashing use-before-initialization vulnerabilities in the linux kernel using targeted stack spraying\",\n        \"DR. CHECKER: A soundy analysis for linux kernel drivers\",\n        \"SafeInit: Comprehensive and Practical Mitigation of Uninitialized Read Vulnerabilities\",\n        \"Dynamic test generation to find integer bugs in x86 binary linux programs\",\n        \"Under-constrained symbolic execution: Correctness checking for real code\",\n        \"Undecidability of context-sensitive data-dependence analysis\",\n        \"Separation logic: A logic for shared mutable data structures\",\n        \"Interprocedural analysis useless for code optimization\",\n        \"Interprocedural shape analysis for recursive programs\",\n        \"Two approaches to interprocedural data flow analysis\",\n        \"SoK: (State of) The Art of War: Offensive Techniques in Binary Analysis\",\n        \"Howard: a dynamic excavator for reverse engineering data structures\",\n        \"Pointer analysis\",\n        \"Using datalog for fast and easy program analysis\",\n        \"Memorysanitizer: Fast detector of uninitialized memory use in c++;\",\n        \"SoK: Eternal War in Memory\",\n        \"Amoco\",\n        \"Static single assignment for decompilation\",\n        \"Undefined behavior: What happened to my code?\",\n        \"Accelerating dynamic detection of uses of undefined values with static value-flow analysis\"\n    ],\n    \"reasoning\": \"Selected these 47 references because they represent foundational work and recent advances in Static Detection of Uninitialized Stack Variables in Binary Code, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}