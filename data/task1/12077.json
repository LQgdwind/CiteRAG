{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 55 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: The Power of Types: Exploring the Impact of Type Checking on Neural Bug Detection in Dynamically Typed Languages Partially supported by the FRQNT-B2X project (file number: 319955), IT30340 Mitacs Accelerate, and the Wallenberg AI, Autonomous Systems and Software Program (WASP), Sweden\n\nPaper Abstract: Abstract [Motivation] Automated bug detection in dynamically typed languages such as Python is essential for maintaining code quality. The lack of mandatory type annotations in such languages can lead to errors that are challenging to identify early with traditional static analysis tools. Recent progress in deep neural networks has led to increased use of neural bug detectors. In statically typed languages, a type checker is integrated into the compiler and thus taken into consideration when the neural bug detector is designed for these languages. [Problem] However, prior studies overlook this aspect during the training and testing of neural bug detectors for dynamically typed languages. When an optional type checker is used, assessing existing neural bug detectors on bugs easily detectable by type checkers may impact their performance estimation. Moreover, including these bugs in the training set of neural bug detectors can shift their detection focus toward the wrong type of bugs. [Contribution] We explore the impact of type checking on various neural bug detectors for variable misuse bugs, a common type targeted by neural bug detectors. Existing synthetic and real-world datasets are type-checked to evaluate the prevalence of type-related bugs. Then, we investigate how type-related bugs influence the training and testing of the neural bug detectors. [Findings] Our findings indicate that existing bug detection datasets contain a significant proportion of type-related bugs. Building on this insight, we discover integrating the neural bug detector with a type checker can be beneficial, especially when the code is annotated with types. Further investigation reveals neural bug detectors perform better on type-related bugs than other bugs. Moreover, removing type-related bugs from the training data helps improve neural bug detectors’ ability to identify bugs beyond the scope of type checkers.\n\n{retrieved_text}\n\nGenerate exactly 55 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 55\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Code complete - A practical handbook of software construction, 2nd Edition\",\n        \"How many of all bugs do we find? A study of static bug detectors\",\n        \"An empirical study on the correctness of formally verified distributed systems\",\n        \"On the presence and causes of lingering defects in software: An industrial study of lingering defects\",\n        \"Software bug contributed to blackout\",\n        \"The real cost of software errors\",\n        \"A large-scale study of programming languages and code quality in GitHub\",\n        \"To type or not to type: Quantifying detectable bugs in JavaScript\",\n        \"An empirical study of type-related defects in Python projects\",\n        \"Building useful program analysis tools using an extensible Java compiler\",\n        \"Moving fast with software verification\",\n        \"Finding bugs is easy\",\n        \"Neural bug finding: A study of opportunities and challenges\",\n        \"Learning to represent programs with graphs\",\n        \"Probing pretrained models of source codes\",\n        \"Neural program repair by jointly learning to localize and repair\",\n        \"Learning and evaluating contextual embedding of source code\",\n        \"Global relational models of source code\",\n        \"The evolution of type annotations in Python: An empirical study\",\n        \"Gated graph sequence neural networks\",\n        \"CodeBERT: A pre-trained model for programming and natural languages\",\n        \"GraphCodeBERT: Pre-training code representations with data flow\",\n        \"UniXcoder: Unified cross-modal pre-training for code representation\",\n        \"Understanding neural code intelligence through program simplification\",\n        \"How to train your neural bug detector: Artificial vs real bugs\",\n        \"Learning to fix build errors with Graph2Diff neural networks\",\n        \"How often do single-statement bugs occur?: The ManySStuBs4J dataset\",\n        \"Graph neural networks in program analysis\",\n        \"Paper artifacts.\",\n        \"Python 3 types in the wild: a tale of two type systems\",\n        \"Pep 484 – type hints.\",\n        \"mypy - optional static typing for Python.\",\n        \"Gradual typing for objects\",\n        \"pytype - a static type analyzer for Python code.\",\n        \"Deep learning type inference\",\n        \"Typilus: Neural type hints\",\n        \"Attention is all you need\",\n        \"A survey of transformers\",\n        \"Semi-supervised classification with graph convolutional networks\",\n        \"On the properties of neural machine translation: Encoder-decoder approaches\",\n        \"On distribution shift in learning-based bug detectors\",\n        \"Self-supervised bug detection and repair\",\n        \"How well static type checkers work with gradual typing? a case study on python\",\n        \"A probabilistic interpretation of precision, recall and F-score, with implication for evaluation\",\n        \"Deep learning based identification of suspicious return statements\",\n        \"Learning defect prediction from unrealistic data\",\n        \"Learning realistic mutations: Bug creation for neural bug detectors\",\n        \"Semantic bug seeding: A learning-based approach for creating realistic bugs\",\n        \"Graph-based, self-supervised program repair from diagnostic feedback\",\n        \"SelfAPR: Self-supervised program repair with test execution diagnostics\",\n        \"Type prediction with program decomposition and fill-in-the-type training\",\n        \"Do machine learning models produce TypeScript types that type check?\",\n        \"Typewriter: Neural type prediction with search-based validation\",\n        \"TypeT5: Seq2seq type inference using static analysis\",\n        \"OptTyper: Probabilistic type inference by optimising logical and natural constraints\"\n    ],\n    \"reasoning\": \"Selected these 55 references because they represent foundational work and recent advances in The Power of Types: Exploring the Impact of Type Checking on Neural Bug Detection in Dynamically Typed Languages Partially supported by the FRQNT-B2X project (file number: 319955), IT30340 Mitacs Accelerate, and the Wallenberg AI, Autonomous Systems and Software Program (WASP), Sweden, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}