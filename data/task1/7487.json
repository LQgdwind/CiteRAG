{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 52 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: An Empirical Study of Library Usage and Dependency in Deep Learning Frameworks\n\nPaper Abstract: Abstract. Recent advances in Deep Learning (DL) have led to the release of several DL software libraries such as PyTorch, Caffe, and TensorFlow, in order to assist Machine Learning (ML) practitioners in developing and deploying state-of-the-art Deep Neural Networks (DNN), but they are not able to properly cope with limitations in the DL libraries such as testing or data processing. In this paper, we present a qualitative and quantitative analysis of the most frequent DL libraries combination, the distribution of DL library dependencies across the ML workflow, and formulate a set of recommendations to (i) hardware builders for more optimized accelerators and (ii) library builder for more refined future releases. Our study is based on 1,484 open-source DL projects with 46,110 contributors selected based on their reputation. First, we found an increasing trend in the usage of deep learning libraries. Second, we highlight several usage patterns of deep learning libraries. In addition, we identify dependencies between DL libraries and the most frequent combination where we discover that PyTorch and scikit-learn and, Keras and Tensorflow are the most frequent combination in 18% and 14% of the projects. The developer uses two or three DL libraries in the same projects and tends to use different multiple DL libraries in both the same function and the same files. The developer shows patterns in using various deep learning libraries and prefers simple functions with fewer arguments and straightforward goals. Finally, we present the implications of our findings for researchers, library maintainers, and hardware vendors.\n\n{retrieved_text}\n\nGenerate exactly 52 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 52\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"TensorFlow: Large-Scale Machine Learning on Heterogeneous Systems\",\n        \"Software Engineering for Machine Learning: A Case Study\",\n        \"An Empirical Study of Crash-Inducing Commits in Mozilla Firefox\",\n        \"Machine Learning. Retrieved.\",\n        \"Why do software packages conflict?\",\n        \"How the Apache Community Upgrades Dependencies: An Evolutionary Study\",\n        \"The Evolution of Project Inter-dependencies in a Software Ecosystem: The Case of Apache\",\n        \"Understanding the Factors That Impact the Popularity of GitHub Repositories\",\n        \"What’s in a GitHub Star? Understanding Repository Starring Practices in a Social Coding Platform\",\n        \"The Open-Closed Principle of Modern Machine Learning Frameworks (MSR ’18)\",\n        \"Using thematic analysis in psychology\",\n        \"Coding In-depth Semistructured Interviews: Problems of Unitization and Intercoder Reliability and Agreement\",\n        \"The rise of deep learning in drug discovery\",\n        \"keras\",\n        \"Seeking the Ground Truth: A Retroactive Study on the Evolution and Migration of Software Libraries\",\n        \"An Empirical Comparison of Dependency Network Evolution in Seven Software Packaging Ecosystems\",\n        \"Keep Me Updated: An Empirical Study of Third-Party Library Updatability on Android\",\n        \"Broken promises: An empirical study into evolution problems in Java programs caused by library upgrades\",\n        \"How Do APIs Evolve? A Story of Refactoring: Research Articles\",\n        \"Understanding Software-2.0: A Study of Machine Learning Library Usage and Evolution\",\n        \"RAED1337/DL-dependency\",\n        \"Efficient Static Checking of Library Updates\",\n        \"MLOps : pipelines de livraison continue et d’automatisation dans le machine learning\",\n        \"What do programmers discuss about deep learning frameworks\",\n        \"Compare deep learning frameworks\",\n        \"The Machine Learning Development and Operations\",\n        \"Get performance gains ranging up to 10x to 100x for popular deep-learning and machine-learning frameworks through drop-in Intel® optimizations\",\n        \"A Comprehensive Study on Deep Learning Bug Characteristics\",\n        \"Caffe: Convolutional Architecture for Fast Feature Embedding\",\n        \"Why and How Developers Fork What from Whom in GitHub\",\n        \"An in-depth study of the promises and perils of mining GitHub\",\n        \"Structure and Evolution of Package Dependency Networks\",\n        \"Guiding Deep Learning System Testing Using Surprise Adequacy\",\n        \"A Survey on Deep Learning in Medical Image Analysis\",\n        \"Detecting Tensorflow Program Bugs in Real-World Industrial Environment\",\n        \"DeepCT: Tomographic Combinatorial Testing for Deep Learning Systems\",\n        \"Introduction to Machine Learning with Python: A Guide for Data Scientists\",\n        \"Speech Recognition Using Deep Neural Networks: A Systematic Review\",\n        \"PyTorch: An Imperative Style, High-Performance Deep Learning Library\",\n        \"Scikit-learn: Machine Learning in Python\",\n        \"DeepXplore: Automated Whitebox Testing of Deep Learning Systems\",\n        \"Defect Categorization: Making Use of a Decade of Widely Varying Historical Data\",\n        \"A Mathematical Theory of Communication\",\n        \"An Empirical Study on Real Bugs for Machine Learning Programs\",\n        \"Theano: A Python framework for fast computation of mathematical expressions\",\n        \"DeepTest: Automated Testing of Deep-Neural-Network-Driven Autonomous Cars (ICSE ’18)\",\n        \"A Look at the Dynamics of the JavaScript Package Ecosystem\",\n        \"DiffChaser: Detecting Disagreements for Deep Neural Networks\",\n        \"API-Evolution Support with Diff-CatchUp\",\n        \"Characterizing the Usage and Impact of Java Annotations Over 1000+ Projects\",\n        \"Machine Learning Testing: Survey, Landscapes and Horizons\",\n        \"An Empirical Study of Common Challenges in Developing Deep Learning Applications\"\n    ],\n    \"reasoning\": \"Selected these 52 references because they represent foundational work and recent advances in An Empirical Study of Library Usage and Dependency in Deep Learning Frameworks, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}