{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 57 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Improving Stack Overflow question title generation with copying enhanced CodeBERT model and bi-modal information\n\nPaper Abstract: Abstract Stack Overflow is very helpful for software developers who are seeking answers to programming problems. Previous studies have shown that a growing number of questions are of low quality and thus obtain less attention from potential answerers. Gao et al. proposed an LSTM-based model (i.e., BiLSTM-CC) to automatically generate question titles from the code snippets to improve the question quality. However, only using the code snippets in the question body cannot provide sufficient information for title generation, and LSTMs cannot capture the long-range dependencies between tokens. Context:Objective: This paper proposes CCBERT, a deep learning based novel model to enhance the performance of question title generation by making full use of the bi-modal information of the entire question body. Context:Method: CCBERT follows the encoder-decoder paradigm and uses CodeBERT to encode the question body into hidden representations, a stacked Transformer decoder to generate predicted tokens, and an additional copy attention layer to refine the output distribution. Both the encoder and decoder perform the multi-head self-attention operation to better capture the long-range dependencies. This paper builds a dataset containing around 200,000 high-quality questions filtered from the data officially published by Stack Overflow to verify the effectiveness of the CCBERT model. Context:Results: CCBERT outperforms all the baseline models on the dataset. Experiments on both code-only and low-resource datasets show the superiority of CCBERT with less performance degradation. The human evaluation also shows the excellent performance of CCBERT concerning both readability and correl ation criteria. Context:Conclusion: CCBERT is capable of automatically capturing the bi-modal semantic information from the entire question body and parsing the long-range dependencies to achieve better performance. Therefore, CCBERT is an effective approach for generating Stack Overflow question titles.\n\n{retrieved_text}\n\nGenerate exactly 57 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 57\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"A transformer-based approach for source code summarization\",\n        \"The good, the bad and their kins: Identifying questions with negative scores in stackoverflow\",\n        \"Neural machine translation by jointly learning to align and translate\",\n        \"Sotorrent: Reconstructing and analyzing the evolution of stack overflow posts\",\n        \"Longformer: The long-document transformer\",\n        \"How to ask for technical help? evidence-based guidelines for writing questions on stack overflow\",\n        \"How do developers discuss and support new programming languages in technical q&a site? an empirical study of go, swift, and rust in stack overflow\",\n        \"Neural summarization by extracting sentences and words\",\n        \"Fit or unfit: analysis and prediction of’closed questions’ on stack overflow\",\n        \"Transformer-xl: Attentive language models beyond a fixed-length context\",\n        \"Bert: Pre-training of deep bidirectional transformers for language understanding\",\n        \"Summeval: Re-evaluating summarization evaluation\",\n        \"Codebert: A pre-trained model for programming and natural languages\",\n        \"Generating question titles for stack overflow from mined code snippets\",\n        \"Bottom-up abstractive summarization\",\n        \"Incorporating copying mechanism in sequence-to-sequence learning\",\n        \"Deep code comment generation\",\n        \"Summarizing source code with transferred api knowledge\",\n        \"Summarizing source code using a neural attention model\",\n        \"Neural extractive summarization with hierarchical attentive heterogeneous graph network\",\n        \"Sharp nearby, fuzzy far away: How neural language models use context\",\n        \"Improved code summarization via a graph neural network\",\n        \"A neural model for generating natural language summaries of program subroutines\",\n        \"Bart: Denoising sequence-to-sequence pre-training for natural language generation, translation, and comprehension\",\n        \"Rouge: A package for automatic evaluation of summaries\",\n        \"Orange: a method for evaluating automatic evaluation metrics for machine translation\",\n        \"Text summarization with pretrained encoders\",\n        \"The automatic creation of literature abstracts\",\n        \"Applying codebert for automated program repair of java simple bugs\",\n        \"Early detection and guidelines to improve unanswered questions on stack overflow\",\n        \"What skills do it companies look for in new developers? a study with stack overflow jobs\",\n        \"An empirical study on software defect prediction using codebert model\",\n        \"Bleu: a method for automatic evaluation of machine translation\",\n        \"Language models are unsupervised multitask learners\",\n        \"Postfinder: Mining stack overflow posts to support software developers\",\n        \"Bidirectional recurrent neural networks\",\n        \"Get to the point: Summarization with pointer-generator networks\",\n        \"Bleurt: Learning robust metrics for text generation\",\n        \"A large scale study on how developers discuss code smells and anti-pattern in stack exchange sites\",\n        \"Modeling coverage for neural machine translation\",\n        \"Mining api usage scenarios from stack overflow\",\n        \"Attention is all you need\",\n        \"Improving automatic source code summarization via deep reinforcement learning\",\n        \"Sotagrec: A combined tag recommendation approach for stack overflow\",\n        \"How do users revise answers on technical q&a websites? a case study on stack overflow\",\n        \"Retrieve and refine: Exemplar-based neural comment generation\",\n        \"Code generation as a dual task of code summarization\",\n        \"Discourse-aware neural extractive text summarization\",\n        \"A multi-modal transformer-based code summarization approach for smart contracts\",\n        \"Want a good answer? ask a good question first!\",\n        \"A comprehensive assessment of dialog evaluation metrics\",\n        \"Big bird: Transformers for longer sequences\",\n        \"Predicting crash fault residence via simplified deep forest based on a reduced feature set\",\n        \"Graph4web: A relation-aware graph attention network for web service classification\",\n        \"A comprehensive investigation of the impact of feature selection techniques on crashing fault residence prediction models\",\n        \"Simplified deep forest model based just-in-time defect prediction for android mobile apps\",\n        \"Neural document summarization by jointly learning to score and select sentences\"\n    ],\n    \"reasoning\": \"Selected these 57 references because they represent foundational work and recent advances in Improving Stack Overflow question title generation with copying enhanced CodeBERT model and bi-modal information, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}