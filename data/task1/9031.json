{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 52 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Transformer-based Vulnerability Detection in Code at EditTime: Zero-shot, Few-shot, or Fine-tuning?\n\nPaper Abstract: Abstract. Software vulnerabilities bear enterprises significant costs. Despite extensive efforts in research and development of software vulnerability detection methods, uncaught vulnerabilities continue to put software owners and users at risk. Many current vulnerability detection methods require that code snippets can compile and build before attempting detection. This, unfortunately, introduces a long latency between the time a vulnerability is injected to the time it is removed, which can substantially increases the cost of fixing a vulnerability. We recognize that the current advances in machine learning can be used to detect vulnerable code patterns on syntactically incomplete code snippets as the developer is writing the code at EditTime. In this paper we present a practical system that leverages deep learning on a large-scale data set of vulnerable code patterns to learn complex manifestations of more than 250 vulnerability types and detect vulnerable code patterns at EditTime. We discuss zero-shot, few-shot, and fine-tuning approaches on state of the art pre-trained Large Language Models (LLMs). We show that in comparison with state of the art vulnerability detection models our approach improves the state of the art by 10%. We also evaluate our approach to detect vulnerability in auto-generated code by code LLMs. Evaluation on a benchmark of high-risk code scenarios shows a reduction of up to 90% vulnerability reduction.\n\n{retrieved_text}\n\nGenerate exactly 52 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 52\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"CWE List Version 4.9\",\n        \"NATIONAL VULNERABILITY DATABASE\",\n        \"Secure Development\",\n        \"How can the developer benefit from security modeling?\",\n        \"Software engineering economics\",\n        \"BNR/NORTEL: path to improve product quality, reliability and customer satisfaction\",\n        \"A few billion lines of code later: using static analysis to find bugs in the real world\",\n        \"Deep learning based vulnerability detection: Are we there yet\",\n        \"Bingo: Cross-architecture cross-os binary search\",\n        \"Evaluating Large Language Models Trained on Code\",\n        \"End-to-end prediction of buffer overruns from raw source code via neural memory networks\",\n        \"Microsoft Security Development Lifecycle\",\n        \"BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding\",\n        \"Improving automatically generated code from Codex via Automated Program Repair\",\n        \"CodeBERT: A Pre-Trained Model for Programming and Natural Languages\",\n        \"LineVul: A Transformer-based Line-Level Vulnerability Prediction\",\n        \"GitHub Copilot· Your AI pair programmer\",\n        \"CodeQL for research\",\n        \"An NSA-derived ransomware worm is shutting down computers worldwide\",\n        \"A Discipline of Software Engineering\",\n        \"CONFETTI: Amplifying Concolic Guidance for Fuzzers\",\n        \"Toward reducing fault fix time: Understanding developer behavior for the design of automated fault detection tools\",\n        \"Maximal divergence sequential autoencoder for binary software vulnerability detection\",\n        \"Learning binary code with deep learning to detect software weakness\",\n        \"Steelix: program-state based binary fuzzing\",\n        \"Competition-level code generation with alphacode\",\n        \"Vulnerability Detection with Fine-Grained Interpretations\",\n        \"Cerebro: context-aware adaptive fuzzing for effective vulnerability detection\",\n        \"Sysevr: A framework for using deep learning to detect software vulnerabilities\",\n        \"Vuldeepecker: A deep learning-based system for vulnerability detection\",\n        \"Linear-time Temporal Logic guided Greybox Fuzzing\",\n        \"CWE - Common Weakness Enumeration\",\n        \"Predicting vulnerable software components\",\n        \"A conversational paradigm for program synthesis\",\n        \"Training language models to follow instructions with human feedback\",\n        \"Source Code Analysis Tools\",\n        \"An Empirical Cybersecurity Evaluation of GitHub Copilot’s Code Contributions\",\n        \"Building program vector representations for deep learning\",\n        \"Evaluation: from precision, recall and F-measure to ROC, informedness, markedness and correlation\",\n        \"Automated vulnerability detection in source code using deep representation learning\",\n        \"Security Implications of Large Language Model Code Assistants: A User Study\",\n        \"Towards security defect prediction with AI\",\n        \"An Empirical Study of Code Smells in Transformer-based Code Generation Techniques\",\n        \"Intellicode compose: Code generation using transformer\",\n        \"AI assistant for software developers\",\n        \"Moving beyond security tracks: integrating security in cs0 and cs1\",\n        \"Superion: Grammar-aware greybox fuzzing\",\n        \"Self-Attention based Automated Vulnerability Detection with Effective Data Representation\",\n        \"ASIDE: IDE Support for Web Application Security\",\n        \"Spain: security patch analysis for binaries towards understanding the pain and pills\",\n        \"Path Transitions Tell More:Optimizing Fuzzing Schedules via Runtime Program States\",\n        \"Devign: Effective vulnerability identification by learning comprehensive program semantics via graph neural networks\"\n    ],\n    \"reasoning\": \"Selected these 52 references because they represent foundational work and recent advances in Transformer-based Vulnerability Detection in Code at EditTime: Zero-shot, Few-shot, or Fine-tuning?, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}