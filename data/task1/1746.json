{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 46 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Retrieve and Refine: Exemplar-based Neural Comment Generation\n\nPaper Abstract: Abstract. Code comment generation which aims to automatically generate natural language descriptions for source code, is a crucial task in the field of automatic software development. Traditional comment generation methods use manually-crafted templates or information retrieval (IR) techniques to generate summaries for source code. In recent years, neural network-based methods which leveraged acclaimed encoder-decoder deep learning framework to learn comment generation patterns from a large-scale parallel code corpus, have achieved impressive results. However, these emerging methods only take code-related information as input. Software reuse is common in the process of software development, meaning that comments of similar code snippets are helpful for comment generation. Inspired by the IR-based and template-based approaches, in this paper, we propose a neural comment generation approach where we use the existing comments of similar code snippets as exemplars to guide comment generation. Specifically, given a piece of code, we first use an IR technique to retrieve a similar code snippet and treat its comment as an exemplar. Then we design a novel seq2seq neural network that takes the given code, its AST, its similar code, and its exemplar as input, and leverages the information from the exemplar to assist in the target comment generation based on the semantic similarity between the source code and the similar code. We evaluate our approach on a large-scale Java corpus, which contains about 2M samples, and experimental results demonstrate that our model outperforms the state-of-the-art methods by a substantial margin.\n\n{retrieved_text}\n\nGenerate exactly 46 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 46\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"The adverse effects of code duplication in machine learning models of code\",\n        \"A Survey of Machine Learning for Big Code and Naturalness\",\n        \"Neural Machine Translation by Jointly Learning to Align and Translate\",\n        \"Learning-Based Recursive Aggregation of Abstract Syntax Trees for Code Clone Detection\",\n        \"Lightweight Transformation and Fact Extraction with the srcML Toolkit\",\n        \"Program Understanding: Challenge for the 1990s\",\n        \"A study of the documentation essential to software maintenance\",\n        \"Evaluating source code summarization techniques: Replication and expansion\",\n        \"Application program maintenance study - reports to our respondents\",\n        \"Deep API learning\",\n        \"On the Use of Automated Text Summarization Techniques for Summarizing Source Code\",\n        \"On the naturalness of software\",\n        \"Long Short-Term Memory\",\n        \"Deep code comment generation\",\n        \"Deep code comment generation with hybrid lexical and syntactical information\",\n        \"Summarizing Source Code using a Neural Attention Model\",\n        \"Machine Learning Based Recommendation of Method Names: How Far are We\",\n        \"DECKARD: Scalable and Accurate Tree-Based Detection of Code Clones\",\n        \"Automatically generating commit messages from diffs using neural machine translation\",\n        \"CCFinder: A Multilinguistic Token-Based Code Clone Detection System for Large Scale Source Code\",\n        \"An empirical study of code clone genealogies\",\n        \"An Exploratory Study of How Developers Seek, Relate, and Collect Relevant Information during Software Maintenance Tasks\",\n        \"Six Challenges for Neural Machine Translation\",\n        \"API documentation from source code comments: a case study of Javadoc\",\n        \"A neural model for generating natural language summaries of program subroutines\",\n        \"CCLearner: A Deep Learning-Based Clone Detection Approach\",\n        \"Neural-machine-translation-based commit message generation: how far are we?\",\n        \"Automatic Generation of Pull Request Descriptions\",\n        \"UCI Source Code Data Sets\",\n        \"Automatic Source Code Summarization of Context for Java Methods\",\n        \"Automatic generation of natural language summaries for Java classes\",\n        \"Multilayer perceptron, fuzzy sets, and classification\",\n        \"Bleu: a Method for Automatic Evaluation of Machine Translation\",\n        \"A Neural Attention Model for Abstractive Sentence Summarization\",\n        \"SourcererCC: scaling code clone detection to big-code\",\n        \"Identifying Auto-Generated Code by Using Machine Learning Techniques\",\n        \"Towards automatically generating summary comments for Java methods\",\n        \"Sequence to Sequence Learning with Neural Networks\",\n        \"A Neural Conversational Model\",\n        \"Supervised Deep Features for Software Functional Clone Detection by Exploiting Lexical and Syntactical Information in Source Code\",\n        \"Deep learning code fragments for code clone detection\",\n        \"CloCom: Mining existing source code for automatic comment generation\",\n        \"AutoComment: Mining question and answer sites for automatic comment generation\",\n        \"Measuring Program Comprehension: A Large-Scale Field Study with Professionals\",\n        \"A novel neural source code representation based on abstract syntax tree\",\n        \"DeepSim: deep learning code functional similarity\"\n    ],\n    \"reasoning\": \"Selected these 46 references because they represent foundational work and recent advances in Retrieve and Refine: Exemplar-based Neural Comment Generation, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}