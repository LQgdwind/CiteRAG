{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 51 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Compositional API Recommendation for Library-Oriented Code Generation\n\nPaper Abstract: Abstract. Large language models (LLMs) have achieved exceptional performance in code generation. However, the performance remains unsatisfactory in generating library-oriented code, especially for the libraries not present in the training data of LLMs. Previous work utilizes API recommendation technology to help LLMs use libraries: it retrieves APIs related to the user requirements, then leverages them as context to prompt LLMs. However, developmental requirements can be coarse-grained, requiring a combination of multiple fine-grained APIs. This granularity inconsistency makes API recommendation a challenging task. To address this, we propose CAPIR (Compositional API Recommendation), which adopts a ”divide-and-conquer” strategy to recommend APIs for coarse-grained requirements. Specifically, CAPIR employs an LLM-based Decomposer to break down a coarse-grained task description into several detailed subtasks. Then, CAPIR applies an embedding-based Retriever to identify relevant APIs corresponding to each subtask. Moreover, CAPIR leverages an LLM-based Reranker to filter out redundant APIs and provides the final recommendation. To facilitate the evaluation of API recommendation methods on coarse-grained requirements, we present two challenging benchmarks, RAPID (Recommend APIs based on Documentation) and LOCG (Library-Oriented Code Generation). Experimental results on these benchmarks, demonstrate the effectiveness of CAPIR in comparison to existing baselines. Specifically, on RAPID’s Torchdata-AR dataset, compared to the state-of-the-art API recommendation approach, CAPIR improves recall@5 from 18.7% to 43.2% and precision@5 from 15.5% to 37.1%. On LOCG’s Torchdata-Code dataset, compared to code generation without API recommendation, CAPIR improves pass@100 from 16.0% to 28.0%.\n\n{retrieved_text}\n\nGenerate exactly 51 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 51\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"ADA Embedding\",\n        \"ChatGPT\",\n        \"GitHub Copilot\",\n        \"How Do In-Context Examples Affect Compositional Generalization?\",\n        \"Code generation tools (almost) for free? a study of few-shot, pre-trained language models on code\",\n        \"Grounded copilot: How programmers interact with code-generating models\",\n        \"Language models are few-shot learners\",\n        \"Synthesizing API usage examples\",\n        \"Density-based clustering based on hierarchical density estimates\",\n        \"Searching connected API subgraph via text phrases\",\n        \"Codet: Code generation with generated tests\",\n        \"Evaluating large language models trained on code\",\n        \"Source Code Recommender Systems: The Practitioners’ Perspective\",\n        \"Bert: Pre-training of deep bidirectional transformers for language understanding\",\n        \"A survey for in-context learning\",\n        \"GPT-3: Its nature, scope, limits, and consequences\",\n        \"Deep API learning\",\n        \"Synthesizing Java expressions from free-form queries\",\n        \"On the effectiveness of pretrained models for api learning\",\n        \"Pyart: Python api recommendation in real-time\",\n        \"API method recommendation without worrying about the task-API knowledge gap\",\n        \"Multi-Modal API Recommendation\",\n        \"Large language models are zero-shot reasoners\",\n        \"Competition-level code generation with alphacode\",\n        \"Making language models better reasoners with step-aware verifier\",\n        \"Generating query-specific class API summaries\",\n        \"CodeGen4Libs: A Two-stage Approach for Library-oriented Code Generation\",\n        \"Deep api learning revisited\",\n        \"Umap: Uniform manifold approximation and projection for dimension reduction\",\n        \"Portfolio: finding relevant functions and their usage\",\n        \"Recurrent neural networks\",\n        \"GPT-4 Technical Report\",\n        \"Revisiting, benchmarking and exploring API recommendation: How far are we?\",\n        \"SWIM: synthesizing what I mean: code search and idiomatic snippet synthesis\",\n        \"Nlp2api: Query reformulation for code search using crowdsourced knowledge and extra-large data analytics\",\n        \"Rack: Automatic api recommendation using crowdsourced knowledge\",\n        \"Automatic Code Summarization via ChatGPT: How Far Are We?\",\n        \"Expectation vs. experience: Evaluating the usability of code generation tools powered by large language models\",\n        \"Self-Consistency Improves Chain of Thought Reasoning in Language Models\",\n        \"Execution-based evaluation for open-domain code generation\",\n        \"Documentation-Guided API Sequence Search without Worrying about the Text-API Semantic Gap\",\n        \"Chain-of-thought prompting elicits reasoning in large language models\",\n        \"Clear: contrastive learning for api recommendation\",\n        \"API recommendation for machine learning libraries: how far are we?\",\n        \"Learning to mine aligned code and natural language pairs from stack overflow\",\n        \"Private-library-oriented code generation with large language models\",\n        \"When language model meets private library\",\n        \"CERT: Continual Pre-training on Sketches for Library-oriented Code Generation\",\n        \"Coder reviewer reranking for code generation\",\n        \"MAPO: Mining and recommending API usage patterns\",\n        \"Docprompting: Generating code by retrieving the docs\"\n    ],\n    \"reasoning\": \"Selected these 51 references because they represent foundational work and recent advances in Compositional API Recommendation for Library-Oriented Code Generation, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}