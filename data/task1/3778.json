{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 52 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Backtracking (the) Algorithms on the Hamiltonian Cycle Problem\n\nPaper Abstract: Abstract Even though the Hamiltonian cycle problem is NP-complete, many of its problem instances are not. In fact, almost all the hard instances reside in one area: near the Komlós-Szemerédi bound, where randomly generated graphs have an approximate 50% chance of being Hamiltonian. If the number of edges is either much higher or much lower, the problem is not hard – most backtracking algorithms decide such instances in (near) polynomial time. Recently however, targeted search efforts have identified very hard Hamiltonian cycle problem instances very far away from the Komlós-Szemerédi bound. In that study, the used backtracking algorithm was Vandegriend-Culberson’s, which was supposedly the most efficient of all Hamiltonian backtracking algorithms. In this paper, we make a unified large scale quantitative comparison for the best known backtracking algorithms described between 1877 and 2016. We confirm the suspicion that the Komlós-Szemerédi bound is a hard area for all backtracking algorithms, but also that Vandegriend-Culberson is indeed the most efficient algorithm, when expressed in consumed computing time. When measured in recursive effectiveness however, the algorithm by Frank Rubin, almost half a century old, performs best. In a more general algorithmic assessment, we conjecture that edge pruning and non-Hamiltonicity checks might be largely responsible for these recursive savings. When expressed in system time however, denser problem instances require much more time per recursion. This is most likely due to the costliness of the extra search pruning procedures, which are relatively elaborate. We supply large amounts of experimental data, and a unified single-program implementation for all six algorithms. All data and algorithmic source code is made public for further use by our colleagues.\n\n{retrieved_text}\n\nGenerate exactly 52 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 52\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"A predictive data analytic for the hardness of hamiltonian cycle problem instances\",\n        \"Where the really hard problems are.\",\n        \"Where the really hard problems aren’t\",\n        \"Video showing where cetal’s results on atsp are flawed (part1)\",\n        \"Video showing where cetal’s results on atsp are flawed (part2)\",\n        \"Interactively viewable hamiltonian cycle hardness\",\n        \"Plant propagation & hard hamiltonian graphs\",\n        \"Looking for the hardest hamiltonian cycle problem instances\",\n        \"Brave new world\",\n        \"On the complexity of vlsi implementations and graph representations of boolean functions with application to integer multiplication\",\n        \"Efficient sat-based bounded model checking for software verification\",\n        \"Complexity theory, lecture 6: Nondeterministic polynomial time\",\n        \"Evidence for a satisfiability threshold for random 3CNF formulas\",\n        \"Critical behavior in the satisfiability of random boolean expressions\",\n        \"Easy problems are sometimes hard\",\n        \"The hardest constraint problems: A double phase transition\",\n        \"Refining the phase transition in combinatorial search\",\n        \"The tsp phase transition\",\n        \"Computers and intractability\",\n        \"The millennium grand challenge in mathematics\",\n        \"On the evolution of random graphs\",\n        \"Hamiltonian circuits in random graphs\",\n        \"Limit distribution for the existence of Hamiltonian cycles in a random graph\",\n        \"Systematic generation of Hamiltonian circuits\",\n        \"A dynamic programming approach to sequencing problems\",\n        \"Dynamic programming treatment of the travelling salesman problem\",\n        \"Algorithm 595: An enumerative algorithm for finding Hamiltonian circuits in a directed graph\",\n        \"A search procedure for Hamilton paths and circuits\",\n        \"The gn, m phase transition is not hard for the Hamiltonian cycle problem\",\n        \"An algorithm for finding Hamilton paths and cycles in random graphs\",\n        \"Determinant sums for undirected Hamiltonicity\",\n        \"An improved exact algorithm for cubic graph tsp\",\n        \"Graph algorithms\",\n        \"On the fine structure of large search spaces\",\n        \"Source code\",\n        \"Depth-first search and linear graph algorithms\",\n        \"Recreations mathematiques, four volumes: Gautheir–villars\",\n        \"Almost squares in almost squares: solving the final instance\",\n        \"The algorithm design manual\",\n        \"An introduction to Kolmogorov complexity and its applications\",\n        \"Nature-inspired optimisation approaches and the new plant propagation algorithm\",\n        \"Parameter sensitivity patterns in the plant propagation algorithm.\",\n        \"Plant propagation parameterization: Offspring & population size\",\n        \"Paintings, polygons and plant propagation\",\n        \"Fireworks algorithm versus plant propagation algorithm\",\n        \"The plant propagation algorithm on timetables: First results\",\n        \"Paintings-from-polygons: simulated annealing\",\n        \"Optimization by simulated annealing\",\n        \"Benchmarking in optimization: Best practice and open issues\",\n        \"A Dynamic Parameter for the Plant Propagation Algorithm\",\n        \"Parameter control for the Plant Propagation Algorithm\",\n        \"Subset Sum and the Distribution of Information.\"\n    ],\n    \"reasoning\": \"Selected these 52 references because they represent foundational work and recent advances in Backtracking (the) Algorithms on the Hamiltonian Cycle Problem, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}