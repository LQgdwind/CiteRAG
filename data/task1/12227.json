{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 60 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: On the Compression of Language Models for Code: An Empirical Study on CodeBERT\n\nPaper Abstract: Abstract Language models have proven successful across a wide range of software engineering tasks, but their significant computational costs often hinder their practical adoption. To address this challenge, researchers have begun applying various compression strategies to improve the efficiency of language models for code. These strategies aim to optimize inference latency and memory usage, though often at the cost of reduced model effectiveness. However, there is still a significant gap in understanding how these strategies influence the efficiency and effectiveness of language models for code. Here, we empirically investigate the impact of three well-known compression strategies – knowledge distillation, quantization, and pruning – across three different classes of software engineering tasks: vulnerability detection, code summarization, and code search. Our findings reveal that the impact of these strategies varies greatly depending on the task and the specific compression method employed. Practitioners and researchers can use these insights to make informed decisions when selecting the most appropriate compression strategy, balancing both efficiency and effectiveness based on their specific needs.\n\n{retrieved_text}\n\nGenerate exactly 60 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 60\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Vulnerability detection with code language models: How far are we?\",\n        \"When neural code completion models size up the situation: Attaining cheaper and faster completion through dynamic model inference\",\n        \"Code search is all you need? improving code suggestions with code search\",\n        \"Large language models for software engineering: A systematic literature review\",\n        \"Green ai\",\n        \"Distilling the knowledge in a neural network\",\n        \"Q8bert: Quantized 8bit bert\",\n        \"Movement pruning: adaptive sparsity by fine-tuning\",\n        \"Compressing pre-trained models of code into 3 mb\",\n        \"Greening large language models of code\",\n        \"Towards greener yet powerful code generation via quantization: An empirical study\",\n        \"CodeBERT: A pre-trained model for programming and natural languages\",\n        \"On the compression of language models for code: An empirical study on codebert\",\n        \"Attention is all you need\",\n        \"Language models are unsupervised multitask learners\",\n        \"Exploring the limits of transfer learning with a unified text-to-text transformer\",\n        \"Openai codex\",\n        \"CodeT5+: Open code large language models for code understanding and generation\",\n        \"Evaluating large language models trained on code\",\n        \"Assemble foundation models for automatic code summarization\",\n        \"Assessing generalizability of codebert\",\n        \"Distilbert, a distilled version of bert: smaller, faster, cheaper and lighter\",\n        \"Optimal brain damage\",\n        \"Pruning filters for efficient convnets\",\n        \"Dynamic network surgery for efficient dnns\",\n        \"Pruning convolutional neural networks for resource efficient inference\",\n        \"The state of sparsity in deep neural networks\",\n        \"Graphcodebert: Pre-training code representations with data flow\",\n        \"Software defect prediction via transformer\",\n        \"Transˆ 3: A transformer-based framework for unifying code summarization and code search\",\n        \"A coefficient of agreement as a measure of thematic classification accuracy.\",\n        \"Metrics for evaluating 3D medical image segmentation: analysis, selection, and tool\",\n        \"The advantages of the matthews correlation coefficient (mcc) over f1 score and accuracy in binary classification evaluation\",\n        \"Bleu: a Method for Automatic Evaluation of Machine Translation\",\n        \"Bertscore: Evaluating text generation with bert\",\n        \"Evaluating Code Summarization Techniques: A New Metric and an Empirical Characterization\",\n        \"Expected reciprocal rank for graded relevance\",\n        \"Devign: Effective vulnerability identification by learning comprehensive program semantics via graph neural networks\",\n        \"Codesearchnet challenge: Evaluating the state of semantic code search\",\n        \"Codexglue: A machine learning benchmark dataset for code understanding and generation\",\n        \"Compressing BERT: Studying the Effects of Weight Pruning on Transfer Learning\",\n        \"Pruning filters with l1-norm and capped l1-norm for cnn compression\",\n        \"Ai-driven java performance testing: Balancing result quality with testing time\",\n        \"Automated generation and evaluation of jmh microbenchmark suites from unit tests\",\n        \"Faster or slower? performance mystery of python idioms unveiled with empirical evidence\",\n        \"Dynamically reconfiguring software microbenchmarks: Reducing execution time without sacrificing result quality\",\n        \"Rigorous benchmarking in reasonable time\",\n        \"Quantifying performance changes with effect size confidence intervals\",\n        \"Wilcoxon signed-rank test\",\n        \"How software refactoring impacts execution time\",\n        \"Searching for a needle in a haystack: Predicting security vulnerabilities for windows vista\",\n        \"The importance of accounting for real-world labelling when predicting software vulnerabilities\",\n        \"On the use of evaluation measures for defect prediction studies\",\n        \"Source Code Summarization in the Era of Large Language Models\",\n        \"Survey of code search based on deep learning\",\n        \"A survey of quantization methods for efficient neural network inference\",\n        \"Up or down? adaptive rounding for post-training quantization\",\n        \"Compressing large-scale transformer-based models: A case study on bert\",\n        \"Rethinking the value of network pruning\",\n        \"Taming performance variability\"\n    ],\n    \"reasoning\": \"Selected these 60 references because they represent foundational work and recent advances in On the Compression of Language Models for Code: An Empirical Study on CodeBERT, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}