{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 44 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: A Runtime-Adaptive Transformer Neural Network Accelerator on FPGAs\n\nPaper Abstract: Abstract. Transformer neural networks (TNN) excel in natural language processing (NLP), machine translation, and computer vision (CV) without relying on recurrent or convolutional layers. However, they have high computational and memory demands, particularly on resource-constrained devices like FPGAs. Moreover, transformer models vary in processing time across applications, requiring custom models with specific parameters. Designing custom accelerators for each model is complex and time-intensive. Some custom accelerators exist with no runtime adaptability, and they often rely on sparse matrices to reduce latency. However, hardware designs become more challenging due to the need for application-specific sparsity patterns. This paper introduces ADAPTOR, a runtime-adaptive accelerator for dense matrix computations in transformer encoders and decoders on FPGAs. ADAPTOR enhances the utilization of processing elements and on-chip memory, enhancing parallelism and reducing latency. It incorporates efficient matrix tiling to distribute resources across FPGA platforms and is fully quantized for computational efficiency and portability. Evaluations on Xilinx Alveo U55C data center cards and embedded platforms like VC707 and ZCU102 show that our design is 1.2×\\times and 2.87×\\times more power efficient than the NVIDIA K80 GPU and the i7-8700K CPU respectively. Additionally, it achieves a speedup of 1.7 to 2.25×\\times compared to some state-of-the-art FPGA-based accelerators.\n\n{retrieved_text}\n\nGenerate exactly 44 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 44\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Language models are unsupervised multitask learners\",\n        \"Alignment-enhanced transformer for constraining nmt with pre-specified translations\",\n        \"ViA: A Novel Vision-Transformer Accelerator Based on FPGA\",\n        \"On the properties of neural machine translation: Encoder–decoder approaches\",\n        \"Long short-term memory\",\n        \"An image is worth 16x16 words: Transformers for image recognition at scale\",\n        \"On the relationship between self-attention and convolutional layers\",\n        \"Attention is all you need\",\n        \"Pretrained transformers for text ranking: Bert and beyond\",\n        \"Bert: Pre-training of deep bidirectional transformers for language understanding\",\n        \"Albert: A lite bert for self-supervised learning of language representations\",\n        \"Structbert: Incorporating language structures into pre-training for deep language understanding\",\n        \"A length adaptive algorithm-hardware co-design of transformer on FPGA through sparse attention and dynamic pipelining\",\n        \"ELSA: Hardware-Software Co-design for Efficient, Lightweight Self-Attention Mechanism in Neural Networks\",\n        \"Know what you don’t know: Unanswerable questions for SQuAD\",\n        \"Flightllm: Efficient large language model inference with a complete mapping flow on fpgas\",\n        \"Compressing large-scale transformer-based models: A case study on bert\",\n        \"FTRANS: energy-efficient acceleration of transformers using FPGA\",\n        \"Accommodating Transformer onto FPGA: Coupling the Balanced Model Compression and FPGA-Implementation Optimization\",\n        \"[dl] a survey of fpga-based neural network inference accelerators\",\n        \"Hardware-Aware Optimizations for Deep Learning Inference on Edge Devices\",\n        \"Hardware Accelerator for Multi-Head Attention and Position-Wise Feed-Forward in the Transformer\",\n        \"A3: Accelerating attention mechanisms in neural networks with approximation\",\n        \"Algorithm-hardware Co-design of Attention Mechanism on FPGA Devices\",\n        \"A fast and flexible fpga-based accelerator for natural language processing neural networks\",\n        \"Accelerating Transformer-based Deep Learning Models on FPGAs using Column Balanced Block Pruning\",\n        \"Ultra Fast Transformers on FPGAs for Particle Physics Experiments.\",\n        \"Accelerating Transformer Neural Networks on FPGAs for High Energy Physics Experiments\",\n        \"High-Frequency Systolic Array-Based Transformer Accelerator on Field Programmable Gate Arrays\",\n        \"EFA-Trans: An Efficient and Flexible Acceleration Architecture for Transformers\",\n        \"LTrans-OPU: A Low-Latency FPGA-Based Overlay Processor for Transformer Networks.\",\n        \"Accelerating lstm-based high-rate dynamic system models\",\n        \"Accelerating Framework of Transformer by Hardware Design and Model Compression Co-Optimization\",\n        \"Scalehls: A new scalable high-level synthesis framework on multi-level intermediate representation\",\n        \"BERT — huggingface.co\",\n        \"AMD Technical Information Portal — docs.amd.com\",\n        \"Introduction • DMA/Bridge Subsystem for PCI Express Product Guide (PG195) • Reader • Documentation Portal.\",\n        \"Programmers — digilent.com\",\n        \"Performance Modeling and Directives Optimization for High-Level Synthesis on FPGA\",\n        \"HPTA: A High Performance Transformer Accelerator Based on FPGA.\",\n        \"Hardware Acceleration of Fully Quantized BERT for Efficient Natural Language Processing\",\n        \"An Algorithm-Hardware Co-Optimized Framework for Accelerating N:M Sparse Transformers\",\n        \"Hardware Acceleration of Transformer Networks using FPGAs\",\n        \"TRAC: Compilation-Based Design of Transformer Accelerators for FPGAs\"\n    ],\n    \"reasoning\": \"Selected these 44 references because they represent foundational work and recent advances in A Runtime-Adaptive Transformer Neural Network Accelerator on FPGAs, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}