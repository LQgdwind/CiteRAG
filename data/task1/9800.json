{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 56 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Massively Parallel Continuous Local Search for Hybrid SAT Solving on GPUs\n\nPaper Abstract: Abstract Although state-of-the-art (SOTA) SAT solvers based on conflict-driven clause learning (CDCL) have achieved remarkable engineering success, their sequential nature limits the parallelism that may be extracted for acceleration on platforms such as the graphics processing unit (GPU). In this work, we propose FastFourierSAT, a highly parallel hybrid SAT solver based on gradient-driven continuous local search (CLS). This is realized by a novel parallel algorithm inspired by the Fast Fourier Transform (FFT)-based convolution for computing the elementary symmetric polynomials (ESPs), which is the major computational task in previous CLS methods. The complexity of our algorithm matches the best previous result. Furthermore, the substantial parallelism inherent in our algorithm can leverage the GPU for acceleration, demonstrating significant improvement over the previous CLS approaches. We also propose to incorporate the restart heuristics in CLS to improve search efficiency. We compare our approach with the SOTA parallel SAT solvers on several benchmarks. Our results show that FastFourierSAT computes the gradient 100+ times faster than previous prototypes implemented on CPU. Moreover, FastFourierSAT solves most instances and demonstrates promising performance on larger-size instances.\n\n{retrieved_text}\n\nGenerate exactly 56 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 56\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Optilog: A framework for sat-based systems\",\n        \"Lazy clause exchange policy for parallel SAT solvers\",\n        \"Automatic differentiation in machine learning: a survey\",\n        \"A fast iterative shrinkage-thresholding algorithm for linear inverse problems\",\n        \"CaDiCaL, Lingeling, Plingeling, Treengeling, YalSAT Entering the SAT Competition 2017\",\n        \"Efficient and modular implicit differentiation\",\n        \"JAX: composable transformations of Python+NumPy programs.\",\n        \"Binary decision diagrams and beyond: Enabling technologies for formal verification\",\n        \"Old techniques in new ways: Clause weighting, unit propagation and hybridization for maximum satisfiability\",\n        \"Deep cooperation of cdcl and local search for sat\",\n        \"Kissat mab: Combining vsids and chb through multi-armed bandit\",\n        \"NuWLS-c: Solver Description\",\n        \"NuWLS: Improving Local Search for (Weighted) Partial MaxSAT by New Weighting Techniques\",\n        \"The minimal disagreement parity problem as a hard satisfiability problem\",\n        \"Cud@ sat: Sat solving on gpus\",\n        \"A machine program for theorem-proving\",\n        \"A computing procedure for quantification theory\",\n        \"Translating pseudo-boolean constraints into SAT\",\n        \"Optimization hardness as transient chaos in an analog approach to constraint satisfaction\",\n        \"A Scalable Shannon Entropy Estimator\",\n        \"Evaluating derivatives: principles and techniques of algorithmic differentiation\",\n        \"ManySAT: a parallel SAT solver\",\n        \"Seven challenges in parallel SAT solving\",\n        \"Systematic vs. local search for SAT\",\n        \"SATLIB: An online resource for research on SAT\",\n        \"Non-convex optimization for machine learning\",\n        \"Low-rank matrix completion using alternating minimization\",\n        \"Cliques, coloring, and satisfiability: second DIMACS implementation challenge, October 11-13, 1993, volume 26\",\n        \"In-datacenter performance analysis of a tensor processing unit\",\n        \"The implicit function theorem: history, theory, and applications\",\n        \"FourierSAT: A Fourier expansion-based algebraic framework for solving hybrid boolean constraints\",\n        \"On continuous local BDD-based search for hybrid SAT solving\",\n        \"PaInleSS: a framework for parallel SAT solving\",\n        \"Satlike-c: Solver description\",\n        \"Integrating equivalency reasoning into Davis-Putnam procedure\",\n        \"Cadical_SCAVEL and its friends at the SAT Competition 2021\",\n        \"Exponential recency weighted average branching heuristic for SAT solvers\",\n        \"Maple-comsps lrb vsids and maplecomsps chb vsids\",\n        \"GRASP: A search algorithm for propositional satisfiability\",\n        \"An overview of parallel SAT solving\",\n        \"A new method for solving hard satisfiability problems\",\n        \"Tt-open-wbo-inc-20: an anytime maxsat solver entering mse’20\",\n        \"A regularized framework for sparse and structured neural attention\",\n        \"Analysis of boolean functions\",\n        \"SAT solving with GPU accelerated inprocessing\",\n        \"Proximal algorithms\",\n        \"Belief updating by network propagation\",\n        \"Leveraging GPUs for Effective Clause Sharing in Parallel SAT Solving\",\n        \"Representations of discrete functions\",\n        \"Probability propagation\",\n        \"Efficient spectral coefficient calculation using circuit output probabilities\",\n        \"Solving Quantum-Inspired Perfect Matching Problems via Tutte’s Theorem-Based Hybrid Boolean Constraints\",\n        \"FastPass: Fast Pin Access Analysis with Incremental SAT Solving\",\n        \"Scan: a structural clustering algorithm for networks\",\n        \"PSATO: a distributed propositional prover and its application to quasigroup problems\",\n        \"ParKissat: Random Shuffle Based and Pre-processing Extended Parallel Solvers with Clause Sharing\"\n    ],\n    \"reasoning\": \"Selected these 56 references because they represent foundational work and recent advances in Massively Parallel Continuous Local Search for Hybrid SAT Solving on GPUs, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}