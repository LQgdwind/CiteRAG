{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 57 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Taskflow: A Lightweight Parallel and Heterogeneous Task Graph Computing System\n\nPaper Abstract: Abstract Taskflow aims to streamline the building of parallel and heterogeneous applications using a lightweight task graph-based approach. Taskflow introduces an expressive task graph programming model to assist developers in the implementation of parallel and heterogeneous decomposition strategies on a heterogeneous computing platform. Our programming model distinguishes itself as a very general class of task graph parallelism with in-graph control flow to enable end-to-end parallel optimization. To support our model with high performance, we design an efficient system runtime that solves many of the new scheduling challenges arising out of our models and optimizes the performance across latency, energy efficiency, and throughput. We have demonstrated the promising performance of Taskflow in real-world applications. As an example, Taskflow solves a large-scale machine learning workload up to 29% faster, 1.5×\\times less memory, and 1.9×\\times higher throughput than the industrial system, oneTBB, on a machine of 40 CPUs and 4 GPUs. We have opened the source of Taskflow and deployed it to large numbers of users in the open-source community.\n\n{retrieved_text}\n\nGenerate exactly 57 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 57\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"DARPA Intelligent Design of Electronic Assets (IDEA) Program\",\n        \"Intel oneTBB\",\n        \"Linux Kernel Profiler\",\n        \"Nvidia CUDA Graph\",\n        \"OmpSs\",\n        \"OpenACC\",\n        \"OpenMP\",\n        \"SLOCCount\",\n        \"SYCL\",\n        \"Taskflow github\",\n        \"Two-phase Commit Protocol\",\n        \"Nabbit: Executing task graphs using work-stealing\",\n        \"Adaptive Work Stealing with Parallelism Feedback\",\n        \"Toward an Open-Source Digital Flow: First Learnings from the OpenROAD Project\",\n        \"Fastflow: High-Level and Efficient Streaming on Multicore, chapter 13, pages 261–280\",\n        \"Thread Scheduling for Multiprogrammed Multiprocessors\",\n        \"StarPU: A Unified Platform for Task Scheduling on Heterogeneous Multicore Architectures\",\n        \"Legion: Expressing locality and independence with logical regions\",\n        \"A GPU Implementation of the Sparse Deep Neural Network Graph Challenge\",\n        \"PaRSEC: Exploiting Heterogeneity to Enhance Scalability\",\n        \"LAWS: Locality-Aware Work-Stealing for Multi-Socket Multi-Core Architectures\",\n        \"Scalable Work Stealing\",\n        \"BWS: Balanced Work Stealing for Time-sharing Multicores\",\n        \"Kokkos: Enabling manycore performance portability through polymorphic memory access patterns\",\n        \"XKaapi: A Runtime System for Data-Flow Task Programming on Heterogeneous Architectures\",\n        \"GPU-accelerated Pash-based Timing Analysis\",\n        \"A Scalable Locality-Aware Adaptive Work-Stealing Scheduler for Multi-Core Task Parallelism\",\n        \"GPU-accelerated Static Timing Analysis\",\n        \"TAU 2015 Contest on Incremental Timing Analysis\",\n        \"OpenTimer 2.0: A New Parallel Incremental Timing Analysis Engine\",\n        \"Taskflow: A General-purpose Parallel and Heterogeneous Task Programming System\",\n        \"Cpp-taskflow: A general-purpose parallel task programming system at scale\",\n        \"HPX: A Task Based Programming Model in a Global Address Space\",\n        \"Charm++: A Portable Concurrent Object Oriented System Based on C++\",\n        \"Sparse deep neural network graph challenge\",\n        \"Correct and Efficient Work-stealing for Weak Memory Models\",\n        \"Early Evaluation of Directive-Based GPU Programming Models for Productive Exascale Computing\",\n        \"OpenMPC: Extended OpenMP Programming and Tuning for GPUs\",\n        \"The Design of a Task Parallel Library\",\n        \"The Cilk++ concurrency platform\",\n        \"Design and Analysis of Scheduling Strategies for multi-CPU and multi-GPU Architectures\",\n        \"An efficient work-stealing scheduler for task dependency graph\",\n        \"ABCDPlace: Accelerated Batch-based Concurrent Detailed Placement on Multi-threaded CPUs and GPUs\",\n        \"Can Parallel Programming Revolutionize EDA Tools?\",\n        \"Device placement optimization with reinforcement learning\",\n        \"The best of both worlds: Combining cuda graph with an image processing dsl\",\n        \"Energy-efficient Work-stealing Language Runtimes\",\n        \"Lifeline-Based Global Load Balancing\",\n        \"Almost Deterministic Work Stealing\",\n        \"Whippletree: Task-based scheduling of dynamic workloads on the gpu\",\n        \"On the efficiency of localized work stealing\",\n        \"A Work-stealing Scheduler for X10’s Task Parallelism with Suspension\",\n        \"Simulated Annealing for VLSI Design\",\n        \"MAGICAL: Toward Fully Automated Analog IC Layout Leveraging Human and Machine Intelligence: Invited Paper\",\n        \"Openmp to cuda graphs: A compiler-based transformation to enhance the programmability of nvidia devices\",\n        \"Dynamic Control Flow in Large-Scale Machine Learning\",\n        \"Bandwidth and Locality Aware Task-Stealing for Manycore Architectures with Bandwidth-Asymmetric Memory\"\n    ],\n    \"reasoning\": \"Selected these 57 references because they represent foundational work and recent advances in Taskflow: A Lightweight Parallel and Heterogeneous Task Graph Computing System, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}