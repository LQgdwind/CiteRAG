{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 45 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Knowledge Transfer for Pseudo-code Generation from Low Resource Programming Language\n\nPaper Abstract: Abstract Generation of pseudo-code descriptions of legacy source code for software maintenance is a manually intensive task. Recent encoder-decoder language models have shown promise for automating pseudo-code generation for high resource programming languages such as C++, but are heavily reliant on the availability of a large code-pseudocode corpus. Soliciting such pseudocode annotations for codes written in legacy programming languages (PL) is a time consuming and costly affair requiring a thorough understanding of the source PL. In this paper, we focus on transferring the knowledge acquired by the code-to-pseudocode neural model trained on a high resource PL (C++) using parallel code-pseudocode data. We aim to transfer this knowledge to a legacy PL (C) with no PL-pseudocode parallel data for training. To achieve this, we utilize an Iterative Back Translation (IBT) approach with a novel test-cases based filtration strategy, to adapt the trained C++-to-pseudocode model to C-to-pseudocode model. We observe an improvement of 23.27% in the success rate of the generated C codes through back translation, over the successive IBT iteration, illustrating the efficacy of our approach.\n\n{retrieved_text}\n\nGenerate exactly 45 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 45\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Design recovery for maintenance and reuse\",\n        \"Towards pattern-based design recovery\",\n        \"Pattern-based design recovery of java software\",\n        \"Learning to generate pseudo-code from source code using statistical machine translation (t)\",\n        \"Generation of pseudo code from the python source code using rule-based machine translation\",\n        \"Pseudogen: A tool to automatically generate pseudo-code from source code\",\n        \"Generating pseudo-code from source code using deep learning\",\n        \"Fine-grained pseudo-code generation method via code feature extraction and transformer\",\n        \"Deeppseudo: Deep pseudo-code generation via transformer and code feature extraction\",\n        \"Retrieval-based transformer pseudocode generation\",\n        \"Iterative back-translation for neural machine translation\",\n        \"Spoc: Search-based pseudocode to code\",\n        \"Composed fine-tuning: Freezing pre-trained denoising autoencoders for improved generalization\",\n        \"Incremental sampling without replacement for sequence models\",\n        \"Graph-based, self-supervised program repair from diagnostic feedback\",\n        \"Pseudocode to code translation using transformers\",\n        \"Semantic scaffolds for pseudocode-to-code generation\",\n        \"Project codenet: A large-scale ai for code dataset for learning a diversity of coding tasks\",\n        \"Unified pre-training for program understanding and generation\",\n        \"Codet5: Identifier-aware unified pre-trained encoder-decoder models for code understanding and generation\",\n        \"Cotext: Multi-task learning with code-text transformer\",\n        \"Prophetnet-x: Large-scale pre-training models for english, chinese, multi-lingual, dialog, and code generation\",\n        \"Codetrans: Towards cracking the language of siliconâ€™s code through self-supervised deep learning and high performance computing\",\n        \"Codebert: A pre-trained model for programming and natural languages\",\n        \"Unixcoder: Unified cross-modal pre-training for code representation\",\n        \"Deep code comment generation\",\n        \"code2seq: Generating sequences from structured representations of code\",\n        \"A neural model for generating natural language summaries of program subroutines\",\n        \"A transformer-based approach for source code summarization\",\n        \"Code summarization with structure-induced transformer\",\n        \"Language-agnostic representation learning of source code from structure and context\",\n        \"Retrieval-based neural source code summarization\",\n        \"Retrieval-augmented generation for code summarization via hybrid gnn\",\n        \"Improved code summarization via a graph neural network\",\n        \"Learning to represent programs with heterogeneous graphs\",\n        \"Learning sequential and structural information for source code summarization\",\n        \"Cast: Enhancing code summarization with hierarchical splitting and reconstruction of abstract syntax trees\",\n        \"Summarizing source code with transferred api knowledge\",\n        \"Improving automatic source code summarization via deep reinforcement learning\",\n        \"Codesearchnet challenge: Evaluating the state of semantic code search\",\n        \"Codexglue: A machine learning benchmark dataset for code understanding and generation\",\n        \"Coarse-to-fine decoding for neural semantic parsing\",\n        \"Seq2sql: Generating structured queries from natural language using reinforcement learning\",\n        \"Mapping language to code in programmatic context\",\n        \"Abstract syntax networks for code generation and semantic parsing\"\n    ],\n    \"reasoning\": \"Selected these 45 references because they represent foundational work and recent advances in Knowledge Transfer for Pseudo-code Generation from Low Resource Programming Language, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}