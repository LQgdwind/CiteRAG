{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 49 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: A+ Indexes: Tunable and Space-Efficient Adjacency Lists in Graph Database Management Systems\n\nPaper Abstract: Abstract Graph database management systems (GDBMSs) are highly optimized to perform fast traversals, i.e., joins of vertices with their neighbours, by indexing the neighbourhoods of vertices in adjacency lists. However, existing GDBMSs have system-specific and fixed adjacency list structures, which makes each system efficient on only a fixed set of workloads. We describe a new tunable indexing subsystem for GDBMSs, we call A+ indexes, with materialized view support. The subsystem consists of two types of indexes: (i) vertex-partitioned indexes that partition 1-hop materialized views into adjacency lists on either the source or destination vertex IDs; and (ii) edge-partitioned indexes that partition 2-hop views into adjacency lists on one of the edge IDs. As in existing GDBMSs, a system by default requires one forward and one backward vertex-partitioned index, which we call the primary A+ index. Users can tune the primary index or secondary indexes by adding nested partitioning and sorting criteria. Our secondary indexes are space-efficient and use a technique we call offset lists. Our indexing subsystem allows a wider range of applications to benefit from GDBMSs’ fast join capabilities. We demonstrate the tunability and space efficiency of A+ indexes through extensive experiments on three workloads.\n\n{retrieved_text}\n\nGenerate exactly 49 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 49\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Neo4j\",\n        \"JanusGraph\",\n        \"TigerGraph\",\n        \"Optimizing Subgraph Queries by Combining Binary and Worst-Case Optimal Joins\",\n        \"Graphflow: An Active Graph Database\",\n        \"Neo4j Property Graph Model\",\n        \"The Ubiquity of Large Graphs and Surprising Challenges of Graph Processing: Extended Survey\",\n        \"Querying Graphs\",\n        \"Skew strikes back: New developments in the theory of join algorithms\",\n        \"A+ indexes: Tunable and space-efficient adjacency lists in graph database management systems\",\n        \"openCypher\",\n        \"EmptyHeaded: A Relational Engine for Graph Processing\",\n        \"Partially materialized views\",\n        \"Answering queries using views: A survey\",\n        \"Optimizing queries with materialized views\",\n        \"Iterative dynamic programming: A new class of query optimization algorithms\",\n        \"Design of the graphblas api for c\",\n        \"Optimizing queries using materialized views: A practical, scalable solution\",\n        \"Principles of Database and Knowledge-Base Systems, Vol. I\",\n        \"Distributed Evaluation of Subgraph Queries Using Worst-case Optimal and Low-Memory Dataflows\",\n        \"Autoadmin “what-if” index analysis utility\",\n        \"An Efficient Cost-Driven Index Selection Tool for Microsoft SQL Server\",\n        \"Ai meets ai: Leveraging query executions to improve index recommendations\",\n        \"Automated selection of materialized views and indexes in sql databases\",\n        \"Selection of views to materialize in a data warehouse\",\n        \"Real-time Twitter Recommendation: Online Motif Detection in Large Dynamic Graphs\",\n        \"Efficient Subgraph Matching by Postponing Cartesian Products\",\n        \"Real-Time Constrained Cycle Detection in Large Dynamic Graphs\",\n        \"On views and xml\",\n        \"Selecting materialized views for rdf data\",\n        \"Materialized View-Based Processing of RDF Queries\",\n        \"View selection in semantic web databases\",\n        \"Answering pattern queries using views\",\n        \"Kaskade: Graph views for efficient graph analytics\",\n        \"The Combinatorial BLAS: Design, Implementation, and Applications\",\n        \"Pregel: A System for Large-Scale Graph Processing\",\n        \"Ligra: A Lightweight Graph Processing Framework for Shared Memory\",\n        \"Making Caches Work for Graph Analytics\",\n        \"RDF-3X: A RISC-style Engine for RDF\",\n        \"Hexastore: Sextuple Indexing for Semantic Web Data Management\",\n        \"gStore: A Graph-Based SPARQL Query Engine\",\n        \"Dataguides: Enabling query formulation and optimization in semistructured databases\",\n        \"A fast index for semistructured data\",\n        \"Index structures for path expressions\",\n        \"Exploiting local similarity for indexing paths in graph-structured data\",\n        \"Investigations on path indexing for graph databases\",\n        \"Fast Graph Pattern Matching\",\n        \"Scalable distributed subgraph enumeration\",\n        \"Edgar f. (“ted”) codd turing award lecture\"\n    ],\n    \"reasoning\": \"Selected these 49 references because they represent foundational work and recent advances in A+ Indexes: Tunable and Space-Efficient Adjacency Lists in Graph Database Management Systems, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}