{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 47 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: NeuRes: Learning Proofs of Propositional Satisfiability\n\nPaper Abstract: Abstract We introduce NeuRes, a neuro-symbolic proof-based SAT solver. Unlike other neural SAT solving methods, NeuRes is capable of proving unsatisfiability as opposed to merely predicting it. By design, NeuRes operates in a certificate-driven fashion by employing propositional resolution to prove unsatisfiability and to accelerate the process of finding satisfying truth assignments in case of unsat and sat formulas, respectively. To realize this, we propose a novel architecture that adapts elements from Graph Neural Networks and Pointer Networks to autoregressively select pairs of nodes from a dynamic graph structure, which is essential to the generation of resolution proofs. Our model is trained and evaluated on a dataset of teacher proofs and truth assignments that we compiled with the same random formula distribution used by NeuroSAT. In our experiments, we show that NeuRes solves more test formulas than NeuroSAT by a rather wide margin on different distributions while being much more data-efficient. Furthermore, we show that NeuRes is capable of largely shortening teacher proofs by notable proportions. We use this feature to devise a bootstrapped training procedure that manages to reduce a dataset of proofs generated by an advanced solver by âˆ¼similar-to\\sim23%percent2323\\% after training on it with no extra guidance.\n\n{retrieved_text}\n\nGenerate exactly 47 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 47\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Learning to solve circuit-sat: An unsupervised differentiable approach\",\n        \"Proceedings of SAT Competition 2013: Solver and Benchmark Descriptions, volume B-2013-1 of Department of Computer Science Series of Publications B\",\n        \"Learning to solve SMT formulas\",\n        \"Proceedings of SAT Competition 2023: Solver, Benchmark and Proof Checker Descriptions\",\n        \"Holist: An environment for machine learning of higher order logic theorem proving\",\n        \"Neural combinatorial optimization with reinforcement learning\",\n        \"Booleforce sat solver\",\n        \"Automated testing and debugging of SAT and QBF solvers\",\n        \"Predicting propositional satisfiability via end-to-end learning\",\n        \"Combinatorial optimization and reasoning with graph neural networks\",\n        \"Bounded model checking using satisfiability solving\",\n        \"The complexity of theorem-proving procedures\",\n        \"Iterative circuit repair against formal specifications\",\n        \"Industrial-strength certified SAT solving through verified SAT proof checking\",\n        \"A computing procedure for quantification theory\",\n        \"Satisfiability modulo theories: introduction and applications\",\n        \"Baldur: Whole-proof generation and repair with large language models\",\n        \"Verification of proofs of unsatisfiability for CNF formulas\",\n        \"Teaching temporal logics to neural networks\",\n        \"Bridging the gap between easy generation and efficient verification of unsatisfiability proofs\",\n        \"Proofs of unsatisfiability\",\n        \"The science of brute force\",\n        \"Deepmath - deep sequence models for premise selection\",\n        \"Inprocessing rules\",\n        \"Planning as satisfiability\",\n        \"Learning combinatorial optimization algorithms over graphs\",\n        \"Adam: A method for stochastic optimization\",\n        \"Attention, learn to solve routing problems!\",\n        \"Efficient verified (UN)SAT certificate checking\",\n        \"Learning heuristics for quantified boolean formulas through reinforcement learning\",\n        \"Conflict-driven clause learning SAT solvers\",\n        \"Magnushammer: A transformer-based approach to premise selection\",\n        \"Goal-aware neural SAT solver\",\n        \"Graph representations for higher-order logic and theorem proving\",\n        \"Understanding the exploding gradient problem\",\n        \"Generative language modeling for automated theorem proving\",\n        \"Neural circuit synthesis from specification patterns\",\n        \"Guiding high-performance SAT solvers with unsat-core predictions\",\n        \"Learning a SAT solver from single-bit supervision\",\n        \"Neurogift: Using a machine learning based sat solver for cryptanalysis\",\n        \"On the complexity of derivation in propositional calculus\",\n        \"Pointer networks\",\n        \"Boolean satisfiability solvers and their applications in model checking\",\n        \"Premise selection for theorem proving by deep graph embedding\",\n        \"Drat-trim: Efficient checking and trimming using expressive clausal proofs\",\n        \"Learning to prove theorems via interacting with proof assistants\",\n        \"Validating SAT solvers using an independent resolution-based checker: Practical implementations and other applications\"\n    ],\n    \"reasoning\": \"Selected these 47 references because they represent foundational work and recent advances in NeuRes: Learning Proofs of Propositional Satisfiability, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}