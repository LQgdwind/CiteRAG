{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 51 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Macaw: A Machine Code Toolbox for the Busy Binary Analyst\n\nPaper Abstract: Abstract. When attempting to understand the behavior of an executable, a binary analyst can make use of many different techniques. These include program slicing, dynamic instrumentation, binary-level rewriting, symbolic execution, and formal verification, all of which can uncover insights into how a piece of machine code behaves. As a result, there is no one-size-fits-all binary analysis tool, so a binary analysis researcher will often combine several different tools. Sometimes, a researcher will even need to design new tools to study problems that existing frameworks are not well equipped to handle. Designing such tools from complete scratch is rarely time- or cost-effective, however, given the scale and complexity of modern instruction set architectures. We present Macaw, a modular framework that makes it possible to rapidly build reliable binary analysis tools across a range of use cases. Over a decade of development, we have used Macaw to support an industrial research team in building tools for machine code–related tasks. As such, the name “Macaw” refers not just to the framework itself, but also a suite of tools that are built on top of the framework. We describe Macaw in depth and describe the different static and dynamic analyses that it performs, many of which are powered by an SMT-based symbolic execution engine. We put a particular focus on interoperability between machine code and higher-level languages, including binary lifting from x86 to LLVM, as well verifying the correctness of mixed C and assembly code.\n\n{retrieved_text}\n\nGenerate exactly 51 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 51\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Compilers: principles, techniques, and tools\",\n        \"Libre and Portable Reverse Engineering Framework\",\n        \"A Compiler-Level Intermediate Representation Based Binary Analysis and Rewriting System\",\n        \"Analyzing Memory Accesses in x86 Executables\",\n        \"Relational Verification Using Product Programs\",\n        \"Beyond 2-Safety: Asymmetric Product Programs for Relational Program Verification\",\n        \"Vale: Verifying High-Performance Cryptographic Assembly Code\",\n        \"Verified Transformations and Hoare Logic: Beautiful Proofs for Ugly Assembly Language\",\n        \"Verified cryptographic code for everybody\",\n        \"BAP: A Binary Analysis Platform\",\n        \"Dynamic Instrumentation of Production Systems\",\n        \"Unleashing Mayhem on Binary Code\",\n        \"Enabling Sophisticated Analyses of ×86 Binaries with RevGen\",\n        \"Dependently Typed Haskell in Industry (Experience Report)\",\n        \"Continuous Formal Verification of Amazon s2n\",\n        \"Operating System Protection through Program Evolution\",\n        \"Statistical Similarity of Binaries\",\n        \"Similarity of Binaries through Re-Optimization\",\n        \"rev.ng: a unified binary analysis framework to recover CFGs and function boundaries\",\n        \"McSema: Static Translation of X86 Instructions to LLVM\",\n        \"Constructing Semantic Models of Programs with the Software Analysis Workbench\",\n        \"Announcing the ‘blst’ BLS Verification Project\",\n        \"Weird Machines, Exploitability, and Provable Unexploitability\",\n        \"The IDA Pro Book: The Unofficial Guide to the World’s Most Popular Disassembler\",\n        \"Dependently Typed Programming with Singletons\",\n        \"A Verified, Efficient Embedding of a Verifiable Assembly Language\",\n        \"DTrace: Dynamic Tracing in Oracle Solaris, Mac OS X and FreeBSD (1st ed.)\",\n        \"Towards verified binary raising\",\n        \"Symbolic execution and program testing\",\n        \"State in Haskell\",\n        \"TIE: Principled Reverse Engineering of Types in Binary Programs\",\n        \"A Formal Semantics For P-Code\",\n        \"EverCrypt: A Fast, Verified, Cross-Platform Cryptographic Provider\",\n        \"Verified Low-Level Programming Embedded in F*\",\n        \"ESIL\",\n        \"Trustworthy specifications of ARM® v8-A and v8-M system level architecture\",\n        \"Hands-On Ghidra - A Tutorial about the Software Reverse Engineering Framework\",\n        \"Hex-Rays Microcode API vs. Obfuscating Compiler\",\n        \"Triton: Concolic execution framework\",\n        \"Type Checking with Open Type Functions\",\n        \"A Broad Comparative Evaluation of X86-64 Binary Rewriters\",\n        \"All You Ever Wanted to Know about Dynamic Taint Analysis and Forward Symbolic Execution (but Might Have Been Afraid to Ask)\",\n        \"Crux: Symbolic Execution Meets SMT-based Verification (Competition Contribution)\",\n        \"GRIFT: A richly-typed, deeply-embedded RISC-V semantics written in Haskell\",\n        \"SoK: (State of) The Art of War: Offensive Techniques in Binary Analysis\",\n        \"Synthesis of machine code from semantics\",\n        \"Driller: Augmenting fuzzing through selective symbolic execution.\",\n        \"Binary Ninja\",\n        \"Binary Ninja Intermediate Language: Overview\",\n        \"Binary symbolic execution with KLEE-Native\",\n        \"Giving Haskell a Promotion\"\n    ],\n    \"reasoning\": \"Selected these 51 references because they represent foundational work and recent advances in Macaw: A Machine Code Toolbox for the Busy Binary Analyst, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}