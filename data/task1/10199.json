{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 40 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: UBfuzz: Finding Bugs in Sanitizer Implementations\n\nPaper Abstract: Abstract. In this paper, we propose a testing framework for validating sanitizer implementations in compilers. Our core components are (1) a program generator specifically designed for producing programs containing undefined behavior (UB), and (2) a novel test oracle for sanitizer testing. The program generator employs Shadow Statement Insertion, a general and effective approach for introducing UB into a valid seed program. The generated UB programs are subsequently utilized for differential testing of multiple sanitizer implementations. Nevertheless, discrepant sanitizer reports may stem from either compiler optimization or sanitizer bugs. To accurately determine if a discrepancy is caused by sanitizer bugs, we introduce a new test oracle called crash-site mapping. We have incorporated our techniques into UBfuzz, a practical tool for testing sanitizers. Over a five-month testing period, UBfuzz successfully found 31 bugs in both GCC and LLVM sanitizers. These bugs reveal the serious false negative problems in sanitizers, where certain UBs in programs went unreported. This research paves the way for further investigation in this crucial area of study.\n\n{retrieved_text}\n\nGenerate exactly 40 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 40\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Practical memory checking with Dr. Memory\",\n        \"ISO/IEC 9899:2018, Programming languages — C\",\n        \"A Tool for Static C/C++ Code Analysis\",\n        \"OSS-fuzz - continuous fuzzing of open source software\",\n        \"UndefinedBehaviorSanitizer\",\n        \"An empirical study of oss-fuzz bugs\",\n        \"Bug Report\",\n        \"Don’t Look UB: Exposing Sanitizer-Eliding Compiler Optimizations\",\n        \"FuZZan: Efficient Sanitizer Metadata Design for Fuzzing.\",\n        \"Compiler validation via equivalence modulo inputs\",\n        \"Finding deep compiler bugs via guided stochastic program mutation\",\n        \"PartiSan: fast and flexible sanitization via run-time partitioning\",\n        \"Accelerating Fuzzing through Prefix-Guided Execution\",\n        \"Finding Unstable Code via Compiler-Driven Differential Testing\",\n        \"Debug information validation for optimized code\",\n        \"Random testing for C and C++ compilers with YARPGen\",\n        \"The art, science, and engineering of fuzzing: A survey\",\n        \"A Tool to Detect Bugs in Java and C/C++/Objective-c Code\",\n        \"Same Coverage, Less Bloat: Accelerating Binary-only Fuzzing with Coverage-preserving Coverage-guided Tracing\",\n        \"Valgrind: A Framework for Heavyweight Dynamic Binary Instrumentation\",\n        \"Juliet Test Suite for C/C++ 1.3\",\n        \"CWE-469: Use of Pointer Subtraction to Determine Size\",\n        \"Music: Mutation analysis tool with high configurability and extensibility\",\n        \"Continuous fuzzing with libfuzzer and addresssanitizer\",\n        \"Sanitize, fuzz, and harden your C++ code\",\n        \"AddressSanitizer: A Fast Address Sanity Checker\",\n        \"MemorySanitizer: fast detector of uninitialized memory use in C++\",\n        \"Finding compiler bugs via live code mutation\",\n        \"CWE: Weaknesses in Software Written in C\",\n        \"LibTooling\",\n        \"The LLDB Debugger\",\n        \"Finding missed optimizations through the lens of dead code elimination\",\n        \"High system-code security with low overhead\",\n        \"Compilation Consistency Modulo Debug Information\",\n        \"Undefined behavior: what happened to my code?\",\n        \"Towards optimization-safe systems: Analyzing the impact of undefined behavior\",\n        \"Finding and understanding bugs in C compilers\",\n        \"SANRAZOR: Reducing Redundant Sanitizer Checks in C/C++ Programs.\",\n        \"Debloating Address Sanitizer\",\n        \"Georgios Portokalidis\"\n    ],\n    \"reasoning\": \"Selected these 40 references because they represent foundational work and recent advances in UBfuzz: Finding Bugs in Sanitizer Implementations, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}