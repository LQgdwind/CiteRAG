{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 46 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: ExAIS: Executable AI Semantics\n\nPaper Abstract: Abstract. Neural networks can be regarded as a new programming paradigm, i.e., instead of building ever-more complex programs through (often informal) logical reasoning in the programmers’ mind, complex ‘AI’ systems are built by optimising generic neural network models with big data. In this new paradigm, AI frameworks such as TensorFlow and PyTorch play a key role, which is as essential as the compiler for traditional programs. It is known that the lack of a proper semantics for programming languages (such as C), i.e., a correctness specification for compilers, has contributed to many problematic program behaviours and security issues. While it is in general hard to have a correctness specification for compilers due to the high complexity of programming languages and their rapid evolution, we have a unique opportunity to do it right this time for neural networks (which have a limited set of functions, and most of them have stable semantics). In this work, we report our effort on providing a correctness specification of neural network frameworks such as TensorFlow. We specify the semantics of almost all TensorFlow layers in the logical programming language Prolog. We demonstrate the usefulness of the semantics through two applications. One is a fuzzing engine for TensorFlow, which features a strong oracle and a systematic way of generating valid neural networks. The other is a model validation approach which enables consistent bug reporting for TensorFlow models.\n\n{retrieved_text}\n\nGenerate exactly 46 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 46\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Wrong default value in GRU layer documentaion\",\n        \"1D Convolution Layer\",\n        \"AveragePooling3D does not support float64 and produces confusing error message\",\n        \"ConvLSTM2D layer wrong computation\",\n        \"cropping layer additional error message\",\n        \"Dense Layer\",\n        \"Dot layer incomplete description\",\n        \"Dropout Layer\",\n        \"error reporting model(x) vs model.predict(x).\",\n        \"ExAIS: Executable AI Semantics Repository\",\n        \"InputSpec argument ignored\",\n        \"InputSpec missing float64 support and wrong error message\",\n        \"layer order in functional API graph models\",\n        \"Masking Layer\",\n        \"ReLU layer wrong result with negative threshold\",\n        \"SeparableConv documention missing argument constraint\",\n        \"Softmax layer unexpected and confusing error message\",\n        \"Softmax layer unexpected behaviour for axis=0\",\n        \"TensorFlow layer documentation\",\n        \"Wrong error message for DepthwiseConv2D\",\n        \"Logic Programming with Prolog\",\n        \"Validating a Deep Learning Framework by Metamorphic Testing\",\n        \"Identifying implementation bugs in machine learning based image classifiers using metamorphic testing\",\n        \"Autonomous Real-Time Testing: Testing Artificial Intelligence and Other Complex Systems\",\n        \"Search Based Software Engineering: Techniques, Taxonomy, Tutorial\",\n        \"Visual Analytics in Deep Learning: An Interrogative Survey for the Next Frontiers\",\n        \"Taxonomy of real faults in deep learning systems\",\n        \"Elements of Style: Analyzing a Software Design Feature with a Counterexample Detector\",\n        \"Documentation-Guided Fuzzing for Testing Deep Learning API Functions\",\n        \"Combinatorial Testing for Deep Learning Systems\",\n        \"A Study of Oracle Approximations in Testing Deep Learning Libraries\",\n        \"Logic, programming and Prolog\",\n        \"CRADLE: cross-backend validation to detect and localize bugs in deep learning libraries\",\n        \"A Survey on Deep Learning: Algorithms, Techniques, and Applications\",\n        \"An overview of the K semantic framework\",\n        \"Deep learning in neural networks: An overview\",\n        \"UMLAUT: Debugging Deep Learning Programs using Program Structure and Model Behavior\",\n        \"Developing Bug-Free Machine Learning Systems With Formal Mathematics\",\n        \"A rewriting logic approach to operational semantics\",\n        \"Testing Machine Learning Algorithms for Balanced Data Usage\",\n        \"Multiple-Implementation Testing of Supervised Learning Software\",\n        \"Seq2seq-Vis: A Visual Debugging Tool for Sequence-to-Sequence Models\",\n        \"Deep learning library testing via effective model generation\",\n        \"Machine Learning Testing: Survey, Landscapes and Horizons\",\n        \"An empirical study on TensorFlow program bugs\",\n        \"Shing-Chi Cheung\"\n    ],\n    \"reasoning\": \"Selected these 46 references because they represent foundational work and recent advances in ExAIS: Executable AI Semantics, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}