{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 47 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Mutation-based Consistency Testing for Evaluating the Code Understanding Capability of LLMs\n\nPaper Abstract: Abstract. Large Language Models (LLMs) have shown remarkable capabilities in processing both natural and programming languages, which have enabled various applications in software engineering, such as requirement engineering, code generation, and software testing. However, existing code generation benchmarks do not necessarily assess the code understanding performance of LLMs, especially for the subtle inconsistencies that may arise between code and its semantics described in natural language. In this paper, we propose a novel method to systematically assess the code understanding performance of LLMs, particularly focusing on subtle differences between code and its descriptions, by introducing code mutations to existing code generation datasets. Code mutations are small changes that alter the semantics of the original code, creating a mismatch with the natural language description. We apply different types of code mutations, such as operator replacement and statement deletion, to generate inconsistent code-description pairs. We then use these pairs to test the ability of LLMs to correctly detect the inconsistencies. We propose a new LLM testing method, called Mutation-based Consistency Testing (MCT), and conduct a case study on the two popular LLMs, GPT-3.5 and GPT-4, using the state-of-the-art code generation benchmark, HumanEval-X, which consists of six programming languages (Python, C++, Java, Go, JavaScript, and Rust). We compare the performance of the LLMs across different types of code mutations and programming languages and analyze the results. We find that the LLMs show significant variation in their code understanding performance and that they have different strengths and weaknesses depending on the mutation type and language. We further explain conditions under which the LLMs result in correct answers using input characteristics (e.g., number of tokens) and investigate to what extent the test results can be improved using one-shot prompts (i.e., providing an additional example). Our MCT method and the case study results provide valuable implications for future research and development of LLM-based software engineering.\n\n{retrieved_text}\n\nGenerate exactly 47 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 47\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Evaluating python, c++, javascript and java programming languages based on software complexity calculator (halstead metrics)\",\n        \"Program synthesis with large language models\",\n        \"Language models are few-shot learners\",\n        \"Two notions of correctness and their relation to testing\",\n        \"Evaluating large language models trained on code\",\n        \"Designing Deletion Mutation Operators\",\n        \"A Systematic Review of Mutation Testing Tools: A Survey\",\n        \"Bert: Pre-training of deep bidirectional transformers for language understanding\",\n        \"Large Language Models for Software Engineering: Survey and Open Problems\",\n        \"The robots are coming: Exploring the implications of openai codex on introductory programming\",\n        \"How hard does mutation analysis have to be, anyway?\",\n        \"Mutation testing techniques: A comparative study\",\n        \"Large language models for software engineering: A systematic literature review\",\n        \"Mintlify\",\n        \"TabNine is an AI-powered code completion tool\",\n        \"An analysis and survey of the development of mutation testing\",\n        \"Are mutants a valid substitute for real faults in software testing?\",\n        \"Roberta: A robustly optimized bert pretraining approach\",\n        \"Codexglue: A machine learning benchmark dataset for code understanding and generation\",\n        \"The Scope of ChatGPT in Software Engineering: A Thorough Investigation\",\n        \"Overcoming the Equivalent Mutant Problem: A Systematic Literature Review and a Comparative Experiment of Second Order Mutation\",\n        \"Octopack: Instruction tuning code large language models\",\n        \"GPT-4 Technical Report\",\n        \"OpenAI API Documentation\",\n        \"Trivial compiler equivalence: A large scale empirical study of a simple, fast and effective equivalent mutant detection technique\",\n        \"Mutation Testing Advances: An Analysis and Survey\",\n        \"State of mutation testing at google\",\n        \"Practical mutation testing at scale: A view from google\",\n        \"Can OpenAI’s codex fix bugs? an evaluation on QuixBugs\",\n        \"Improving language understanding by generative pre-training\",\n        \"Language models are unsupervised multitask learners\",\n        \"Prompt programming for large language models: Beyond the few-shot paradigm\",\n        \"A Primer in BERTology: What we know about how BERT works\",\n        \"Survey reveals AI’s impact on the developer experience\",\n        \"Benchmarking Language Models for Code Syntax Understanding\",\n        \"Autoprompt: Eliciting knowledge from language models with automatically generated prompts\",\n        \"Is ChatGPT the Ultimate Programming Assistant–How far is it?\",\n        \"Probing pretrained models of source code\",\n        \"GLUE: A Multi-Task Benchmark and Analysis Platform for Natural Language Understanding\",\n        \"Code generation as a dual task of code summarization\",\n        \"Chain-of-thought prompting elicits reasoning in large language models\",\n        \"Data mining: practical machine learning tools and techniques with Java implementations\",\n        \"Mutation Testing for the New Century\",\n        \"Is Operator-Based Mutant Selection Superior to Random Mutant Selection?\",\n        \"Predicting folding free energy changes upon single point mutations\",\n        \"Codegeex: A pre-trained model for code generation with multilingual evaluations on humaneval-x\",\n        \"Language Agent Tree Search Unifies Reasoning Acting and Planning in Language Models\"\n    ],\n    \"reasoning\": \"Selected these 47 references because they represent foundational work and recent advances in Mutation-based Consistency Testing for Evaluating the Code Understanding Capability of LLMs, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}