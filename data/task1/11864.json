{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 48 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Finding Logic Bugs in Spatial Database Engines via Affine Equivalent Inputs\n\nPaper Abstract: Abstract. Spatial Database Management Systems (SDBMSs) aim to store, manipulate, and retrieve spatial data. SDBMSs are employed in various modern applications, such as geographic information systems, computer-aided design tools, and location-based services. However, the presence of logic bugs in SDBMSs can lead to incorrect results, substantially undermining the reliability of these applications. Detecting logic bugs in SDBMSs is challenging due to the lack of ground truth for identifying incorrect results. In this paper, we propose an automated geometry-aware generator to generate high-quality SQL statements for SDBMSs and a novel concept named Affine Equivalent Inputs (AEI) to validate the results of SDBMSs. We implemented them as a tool named Spatter (Spatial DBMSs Tester) for finding logic bugs in four popular SDBMSs: PostGIS, DuckDB Spatial, MySQL, and SQL Server. Our testing campaign detected \\DTLfetchstatusstatusIdentifiedSum previously unknown and unique bugs in these SDBMS, of which \\DTLfetchstatusstatusRealSum have been confirmed, and \\DTLfetchstatusstatusSumFixed have been already fixed. Our testing efforts have been well appreciated by the developers. Experimental results demonstrate that the geometry-aware generator significantly outperforms a naive random-shape generator in detecting unique bugs, and AEI can identify 14 logic bugs in SDBMSs that were overlooked by previous methodologies.\n\n{retrieved_text}\n\nGenerate exactly 48 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 48\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Testing database engines via query plan guidance\",\n        \"Cert: Finding performance issues in database systems through the lens of cardinality estimation\",\n        \"The r*-tree: an efficient and robust access method for points and rectangles\",\n        \"On the complexity of checking transactional consistency\",\n        \"Methods for Euclidean Geometry, vol. 37\",\n        \"A small set of formal topological relationships suitable for end-user interaction\",\n        \"Modelling topological spatial relations: Strategies for query processing\",\n        \"Differentially testing database transactions for fun and profit\",\n        \"Categorizing binary topological relations between regions, lines and points in geographic databases, the 9-intersection: Formalism and its use for natural language spatial predicates\",\n        \"A topological data model for spatial databases\",\n        \"SpatialDB: a database for spatially resolved transcriptomes\",\n        \"Topological Relationships\",\n        \"Raster intervals: An approximation technique for polygon intersection joins\",\n        \"The rlr-tree: A reinforcement learning based r-tree for spatial data\",\n        \"An introduction to spatial database systems\",\n        \"R-trees: A dynamic index structure for spatial searching\",\n        \"Efficient black-box checking of snapshot isolation in databases\",\n        \"Detecting logic bugs in graph database management systems via injective and surjective graph query transformation\",\n        \"Detecting transactional bugs in database engines via Graph-Based oracle construction\",\n        \"Apollo: Automatic detection and diagnosis of performance regressions in database systems\",\n        \"Testing graph database engines via query partitioning\",\n        \"Elle: inferring isolation anomalies from experimental observations\",\n        \"Spatial data management for computer aided design\",\n        \"Lisa: A learned index structure for spatial data\",\n        \"Automatic detection of performance bugs in database systems using equivalent queries\",\n        \"Testing graph database systems via equivalent query rewriting\",\n        \"Touch: in-memory spatial join by hierarchical data-oriented partitioning\",\n        \"OpenGIS Web Map Service (WMS) Implementation Specification\",\n        \"How good are modern spatial analytics systems?\",\n        \"The case for learned spatial indexes\",\n        \"Mysql spatial and postgisâ€“implementations of spatial data standards\",\n        \"Postgis (actually liblwgeom) integration with oss-fuzz\",\n        \"Duckdb: an embeddable analytical database\",\n        \"Spatial databases: with application to GIS\",\n        \"Detecting optimization bugs in database engines via non-optimizing reference engine construction\",\n        \"Finding bugs in database systems via query partitioning\",\n        \"Testing database engines via pivoted query synthesis\",\n        \"Testing database systems via differential query execution\",\n        \"Thermal-join: A scalable spatial join for dynamic workloads\",\n        \"Parallel in-memory evaluation of spatial joins\",\n        \"DE-9IM\",\n        \"On the unusual effectiveness of type-aware operator mutations for testing smt solvers\",\n        \"Litmus: Towards a practical database management system with verifiable acid properties and transaction correctness\",\n        \"Simba: Efficient in-memory spatial analytics\",\n        \"Simplifying and isolating failure-inducing input\",\n        \"Finding bugs in gremlin-based graph database systems via randomized differential testing\",\n        \"Geolife: A collaborative social networking service among user, location and trajectory\",\n        \"Testing graph database systems via graph-aware metamorphic relations\"\n    ],\n    \"reasoning\": \"Selected these 48 references because they represent foundational work and recent advances in Finding Logic Bugs in Spatial Database Engines via Affine Equivalent Inputs, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}