{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 46 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Automated Parallel Kernel Extraction from Dynamic Application Traces\n\nPaper Abstract: Abstract Modern program runtime is dominated by segments of repeating code called kernels. Kernels are accelerated by increasing memory locality, increasing data-parallelism, and exploiting producer-consumer parallelism among kernels - which requires hardware specialized for a particular class of kernels. Programming this hardware can be difficult, requiring that the kernels be identified and annotated in the code or translated to a domain-specific language. This paper describes a technique to automatically localize parallel kernels from a dynamic application trace, facilitating further code optimization. Dynamic trace collection is fast and compact. With optimization, it only incurs a time-dilation of a factor on nine and file-size of one megabyte per second, addressing a significant criticism of this approach. Kernel extraction is accurate and performed in linear time within logarithmic memory, detecting a wide range of kernels. This approach was validated across 16 libraries, comprised of 10,507 kernels instances. To validate the accuracy of our detected kernels, five test programs were written that spans traditional kernel definitions and were certified to contain all the kernels that were expected.\n\n{retrieved_text}\n\nGenerate exactly 46 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 46\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Dark silicon and the end of multicore scaling\",\n        \"Understanding sources of inefficiency in general-purpose chips\",\n        \"General approach to mapping of parallel computations upon multiprocessor architectures\",\n        \"Gramps: A programming model for graphics pipelines\",\n        \"The landscape of parallel computing research: A view from berkeley\",\n        \"Nvidia cuda compute unified device architecture\",\n        \"Halide: Decoupling algorithms from schedules for high-performance image processing\",\n        \"Polly-polyhedral optimization in llvm\",\n        \"Wasabi: A framework for dynamically analyzing webassembly\",\n        \"Static and dynamic analysis: Synergy and duality\",\n        \"Tracing compilation by abstract interpretation\",\n        \"Pin: Building customized program analysis tools with dynamic instrumentation\",\n        \"Accuracy of memory reference traces of parallel computations in trace-drive simulation\",\n        \"Efficiently acquiring communication traces for large-scale parallel applications\",\n        \"Greendroid: Energy efficient mobile application processor using android system\",\n        \"Regent: A high-productivity programming language for implicit parallelism with logical regions\",\n        \"Portable programming with rapid\",\n        \"Dynamic task discovery in parsec: A data-flow task-based runtime\",\n        \"Streamit: A language for streaming applications\",\n        \"Aladdin: A pre-rtl, power-performance accelerator simulator enabling large design space exploration of customized architectures\",\n        \"Dynamic tracing: Memoization of task graphs for dynamic task-based runtimes\",\n        \"Stochastic program optimization\",\n        \"Using machine learning techniques to detect parallel patterns of multi-threaded applications\",\n        \"Machine learning in compiler optimization\",\n        \"A view of the parallel computing landscape\",\n        \"The scalable heterogeneous computing (shoc) benchmark suite\",\n        \"GNU scientific library\",\n        \"Fftw. fast fourier transform library\",\n        \"Eigen v3\",\n        \"Learning OpenCV: Computer vision with the OpenCV library\",\n        \"Liquid dsp-software-defined radio digital signal processing library\",\n        \"F.f.m.p.e.g.\",\n        \"PERFECT (Power Efficiency Revolution For Embedded Computing Technologies) Benchmark Suite Manual\",\n        \"Armadillo: a template-based c++ library for linear algebra\",\n        \"An empirical characterization of stream programs and its implications for language and compiler design\",\n        \"Design of the graphblas api for c\",\n        \"mbed tls\",\n        \"Fec library version 3.0.1\",\n        \"DAW, Netlib Library\",\n        \"Cortexsuite: A synthetic brain benchmark suite\",\n        \"spuce\",\n        \"The tensor algebra compiler\",\n        \"Brisk: Binary robust invariant scalable keypoints\",\n        \"flang-compiler/f18\",\n        \"compiler-tree-technologies/fc\",\n        \"microsoft/llvm-mctoll\"\n    ],\n    \"reasoning\": \"Selected these 46 references because they represent foundational work and recent advances in Automated Parallel Kernel Extraction from Dynamic Application Traces, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}