{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 50 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: PDSketch: Integrated Planning Domain Programming and Learning\n\nPaper Abstract: Abstract This paper studies a model learning and online planning approach towards building flexible and general robots. Specifically, we investigate how to exploit the locality and sparsity structures in the underlying environmental transition model to improve model generalization, data-efficiency, and runtime-efficiency. We present a new domain definition language, named PDSketch. It allows users to flexibly define high-level structures in the transition models, such as object and feature dependencies, in a way similar to how programmers use TensorFlow or PyTorch to specify kernel sizes and hidden dimensions of a convolutional neural network. The details of the transition model will be filled in by trainable neural networks. Based on the defined structures and learned parameters, PDSketch automatically generates domain-independent planning heuristics without additional training. The derived heuristics accelerate the performance-time planning for novel goals.\n\n{retrieved_text}\n\nGenerate exactly 50 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 50\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"TensorFlow: A System for Large-Scale Machine Learning\",\n        \"Learning Neural-Symbolic Descriptive Planning Models via Cube-Space Priors: The Voyage Home (To Strips)\",\n        \"A Framework for Behavioural Cloning\",\n        \"Relational Inductive Biases, Deep Learning, and Graph Networks\",\n        \"Planning as Heuristic Search\",\n        \"Learning First-Order Symbolic Representations for Planning from the Structure of the State Space\",\n        \"Decision Transformer: Reinforcement Learning via Sequence Modeling\",\n        \"BabyAI: First Steps Towards Grounded Language Learning With a Human In the Loop\",\n        \"Recurrent Environment Simulators\",\n        \"Learning Neuro-Symbolic Relational Transition Models for Bilevel Planning\",\n        \"Feudal Reinforcement Learning\",\n        \"An Object-Oriented Representation for Efficient Reinforcement Learning\",\n        \"STRIPS: A New Approach to the Application of Theorem Proving to Problem Solving\",\n        \"PDDL2.1: An Extension to PDDL for Expressing Temporal Planning Domains\",\n        \"Pddlstream: Integrating symbolic planners and blackbox samplers via optimistic adaptive planning\",\n        \"Integrated task and motion planning\",\n        \"A new model for learning in graph domains\",\n        \"Generalizing Plans to New Environments in Relational MDPs\",\n        \"Mastering Atari with Discrete World Models\",\n        \"The Fast Downward Planning System\",\n        \"The FF Planning System: Fast Plan Generation through Heuristic Search\",\n        \"Scallop: From Probabilistic Deductive Databases to Scalable Differentiable Reasoning\",\n        \"Learning Grounded Relational Symbols from Continuous Data for Abstract Reasoning\",\n        \"Hierarchical Learning in Stochastic Domains: Preliminary Results\",\n        \"Learning to Achieve Goals\",\n        \"Schema Networks: Zero-Shot Transfer with a Generative Causal Model of Intuitive Physics\",\n        \"From skills to symbols: Learning symbolic representations for abstract high-level planning\",\n        \"Towards a Unified Theory of State Abstraction for MDPs\",\n        \"Learning Object-Oriented Dynamics for Planning from Text\",\n        \"DeepProbLog: Neural Probabilistic Logic Programming\",\n        \"Planning with Goal-Conditioned Policies\",\n        \"Learning Symbolic Models of Stochastic Domains\",\n        \"PyTorch: An Imperative Style, High-Performance Deep Learning Library\",\n        \"Temporal Difference Models: Model-Free Deep RL for Model-Based Control\",\n        \"Learning Logical Definitions from Relations\",\n        \"Logical Neural Networks\",\n        \"Universal Value Function Approximators\",\n        \"Mastering Atari, Go, Chess and Shogi by Planning with a Learned Model\",\n        \"Proximal policy optimization algorithms\",\n        \"Learning Symbolic Operators for Task and Motion Planning\",\n        \"Program Synthesis by Sketching\",\n        \"Program Guided Agent\",\n        \"Neural Discrete Representation Learning\",\n        \"Entity Abstraction in Visual Model-Based Reinforcement Learning\",\n        \"Efficient Learning of Relational Models for Sequential Decision Making\",\n        \"Learning Sparse Relational Transition Models\",\n        \"Regression planning networks\",\n        \"Transporter Networks: Rearranging the Visual World for Robotic Manipulation\",\n        \"Learning invariant representations for reinforcement learning without reconstruction\",\n        \"Object-Oriented Dynamics Predictor\"\n    ],\n    \"reasoning\": \"Selected these 50 references because they represent foundational work and recent advances in PDSketch: Integrated Planning Domain Programming and Learning, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}