{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 48 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Putting the Squeeze on Array Programs: Loop Verification via Inductive Rank Reduction\n\nPaper Abstract: Abstract Automatic verification of array manipulating programs is a challenging problem because it often amounts to the inference of inductive quantified loop invariants which, in some cases, may not even be first-order expressible. In this paper, we suggest a novel verification technique that is based on induction on user-defined rank of program states as an alternative to loop-invariants. Our technique, dubbed inductive rank reduction, works in two steps. Firstly, we simplify the verification problem and prove that the program is correct when the input state contains an input array of length ‚ÑìBsubscript‚ÑìB\\ell_{\\textsf{B}} or less, using the length of the array as the rank of the state. Secondly, we employ a squeezing function ‚ãé\\curlyvee which converts a program state œÉùúé\\sigma with an array of length ‚Ñì>‚ÑìB‚Ñìsubscript‚ÑìB\\ell>\\ell_{\\textsf{B}} to a state ‚ãé(œÉ)ùúé\\curlyvee\\!(\\sigma) containing an array of length ‚Ñì‚àí1‚Ñì1\\ell-1 or less. We prove that when ‚ãé\\curlyvee satisfies certain natural conditions then if the program violates its specification on œÉùúé\\sigma then it does so also on ‚ãé(œÉ)ùúé\\curlyvee\\!(\\sigma). The correctness of the program on inputs with arrays of arbitrary lengths follows by induction. We make our technique automatic for array programs whose length of execution is proportional to the length of the input arrays by (i) performing the first step using symbolic execution, (ii) verifying the conditions required of ‚ãé\\curlyvee using Z3, and (iii) providing a heuristic procedure for synthesizing ‚ãé\\curlyvee. We implemented our technique and applied it successfully to several interesting array-manipulating programs, including a bidirectional summation program whose loop invariant cannot be expressed in first-order logic while its specification is quantifier-free.\n\n{retrieved_text}\n\nGenerate exactly 48 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 48\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"General decidability theorems for infinite-state systems\",\n        \"Algorithmic analysis of programs with well quasi-ordered domains\",\n        \"All for the price of few\",\n        \"SAFARI: smt-based abstraction for arrays with interpolants\",\n        \"Booster: An acceleration-based verification framework for array programs\",\n        \"Syntax-guided synthesis\",\n        \"Boolean and cartesian abstraction for model checking C programs\",\n        \"SMT-LIB sequences and regular expressions\",\n        \"On solving universally quantified horn clauses\",\n        \"SAT-Based Model Checking without Unrolling\",\n        \"Quantifier-free interpolation of a theory of arrays\",\n        \"Klee: Unassisted and automatic generation of high-coverage tests for complex systems programs\",\n        \"Symbolic execution for software testing: Three decades later\",\n        \"Verifying array manipulating programs by tiling\",\n        \"Invariants for finite instances and beyond\",\n        \"Abstract interpretation: a unified lattice model for static analysis of programs by construction or approximation of fixpoints\",\n        \"Z3: An efficient SMT solver\",\n        \"Reducing model checking of the many to the few\",\n        \"Modular divide-and-conquer parallelization of nested loops\",\n        \"Quantified invariants via syntax-guided synthesis\",\n        \"Synthesizing data structure transformations from input-output examples\",\n        \"Well-structured transition systems everywhere!\",\n        \"Predicate abstraction for software verification\",\n        \"MCMT: A model checker modulo theories\",\n        \"Construction of abstract state graphs with PVS\",\n        \"Programming by examples (and its applications in data wrangling)\",\n        \"Smt-based verification of parameterized systems\",\n        \"Quantifiers on demand\",\n        \"Edsketch: Execution-driven sketching for java\",\n        \"Deriving divide-and-conquer dynamic programming algorithms using solver-aided transformations\",\n        \"Dynamic cutoff detection in parameterized concurrent programs\",\n        \"Property-directed inference of universal invariants or proving their absence\",\n        \"Property checking array programs using loop shrinking\",\n        \"Constructing quantified invariants via predicate abstraction\",\n        \"Lazy abstraction with interpolants\",\n        \"The octagon abstract domain\",\n        \"Cell morphing: From array programs to array-free horn clauses\",\n        \"Type-and-example-directed program synthesis\",\n        \"Automatic deductive verification with invisible invariants\",\n        \"Extending VIAP to handle array programs\",\n        \"Mapreduce program synthesis\",\n        \"Combinatorial sketching for finite programs\",\n        \"From program verification to program synthesis\",\n        \"Template-based program verification and program synthesis\",\n        \"Transit: specifying protocols with concolic snippets\",\n        \"Synthesizing highly expressive sql queries from input-output examples\",\n        \"Solver-based sketching of alloy models using test valuations\",\n        \"Invisible Invariants Are Neither\"\n    ],\n    \"reasoning\": \"Selected these 48 references because they represent foundational work and recent advances in Putting the Squeeze on Array Programs: Loop Verification via Inductive Rank Reduction, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}