{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 52 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Neural-Symbolic Solver for Math Word Problems with Auxiliary Tasks\n\nPaper Abstract: Abstract Previous math word problem solvers following the encoder-decoder paradigm fail to explicitly incorporate essential math symbolic constraints, leading to unexplainable and unreasonable predictions. Herein, we propose Neural-Symbolic Solver (NS-Solver) to explicitly and seamlessly incorporate different levels of symbolic constraints by auxiliary tasks. Our NS-Solver consists of a problem reader to encode problems, a programmer to generate symbolic equations, and a symbolic executor to obtain answers. Along with target expression supervision, our solver is also optimized via 4 new auxiliary objectives to enforce different symbolic reasoning: a) self-supervised number prediction task predicting both number quantity and number locations; b) commonsense constant prediction task predicting what prior knowledge (e.g. how many legs a chicken has) is required; c) program consistency checker computing the semantic loss between predicted equation and target equation to ensure reasonable equation mapping; d) duality exploiting task exploiting the quasi duality between symbolic equation generation and problem’s part-of-speech generation to enhance the understanding ability of a solver. Besides, to provide a more realistic and challenging benchmark for developing a universal and scalable solver, we also construct a new large-scale MWP benchmark CM17K consisting of 4 kinds of MWPs (arithmetic, one-unknown linear, one-unknown non-linear, equation set) with more than 17K samples. Extensive experiments on Math23K and our CM17k demonstrate the superiority of our NS-Solver compared to state-of-the-art methods111The code and the new CM17k dataset are available at https://github.com/QinJinghui/NS-Solver..\n\n{retrieved_text}\n\nGenerate exactly 52 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 52\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Neural machine translation by jointly learning to align and translate\",\n        \"Robust understanding of word problems with extraneous information\",\n        \"GeoQA: A geometric question answering benchmark towards multimodal numerical reasoning\",\n        \"Neural symbolic reader: Scalable integration of distributed and symbolic representations for reading comprehension\",\n        \"Semantically-aligned equation generation for solving and reasoning math word problems\",\n        \"Learning phrase representations using RNN encoder–decoder for statistical machine translation\",\n        \"Revisiting pre-trained models for Chinese natural language processing\",\n        \"BERT: Pre-training of deep bidirectional transformers for language understanding\",\n        \"Language to logical form with neural attention\",\n        \"Dual learning for machine translation\",\n        \"Using self-supervised learning can improve model robustness and uncertainty\",\n        \"Long short-term memory\",\n        \"Learning by fixing: Solving math word problems with weak supervision\",\n        \"Smart: A situation model for algebra story problems via attributed grammar\",\n        \"Neural math word problem solver with reinforcement learning\",\n        \"Learning fine-grained expressions to solve math word problems\",\n        \"How well do computers solve math word problems? large-scale dataset construction and evaluation\",\n        \"Data recombination for neural semantic parsing\",\n        \"Adam: A method for stochastic optimization\",\n        \"Parsing algebraic word problems into equations\",\n        \"Learning to automatically solve algebra word problems\",\n        \"ALBERT: A lite BERT for self-supervised learning of language representations\",\n        \"Visual question generation as dual task of visual question answering\",\n        \"A meaning-based statistical English math word problem solver\",\n        \"Neural symbolic machines: Learning semantic parsers on Freebase with weak supervision\",\n        \"Memory augmented policy optimization for program synthesis and semantic parsing\",\n        \"Program induction by rationale generation: Learning to solve and explain algebraic word problems\",\n        \"Learning to use formulas to solve simple arithmetic problems\",\n        \"Semantically-aligned universal tree-structured solver for math word problems\",\n        \"SQuAD: 100,000+ questions for machine comprehension of text\",\n        \"Solving general arithmetic word problems\",\n        \"Unit dependency graph and its application to arithmetic word problem solving\",\n        \"Mapping to declarative knowledge for word problem solving\",\n        \"Solving math word problems with multi-encoders and multi-decoders\",\n        \"Automatically solving number word problems by semantic parsing and reasoning\",\n        \"Unsupervised domain adaptation through self-supervision\",\n        \"Test-time training with self-supervision for generalization under distribution shifts\",\n        \"Question answering and question generation as dual tasks\",\n        \"Translating a math word problem to a expression tree\",\n        \"Mathdqn: Solving arithmetic word problems via deep reinforcement learning\",\n        \"Template-based math word problem solvers with recursive neural networks\",\n        \"Deep neural solver for math word problems\",\n        \"Code generation as a dual task of code summarization\",\n        \"A knowledge-aware sequence-to-tree network for math word problem solving\",\n        \"Dual supervised learning\",\n        \"Dual ask-answer network for machine reading comprehension\",\n        \"A goal-driven tree-structured neural model for math word problems\",\n        \"Frame-based calculus of solving arithmetic multi-step addition and subtraction word problems\",\n        \"Teacher-student networks with multiple decoders for solving math word problem\",\n        \"Graph-to-tree learning for solving math word problems\",\n        \"Seq2sql: Generating structured queries from natural language using reinforcement learning\",\n        \"Learn to solve algebra word problems using quadratic programming\"\n    ],\n    \"reasoning\": \"Selected these 52 references because they represent foundational work and recent advances in Neural-Symbolic Solver for Math Word Problems with Auxiliary Tasks, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}