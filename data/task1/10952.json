{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 65 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Learn to Code Sustainably: An Empirical Study on LLM-based Green Code Generation\n\nPaper Abstract: Abstract The increasing use of information technology has led to a significant share of energy consumption and carbon emissions from data centers. These contributions are expected to rise with the growing demand for big data analytics, increasing digitization, and the development of large artificial intelligence (AI) models. The need to address the environmental impact of software development has led to increased interest in green (sustainable) coding and claims that the use of AI models can lead to energy efficiency gains. Here, we provide an empirical study on green code and an overview of green coding practices, as well as metrics used to quantify the sustainability awareness of AI models. In this framework, we evaluate the sustainability of auto-generated code. The auto-generate codes considered in this study are produced by generative commercial AI language models, GitHub Copilot, OpenAI ChatGPT-3, and Amazon CodeWhisperer. Within our methodology, in order to quantify the sustainability awareness of these AI models, we propose a definition of the code’s “green capacity”, based on certain sustainability metrics. We compare the performance and green capacity of human-generated code and code generated by the three AI language models in response to easy-to-hard problem statements. Our findings shed light on the current capacity of AI models to contribute to sustainable software development.\n\n{retrieved_text}\n\nGenerate exactly 65 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 65\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Tracking Clean Energy Progress 2023\",\n        \"Recalibrating global data center energy-use estimates\",\n        \"Energy consumption of data centers worldwide How will the Internet become green?\",\n        \"Data Centres Metered Electricity Consumption 2022\",\n        \"AI and Compute\",\n        \"Energy and Policy Considerations for Deep Learning in NLP\",\n        \"Carbon Emissions and Large Neural Network Training\",\n        \"Green AI\",\n        \"Trends in AI inference energy consumption: beyond the performance-vs-parameter laws of deep learning\",\n        \"Sustainable ai: Environmental implications, challenges and opportunities\",\n        \"World Energy Outlook 2022\",\n        \"Carbon Dependencies in Datacenter Design and Management\",\n        \"Program Synthesis\",\n        \"Reconciling enumerative and deductive program synthesis\",\n        \"Write, execute, assess: Program synthesis with a repl\",\n        \"Dimensions in Program Synthesis\",\n        \"The World’s Leading Online Programming Learning Platform — leetcode.com\",\n        \"Towards the Systematic Reporting of the Energy and Carbon Footprints of Machine Learning\",\n        \"Data Center Cooling using Model-predictive Control\",\n        \"Quantifying the Carbon Emissions of Machine Learning\",\n        \"The Evolved Transformer\",\n        \"Constructing Fast Network through Deconstruction of Convolution\",\n        \"Diagonalwise Refactorization: An Efficient Training Method for Depthwise Convolutions\",\n        \"RAPL: memory power estimation and capping\",\n        \"MobileNetV2: Inverted Residuals and Linear Bottlenecks\",\n        \"Gossip-based Actor-Learner Architectures for Deep Reinforcement Learning\",\n        \"Accelerating Reinforcement Learning through GPU Atari Emulation\",\n        \"An Analysis of Deep Neural Network Models for Practical Applications\",\n        \"EfficientNet: Rethinking Model Scaling for Convolutional Neural Networks\",\n        \"ShuffleNet V2: Practical Guidelines for Efficient CNN Architecture Design\",\n        \"The New Linux ’ perf ’ Tools\",\n        \"A process for analysing the energy efficiency of software\",\n        \"The Information Factories: Data centers are chewing up vast amounts of energy — So researchers are trying to make them more efficient\",\n        \"Evaluating the Energy Efficiency of Deep Convolutional Neural Networks on CPUs and GPUs\",\n        \"Funnel-Transformer: Filtering out Sequential Redundancy for Efficient Language Processing\",\n        \"The Framework Tax: Disparities Between Inference Efficiency in Research and Deployment\",\n        \"A method to estimate the energy consumption of deep neural networks\",\n        \"Energy efficiency across programming languages: how do energy, time, and memory relate?\",\n        \"How is the speed of code review affected by activity, usage and code quality?\",\n        \"Evaluating the Code Quality of AI-Assisted Code Generation Tools: An Empirical Study on GitHub Copilot, Amazon CodeWhisperer, and ChatGPT\",\n        \"A Dataset for Analysis of Quality Code and Toxic Comments\",\n        \"Assessing the Quality of GitHub Copilot’s Code Generation\",\n        \"DistilBERT, a distilled version of BERT: smaller, faster, cheaper and lighter\",\n        \"Learning both Weights and Connections for Efficient Neural Networks\",\n        \"Deep Compression: Compressing Deep Neural Networks with Pruning, Trained Quantization and Huffman Coding\",\n        \"Switch Transformers: Scaling to Trillion Parameter Models with Simple and Efficient Sparsity\",\n        \"Outrageously Large Neural Networks: The Sparsely-Gated Mixture-of-Experts Layer\",\n        \"GShard: Scaling Giant Models with Conditional Computation and Automatic Sharding\",\n        \"Fine-Tuning Pretrained Language Models: Weight Initializations, Data Orders, and Early Stopping\",\n        \"Measuring the Carbon Intensity of AI in Cloud Instances\",\n        \"ESTIMATING THE CARBON FOOTPRINT OF BLOOM, A 176B PARAMETER LANGUAGE MODEL\",\n        \"Investigating the Use of Natural Language Processing for Automated Code Generation\",\n        \"Automated Code generation, status, quality and validity in 2022\",\n        \"Green AI: Do Deep Learning Frameworks Have Different Costs?\",\n        \"PROW: A Step Toward Automatic Program Writing\",\n        \"On the Synthesis of a Reactive Module\",\n        \"Stochastic superoptimization\",\n        \"Superoptimizer - A Look at the Smallest Program\",\n        \"A Survey of Automatic Generation of Source Code Comments: Algorithms and Techniques\",\n        \"An Empirical Evaluation of GitHub Copilot’s Code Suggestions\",\n        \"Jigsaw: Large Language Models meet Program Synthesis\",\n        \"Angelix: scalable multiline program patch synthesis via symbolic analysis\",\n        \"LooPy: interactive program synthesis with control structures\",\n        \"A systematic evaluation of large language models of code\",\n        \"A systematic literature review of green software metrics\"\n    ],\n    \"reasoning\": \"Selected these 65 references because they represent foundational work and recent advances in Learn to Code Sustainably: An Empirical Study on LLM-based Green Code Generation, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}