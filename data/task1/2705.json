{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 45 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Structural Similarity of Boundary Conditions and an Efficient Local Search Algorithm for Goal Conflict Identification\n\nPaper Abstract: Abstract In goal-oriented requirements engineering, goal conflict identification is of fundamental importance for requirements analysis. The task aims to find the feasible situations which make the goals diverge within the domain, called boundary conditions (BCs). However, the existing approaches for goal conflict identification fail to find sufficient BCs and general BCs which cover more combinations of circumstances. From the BCs found by these existing approaches, we have observed an interesting phenomenon that there are some pairs of BCs are similar in formula structure, which occurs frequently in the experimental cases. In other words, once a BC is found, a new BC may be discovered quickly by slightly changing the former. It inspires us to develop a local search algorithm named LOGION to find BCs, in which the structural similarity is captured by the neighborhood relation of formulae. Based on structural similarity, LOGION can find a lot of BCs in a short time. Moreover, due to the large number of BCs identified, it potentially selects more general BCs from them. By taking experiments on a set of cases, we show that LOGION effectively exploits the structural similarity of BCs. We also compare our algorithm against the two state-of-the-art approaches. The experimental results show that LOGION produces one order of magnitude more BCs than the state-of-the-art approaches and confirm that LOGION finds out more general BCs thanks to a large number of BCs.\n\n{retrieved_text}\n\nGenerate exactly 45 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 45\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"The role of requirement engineering in software development life cycle\",\n        \"Learning operational requirements from goal models\",\n        \"Automated goal operationalisation based on interpolation and sat solving\",\n        \"Detecting consistencies and inconsistencies of pattern-based functional requirements\",\n        \"Requirements engineering: From system goals to UML models to software\",\n        \"Conic: an integrated approach to distributed computer control systems\",\n        \"Managing conflicts in goal-driven requirements engineering\",\n        \"Goal-conflict detection based on temporal satisfiability checking\",\n        \"A genetic algorithm for goal-conflict identification\",\n        \"Integrating obstacles in goal-driven requirements engineering\",\n        \"Temporal and modal logic\",\n        \"The complexity of propositional linear temporal logics\",\n        \"The temporal logic of reactive and concurrent systems: Specification\",\n        \"Simple fast algorithms for the editing distance between trees and related problems\",\n        \"Comparison of aesa and laesa search algorithms using string and tree-edit-distances\",\n        \"A survey on tree edit distance and related problems\",\n        \"Future paths for integer programming and links to artificial intelligence\",\n        \"Algorithms for the maximum satisfiability problem\",\n        \"Stochastic local search: Foundations and applications\",\n        \"A mathematical introduction to logic\",\n        \"Sat-based explicit ltl reasoning\",\n        \"James: An object-oriented java framework for discrete optimization using local search metaheuristics\",\n        \"James: A modern object-oriented java framework for discrete optimization using local search metaheuristics\",\n        \"From states to transitions: Improving translation of ltl formulae to büchi automata\",\n        \"Goal-conflict likelihood assessment based on model counting\",\n        \"Reasoning about agents in goal-oriented requirements engineering\",\n        \"Ratsy–a new requirements analysis tool with synthesis\",\n        \"Detection of conflicting functional requirements in a use case-driven approach\",\n        \"A conceptual basis for inconsistency management in model-based systems engineering\",\n        \"Automated software tool support for checking the inconsistency of requirements\",\n        \"Improving requirements quality using essential use case interaction patterns\",\n        \"Agile requirements evolution via paraconsistent reasoning\",\n        \"Synthesis revisited: Generating statechart models from scenario-based requirements\",\n        \"Kbre: a framework for knowledge-based requirements engineering\",\n        \"Using abduction to evolve inconsistent requirements specification\",\n        \"Techne: Towards a new generation of requirements modeling languages with goals, preferences, and inconsistency handling\",\n        \"Ontology-based conflict analysis method in non-functional requirements\",\n        \"Constructing a catalogue of conflicts among non-functional requirements\",\n        \"Resolving goal conflicts via argumentation-based analysis of competing hypotheses\",\n        \"Plausible repairs for inconsistent requirements\",\n        \"Handling obstacles in goal-oriented requirements engineering\",\n        \"Generating obstacle conditions for requirements completeness\",\n        \"A probabilistic framework for goal-oriented risk analysis\",\n        \"Integrating exception handling in goal models\",\n        \"Handling knowledge uncertainty in risk-based requirements engineering\"\n    ],\n    \"reasoning\": \"Selected these 45 references because they represent foundational work and recent advances in Structural Similarity of Boundary Conditions and an Efficient Local Search Algorithm for Goal Conflict Identification, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}