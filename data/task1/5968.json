{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 50 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Neural Program Synthesis with Query\n\nPaper Abstract: Abstract Aiming to find a program satisfying the user intent given input-output examples, program synthesis has attracted increasing interest in the area of machine learning. Despite the promising performance of existing methods, most of their success comes from the privileged information of well-designed input-output examples. However, providing such input-output examples is unrealistic because it requires the users to have the ability to describe the underlying program with a few input-output examples under the training distribution. In this work, we propose a query-based framework that trains a query neural network to generate informative input-output examples automatically and interactively from a large query space. The quality of the query depends on the amount of the mutual information between the query and the corresponding program, which can guide the optimization of the query framework. To estimate the mutual information more accurately, we introduce the functional space (F-space) which models the relevance between the input-output examples and the programs in a differentiable way. We evaluate the effectiveness and generalization of the proposed query-based framework on the Karel task and the list processing task. Experimental results show that the query-based framework can generate informative input-output examples which achieve and even outperform well-designed input-output examples.\n\n{retrieved_text}\n\nGenerate exactly 50 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 50\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Queries and concept learning\",\n        \"Deepcoder: Learning to write programs\",\n        \"Neural program synthesis with a differentiable fixer\",\n        \"Leveraging grammar and reinforcement learning for neural program synthesis\",\n        \"Infogan: Interpretable representation learning by information maximizing generative adversarial nets\",\n        \"Execution-guided neural program synthesis\",\n        \"Committee-based sampling for training probabilistic classifiers\",\n        \"Neural program meta-induction\",\n        \"Robustfill: Neural program learning under noisy i/o\",\n        \"Learning to infer graphics programs from hand-drawn images\",\n        \"Write, execute, assess: Program synthesis with a repl\",\n        \"Automating string processing in spreadsheets using input-output examples\",\n        \"Spreadsheet data manipulation using examples\",\n        \"Program synthesis\",\n        \"Synthesize, execute and debug: Learning to repair for neural program synthesis\",\n        \"Categorical reparameterization with gumbel-softmax\",\n        \"Question selection for interactive program synthesis\",\n        \"Functional genomic hypothesis generation and experimentation by a robot scientist\",\n        \"Adam: A method for stochastic optimization\",\n        \"Algorithms for optimal scheduling and management of hidden markov model sensors\",\n        \"Guiding program synthesis by learning to generate examples\",\n        \"Interactive program synthesis\",\n        \"A sequential algorithm for training text classifiers\",\n        \"Your wish is my command: Programming by example\",\n        \"The concrete distribution: A continuous relaxation of discrete random variables\",\n        \"Toward automatic program synthesis\",\n        \"User interaction models for disambiguation in programming by example\",\n        \"Automated black-box testing of functional correctness using function approximation\",\n        \"A learning-based approach to unit testing of numerical software\",\n        \"Incremental learning-based testing for reactive systems\",\n        \"Learning to represent programs with property signatures\",\n        \"Bustle: Bottom-up program-synthesis through learning-guided exploration\",\n        \"Flashprofile: a framework for synthesizing data profiles\",\n        \"Karel the robot\",\n        \"Learning to acquire information\",\n        \"Selecting representative examples for program synthesis\",\n        \"Beta embeddings for multi-hop logical reasoning in knowledge graphs\",\n        \"Query by committee\",\n        \"Improving neural program synthesis with inferred execution traces\",\n        \"Synthetic datasets for neural program synthesis\",\n        \"Deep active learning: Unified and principled method for query and training\",\n        \"Combinatorial sketching for finite programs\",\n        \"Information-geometric set embeddings (igse): From sets to probability distributions\",\n        \"Neural program synthesis from diverse demonstration videos\",\n        \"Learning to infer and execute 3d shape programs\",\n        \"Representation learning with contrastive predictive coding\",\n        \"Programmatically interpretable reinforcement learning\",\n        \"Interactive query synthesis from input-output examples\",\n        \"Complete anytime beam search\",\n        \"Automatic program synthesis of long programs with a learned garbage collector\"\n    ],\n    \"reasoning\": \"Selected these 50 references because they represent foundational work and recent advances in Neural Program Synthesis with Query, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}