{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 47 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: OpenCodeInterpreter: Integrating Code Generation with Execution and Refinement\n\nPaper Abstract: Abstract The introduction of large language models has significantly advanced code generation. However, open-source models often lack the execution capabilities and iterative refinement of advanced systems like the GPT-4 Code Interpreter. To address this, we introduce OpenCodeInterpreter, a family of open-source code systems designed for generating, executing, and iteratively refining code. Supported by Code-Feedback, a dataset featuring 68K multi-turn interactions, OpenCodeInterpreter integrates execution and human feedback for dynamic code refinement. Our comprehensive evaluation of OpenCodeInterpreter across key benchmarks such as HumanEval, MBPP, and their enhanced versions from EvalPlus reveals its exceptional performance. Notably, OpenCodeInterpreter-33B achieves an accuracy of 83.2 (76.4) on the average (and plus versions) of HumanEval and MBPP, closely rivaling GPT-4’s 84.2 (76.2) and further elevates to 91.6 (84.6) with synthesized human feedback from GPT-4. OpenCodeInterpreter brings the gap between open-source code generation models and proprietary systems like GPT-4 Code Interpreter.\n\n{retrieved_text}\n\nGenerate exactly 47 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 47\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Program synthesis with large language models\",\n        \"Qwen technical report\",\n        \"GPT-NeoX-20B: An open-source autoregressive language model\",\n        \"Code Alpaca: An instruction-following llama model for code generation\",\n        \"Evaluating large language models trained on code\",\n        \"Teaching large language models to self-debug\",\n        \"Palm: Scaling language modeling with pathways\",\n        \"Pangu-coder: Program synthesis with function-level language modeling\",\n        \"BERT: Pre-training of deep bidirectional transformers for language understanding\",\n        \"Codefuse-13b: A pretrained multi-lingual code large language model\",\n        \"Stepcoder: Improve code generation with reinforcement learning from compiler feedback\",\n        \"Incoder: A generative model for code infilling and synthesis\",\n        \"Github copilot\",\n        \"Gemini: a family of highly capable multimodal models\",\n        \"Deepseek-coder: When the large language model meets programming–the rise of code intelligence\",\n        \"Mistral 7b\",\n        \"Coderl: Mastering code generation through pretrained models and deep reinforcement learning\",\n        \"Starcoder: may the source be with you!\",\n        \"Taco: Topics in algorithmic code generation dataset\",\n        \"Competition-level code generation with alphacode\",\n        \"Is your code generated by chatGPT really correct? rigorous evaluation of large language models for code generation\",\n        \"Wizardcoder: Empowering code large language models with evol-instruct\",\n        \"Memory-assisted prompt editing to improve GPT-3 after deployment\",\n        \"Self-refine: Iterative refinement with self-feedback\",\n        \"Codegen: An open large language model for code with multi-turn program synthesis\",\n        \"ChatGPT: Optimizing Language Models for Dialogue\",\n        \"Gpt-4 technical report\",\n        \"Phind/phind-codellama-34b-v2\",\n        \"Scaling language models: Methods, analysis & insights from training gopher\",\n        \"Code llama: Open foundation models for code\",\n        \"Self-critiquing models for assisting human evaluators\",\n        \"Training language models with natural language feedback\",\n        \"In-context pretraining: Language modeling beyond document boundaries\",\n        \"Execution-based code generation using deep reinforcement learning\",\n        \"speechless-codellama-34b-v2.0\",\n        \"Interscript: A dataset for interactive learning of scripts through error feedback\",\n        \"Galactica: A large language model for science\",\n        \"Lamda: Language models for dialog applications\",\n        \"Debugbench: Evaluating debugging capability of large language models\",\n        \"Llama: Open and efficient foundation language models\",\n        \"Openchat: Advancing open-source language models with mixed-quality data\",\n        \"Self-instruct: Aligning language models with self-generated instructions\",\n        \"Codet5+: Open code large language models for code understanding and generation\",\n        \"Magicoder: Source code is all you need\",\n        \"Xwin-lm\",\n        \"Wavecoder: Widespread and versatile enhanced instruction tuning with refined data generation\",\n        \"Codegeex: A pre-trained model for code generation with multilingual evaluations on humaneval-x\"\n    ],\n    \"reasoning\": \"Selected these 47 references because they represent foundational work and recent advances in OpenCodeInterpreter: Integrating Code Generation with Execution and Refinement, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}