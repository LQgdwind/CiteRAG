{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 48 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Unsupervised Learning for Combinatorial Optimization Needs Meta Learning\n\nPaper Abstract: Abstract A general framework of unsupervised learning for combinatorial optimization (CO) is to train a neural network (NN) whose output gives a problem solution by directly optimizing the CO objective. Albeit with some advantages over traditional solvers, the current framework optimizes an averaged performance over the distribution of historical problem instances, which misaligns with the actual goal of CO that looks for a good solution to every future encountered instance. With this observation, we propose a new objective of unsupervised learning for CO where the goal of learning is to search for good initialization for future problem instances rather than give direct solutions. We propose a meta-learning-based training pipeline for this new objective. Our method achieves good empirical performance. We observe that even the initial solution given by our model before fine-tuning can significantly outperform the baselines under various evaluation settings including evaluation across multiple datasets, and the case with big shifts in the problem scale. The reason we conjecture is that meta-learning-based training lets the model be loosely tied to each local optimum for a training instance while being more adaptive to the changes of optimization landscapes across instances. 111Our code is available at: https://github.com/Graph-COM/Meta_CO\n\n{retrieved_text}\n\nGenerate exactly 48 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 48\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Learning to solve circuit-sat: An unsupervised differentiable approach\",\n        \"Fast local search for the maximum independent set problem\",\n        \"Monte carlo algorithms are very effective in finding the largest independent set in sparse random graphs\",\n        \"Cracking nuts with a sledgehammer: when modern graph neural networks do worse than classical greedy algorithms\",\n        \"Neural combinatorial optimization with reinforcement learning\",\n        \"Learning to perform local rewriting for combinatorial optimization\",\n        \"Meta-learning to compositionally generalize\",\n        \"Combinatorial optimization models for production scheduling in automated manufacturing systems\",\n        \"Reinforcement learning with combinatorial actions: An application to vehicle routing\",\n        \"Fast graph representation learning with PyTorch Geometric\",\n        \"Model-agnostic meta-learning for fast adaptation of deep networks\",\n        \"Exact combinatorial optimization with graph convolutional neural networks\",\n        \"Gurobi optimizer reference manual\",\n        \"“neural” computation of decisions in optimization problems\",\n        \"Unsupervised learning via meta-learning\",\n        \"Graph neural network guided local search for the traveling salesperson problem\",\n        \"Ood-maml: Meta-learning for few-shot out-of-distribution detection and classification\",\n        \"An efficient graph convolutional network technique for the travelling salesman problem\",\n        \"Erdos goes neural: an unsupervised learning framework for combinatorial optimization on graphs\",\n        \"Learning to branch in mixed integer programming\",\n        \"Learning combinatorial optimization algorithms over graphs\",\n        \"Pomo: Policy optimization with multiple optima for reinforcement learning\",\n        \"Matrix encoding networks for neural combinatorial optimization\",\n        \"Snap datasets: Stanford large network dataset collection\",\n        \"Reinforcement learning for combinatorial optimization: A survey\",\n        \"Information, physics, and computation\",\n        \"Weisfeiler and leman go neural: Higher-order graph neural networks\",\n        \"Neural learning of one-of-many solutions for combinatorial problems in structured output spaces\",\n        \"On first-order meta-learning algorithms\",\n        \"Art gallery theorems and algorithms, volume 57\",\n        \"Combinatorial optimization: algorithms and complexity\",\n        \"Pytorch: An imperative style, high-performance deep learning library\",\n        \"Local algorithms for independent sets are half-optimal\",\n        \"Meta-learning with implicit gradients\",\n        \"Combinatorial optimization with physics-inspired graph neural networks\",\n        \"Learning a sat solver from single-bit supervision\",\n        \"Neural networks for combinatorial optimization: a review of more than a decade of research\",\n        \"Run-csp: unsupervised learning of message passing networks for binary constraint satisfaction problems\",\n        \"Graph neural networks for maximum constraint satisfaction\",\n        \"Pointer networks\",\n        \"Unsupervised learning for combinatorial optimization with principled objective relaxation\",\n        \"Benchmarks with hidden optimum solutions for graph problems\",\n        \"How powerful are graph neural networks?\",\n        \"Optimum camera placement considering camera specification for security monitoring\",\n        \"Deep graph kernels\",\n        \"Experimental performance of graph neural networks on random instances of max-cut\",\n        \"It’s not what machines can learn, it’s what we cannot teach\",\n        \"Learning local search heuristics for boolean satisfiability\"\n    ],\n    \"reasoning\": \"Selected these 48 references because they represent foundational work and recent advances in Unsupervised Learning for Combinatorial Optimization Needs Meta Learning, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}