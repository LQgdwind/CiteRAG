{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 53 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: SLEEF: A Portable Vectorized Library of C Standard Mathematical Functions\n\nPaper Abstract: Abstract In this paper, we present techniques used to implement our portable vectorized library of C standard mathematical functions written entirely in C language. In order to make the library portable while maintaining good performance, intrinsic functions of vector extensions are abstracted by inline functions or preprocessor macros. We implemented the functions so that they can use sub-features of vector extensions such as fused multiply-add, mask registers and extraction of mantissa. In order to make computation with SIMD instructions efficient, the library only uses a small number of conditional branches, and all the computation paths are vectorized. We devised a variation of the Payne-Hanek argument reduction for trigonometric functions and a floating point remainder, both of which are suitable for vector computation. We compare the performance of our library to Intel SVML.\n\n{retrieved_text}\n\nGenerate exactly 53 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 53\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"The long and winding road to high-performance image processing with mmx/sse\",\n        \"Autovectorization in GCC\",\n        \"Intel short vector math library\",\n        \"Sun freely distributable libm version 5.3\",\n        \"A new open-source SIMD vector libm fully implemented with high-level scalar C\",\n        \"ISO/IEC 9899:2011 Information technology — Programming languages — C\",\n        \"The GNU C library (glibc)\",\n        \"An accurate elementary mathematical library for the IEEE floating point standard\",\n        \"CR-LIBM: a correctly rounded elementary function library\",\n        \"AMD core math library\",\n        \"Libmvec in glibc\",\n        \"An optimized cell be special function library generated by coconut\",\n        \"Yeppp! library\",\n        \"Methods for high-throughput computation of elementary functions\",\n        \"Speeding up HEP experiment software with a library of fast and auto-vectorisable mathematical functions\",\n        \"Free rider: A source-level transformation tool for retargeting platform-specific intrinsic functions\",\n        \"Neat SIMD: Elegant vectorization in C++ by using specialized templates\",\n        \"Liquid SIMD: Abstracting SIMD Hardware using Lightweight Dynamic Mapping\",\n        \"Extending a c-like language for portable SIMD programming\",\n        \"ARM NEON Intrinsics Reference\",\n        \"Elementary Functions: Algorithms and Implementation\",\n        \"ARM C language extensions for SVE documentation\",\n        \"Importance of bitwise identical reproducibility in earth system modeling and status report\",\n        \"Handbook of Floating-Point Arithmetic\",\n        \"Auto-Vectorization Techniques for Modern SIMD Architectures\",\n        \"Vapor SIMD: Auto-vectorize once, run everywhere\",\n        \"The CRAY-1 computer system\",\n        \"Auto-vectorization of interleaved data for SIMD\",\n        \"Intel OpenMP C++/Fortran Compiler for Hyper-Threading Technology: Implementation and Performance\",\n        \"GCC, the GNU compiler collection\",\n        \"Arm Compiler for HPC\",\n        \"The LLVM Compiler Infrastructure\",\n        \"LLVM: A Compilation Framework for Lifelong Program Analysis & Transformation\",\n        \"Vector function application binary interface specification for AArch64\",\n        \"OpenMP application program interface\",\n        \"Extending OpenMP SIMD support for target specific code and application to ARM SVE\",\n        \"Vector function application binary interface\",\n        \"Knights Landing: Second-Generation Intel Xeon Phi Product\",\n        \"Characterizing the branch misprediction penalty\",\n        \"Intel 64 and IA-32 Architectures Optimization Reference Manual\",\n        \"Instruction tables: Lists of instruction latencies, throughputs and micro-operation breakdowns for Intel, AMD and VIA CPUs\",\n        \"Uops.info: Characterizing latency, throughput, and port usage of instructions on intel microarchitectures\",\n        \"llvm-exegesis: Automatic measurement of instruction latency/uops\",\n        \"A floating-point technique for extending the available precision\",\n        \"Adaptive precision floating-point arithmetic and fast robust geometric predicates\",\n        \"Software manual for the elementary functions\",\n        \"Implementation and testing of function software\",\n        \"Radian reduction for trigonometric functions\",\n        \"The design of maple: A compact, portable, and powerful computer algebra system\",\n        \"Sollya: An environment for the development of numerical codes\",\n        \"Organization of computer systems: The fixed plus variable structure computer\",\n        \"Efficient evaluation methods of elementary functions suitable for SIMD computation\",\n        \"Boost Software License 1.0 (BSL-1.0)\"\n    ],\n    \"reasoning\": \"Selected these 53 references because they represent foundational work and recent advances in SLEEF: A Portable Vectorized Library of C Standard Mathematical Functions, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}