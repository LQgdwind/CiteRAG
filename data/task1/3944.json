{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 57 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Neural Fixed-Point Acceleration for Convex Optimization\n\nPaper Abstract: Abstract Fixed-point iterations are at the heart of numerical computing and are often a computational bottleneck in real-time applications that typically need a fast solution of moderate accuracy. We present neural fixed-point acceleration which combines ideas from meta-learning and classical acceleration methods to automatically learn to accelerate fixed-point problems that are drawn from a distribution. We apply our framework to SCS, the state-of-the-art solver for convex cone programming, and design models and loss functions to overcome the challenges of learning over unrolled optimization and acceleration instabilities. Our work brings neural acceleration into any optimization problem expressible with CVXPY. The source code behind this paper is available at github.com/facebookresearch/neural-scs.\n\n{retrieved_text}\n\nGenerate exactly 57 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 57\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Differentiable convex optimization layers\",\n        \"A semismooth newton method for fast, generic convex programming\",\n        \"Optnet: Differentiable optimization as a layer in neural networks\",\n        \"Differentiable mpc for end-to-end planning and control\",\n        \"Iterative procedures for nonlinear integral equations\",\n        \"Learning to learn by gradient descent by gradient descent\",\n        \"Deep equilibrium models\",\n        \"Multiscale deep equilibrium models\",\n        \"A learning-boosted quasi-newton method for ac optimal power flow\",\n        \"The fast bilateral solver\",\n        \"Opreg-boost: Learning to accelerate online algorithms with operator regression\",\n        \"Machine learning for combinatorial optimization: a methodological tour dâ€™horizon\",\n        \"A class of methods for solving nonlinear simultaneous equations\",\n        \"Solution refinement at regular points of conic problems\",\n        \"Robust principal component analysis?\",\n        \"Learning phrase representations using rnn encoder-decoder for statistical machine translation\",\n        \"Learning combinatorial optimization algorithms over graphs\",\n        \"https://www.cvxpy.org/examples/applications/robust_kalman.html.\",\n        \"CVXPY: A Python-embedded modeling language for convex optimization\",\n        \"Generic methods for optimization-based modeling\",\n        \"{DC}3: A learning method for optimization with hard constraints\",\n        \"Model-agnostic meta-learning for fast adaptation of deep networks\",\n        \"On differentiating parameterized argmin and argmax problems with application to bi-level optimization\",\n        \"Learning fast approximations of sparse coding\",\n        \"Long short-term memory\",\n        \"Matplotlib: A 2d graphics environment\",\n        \"Accelerating quadratic optimization with reinforcement learning\",\n        \"{{{SciPy}}}: Open source scientific tools for {{{Python}}}\",\n        \"Learning to branch in mixed integer programming\",\n        \"Adam: A method for stochastic optimization\",\n        \"Jupyter notebooks-a publishing format for reproducible computational workflows\",\n        \"Machine learning accelerated computational fluid dynamics\",\n        \"Meta-learning with differentiable convex optimization\",\n        \"Learning to optimize\",\n        \"Fourier neural operator for parametric partial differential equations\",\n        \"Real-time convex optimization in signal processing\",\n        \"Python for data analysis: Data wrangling with Pandas, NumPy, and IPython\",\n        \"Learning latent permutations with gumbel-sinkhorn networks\",\n        \"Using learned optimizers to make models robust to input noise\",\n        \"Training learned optimizers with randomly initialized learned optimizers\",\n        \"Gaussian process motion planning\",\n        \"Solving mixed integer programs using neural networks\",\n        \"A guide to NumPy\",\n        \"Python for scientific computing\",\n        \"Conic optimization via operator splitting and homogeneous self-dual embedding\",\n        \"Pytorch: An imperative style, high-performance deep learning library\",\n        \"Hypersolvers: Toward fast continuous-depth models\",\n        \"Lqr-trees: Feedback motion planning via sums-of-squares verification\",\n        \"Regression shrinkage and selection via the lasso\",\n        \"The numpy array: a structure for efficient numerical computation\",\n        \"Python reference manual\",\n        \"Anderson acceleration for fixed-point iterations\",\n        \"mwaskom/seaborn: v0.9.0 (july 2018), July 2018.\",\n        \"Learned optimizers that scale and generalize\",\n        \"Hydra - a framework for elegantly configuring complex applications\",\n        \"Globally convergent type-i anderson acceleration for nonsmooth fixed-point iterations\",\n        \"Regularization and variable selection via the elastic net\"\n    ],\n    \"reasoning\": \"Selected these 57 references because they represent foundational work and recent advances in Neural Fixed-Point Acceleration for Convex Optimization, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}