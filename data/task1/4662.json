{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 48 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Symbolic Regression via Neural-Guided Genetic Programming Population Seeding\n\nPaper Abstract: Abstract Symbolic regression is the process of identifying mathematical expressions that fit observed output from a black-box process. It is a discrete optimization problem generally believed to be NP-hard. Prior approaches to solving the problem include neural-guided search (e.g. using reinforcement learning) and genetic programming. In this work, we introduce a hybrid neural-guided/genetic programming approach to symbolic regression and other combinatorial optimization problems. We propose a neural-guided component used to seed the starting population of a random restart genetic programming component, gradually learning better starting populations. On a number of common benchmark tasks to recover underlying expressions from a dataset, our method recovers 65% more expressions than a recently published top-performing model using the same experimental setup. We demonstrate that running many genetic programming generations without interdependence on the neural-guided component performs better for symbolic regression than alternative formulations where the two are more strongly coupled. Finally, we introduce a new set of 22 symbolic regression benchmark problems with increased difficulty over existing benchmarks. Source code is provided at www.github.com/brendenpetersen/deep-symbolic-optimization.\n\n{retrieved_text}\n\nGenerate exactly 48 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 48\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Neural program synthesis with priority queue training\",\n        \"Guiding deep molecular optimization with genetic exploration\",\n        \"Evolutionary Computation 1: Basic Algorithms and Operators\",\n        \"Neural combinatorial optimization with reinforcement learning\",\n        \"Genetic-gated networks for deep reinforcement learning\",\n        \"Combining a gradient-based method and an evolution strategy for multi-objective reinforcement learning\",\n        \"Reinforcement learning-based genetic algorithm in optimizing multidimensional data discretization scheme\",\n        \"Renas: Reinforced evolutionary neural architecture search\",\n        \"A tutorial on the cross-entropy method\",\n        \"Neuroevolution: from architectures to learning\",\n        \"DEAP: Evolutionary algorithms made easy\",\n        \"Restart scheduling for genetic algorithms\",\n        \"Policy optimization by genetic distillation\",\n        \"Application of random restart to genetic algorithms\",\n        \"Importance sampling for stochastic simulations\",\n        \"Comparison of genetic algorithms, random restart, and two-opt switching for solving large location-allocation problems\",\n        \"Using fitness distributions to improve the evolution of learning structures\",\n        \"Bayesian symbolic regression\",\n        \"Evolution-guided policy gradient in reinforcement learning\",\n        \"Genetic Programming: On the Programming of Computers by Means of Natural Selection, volume 1\",\n        \"Approximating geometric crossover by semantic backpropagation\",\n        \"Reinforcement learningâ€™s foundational flaw\",\n        \"Grammar variational autoencoder\",\n        \"Improving exploration in policy gradient search: Application to symbolic optimization\",\n        \"Discovering symbolic policies with deep reinforcement learning\",\n        \"Continuous control with deep reinforcement learning\",\n        \"Using genetic programming with prior formula knowledge to solve symbolic regression problem\",\n        \"Continual and one-shot learning through neural networks with dynamic external memory\",\n        \"Evolving deep neural networks\",\n        \"Use of genetic algorithms and gradient based optimization techniques for calcium phosphate precipitation\",\n        \"Deep symbolic regression: Recovering mathematical expressions from data via risk-seeking policy gradients\",\n        \"Cem-rl: Combining evolutionary and gradient-based methods for policy search\",\n        \"Automl-zero: Evolving machine learning algorithms from scratch\",\n        \"Neuroevolution in games: State of the art and open challenges\",\n        \"Learning equations for extrapolation and control\",\n        \"Distilling free-form natural laws from experimental data\",\n        \"Deep reinforcement learning using genetic algorithm for parameter optimization\",\n        \"Evolving neural networks through augmenting topologies\",\n        \"Designing neural networks through neuroevolution\",\n        \"Deep neuroevolution: Genetic algorithms are a competitive alternative for training deep neural networks for reinforcement learning\",\n        \"Off-policy reinforcement learning for efficient and effective gan architecture search\",\n        \"Faster genetic programming based on local gradient search of numeric leaf values\",\n        \"neat genetic programming: Controlling bloat naturally\",\n        \"Ai feynman: A physics-inspired method for symbolic regression\",\n        \"Semantically-based crossover in genetic programming: Application to realvalued symbolic regression\",\n        \"Natural evolution strategies\",\n        \"Simple statistical gradient-following algorithms for connectionist reinforcement learning\",\n        \"Genetic programming with gradient descent search for multiclass object classification\"\n    ],\n    \"reasoning\": \"Selected these 48 references because they represent foundational work and recent advances in Symbolic Regression via Neural-Guided Genetic Programming Population Seeding, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}