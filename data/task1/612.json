{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 54 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Mainlining Databases: Supporting Fast Transactional Workloads on Universal Columnar Data File Formats\n\nPaper Abstract: Abstract. The proliferation of modern data processing tools has given rise to open-source columnar data formats. The advantage of these formats is that they help organizations avoid repeatedly converting data to a new format for each application. These formats, however, are read-only, and organizations must use a heavy-weight transformation process to load data from on-line transactional processing (OLTP) systems. We aim to reduce or even eliminate this process by developing a storage architecture for in-memory database management systems (DBMSs) that is aware of the eventual usage of its data and emits columnar storage blocks in a universal open-source format. We introduce relaxations to common analytical data formats to efficiently update records and rely on a lightweight transformation process to convert blocks to a read-optimized layout when they are cold. We also describe how to access data from third-party analytical tools with minimal serialization overhead. To evaluate our work, we implemented our storage engine based on the Apache Arrow format and integrated it into the DB-X DBMS. Our experiments show that our approach achieves comparable performance with dedicated OLTP DBMSs while enabling orders-of-magnitude faster data exports to external data science and machine learning tools than existing methods.\n\n{retrieved_text}\n\nGenerate exactly 54 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 54\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"olap4j: Open Java API for OLAP\",\n        \"Guaranteed Atomic Operations on Intel Processors\",\n        \"Apache Arrow\",\n        \"Apache Arrow Source Code\",\n        \"Apache Hive\",\n        \"Apache Impala\",\n        \"Apache Kudu\",\n        \"Apache ORC\",\n        \"Apache Parquet\",\n        \"CMDB\",\n        \"Databricks Delta Lake\",\n        \"Dremio\",\n        \"IBM DB2 Pure Scale\",\n        \"MemSQL SingleStore\",\n        \"Microsoft Analytics Platform System\",\n        \"Microsoft SQL Server with SMB Direct\",\n        \"OmniSci GPU-Accelerated Analytics\",\n        \"Oracle Real Application Cluster\",\n        \"TensorFlow I/O Apache Arrow Datasets\",\n        \"Transaction Semantics in Apache Kudu\",\n        \"Using PyArrow from C++ and Cython Code\",\n        \"Column-stores vs. Row-stores: How Different Are They Really?\",\n        \"Data Page Layouts for Relational Databases on Deep Memory Hierarchies\",\n        \"H2O: A Hands-free Adaptive Store\",\n        \"Bridging the Archipelago Between Row-Stores and Column-Stores for Hybrid Workloads\",\n        \"Designing Access Methods: The RUM Conjecture\",\n        \"Multiversion Concurrency Control – Theory and Algorithms\",\n        \"The End of Slow Networks: It’s Time for a Redesign\",\n        \"MonetDB/X100: Hyper-pipelining query execution\",\n        \"FASTER: A Concurrent Key-Value Store with In-Place Updates\",\n        \"Anti-Caching: A New Approach to Database Management System Architecture\",\n        \"Implementation Techniques for Main Memory Database Systems\",\n        \"No Compromises: Distributed Transactions with Consistency, Availability, and Performance\",\n        \"Compacting Transactional Data in Hybrid OLTP & OLAP Databases\",\n        \"HYRISE: A Main Memory Hybrid Storage Engine\",\n        \"Read-optimized Databases, in Depth\",\n        \"HyPer: A Hybrid OLTP&OLAP Main Memory Database System Based on Virtual Memory Snapshots\",\n        \"Everything You Always Wanted to Know About Compiled and Vectorized Queries But Were Afraid to Ask\",\n        \"Data Blocks: Hybrid OLTP and OLAP on Compressed Storage Using Both Vectorization and Compilation\",\n        \"High-performance Concurrency Control Mechanisms for Main-memory Databases\",\n        \"Hybrid Garbage Collection for Multi-Version Concurrency Control in SAP HANA\",\n        \"Accelerating Relational Databases by Leveraging Remote Memory and RDMA\",\n        \"Relaxed Operator Fusion for In-Memory Databases: Making Compilation, Vectorization, and Prefetching Work Together At Last\",\n        \"ARIES: A Transaction Recovery Method Supporting Fine-granularity Locking and Partial Rollbacks Using Write-ahead Logging\",\n        \"Fast Serializable Multi-Version Concurrency Control for Main-Memory Database Systems\",\n        \"Don’t Hold My Data Hostage: A Case for Client Protocol Redesign\",\n        \"L-Store: A Real-time OLTP and OLAP System\",\n        \"Efficient transaction processing in SAP HANA database: the end of a column store myth\",\n        \"The end of an Architectural Era: (It’s Time for a Complete Rewrite)\",\n        \"TPC-C Benchmark (Revision 5.9.0)\",\n        \"Speedy Transactions in Multicore In-memory Databases\",\n        \"Building a Bw-Tree Takes More Than Just Buzz Words\",\n        \"An Empirical Evaluation of In-Memory Multi-Version Concurrency Control\",\n        \"Staring into the Abyss: An Evaluation of Concurrency Control with One Thousand Cores\"\n    ],\n    \"reasoning\": \"Selected these 54 references because they represent foundational work and recent advances in Mainlining Databases: Supporting Fast Transactional Workloads on Universal Columnar Data File Formats, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}