{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 48 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: REFACTOR: Learning to Extract Theorems from Proofs\n\nPaper Abstract: Abstract Human mathematicians are often good at recognizing modular and reusable theorems that make complex mathematical results within reach. In this paper, we propose a novel method called theoREm-from-prooF extrACTOR (REFACTOR) for training neural networks to mimic this ability in formal mathematical theorem proving. We show on a set of unseen proofs, REFACTOR is able to extract 19.6%percent19.619.6\\% of the theorems that humans would use to write the proofs. When applying the model to the existing Metamath library, REFACTOR extracted 161616 new theorems. With newly extracted theorems, we show that the existing proofs in the MetaMath database can be refactored. The new theorems are used very frequently after refactoring, with an average usage of 733.5733.5733.5 times, and help shorten the proof lengths. Lastly, we demonstrate that the prover trained on the new-theorem refactored dataset proves more test theorems and outperforms state-of-the-art baselines by frequently leveraging a diverse set of newly extracted theorems. Code can be found at https://github.com/jinpz/refactor.\n\n{retrieved_text}\n\nGenerate exactly 48 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 48\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Neural module networks\",\n        \"Proving theorems using incremental learning and hindsight experience replay\",\n        \"Holist: An environment for machine learning of higher order logic theorem proving\",\n        \"Learning to Reason in Large Theories without Imitation\",\n        \"The Coq proof assistant reference manual\",\n        \"Top-down synthesis for library learning\",\n        \"Automatically composing representation transformations as a means for generalization\",\n        \"Functionality in combinatory logic\",\n        \"The Lean theorem prover (system description)\",\n        \"Bootstrap learning via modular concept discovery\",\n        \"Learning libraries of subroutines for neurally-guided bayesian program induction\",\n        \"Dreamcoder: Growing generalizable, interpretable knowledge with wake-sleep bayesian program learning\",\n        \"Fast graph representation learning with PyTorch Geometric\",\n        \"Differentiable programs with neural libraries\",\n        \"Sharing HOL4 and HOL light proof knowledge\",\n        \"Initial experiments with statistical conjecturing over large formal corpora\",\n        \"Learning to prove with tactics\",\n        \"Transformers Generalize to the Semantics of Logics\",\n        \"Inductive representation learning on large graphs\",\n        \"HOL Light: A tutorial introduction\",\n        \"A neuro-vector-symbolic architecture for solving ravenâ€™s progressive matrices\",\n        \"Towards algorithmic cut-introduction\",\n        \"The formulae-as-types notion of construction\",\n        \"GamePad: A learning environment for theorem proving\",\n        \"Compositional attention networks for machine reasoning\",\n        \"Compositional generalization through abstract representations in human and artificial neural networks\",\n        \"Learning-assisted theorem proving with millions of lemmas\",\n        \"Lemmatization for stronger reasoning in large theories\",\n        \"Adam: A method for stochastic optimization\",\n        \"Deep learning for symbolic mathematics\",\n        \"Isarstep: a benchmark for high-level mathematical reasoning\",\n        \"The neuro-symbolic concept learner: Interpreting scenes, words, and sentences from natural supervision\",\n        \"An evolutionary/heuristic-based proof searching framework for interactive theorem prover\",\n        \"Pytorch: An imperative style, high-performance deep learning library\",\n        \"Guiding Inferences in Connection Tableau by Recurrent Neural Networks\",\n        \"Generative language modeling for automated theorem proving\",\n        \"Mathematical reasoning via self-supervised skip-tree training\",\n        \"Lemmas: Generation, selection, application\",\n        \"First Neural Conjecturing Datasets and Experiments\",\n        \"Automated proof compression by invention of new definitions\",\n        \"Propositions as types\",\n        \"Learning to prove theorems by learning to generate theorems\",\n        \"Exploration of neural machine translation in autoformalization of mathematics in mizar\",\n        \"Holophrasm: a neural automated theorem prover for higher-order logic\",\n        \"The scattering compositional learner: Discovering objects, attributes, relationships in analogical reasoning\",\n        \"INT: An Inequality Benchmark for Evaluating Generalization in Theorem Proving\",\n        \"Learning to Prove Theorems via Interacting with Proof Assistants\",\n        \"Leandojo: Theorem proving with retrieval-augmented language models\"\n    ],\n    \"reasoning\": \"Selected these 48 references because they represent foundational work and recent advances in REFACTOR: Learning to Extract Theorems from Proofs, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}