{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 44 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: 1 INTRODUCTION\n\nPaper Abstract: Abstract Many of today‚Äôs probabilistic programming languages (PPLs) have brittle inference performance: the performance of the underlying inference algorithm is very sensitive to the precise way in which the probabilistic program is written. A standard way of addressing this challenge in traditional programming languages is via program optimizations, which seek to unburden the programmer from writing low-level performant code, freeing them to work at a higher-level of abstraction. The arsenal of applicable program optimizations for PPLs to choose from is scarce in comparison to traditional programs; few of today‚Äôs PPLs offer significant forms of automated program optimization. In this work we develop a new family of program optimizations specific to discrete-valued knowledge compilation based PPLs. We identify a particular form of program structure unique to these PPLs that tangibly affects exact inference performance in these programs: redundant random variables ‚Äì variables with repeated parameters and inconsistent path conditions. We develop a new program analysis and associated optimization called flip-hoisting that identifies these redundancies and optimizes them into a single random variable. We show that flip-hoisting yields inference speedups of up to 60% on applications of probabilistic programs such as Bayesian networks and probabilistic verification.\n\n{retrieved_text}\n\nGenerate exactly 44 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 44\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Exploiting symmetries for scaling loopy belief propagation and relational training\",\n        \"Compilers, principles, techniques\",\n        \"A theory of slicing for imperative probabilistic programs\",\n        \"Semi-symbolic inference for efficient streaming probabilistic programming\",\n        \"Context-specific independence in bayesian networks\",\n        \"Lifted first-order probabilistic inference\",\n        \"On probabilistic inference by weighted model counting\",\n        \"Compiling relational bayesian networks for exact inference\",\n        \"Compiling probabilistic graphical models using sentential decision diagrams\",\n        \"Probabilistic circuits: A unifying framework for tractable probabilistic models\",\n        \"Modeling and reasoning with Bayesian networks\",\n        \"A knowledge compilation map\",\n        \"Weighted model counting without parameter variables\",\n        \"Addmc: weighted model counting with algebraic decision diagrams\",\n        \"Inference in probabilistic logic programs using weighted cnf‚Äôs\",\n        \"Psi: Exact symbolic inference for probabilistic programs\",\n        \"ŒªùúÜ\\\\lambdapsi: exact inference for higher-order probabilistic programs\",\n        \"Samplesearch: Importance sampling in presence of determinism\",\n        \"Automatic reparameterisation of probabilistic programs\",\n        \"Autoconj: recognizing and exploiting conjugacy without a domain-specific language\",\n        \"Scaling exact inference for discrete probabilistic programs\",\n        \"Model checking finite-horizon markov chains with probabilistic inference\",\n        \"Compiling markov chain monte carlo algorithms for probabilistic modeling\",\n        \"Slicing probabilistic programs\",\n        \"Lifted probabilistic inference\",\n        \"Symbolic execution and program testing\",\n        \"Llvm and clang: Next generation compiler technology\",\n        \"Sympais: Symbolic parallel adaptive importance sampling for probabilistic program analysis\",\n        \"And/or branch-and-bound search for combinatorial optimization in graphical models\",\n        \"And/or multi-valued decision diagrams (aomdds) for graphical models\",\n        \"Delayed sampling and automatic rao-blackwellization of probabilistic programs\",\n        \"Probabilistic inference by program transformation in hakaru (system description)\",\n        \"Learning and inference in tractable probabilistic knowledge bases\",\n        \"R2: An efficient mcmc sampler for probabilistic programs\",\n        \"Jags: A program for analysis of bayesian graphical models using gibbs sampling\",\n        \"First-order probabilistic inference\",\n        \"Sum-product networks: A new deep architecture\",\n        \"Cutset networks: A simple, tractable, and scalable approach for improving the accuracy of chow-liu trees\",\n        \"Deep amortized inference for probabilistic programs\",\n        \"SPPL: probabilistic programming with fast exact symbolic inference\",\n        \"Performing bayesian inference by weighted model counting\",\n        \"Affine algebraic decision diagrams (aadds) and their application to structured probabilistic inference\",\n        \"Bugs: A program to perform bayesian inference using gibbs sampling\",\n        \"Divide, conquer, and combine: a new inference strategy for probabilistic programs with stochastic support\"\n    ],\n    \"reasoning\": \"Selected these 44 references because they represent foundational work and recent advances in 1 INTRODUCTION, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}