{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 46 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Efficient Data-specific Model Search for Collaborative Filtering\n\nPaper Abstract: Abstract. Collaborative filtering (CF), as a fundamental approach for recommender systems, is usually built on the latent factor model with learnable parameters to predict users’ preferences towards items. However, designing a proper CF model for a given data is not easy, since the properties of datasets are highly diverse. In this paper, motivated by the recent advances in automated machine learning (AutoML), we propose to design a data-specific CF model by AutoML techniques. The key here is a new framework that unifies state-of-the-art (SOTA) CF methods and splits them into disjoint stages of input encoding, embedding function, interaction function, and prediction function. We further develop an easy-to-use, robust, and efficient search strategy, which utilizes random search and a performance predictor for efficient searching within the above framework. In this way, we can combinatorially generalize data-specific CF models, which have not been visited in the literature, from SOTA ones. Extensive experiments on five real-world datasets demonstrate that our method can consistently outperform SOTA ones for various CF tasks. Further experiments verify the rationality of the proposed framework and the efficiency of the search strategy. The searched CF models can also provide insights for exploring more effective methods in the future.\n\n{retrieved_text}\n\nGenerate exactly 46 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 46\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Learnable Embedding Sizes for Recommender Systems\",\n        \"The netflix prize\",\n        \"Random search for hyper-parameter optimization\",\n        \"Algorithms for hyper-parameter optimization\",\n        \"Root mean square error (RMSE) or mean absolute error (MAE)?–Arguments against avoiding RMSE in the literature\",\n        \"Joint Neural Collaborative Filtering for Recommender Systems\",\n        \"DELF: A Dual-Embedding based Deep Latent Factor Model for Recommendation.\",\n        \"Are we really making much progress? A worrying analysis of recent neural recommendation approaches\",\n        \"Efficient benchmarking of hyperparameter optimizers via surrogates\",\n        \"Auto-sklearn: efficient and robust automated machine learning\",\n        \"Neural collaborative filtering\",\n        \"Collaborative metric learning\",\n        \"Sequential model-based optimization for general algorithm configuration\",\n        \"Automated Machine Learning\",\n        \"Fism: factored item similarity models for top-n recommender systems\",\n        \"Adam: A method for stochastic optimization\",\n        \"Factorization meets the neighborhood: a multifaceted collaborative filtering model\",\n        \"Deep learning\",\n        \"Hyperband: a novel bandit-based approach to hyperparameter optimization\",\n        \"Random search and reproducibility for neural architecture search\",\n        \"Amazon.com recommendations: Item-to-item collaborative filtering\",\n        \"Auto-deeplab: Hierarchical neural architecture search for semantic image segmentation\",\n        \"Progressive neural architecture search\",\n        \"DARTS: Differentiable architecture search\",\n        \"Introduction to information retrieval\",\n        \"Hoeffding races: Accelerating model selection search for classification and function approximation\",\n        \"Slim: Sparse linear methods for top-n recommender systems\",\n        \"Efficient Neural Architecture Search via Parameter Sharing\",\n        \"Factorization machines\",\n        \"Evaluation Metrics for Item Recommendation under Sampling\",\n        \"BPR: Bayesian personalized ranking from implicit feedback\",\n        \"Item-based collaborative filtering recommendation algorithms\",\n        \"Evaluating the search phase of neural architecture search\",\n        \"The evolved transformer\",\n        \"Efficientnet: Rethinking model scaling for convolutional neural networks\",\n        \"Auto-WEKA: Combined selection and hyperparameter optimization of classification algorithms\",\n        \"KGAT: Knowledge Graph Attention Network for Recommendation\",\n        \"Neural Graph Collaborative Filtering\",\n        \"Genetic CNN\",\n        \"Deep Matrix Factorization Models for Recommender Systems.\",\n        \"Efficient Neural Interaction Functions Search for Collaborative Filtering, In WWW\",\n        \"Taking human out of learning applications: A survey on automated machine learning\",\n        \"Differentiable Neural Architecture Search via Proximal Iterations\",\n        \"AutoSF: Searching Scoring Functions for Knowledge Graph Embedding\",\n        \"Improving recommendation lists through topic diversification\",\n        \"Neural architecture search with reinforcement learning\"\n    ],\n    \"reasoning\": \"Selected these 46 references because they represent foundational work and recent advances in Efficient Data-specific Model Search for Collaborative Filtering, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}