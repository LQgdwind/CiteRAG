{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 47 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Revisiting File Context for Source Code Summarization\n\nPaper Abstract: Abstract Source code summarization is the task of writing natural language descriptions of source code. A typical use case is generating short summaries of subroutines for use in API documentation. The heart of almost all current research into code summarization is the encoder-decoder neural architecture, and the encoder input is almost always a single subroutine or other short code snippet. The problem with this setup is that the information needed to describe the code is often not present in the code itself – that information often resides in other nearby code. In this paper, we revisit the idea of “file context” for code summarization. File context is the idea of encoding select information from other subroutines in the same file. We propose a novel modification of the Transformer architecture that is purpose-built to encode file context and demonstrate its improvement over several baselines. We find that file context helps on a subset of challenging examples where traditional approaches struggle.\n\n{retrieved_text}\n\nGenerate exactly 47 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 47\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"A transformer-based approach for source code summarization\",\n        \"Unified pre-training for program understanding and generation\",\n        \"Few-shot training llms for project-specific code-summarization\",\n        \"The adverse effects of code duplication in machine learning models of code\",\n        \"code2vec: Learning distributed representations of code\",\n        \"Meteor: An automatic metric for mt evaluation with improved correlation with human judgments\",\n        \"Project-level encoding for neural source code summarization of subroutines\",\n        \"Function call graph context encoding for neural source code summarization\",\n        \"Towards modeling human attention from eye movements for neutral source code summarization\",\n        \"Named tensor notation\",\n        \"” yours is better!” participant response bias in hci\",\n        \"Cocomic: Code completion by jointly modeling in-file and cross-file context\",\n        \"Codebert: A pre-trained model for programming and natural languages\",\n        \"An experimental investigation on the effects of context on source code identifiers splitting and expansion\",\n        \"A multi-perspective architecture for semantic code search\",\n        \"Improved automatic summarization of subroutines via attention to file context\",\n        \"Action word prediction for neural source code summarization\",\n        \"Semantic similarity metrics for evaluating source code summarization\",\n        \"Automatically capturing source code context of nl-queries for software maintenance and reuse\",\n        \"Using structural context to recommend source code examples\",\n        \"Lora: Low-rank adaptation of large language models\",\n        \"Deep code comment generation\",\n        \"Summarizing source code with transferred api knowledge\",\n        \"Improve transformer models with better relative position embeddings\",\n        \"Exhaustive or exhausting? evidence on respondent fatigue in long surveys\",\n        \"Api documentation from source code comments: a case study of javadoc\",\n        \"Code comment generation based on graph neural network enhanced transformer model for code understanding in open-source software ecosystems\",\n        \"Recommendations for datasets for source code summarization\",\n        \"A neural model for generating natural language summaries of program subroutines\",\n        \"Improved code summarization via a graph neural network\",\n        \"Setransformer: A transformer-based code semantic parser for code comment generation\",\n        \"Automatic generation of text descriptive comments for code blocks\",\n        \"Retrieval-augmented generation for code summarization via hybrid {gnn}\",\n        \"A framework for writing trigger-action todo comments in executable format\",\n        \"How do professional developers comprehend software?\",\n        \"Reassessing automatic evaluation metrics for code summarization tasks\",\n        \"Are we building on the rock? on the importance of data preprocessing for code summarization\",\n        \"Cognitive fatigue influences students’ performance on standardized tests\",\n        \"Towards automatically generating summary comments for java methods\",\n        \"Sequence to sequence learning with neural networks\",\n        \"Ast-trans: Code summarization with efficient tree-structured attention\",\n        \"Llama: Open and efficient foundation language models\",\n        \"Attention is all you need\",\n        \"Improving automatic source code summarization via deep reinforcement learning\",\n        \"Code generation as a dual task of code summarization\",\n        \"Retrieve and refine: exemplar-based neural comment generation\",\n        \"Language-agnostic representation learning of source code from structure and context\"\n    ],\n    \"reasoning\": \"Selected these 47 references because they represent foundational work and recent advances in Revisiting File Context for Source Code Summarization, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}