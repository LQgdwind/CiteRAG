{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 55 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Synthesizing Document Database Queries using Collection Abstractions\n\nPaper Abstract: Abstract Document databases are increasingly popular in various applications, but their queries are challenging to write due to the flexible and complex data model underlying document databases. This paper presents a synthesis technique that aims to generate document database queries from input-output examples automatically. A new domain-specific language is designed to express a representative set of document database queries in an algebraic style. Furthermore, the synthesis technique leverages a novel abstraction of collections for deduction to efficiently prune the search space and quickly generate the target query. An evaluation of 110 benchmarks from various sources shows that the proposed technique can synthesize 108 benchmarks successfully. On average, the synthesizer can generate document database queries from a small number of input-output examples within tens of seconds.\n\n{retrieved_text}\n\nGenerate exactly 55 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 55\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Scaling enumerative program synthesis via divide and conquer\",\n        \"A comprehensive solution to the xml-to-relational mapping problem\",\n        \"Efficient schema-based xml-to-relational data mapping\",\n        \"Imageeye: Batch image processing using program synthesis\",\n        \"Flashrelate: extracting relational data from semi-structured spreadsheets using examples\",\n        \"Autopandas: neural-backed generators for program synthesis\",\n        \"Multi-modal synthesis of regular expressions\",\n        \"Program synthesis using deduction-guided reinforcement learning\",\n        \"Synthesis-powered optimization of smart contracts via data type refactoring\",\n        \"CouchDB\",\n        \"Z3: an efficient SMT solver\",\n        \"Wrex: A unified programming-by-example interaction for synthesizing readable code for data scientists\",\n        \"Program synthesis using conflict-driven learning\",\n        \"Component-based synthesis of table consolidation and transformation tasks from examples\",\n        \"Synthesizing data structure transformations from input-output examples\",\n        \"Codehint: dynamic and interactive synthesis of code snippets\",\n        \"Navigating the data lake with datamaran: Automatically extracting structure from log datasets\",\n        \"Automating string processing in spreadsheets using input-output examples\",\n        \"Program synthesis by type-guided abstraction refinement\",\n        \"Spreadsheet table transformations from examples\",\n        \"Reconciling enumerative and deductive program synthesis\",\n        \"Improving oracle-guided inductive synthesis by efficient question selection\",\n        \"Neural-guided deductive search for real-time program synthesis from examples\",\n        \"Flashextract: a framework for data extraction by examples\",\n        \"Staged program repair with condition synthesis\",\n        \"Trinity: an extensible synthesis framework for data science\",\n        \"Angelix: scalable multiline program patch synthesis via symbolic analysis\",\n        \"Optimal program synthesis via abstract interpretation\",\n        \"MongoDB\",\n        \"Why use mongodb and when to use it?\",\n        \"Explainable program synthesis by localizing specifications\",\n        \"SOAR: A synthesis approach for data science API refactoring\",\n        \"Pyter: effective program repair for python type errors\",\n        \"Synthesis of forgiving data extractors\",\n        \"Type-and-example-directed program synthesis\",\n        \"Semantic code refactoring for abstract data types\",\n        \"Flashmeta: a framework for inductive program synthesis\",\n        \"Refactoring with synthesis\",\n        \"Code completion with statistical language models\",\n        \"A general technique for querying xml documents using a relational database system\",\n        \"Synthesizing imperative programs from examples guided by static analysis\",\n        \"Syrust: automatic testing of rust libraries with semantic-aware program synthesis\",\n        \"Patsql: efficient synthesis of sql queries from example tables with quick inference of projected columns\",\n        \"Storing and querying ordered xml using a relational database system\",\n        \"Abstraction-guided synthesis of synchronization\",\n        \"Synthesizing highly expressive sql queries from input-output examples\",\n        \"Program synthesis using abstraction refinement\",\n        \"Data migration using datalog program synthesis\",\n        \"Precise condition synthesis for program repair\",\n        \"Synthesizing transformations on hierarchically structured data\",\n        \"Automated migration of hierarchical data to relational tables using programming-by-example\",\n        \"Sqlizer: query synthesis from natural language\",\n        \"Automatically synthesizing sql queries from input-output examples\",\n        \"History-driven test program synthesis for JVM testing\",\n        \"Synthesizing analytical sql queries from computation demonstration\"\n    ],\n    \"reasoning\": \"Selected these 55 references because they represent foundational work and recent advances in Synthesizing Document Database Queries using Collection Abstractions, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}