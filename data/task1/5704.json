{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 54 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: RL4ReAl: Reinforcement Learning for Register Allocation\n\nPaper Abstract: Abstract. We aim to automate decades of research and experience in register allocation, leveraging machine learning. We tackle this problem by embedding a multi-agent reinforcement learning algorithm within LLVM, training it with the state of the art techniques. We formalize the constraints that precisely define the problem for a given instruction-set architecture, while ensuring that the generated code preserves semantic correctness. We also develop a gRPC based framework providing a modular and efficient compiler interface for training and inference. Our approach is architecture independent: we show experimental results targeting Intel x86 and ARM AArch64. Our results match or out-perform the heavily tuned, production-grade register allocators of LLVM.\n\n{retrieved_text}\n\nGenerate exactly 54 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 54\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Deep Reinforcement Learning meets Graph Neural Networks: exploring a routing optimization use case\",\n        \"Introduction to Machine Learning (2nd ed.)\",\n        \"Optimal Spilling for CISC Machines with Few Registers\",\n        \"MiCOMP: Mitigating the Compiler Phase-Ordering Problem Using Optimization Sub-Sequences and Machine Learning\",\n        \"Optimal Bitwise Register Allocation Using Integer Linear Programming\",\n        \"Neural Code Comprehension: A Learnable Representation of Code Semantics\",\n        \"Translating Embeddings for Modeling Multi-relational Data\",\n        \"Register Allocation: What Does the NP-Completeness Proof of Chaitin et al. Really Prove? Or Revisiting Register Allocation: Why and How\",\n        \"Improvements to Graph Coloring Register Allocation\",\n        \"Polynomial time graph coloring register allocation\",\n        \"Register allocation via coloring\",\n        \"Using integer linear programming for instruction scheduling and register allocation in multi-issue processors\",\n        \"Register Allocation for Intel Processor Graphics\",\n        \"Learning Phrase Representations using RNN Encoder–Decoder for Statistical Machine Translation\",\n        \"The Priority-Based Coloring Approach to Register Allocation\",\n        \"PBQP Register Allocation\",\n        \"ProGraML: A Graph-based Program Representation for Data Flow Analysis and Compiler Optimizations\",\n        \"CompilerGym: Robust, Performant Compiler Optimization Environments for AI Research\",\n        \"Efficiently Computing Static Single Assignment Form and the Control Dependence Graph\",\n        \"Deep Learning-based Approximate Graph-Coloring Algorithm for Register Allocation\",\n        \"Milepost GCC: Machine Learning Enabled Self-tuning Compiler\",\n        \"Computers and Intractability: A Guide to the Theory of NP-Completeness\",\n        \"gRPC Remote Procedure Calls\",\n        \"Register Allocation for Programs in SSA-Form\",\n        \"NeuroVectorizer: End-to-End Vectorization with Deep Reinforcement Learning\",\n        \"Nearly Optimal Register Allocation with PBQP\",\n        \"Coloring Big Graphs with AlphaGoZero\",\n        \"POSET-RL: Phase ordering for Optimizing Size and Execution Time using Reinforcement Learning\",\n        \"Greedy Register Allocation in LLVM 3.0\",\n        \"Qt-opt: Scalable deep reinforcement learning for vision-based robotic manipulation\",\n        \"Irregular Register Allocation for Translation of Test-Pattern Programs\",\n        \"Solving PBQP-Based Register Allocation Using Deep Reinforcement Learning\",\n        \"Deep Reinforcement Learning for Autonomous Driving: A Survey\",\n        \"Constraints-Driven Scheduling and Resource Assignment\",\n        \"LLVM: a compilation framework for lifelong program analysis & transformation\",\n        \"Performance Counters for Linux\",\n        \"LLVM Machine Code Analyzer\",\n        \"Constraint-Based Register Allocation and Instruction Scheduling\",\n        \"Static Neural Compiler Optimization via Deep Reinforcement Learning\",\n        \"Ithemal: Accurate, Portable and Fast Basic Block Throughput Estimation using Deep Neural Networks\",\n        \"Compiler Auto-Vectorization with Imitation Learning\",\n        \"Register Allocation and Optimal Spill Code Scheduling in Software Pipelined Loops Using 0-1 Integer Linear Programming Formulation\",\n        \"Linear Scan Register Allocation\",\n        \"PolyBench 4.2 Benchmarks\",\n        \"Register Allocation by Puzzle Solving\",\n        \"Proximal policy optimization algorithms\",\n        \"Hybrid Register Allocation with Spill Cost and Pattern Guided Optimization\",\n        \"Mastering the game of go without human knowledge\",\n        \"Automatic Construction of Inlining Heuristics Using Machine Learning\",\n        \"Flow2Vec: Value-Flow-Based Precise Code Embedding\",\n        \"GRANITE: A Graph Neural Network Model for Basic Block Throughput Estimation\",\n        \"MLGO: a Machine Learning Guided Compiler Optimizations Framework\",\n        \"IR2Vec: LLVM IR Based Scalable Program Embeddings\",\n        \"A Detailed Analysis of the LLVM’s Register Allocators\"\n    ],\n    \"reasoning\": \"Selected these 54 references because they represent foundational work and recent advances in RL4ReAl: Reinforcement Learning for Register Allocation, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}