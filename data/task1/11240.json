{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 46 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Typing Requirement Model as Coroutines\n\nPaper Abstract: Abstract Model-Driven Engineering (MDE) is a technique that aims to boost productivity in software development and ensure the safety of critical systems. Central to MDE is the refinement of high-level requirement models into executable code. Given that requirement models form the foundation of the entire development process, ensuring their correctness is crucial. RM2PT is a widely used MDE platform that employs the REModel language for requirement modeling. REModel contains contract sections and other sections including a UML sequence diagram. This paper contributes a coroutine-based type system that represents pre- and post-conditions in the contract sections in a requirement model as the receiving and yielding parts of coroutines, respectively. The type system is capable of composing coroutine types, so that users can view functions as a whole system and check their collective behavior. By doing so, our type system ensures that the contracts defined in it are executed as outlined in the accompanied sequence diagram. We assessed our approach using four case studies provided by RM2PT, validating the accuracy of the models.\n\n{retrieved_text}\n\nGenerate exactly 46 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 46\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Methods and tools for the integration of formal verification in domain-specific languages\",\n        \"User experience for model-driven engineering: Challenges and future directions\",\n        \"Requirements engineering as a success factor in software projects\",\n        \"Leveraging formal verification tools for dsml users: a process modeling case study\",\n        \"Comparing task practicing and prototype fidelities when applying scenario acting to elicit requirements\",\n        \"Automated prototype generation from formal requirements model\",\n        \"Transformation from mvc applications to smart contracts\",\n        \"Rm2doc: a tool for automatic generation of requirements documents from requirements models\",\n        \"Deepocl: A deep neural network for object constraint language generation from unrestricted nature language\",\n        \"An investigation into ui generation compliant with hci standards ensuring artifact consistency across sdlc\",\n        \"Object Constraint Language\",\n        \"A survey on the practical use of uml for different software architecture viewpoints\",\n        \"The definitive ANTLR 4 reference\",\n        \"A static semantics for haskell\",\n        \"Type systems as macros\",\n        \"A brief overview of Agda–a functional language with dependent types\",\n        \"An outline of the programming language simula\",\n        \"Rm2pt case studies\",\n        \"Dependent types at work\",\n        \"RM2PT: A tool for automated prototype generation from requirements model\",\n        \"Scala type system\",\n        \"Thinking as computation: A first course\",\n        \"Design of a separable transition-diagram compiler\",\n        \"The Art of Computer Programming: Fundamental Algorithms, volume 1\",\n        \"Formal verification of aadl specifications in the topcased environment\",\n        \"Model-driven software engineering in practice\",\n        \"Evaluating the use of domain-specific modeling in practice\",\n        \"Domain-Driven Design Reference: Definitions and Pattern Summaries\",\n        \"A tutorial on metamodelling for grammar researchers\",\n        \"Evolving models in model-driven engineering: State-of-the-art and future challenges\",\n        \"Towards model checking ocl\",\n        \"A property-driven approach to formal verification of process models\",\n        \"The tool tina–construction of abstract state spaces for petri nets and time petri nets\",\n        \"Embedding domain-specific modelling languages in maude specifications\",\n        \"All about maude-a high-performance logical framework: how to specify, program, and verify systems in rewriting logic\",\n        \"Fiacre: an intermediate language for model verification in the topcased environment\",\n        \"Performance analysis of kotlin coroutines on android in a model-view-intent architecture pattern\",\n        \"Kotlin coroutines based mvi architecture library for android\",\n        \"Revisiting coroutines\",\n        \"Certifying derivation of state machines from coroutines\",\n        \"Theory and practice of coroutines with snapshots\",\n        \"The 1+ 5 architectural views model in designing blockchain and it system integration solutions\",\n        \"Type theory as a foundation for computer science\",\n        \"Towards a practical programming language based on dependent type theory\",\n        \"A type system for format strings\",\n        \"A type system for regular expressions\"\n    ],\n    \"reasoning\": \"Selected these 46 references because they represent foundational work and recent advances in Typing Requirement Model as Coroutines, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}