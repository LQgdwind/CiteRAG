{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 61 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: NeuroBack: Improving CDCL SAT Solving using Graph Neural Networks\n\nPaper Abstract: Abstract Propositional satisfiability (SAT) is an NP-complete problem that impacts many research fields, such as planning, verification, and security. Mainstream modern SAT solvers are based on the Conflict-Driven Clause Learning (CDCL) algorithm. Recent work aimed to enhance CDCL SAT solvers using Graph Neural Networks (GNNs). However, so far this approach either has not made solving more effective, or required substantial GPU resources for frequent online model inferences. Aiming to make GNN improvements practical, this paper proposes an approach called NeuroBack, which builds on two insights: (1) predicting phases (i.e., values) of variables appearing in the majority (or even all) of the satisfying assignments are essential for CDCL SAT solving, and (2) it is sufficient to query the neural model only once for the predictions before the SAT solving starts. Once trained, the offline model inference allows NeuroBack to execute exclusively on the CPU, removing its reliance on GPU resources. To train NeuroBack, a new dataset called DataBack containing 120,286 data samples is created. NeuroBack is implemented as an enhancement to a state-of-the-art SAT solver called Kissat. As a result, it allowed Kissat to solve up to 5.2% and 7.4% more problems on two recent SAT competition problem sets, SATCOMP-2022 and SATCOMP-2023, respectively. NeuroBack therefore shows how machine learning can be harnessed to improve SAT solving in an effective and practical manner.\n\n{retrieved_text}\n\nGenerate exactly 61 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 61\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Model counting competition 2020 url\",\n        \"Model counting competition 2021 url\",\n        \"Model counting competition 2022 url\",\n        \"Sat competition 2022\",\n        \"Sat competition 2023\",\n        \"Boosting the performance of cdcl-based sat solvers by exploiting backbones and backdoors\",\n        \"On the glucose sat solver\",\n        \"Layer normalization\",\n        \"Relational inductive biases, deep learning, and graph networks\",\n        \"Chasing target phases\",\n        \"Gimsatul, IsaSAT and Kissat entering the SAT Competition 2022\",\n        \"Cadical, kissat, paracooba entering the sat competition 2021\",\n        \"Cadiback: Extracting backbones with cadical\",\n        \"Measuring and relieving the over-smoothing problem for graph neural networks from the topological view\",\n        \"A machine program for theorem-proving\",\n        \"An image is worth 16x16 words: Transformers for image recognition at scale\",\n        \"An extensible sat-solver\",\n        \"Fast graph representation learning with PyTorch Geometric\",\n        \"conv.gatconv\",\n        \"conv.ginconv\",\n        \"The model counting competition 2020\",\n        \"Cadical, kissat, paracooba, plingeling and treengeling entering the sat competition 2020\",\n        \"Neural message passing for quantum chemistry\",\n        \"A new model for learning in graph domains\",\n        \"Manysat: a parallel sat solver\",\n        \"Inductive representation learning on large graphs\",\n        \"Enhancing sat solvers with glue variable predictions\",\n        \"Proceedings of SAT competition 2018: Solver and benchmark descriptions\",\n        \"Satlib: An online resource for research on sat\",\n        \"SAT solving in interactive configuration\",\n        \"Neural heuristics for sat solving\",\n        \"Backbones and backdoors in satisfiability\",\n        \"Semi-supervised classification with graph convolutional networks\",\n        \"Improving SAT solver heuristics with graph networks and reinforcement learning\",\n        \"Cnfgen: A generator of crafted benchmarks\",\n        \"Learning rate based branching heuristic for sat solvers\",\n        \"Decoupled weight decay regularization\",\n        \"Conflict-driven clause learning sat solvers\",\n        \"Graspâ€”a new search algorithm for satisfiability\",\n        \"An overview of parallel sat solving\",\n        \"Graphit: Encoding graph structure in transformers\",\n        \"Transformer for graphs: An overview from architecture perspective\",\n        \"Chaff: Engineering an efficient sat solver\",\n        \"Scaling vision transformers to 22 billion parameters\",\n        \"Pytorch: An imperative style, high-performance deep learning library\",\n        \"A lightweight component caching scheme for satisfiability solvers\",\n        \"Self-supervised graph transformer on large-scale molecular data\",\n        \"The graph neural network model\",\n        \"Scalable sat solving in the cloud\",\n        \"Guiding high-performance SAT solvers with unsat-core predictions\",\n        \"Learning a SAT solver from single-bit supervision\",\n        \"Attention is all you need\",\n        \"Graph attention networks\",\n        \"Improving sat-solving with machine learning\",\n        \"Representing long-range context for graph neural networks with global attention\",\n        \"A comprehensive survey on graph neural networks\",\n        \"How powerful are graph neural networks?\",\n        \"Learning local search heuristics for boolean satisfiability\",\n        \"Elimination mechanism of glue variables for solving sat problems in linguistics\",\n        \"Graph neural networks: A review of methods and applications\",\n        \"A comprehensive survey on transfer learning\"\n    ],\n    \"reasoning\": \"Selected these 61 references because they represent foundational work and recent advances in NeuroBack: Improving CDCL SAT Solving using Graph Neural Networks, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}