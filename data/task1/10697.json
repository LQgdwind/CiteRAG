{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 53 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: SPML: A DSL for Defending Language Models Against Prompt Attacks\n\nPaper Abstract: Abstract Large language models (LLMs) have profoundly transformed natural language applications, with a growing reliance on instruction-based definitions for designing chatbots. However, post-deployment the chatbot definitions are fixed and are vulnerable to attacks by malicious users, emphasizing the need to prevent unethical applications and financial losses. Existing studies explore user prompts’ impact on LLM-based chatbots, yet practical methods to contain attacks on application-specific chatbots remain unexplored. This paper presents System Prompt Meta Language (SPML), a domain-specific language for refining prompts and monitoring the inputs to the LLM-based chatbots. SPML actively checks attack prompts, ensuring user inputs align with chatbot definitions to prevent malicious execution on the LLM backbone, optimizing costs. It also streamlines chatbot definition crafting with programming language capabilities, overcoming natural language design challenges. Additionally, we introduce a groundbreaking benchmark with 1.8k system prompts and 20k user inputs, offering the inaugural language and benchmark for chatbot definition evaluation. Experiments across datasets demonstrate SPML’s proficiency in understanding attacker prompts, surpassing models like GPT-4, GPT-3.5, and LlaMa. Our data and codes are publicly available at: https://prompt-compiler.github.io/SPML/.\n\n{retrieved_text}\n\nGenerate exactly 53 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 53\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Gpt-4 technical report\",\n        \"Towards a human-like open-domain chatbot\",\n        \"Universal llm jailbreak: Chatgpt, gpt-4, bard, bing, anthropic, and beyond\",\n        \"Prompting is programming: A query language for large language models\",\n        \"Gpt-neo: Large scale autoregressive language modeling with mesh-tensorflow\",\n        \"Sparks of artificial general intelligence: Early experiments with gpt-4\",\n        \"Extracting training data from large language models\",\n        \"Code injection attacks on harvard-architecture devices\",\n        \"Not what you’ve signed up for: Compromising real-world llm-integrated applications with indirect prompt injection\",\n        \"A classification of sql-injection attacks and countermeasures\",\n        \"Amnesia: analysis and monitoring for neutralizing sql-injection attacks\",\n        \"Self-hardening firewall for large language models\",\n        \"Security scanner for large language model (llm) prompts\",\n        \"The security toolkit for llm interactions\",\n        \"Llm prompt injection detector\",\n        \"automatically tests prompt injection attacks on chatgpt instances\",\n        \"An open-source toolkit for monitoring large language models\",\n        \"A list of leaked system prompts\",\n        \"Introducing the gpt store\",\n        \"Gpt-3.5\",\n        \"Claude-2\",\n        \"Collection of chatgpt jailbreak prompts\",\n        \"Gandalf ignore instructions\",\n        \"Bringing enterprise-grade security to llms with one line of code\",\n        \"Langchain\",\n        \"Leaked prompt for microsoft bing\",\n        \"Leaked prompt for perplexity\",\n        \"Leaked prompt for myai from snap\",\n        \"Leaked prompt for github copilot chat\",\n        \"Llm platform security: Applying a systematic evaluation framework to openai’s chatgpt plugins\",\n        \"Code injection attacks on html5-based mobile apps: Characterization, detection and mitigation\",\n        \"Demonstrate-search-predict: Composing retrieval and language models for knowledge-intensive NLP\",\n        \"Dspy: Compiling declarative language model calls into self-improving pipelines\",\n        \"We’re afraid language models aren’t modeling ambiguity\",\n        \"Prompt injection attack against llm-integrated applications\",\n        \"Automated code injection prevention for web applications\",\n        \"Can llms keep a secret? testing privacy implications of language models via contextual integrity theory\",\n        \"Stealing the decoding algorithms of language models\",\n        \"From prompt injections to sql injection attacks: How protected is your llm-integrated web application?\",\n        \"Language models are unsupervised multitask learners\",\n        \"Exploring the limits of transfer learning with a unified text-to-text transformer\",\n        \"Maatphor: Automated variant analysis for prompt injection attacks\",\n        \"Predicting common web application vulnerabilities from input validation and sanitization code patterns\",\n        \"Survey of vulnerabilities in large language models revealed by adversarial attacks\",\n        \"Blenderbot 3: a deployed conversational agent that continually learns to responsibly engage\",\n        \"Precise client-side protection against {{\\\\{DOM-based}}}{{\\\\{Cross-Site}}} scripting\",\n        \"The essence of command injection attacks in web applications\",\n        \"Ernie: Enhanced representation through knowledge integration\",\n        \"Llama 2: Open foundation and fine-tuned chat models\",\n        \"Tensor Trust: Interpretable prompt injection attacks from an online game\",\n        \"Finetuned language models are zero-shot learners\",\n        \"A survey of large language models\",\n        \"Universal and transferable adversarial attacks on aligned language models\"\n    ],\n    \"reasoning\": \"Selected these 53 references because they represent foundational work and recent advances in SPML: A DSL for Defending Language Models Against Prompt Attacks, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}