{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 48 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: A Variant of Concurrent Constraint Programming on GPU\n\nPaper Abstract: Abstract The number of cores on graphical computing units (GPUs) is reaching thousands nowadays, whereas the clock speed of processors stagnates. Unfortunately, constraint programming solvers do not take advantage yet of GPU parallelism. One reason is that constraint solvers were primarily designed within the mental frame of sequential computation. To solve this issue, we take a step back and contribute to a simple, intrinsically parallel, lock-free and formally correct programming language based on concurrent constraint programming. We then re-examine parallel constraint solving on GPUs within this formalism, and develop Turbo, a simple constraint solver entirely programmed on GPUs. Turbo validates the correctness of our approach and compares positively to a parallel CPU-based solver.\n\n{retrieved_text}\n\nGenerate exactly 48 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 48\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"IEEE Standard for Floating-Point Arithmetic\",\n        \"Programming languages—C++\",\n        \"The essence of constraint propagation\",\n        \"A GPU Implementation of Parallel Constraint-Based Local Search\",\n        \"Range and Roots: Two common patterns for specifying and propagating counting and occurrence constraints\",\n        \"Outlawing ghosts: avoiding out-of-thin-air results\",\n        \"Exploring the use of GPUs in constraint solving\",\n        \"A GPU Implementation of Large Neighborhood Search for Solving Constraint Optimization Problems\",\n        \"Entailment of finite domain constraints\",\n        \"An open-ended finite domain constraint solver\",\n        \"Asynchronous iterative methods for solving a fixed point system of monotone equations in a complete lattice\",\n        \"Abstract interpretation: a unified lattice model for static analysis of programs by construction or approximation of fixpoints\",\n        \"Automatic Synthesis of Optimal Invariant Assertions: Mathematical Foundations\",\n        \"Theories, Solvers and Static Analysis by Abstract Interpretation\",\n        \"Introduction to lattices and order\",\n        \"Abstract satisfaction\",\n        \"Accelerating exact and approximate inference for (distributed) discrete optimization with GPUs\",\n        \"A review of literature on parallel constraint solving\",\n        \"Parallel execution of Prolog programs: a survey\",\n        \"Handbook of Parallel Constraint Reasoning\",\n        \"Deterministic parallel fixpoint computation\",\n        \"PSPLIB-a project scheduling problem library: OR software-ORSEP operations research software exchange program\",\n        \"The Problem with Threads\",\n        \"A Formal Analysis of the NVIDIA PTX Memory Consistency Model\",\n        \"Consistency in networks of relations\",\n        \"Embarrassingly Parallel Search in Constraint Programming\",\n        \"Towards Solver-Independent Propagators\",\n        \"A Primer on Memory Consistency and Cache Coherence, Second Edition\",\n        \"Reformulation of global constraints\",\n        \"MiniZinc: Towards a standard CP modelling language\",\n        \"Propagation via Lazy Clause Generation\",\n        \"A Comparison of Exact Approaches for Solving the Multiple Constrained Resource, Project Scheduling Problem\",\n        \"A constraint solver based on abstract domains\",\n        \"Search procedures and parallelism in constraint programming\",\n        \"Parallel Consistency in Constraint Programming\",\n        \"Improving Constraint Solving on Parallel Hybrid Systems\",\n        \"Concurrent constraint programming\",\n        \"The Semantic Foundations of Concurrent Constraint Programming\",\n        \"Comparing trailing and copying for constraint programming\",\n        \"Parallel Search Made Simple\",\n        \"Efficient Constraint Propagation Engines\",\n        \"Modeling and Programming with Gecode\",\n        \"Why cumulative decomposition is not as bad as it sounds\",\n        \"Solving RCPSP/max by lazy clause generation\",\n        \"Constraint Propagation – Models, Techniques, Implementation\",\n        \"The Decline of Computers as a General Purpose Technology\",\n        \"Design, implementation, and evaluation of the constraint language cc(FD)\",\n        \"Algorithms for distributed constraint satisfaction: A review\"\n    ],\n    \"reasoning\": \"Selected these 48 references because they represent foundational work and recent advances in A Variant of Concurrent Constraint Programming on GPU, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}