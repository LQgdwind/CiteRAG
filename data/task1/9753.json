{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 49 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Benchmarking Causal Study to Interpret Large Language Models for Source Code\n\nPaper Abstract: Abstract One of the most common solutions adopted by software researchers to address code generation is by training Large Language Models (LLMs) on massive amounts of source code. LLMs are rooted in the concept of emergent capabilities in which machines statistically learn complex patterns from code data. Although a number of studies have shown that LLMs have been effectively evaluated on popular accuracy metrics (e.g., BLEU, CodeBleu), previous research has largely overlooked the role of Causal Inference as a fundamental component of the interpretability of LLMs’ performance. Existing benchmarks and datasets are meant to highlight the difference between the expected and the generated outcome, but do not take into account confounding variables (e.g., lines of code, number of tokens, prompt size) that equally influence the accuracy metrics. The fact remains that, when dealing with generative software tasks by LLMs, no benchmark is available to tell researchers how to quantify neither the causal effect of SE-based treatments nor the correlation of confounders to the model’s performance. In an effort to bring statistical rigor to the evaluation of LLMs, this paper introduces a benchmarking strategy named Galeras comprised of curated testbeds for three SE tasks (i.e., code completion, code summarization, and commit generation) to help aid the interpretation of LLMs’ performance. We illustrate the insights of our benchmarking strategy by conducting a case study on the performance of ChatGPT under distinct prompt engineering methods. The results of the case study demonstrate the positive causal influence of prompt semantics on ChatGPT’s generative performance by an average treatment effect of ≈3%absentpercent3\\approx 3\\%. Moreover, it was found that confounders such as prompt size are highly correlated with accuracy metrics (≈0.412absent0.412\\approx 0.412). The end result of our case study is to showcase causal inference evaluations, in practice, to reduce confounding bias. By reducing the bias, we offer an interpretable solution for the accuracy metric under analysis.\n\n{retrieved_text}\n\nGenerate exactly 49 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 49\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"A systematic literature review on the use of deep learning in software engineering research.\",\n        \"A Survey of Large Language Models\",\n        \"Large Language Models Meet NL2Code: A Survey\",\n        \"Program synthesis with large language models\",\n        \"Measuring coding challenge competence with APPS\",\n        \"Generation Probabilities are Not Enough: Improving Error Highlighting for AI Code Suggestions\",\n        \"Toward deep learning software repositories\",\n        \"An empirical study on the usage of transformer models for code completion\",\n        \"An empirical study on the usage of bert models for code completion\",\n        \"Deep transfer learning for source code modeling\",\n        \"Ensemble Models for Neural Source Code Summarization of Subroutines\",\n        \"An empirical investigation into the use of image captioning for automated software documentation\",\n        \"Using transfer learning for code-related tasks\",\n        \"Studying the usage of text-to-text transfer transformer to support code-related tasks\",\n        \"Towards automating code review activities\",\n        \"Using pre-trained models to boost code review automation\",\n        \"Improving the effectiveness of traceability link recovery using hierarchical bayesian networks\",\n        \"Graph-based statistical language model for code\",\n        \"ReAssert: Deep Learning for Assert Generation\",\n        \"Code completion with statistical language models\",\n        \"On learning meaningful assert statements for unit test cases\",\n        \"Deep learning code fragments for code clone detection\",\n        \"Deep learning similarities from different representations of source code\",\n        \"Learning How to Mutate Source Code from Bug-Fixes\",\n        \"Devign: Effective Vulnerability Identification by Learning Comprehensive Program Semantics via Graph Neural Networks.\",\n        \"Sorting and transforming program repair ingredients via deep learning code similarities\",\n        \"On learning meaningful code changes via neural machine translation\",\n        \"An Empirical Study on Learning Bug-Fixing Patches in the Wild via Neural Machine Translation\",\n        \"An empirical investigation into learning bug-fixing patches in the wild via neural machine translation\",\n        \"Sequencer: Sequence-to-sequence learning for end-to-end program repair\",\n        \"Can we automatically fix bugs by learning edit operations?\",\n        \"Is your code generated by chatgpt really correct? rigorous evaluation of large language models for code generation\",\n        \"Improving chatgpt prompt for code generation\",\n        \"A Systematic Evaluation of Large Language Models of Code\",\n        \"Evaluating Large Language Models Trained on Code\",\n        \"Toward a Theory of Causation for Interpreting Neural Code Models\",\n        \"CodeSearchNet challenge: Evaluating the state of semantic code search\",\n        \"CodeXGLUE: A machine learning benchmark dataset for code understanding and generation.\",\n        \"Evaluating semantic representations of source code\",\n        \"MultiPL-E: A Scalable and Extensible Approach to Benchmarking Neural Code Generation\",\n        \"Bigquery datasets: https://cloud.google.com/bigquery\",\n        \"Codegen: An open large language model for code with multi-turn program synthesis\",\n        \"The pile: An 800gb dataset of diverse text for language modeling\",\n        \"Gpt-4 technical report\",\n        \"https://github.com/wm-semeru/galeras-benchmark\",\n        \"The adverse effects of code duplication in machine learning models of code\",\n        \"Neural Machine Translation with Byte-Level Subwords\",\n        \"Causality: models, reasoning, and inference\",\n        \"DoWhy : Addressing Challenges in Expressing and Validating Causal Assumptions\"\n    ],\n    \"reasoning\": \"Selected these 49 references because they represent foundational work and recent advances in Benchmarking Causal Study to Interpret Large Language Models for Source Code, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}