{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 49 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Statically Verified Refinements for Multiparty Protocols\n\nPaper Abstract: Abstract. With distributed computing becoming ubiquitous in the modern era, safe distributed programming is an open challenge. To address this, multiparty session types (MPST) provide a typing discipline for message-passing concurrency, guaranteeing communication safety properties such as deadlock freedom. While originally MPST focus on the communication aspects, and employ a simple typing system for communication payloads, communication protocols in the real world usually contain constraints on the payload. We introduce refined multiparty session types (RMPST), an extension of MPST, that express data dependent protocols via refinement types on the data types. We provide an implementation of RMPST, in a toolchain called Session⋆, using Scribble, a multiparty protocol description toolchain, and targeting F⋆, a verification-oriented functional programming language. Users can describe a protocol in Scribble and implement the endpoints in F⋆ using refinement-typed APIs generated from the protocol. The F⋆ compiler can then statically verify the refinements. Moreover, we use a novel approach of callback-styled API generation, providing static linearity guarantees with the inversion of control. We evaluate our approach with real world examples and show that it has little overhead compared to a naïve implementation, while guaranteeing safety properties from the underlying theory.\n\n{retrieved_text}\n\nGenerate exactly 49 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 49\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"On Irrelevance and Algorithmic Equality in Predicative Type Theory\",\n        \"Behavioral Types in Programming Languages\",\n        \"Refinement types for secure implementations\",\n        \"Cryptographic Protocol Synthesis and Verification for Multiparty Sessions\",\n        \"Modular Verification of Security Protocol Code by Typing\",\n        \"Semantic subtyping with an SMT solver\",\n        \"A Multiparty Multi-session Logic\",\n        \"A Theory of Design-by-Contract for Distributed Multiparty Interactions\",\n        \"On Communicating Finite-State Machines\",\n        \"Distributed Programming Using Role-parametric Session Types in Go: Statically-typed Endpoint APIs for Dynamically-instantiated Communication Structures\",\n        \"Session Types with Arithmetic Refinements\",\n        \"Z3: An Efficient SMT Solver\",\n        \"Value-Dependent Session Design in a Dependently Typed Language\",\n        \"Nested Protocols in Session Types\",\n        \"Parameterised Multiparty Session Types\",\n        \"Multiparty Compatibility in Communicating Automata: Characterisation and Synthesis of Global Session Types\",\n        \"Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing\",\n        \"Refinement Types for ML\",\n        \"Behavioural Types: from Theory to Tools\",\n        \"Liquidate Your Assets: Reasoning about Resource Usage in Liquid Haskell\",\n        \"Actris: Session-Type Based Reasoning in Separation Logic\",\n        \"Multiparty Asynchronous Session Types\",\n        \"Distributed Programming Using Java APIs Generated from Session Types\",\n        \"Hybrid Session Verification through Endpoint API Generation\",\n        \"Session-Based Distributed Programming in Java\",\n        \"Gradual session types\",\n        \"Multiparty Session Programming with Global Protocol Combinators\",\n        \"Session-ocaml: A session-based library with polarities and lenses\",\n        \"Liquid Resource Types\",\n        \"Gradual Refinement Types\",\n        \"A Session Type Provider: Compile-time API Generation of Distributed Protocols with Refinements in F#\",\n        \"Featherweight Scribble\",\n        \"SPY: Local Verification of Global Protocols\",\n        \"Protocols by Default: Safe MPI Code Generation based on Session Types\",\n        \"Session Types with Linearity in Haskell\",\n        \"Intensionality, extensionality, and proof irrelevance in modal type theory\",\n        \"Types and Programming Languages\",\n        \"Liquid Information Flow Control\",\n        \"Liquid Types\",\n        \"A Linear Decomposition of Multiparty Sessions for Safe Distributed Programming\",\n        \"SMT-based Checking of Predicate-qualified Types for Scala\",\n        \"Scribble: Describing Multi Party Protocols\",\n        \"Dependent Types and Multi-monadic Effects in F*\",\n        \"SteelCore: An Extensible Concurrent Separation Logic for Effectful Dependently Typed Programs\",\n        \"Label-Dependent Session Types\",\n        \"Certifying data in multiparty session types\",\n        \"Refinement Types for Haskell\",\n        \"Refinement Reflection: Complete Verification with SMT\",\n        \"Statically Verified Refinements for Multiparty Protocols\"\n    ],\n    \"reasoning\": \"Selected these 49 references because they represent foundational work and recent advances in Statically Verified Refinements for Multiparty Protocols, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}