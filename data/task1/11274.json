{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 46 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: \\tool: Context-Free LLM Approximation for Guiding Program Synthesis\n\nPaper Abstract: Abstract Many structured prediction and reasoning tasks can be framed as program synthesis problems, where the goal is to generate a program in a domain-specific language (DSL) that transforms input data into the desired output. Unfortunately, purely neural approaches, such as large language models (LLMs), often fail to produce fully correct programs in unfamiliar DSLs, while purely symbolic methods based on combinatorial search scale poorly to complex problems. Motivated by these limitations, we introduce a hybrid approach, where LLM completions for a given task are used to learn a task-specific, context-free surrogate model, which is then used to guide program synthesis. We evaluate this hybrid approach on three domains, and show that it outperforms both unguided search and direct sampling from LLMs, as well as existing program synthesizers.\n\n{retrieved_text}\n\nGenerate exactly 46 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 46\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Arc kaggle competition leaderboard\",\n        \"Recursive program synthesis\",\n        \"Neural-guided, bidirectional program search for abstraction and reasoning\",\n        \"Syntax-guided synthesis\",\n        \"Sygus-comp 2017: Results and analysis\",\n        \"Scaling enumerative program synthesis via divide and conquer\",\n        \"Search-based program synthesis\",\n        \"Constituency parsing using llms\",\n        \"Deepcoder: Learning to write programs\",\n        \"Dreaming with ARC\",\n        \"Just-in-time learning for bottom-up enumerative synthesis\",\n        \"The reversal curse: Llms trained on\\\" a is b\\\" fail to learn\\\" b is a\\\"\",\n        \"Codeit: Abstract reasoning with iterative policy-guided program synthesis\",\n        \"On the measure of intelligence\",\n        \"Robustfill: Neural program learning under noisy i/o\",\n        \"Dreamcoder: Growing generalizable, interpretable knowledge with wake-sleep bayesian program learning\",\n        \"Program synthesis using conflict-driven learning\",\n        \"Component-based synthesis for complex apis\",\n        \"Solving abstract reasoning tasks with grammatical evolution\",\n        \"Automating string processing in spreadsheets using input-output examples\",\n        \"Programming by examples (and its applications in data wrangling)\",\n        \"Deepseek-coder: When the large language model meets programmingâ€“the rise of code intelligence\",\n        \"Exploiting asymmetry for synthetic training data generation: Synthie and the case of information extraction\",\n        \"Neural-guided deductive search for real-time program synthesis from examples\",\n        \"Reasoning abilities of large language models: In-depth analysis on the abstraction and reasoning corpus\",\n        \"Accelerating search-based program synthesis using learned probabilistic models\",\n        \"Generalized planning for the abstraction and reasoning corpus\",\n        \"Efficient bottom-up synthesis for programs with local variables\",\n        \"Guiding enumerative program synthesis with large language models\",\n        \"Recursive functions of symbolic expressions and their computation by machine, part i\",\n        \"Embers of autoregression: Understanding large language models through the problem they are trained to solve\",\n        \"Bustle: bottom-up program synthesis through learning-guided exploration\",\n        \"Hello gpt-4.0\",\n        \"Type-and-example-directed program synthesis\",\n        \"cvc 4 sy: smart and fast term enumeration for syntax-guided synthesis\",\n        \"Tf-coder: Program synthesis for tensor manipulations\",\n        \"Crossbeam: Learning to search in bottom-up program synthesis\",\n        \"Large language model (llm) as a system of multiple expert agents: An approach to solve the abstraction and reasoning corpus (arc) challenge\",\n        \"Transit: specifying protocols with concolic snippets\",\n        \"Improving llm code generation with grammar augmentation\",\n        \"Hypothesis search: Inductive reasoning with language models\",\n        \"Grounding data science code generation with input-output specifications\",\n        \"Arc kaggle competition, 1st place\",\n        \"Graphs, constraints, and search for the abstraction and reasoning corpus\",\n        \"Llms and the abstraction and reasoning corpus: Successes, failures, and the importance of object-based representations\",\n        \"Tractable control for autoregressive language generation\"\n    ],\n    \"reasoning\": \"Selected these 46 references because they represent foundational work and recent advances in \\\\tool: Context-Free LLM Approximation for Guiding Program Synthesis, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}