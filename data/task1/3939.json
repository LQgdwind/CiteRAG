{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 54 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Learning Heuristics for Template-based CEGIS of Loop Invariants with Reinforcement Learning\n\nPaper Abstract: Abstract Loop-invariant synthesis is the basis of program verification. Due to the undecidability of the problem in general, a tool for invariant synthesis necessarily uses heuristics. Despite the common belief that the design of heuristics is vital for the performance of a synthesizer, heuristics are often engineered by their developers based on experience and intuition, sometimes in an ad-hoc manner. In this work, we propose an approach to systematically learning heuristics for template-based CounterExample-Guided Inductive Synthesis (CEGIS) with reinforcement learning. As a concrete example, we implement the approach on top of PCSat, which is an invariant synthesizer based on template-based CEGIS. Experiments show that PCSat guided by the heuristics learned by our framework not only outperforms existing state-of-the-art CEGIS-based solvers such as HoICE and the neural solver Code2Inv, but also has slight advantages over non-CEGIS-based solvers such as Eldarica and Spacer in linear Constrained Horn Clause (CHC) solving.\n\n{retrieved_text}\n\nGenerate exactly 54 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 54\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \": Learning to represent programs with graphs\",\n        \"Learning to represent programs with graphs\",\n        \"Code2vec: Learning distributed representations of code\",\n        \"Syntax-guided synthesis\",\n        \"SyGuS\",\n        \"Learning to solve SMT formulas\",\n        \"Extending enumerative function synthesis via SMT-driven classification\",\n        \"CVC4\",\n        \"Leveraging grammar and reinforcement learning for neural program synthesis\",\n        \"ICE-based refinement type discovery for higher-order functional programs\",\n        \"HoIce: An ice-based non-linear horn clause solver\",\n        \"Relational verification using reinforcement learning\",\n        \"Program synthesis using deduction-guided reinforcement learning\",\n        \"Can neural networks understand logical entailment?\",\n        \"Horn-ICE learning for synthesizing invariants and contracts\",\n        \"Sampling invariants from frequency distributions\",\n        \"Solving constrained horn clauses using syntax and data\",\n        \"ICE: A robust framework for learning invariants\",\n        \"Learning invariants using decision trees and implication counterexamples\",\n        \"Lecture 6e: rmsprop: Divide the gradient by a running average of its recent magnitude\",\n        \"The Eldarica horn solver\",\n        \"DeepMath - deep sequence models for premise selection\",\n        \"Summarizing source code using a neural attention model\",\n        \"HolStep: A machine learning dataset for higher-order logic theorem proving\",\n        \"Reinforcement learning of theorem proving\",\n        \"Neural-guided deductive search for real-time program synthesis from examples\",\n        \"SMT-based model checking for recursive programs\",\n        \"Actor-critic algorithms\",\n        \"Learning invariants using decision trees\",\n        \"Decision tree learning in CEGIS-based termination analysis\",\n        \"Automated theorem proving in intuitionistic propositional logic by deep reinforcement learning\",\n        \"Learning heuristics for quantified boolean formulas through reinforcement learning\",\n        \"Machine learning-based restart policy for CDCL SAT solvers\",\n        \"Deep network guided proof search\",\n        \"Convolutional neural networks over tree structures for programming language processing\",\n        \"Z3: An efficient SMT solver\",\n        \"Overfitting in synthesis: Theory and practice\",\n        \"Graph representations for higher-order logic and theorem proving\",\n        \"cvc4sy: Smart and fast term enumeration for syntax-guided synthesis\",\n        \"CLN2INV: learning loop invariants with continuous logic networks\",\n        \"Probabilistic inference for predicate constraint satisfaction\",\n        \"Automated proof synthesis for the minimal propositional logic with deep neural networks\",\n        \"Guiding high-performance SAT solvers with unsat-core predictions\",\n        \"Learning a SAT solver from single-bit supervision\",\n        \"Learning loop invariants for program verification\",\n        \"Code2Inv: A deep learning framework for program verification\",\n        \"Reinforcement learning with replacing eligibility traces\",\n        \"Combinatorial sketching for finite programs\",\n        \"Reinforcement Learning: An Introduction\",\n        \"Program verification via predicate constraint satisfiability modulo theories\",\n        \"Constraint-based relational verification\",\n        \"Premise selection for theorem proving by deep graph embedding\",\n        \"The Formal Semantics of Programming Languages: An Introduction\",\n        \"Tacticzero: Learning to prove theorems from scratch with deep reinforcement learning\"\n    ],\n    \"reasoning\": \"Selected these 54 references because they represent foundational work and recent advances in Learning Heuristics for Template-based CEGIS of Loop Invariants with Reinforcement Learning, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}