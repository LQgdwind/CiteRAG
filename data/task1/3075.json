{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 50 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Lazy Parameter Tuning and Control: Choosing All Parameters Randomly From a Power-Law Distribution\n\nPaper Abstract: Abstract Most evolutionary algorithms have multiple parameters and their values drastically affect the performance. Due to the often complicated interplay of the parameters, setting these values right for a particular problem (parameter tuning) is a challenging task. This task becomes even more complicated when the optimal parameter values change significantly during the run of the algorithm since then a dynamic parameter choice (parameter control) is necessary. In this work, we propose a lazy but effective solution, namely choosing all parameter values (where this makes sense) in each iteration randomly from a suitably scaled power-law distribution. To demonstrate the effectiveness of this approach, we perform runtime analyses of the (1+(Œª,Œª))1ùúÜùúÜ(1+(\\lambda,\\lambda)) genetic algorithm with all three parameters chosen in this manner. We show that this algorithm on the one hand can imitate simple hill-climbers like the (1+1)11(1+1) EA, giving the same asymptotic runtime on problems like OneMax, LeadingOnes, or Minimum Spanning Tree. On the other hand, this algorithm is also very efficient on jump functions, where the best static parameters are very different from those necessary to optimize simple problems. We prove a performance guarantee that is comparable to the best performance known for static parameters. For the most interesting case that the jump size kùëòk is constant, we prove that our performance is asymptotically better than what can be obtained with any static parameter choice. We complement our theoretical results with a rigorous empirical study confirming what the asymptotic runtime results suggest.\n\n{retrieved_text}\n\nGenerate exactly 50 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 50\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Lazy parameter tuning and control: choosing all parameters randomly from a power-law distribution\",\n        \"Fast mutation in crossover-based algorithms\",\n        \"Runtime analysis of a heavy-tailed (1+(Œª,Œª)) genetic algorithm on jump functions\",\n        \"A tight runtime analysis for the (Œº+Œª) EA\",\n        \"A tight runtime analysis for the (1+(Œª,Œª)) GA on LeadingOnes\",\n        \"A rigorous runtime analysis of the (1+(Œª,Œª)) GA on jump functions\",\n        \"A rigorous runtime analysis of the 2-MMASib on jump functions: ant colony optimizers can cope well with local optima\",\n        \"Runtime analysis of the (1+(Œª,Œª)) genetic algorithm on random satisfiable 3-CNF formulas\",\n        \"Unbiased black-box complexity of parallel search\",\n        \"On the runtime analysis of the Opt-IA artificial immune system\",\n        \"Artificial immune systems can find arbitrarily good approximations for the NP-hard number partitioning problem\",\n        \"Automatic adaptation of hypermutation rates for multimodal optimisation\",\n        \"Optimal static and self-adjusting parameter choices for the (1+(Œª,Œª)) genetic algorithm\",\n        \"From black-box complexity to designing new genetic algorithms\",\n        \"Static and self-adjusting mutation strengths for multi-valued decision variables\",\n        \"Solving problems with unknown solution length at almost no extra cost\",\n        \"Fast non-elitist evolutionary algorithms with power-law ranking selection\",\n        \"Escaping local optima with diversity mechanisms and crossover\",\n        \"Escaping local optima using crossover with emergent diversity\",\n        \"On the analysis of the (1+1) evolutionary algorithm\",\n        \"Multiplicative drift analysis\",\n        \"Fast genetic algorithms\",\n        \"Optimal parameter settings for the (1+(Œª,Œª)) genetic algorithm\",\n        \"Probabilistic tools for the analysis of randomized optimization heuristics\",\n        \"The runtime of the compact genetic algorithm on Jump functions\",\n        \"Does comma selection help to cope with local optima?\",\n        \"A first runtime analysis of the NSGA-II on a multimodal problem\",\n        \"Stagnation detection meets fast mutation\",\n        \"Runtime analysis for self-adaptive mutation rates\",\n        \"Theoretical analyses of multi-objective evolutionary algorithms on multi-modal objectives\",\n        \"Fast building block assembly by majority vote crossover\",\n        \"Escaping large deceptive basins of attraction with heavy-tailed mutation operators\",\n        \"On the runtime dynamics of the compact genetic algorithm on jump functions\",\n        \"On the choice of the offspring population size in evolutionary algorithms\",\n        \"The analysis of evolutionary algorithms ‚Äì a proof that crossover really can help\",\n        \"On the time complexity of algorithm selection hyper-heuristics for multimodal optimisation\",\n        \"How genetic algorithms really work: mutation and hillclimbing\",\n        \"Randomized local search, evolutionary algorithms, and the minimum spanning tree problem\",\n        \"Evolutionary algorithms and submodular functions: benefits of heavy-tailed mutations\",\n        \"The benefits and limitations of voting mechanisms in evolutionary optimisation\",\n        \"Convergence Properties of Evolutionary Algorithms\",\n        \"Self-adjusting evolutionary algorithms for multimodal optimization\",\n        \"Stagnation detection in highly multimodal fitness landscapes\",\n        \"Stagnation detection with randomized local search\",\n        \"Some generalizations of the theory of cumulative sums of random variables\",\n        \"Worst-case and average-case approximations by simple randomized search heuristics\",\n        \"Runtime analysis of the (Œº + 1) EA on simple pseudo-Boolean functions\",\n        \"On crossing fitness valleys with majority-vote crossover and estimation-of-distribution algorithms\",\n        \"Dynamic mutation based Pareto optimization for subset selection\",\n        \"Exploration and exploitation without mutation: solving the jump function in Œò(n) time\"\n    ],\n    \"reasoning\": \"Selected these 50 references because they represent foundational work and recent advances in Lazy Parameter Tuning and Control: Choosing All Parameters Randomly From a Power-Law Distribution, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}