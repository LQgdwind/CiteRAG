{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 50 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: A Unifying Framework for Parallel and Distributed Processing in R using Futures\n\nPaper Abstract: Abstract A future is a programming construct designed for concurrent and asynchronous evaluation of code, making it particularly useful for parallel processing. The future package implements the Future API for programming with futures in R. This minimal API provides sufficient constructs for implementing parallel versions of well-established, high-level map-reduce APIs. The future ecosystem supports exception handling, output and condition relaying, parallel random number generation, and automatic identification of globals lowering the threshold to parallelize code. The Future API bridges parallel frontends with parallel backends, following the philosophy that end-users are the ones who choose the parallel backend while the developer focuses on what to parallelize. A variety of backends exist, and third-party contributions meeting the specifications, which ensure that the same code works on all backends, are automatically supported. The future framework solves several problems not addressed by other parallel frameworks in R.\n\n{retrieved_text}\n\nGenerate exactly 50 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 50\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"listenv: Environments Behaving (Almost) as Lists\",\n        \"globals: Identify Global Objects in R Expressions\",\n        \"doFuture: A Universal Foreach Parallel Adapter using the Future API of the ’future’ Package\",\n        \"future: Unified Parallel and Distributed Processing in R for Everyone\",\n        \"future.apply: Apply Function to Elements in Parallel using Futures\",\n        \"future.batchtools: A Future API for Parallel and Distributed Processing using ’batchtools’\",\n        \"future.callr: A Future API for Parallel Processing using ’callr’\",\n        \"future.tests: Test Suite for Future API Backends\",\n        \"parallelly: Enhancing the ’parallel’ Package\",\n        \"progressr: A Inclusive, Unifying API for Progress Updates\",\n        \"BatchJobs and BatchExperiments: Abstraction mechanisms for using R in batch environments\",\n        \"profvis: Interactive Visualizations for Profiling R Code\",\n        \"shiny: Web Application Framework for R\",\n        \"promises: Abstractions for Promise-Based Asynchronous Programming\",\n        \"callr: Call R from R\",\n        \"revdepcheck: Automated Reverse Dependency Checking\",\n        \"MapReduce: Simplified data processing on large clusters\",\n        \"Parallel computing with R: A brief review\",\n        \"digest: Create Compact Hash Digests of R Objects\",\n        \"googleComputeEngineR: R Interface with Google Compute Engine\",\n        \"Aspects of applicative programming for parallel processing\",\n        \"purrr: Functional Programming Tools\",\n        \"bench: High Precision Timing of R Expressions\",\n        \"Laws for communicating parallel processes\",\n        \"Parallel processing facilities\",\n        \"Scalable strategies for computing with massive data\",\n        \"Singularity: Scientific containers for mobility of compute\",\n        \"The drake R package: A pipeline toolkit for reproducibility and high-performance computing\",\n        \"proffer: Profile R Code and Visualize with ’Pprof’\",\n        \"The targets R package: a dynamic make-like function-oriented pipeline toolkit for reproducibility and high-performance computing\",\n        \"batchtools: Tools for R to work on batch systems\",\n        \"Good parameters and implementations for combined multiple recursive random number generators\",\n        \"doRedis: ’Foreach’ Parallel Adapter Using the ’Redis’ Database\",\n        \"sparklyr: R Interface to Apache Spark\",\n        \"Mersenne twister: A 623-dimensionally equidistributed uniform pseudo-random number generator\",\n        \"Docker: Lightweight Linux containers for consistent development and deployment\",\n        \"microbenchmark: Accurate Timing Functions\",\n        \"foreach: Provides Foreach Looping Construct\",\n        \"doParallel: Foreach Parallel Adaptor for the ’parallel’ Package\",\n        \"civis: R Client for the ’Civis Platform API’\",\n        \"BiocParallel: Bioconductor Facilities for Parallel Evaluation\",\n        \"doMC: Foreach Parallel Adaptor for ’parallel’\",\n        \"plumber: An API Generator for R\",\n        \"State-of-the-art in parallel computing with r\",\n        \"Programming with BIG data in R: Scaling analytics from one to thousands of nodes\",\n        \"codetools: Code Analysis Tools for R\",\n        \"snow: Simple Network of Workstations\",\n        \"multicore: A Stub Package to Ease Transition to ’parallel’\",\n        \"furrr: Apply Mapping Functions in Parallel using Futures\",\n        \"doMPI: Foreach Parallel Adaptor for Rmpi Package\"\n    ],\n    \"reasoning\": \"Selected these 50 references because they represent foundational work and recent advances in A Unifying Framework for Parallel and Distributed Processing in R using Futures, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}