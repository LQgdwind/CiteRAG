{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 45 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Efficient Hardware Primitives for Immediate Memory Reclamation in Optimistic Data Structures\n\nPaper Abstract: Abstract Safe memory reclamation (SMR) algorithms are crucial for preventing use-after-free errors in optimistic data structures. SMR algorithms typically delay reclamation for safety and reclaim objects in batches for efficiency. It is difficult to strike a balance between performance and space efficiency. Small batch sizes and frequent reclamation attempts lead to high overhead, while freeing large batches can lead to long program interruptions and high memory footprints. An ideal SMR algorithm would forgo batching, and reclaim memory immediately, without suffering high reclamation overheads. To this end, we propose Conditional Access: a set of hardware instructions that offer immediate reclamation and low overhead in optimistic data structures. Conditional Access harnesses cache coherence to enable threads to efficiently detect potential use-after-free errors without explicit shared memory communication, and without introducing additional coherence traffic. We implement and evaluate Conditional Access in Graphite, a multicore simulator. Our experiments show that Conditional Access can rival the performance of highly optimized and carefully tuned SMR algorithms while simultaneously allowing immediate reclamation. This results in concurrent data structures with similar memory footprints to their sequential counterparts.\n\n{retrieved_text}\n\nGenerate exactly 45 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 45\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Reclaiming memory for lock-free data structures: There has to be a better way\",\n        \"Hazard pointers: Safe memory reclamation for lock-free objects\",\n        \"Stacktrack: An automated transactional approach to concurrent memory reclamation\",\n        \"Forkscan: Conservative memory reclamation for modern operating systems\",\n        \"Threadscan: Automatic and scalable memory reclamation\",\n        \"Fast and robust memory reclamation for concurrent data structures\",\n        \"Every data structure deserves lock-free memory reclamation\",\n        \"Hyaline: fast and transparent lock-free memory reclamation\",\n        \"Interval-based memory reclamation\",\n        \"Lock-free reference counting\",\n        \"Performance of memory reclamation for lockless synchronization\",\n        \"Universal wait-free memory reclamation\",\n        \"NBR: Neutralization Based Reclamation\",\n        \"Understanding memory resource management in vmware esx 4.1.\",\n        \"Crystalline: Fast and memory efficient wait-free reclamation\",\n        \"Memory tagging: Minimalist synchronization for scalable concurrent data structures\",\n        \"Automatic memory reclamation for lock-free data structures\",\n        \"Extending rcu for realtime and embedded workloads\",\n        \"A lazy concurrent list-based set algorithm\",\n        \"Non-blocking binary search trees\",\n        \"Systems programming: Coping with parallelism\",\n        \"Simple, fast, and practical non-blocking and blocking concurrent queue algorithms\",\n        \"Graphite: A distributed parallel simulator for multicores\",\n        \"Practical lock-freedom\",\n        \"Read-copy update: Using execution history to solve concurrency problems\",\n        \"Nonblocking memory management support for dynamic-sized data structures\",\n        \"Fast non-intrusive memory reclamation for highly-concurrent data structures\",\n        \"Concurrent reference counting and resource management in wait-free constant time\",\n        \"Brief announcement: Hazard eras-non-blocking memory reclamation\",\n        \"On the power of hardware transactional memory to simplify memory management\",\n        \"Efficient memory management for lock-free data structures with optimistic access\",\n        \"Snapshot-free, transparent, and robust memory reclamation for lock-free data structures\",\n        \"Vbr: Version based reclamation\",\n        \"Orcgc: automatic lock-free memory reclamation\",\n        \"Concurrent deferred reference counting with constant-time overhead\",\n        \"Space and time bounded multiversion garbage collection\",\n        \"Hand-over-hand transactions with precise memory reclamation\",\n        \"Space-and time-adaptive nonblocking algorithms\",\n        \"Meltdown: Reading kernel memory from user space\",\n        \"Intel transactional synchronization extensions (intel tsx) asynchronous abort\",\n        \"unreadtvar: Extending haskell software transactional memory for performance.\",\n        \"Early release: Friend or foe\",\n        \"Intel®64 and ia-32 architecturessoftware developer’s manual\",\n        \"Transactional memory support in the ibm power8 processor\",\n        \"Evaluation of amd’s advanced synchronization facility within a complete transactional memory stack\"\n    ],\n    \"reasoning\": \"Selected these 45 references because they represent foundational work and recent advances in Efficient Hardware Primitives for Immediate Memory Reclamation in Optimistic Data Structures, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}