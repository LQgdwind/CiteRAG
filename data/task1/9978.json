{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 50 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: GPT4AIGChip: Towards Next-Generation AI Accelerator Design Automation via Large Language Models\n\nPaper Abstract: Abstract The remarkable capabilities and intricate nature of Artificial Intelligence (AI) have dramatically escalated the imperative for specialized AI accelerators. Nonetheless, designing these accelerators for various AI workloads remains both labor- and time-intensive. While existing design exploration and automation tools can partially alleviate the need for extensive human involvement, they still demand substantial hardware expertise, posing a barrier to non-experts and stifling AI accelerator development. Motivated by the astonishing potential of large language models (LLMs) for generating high-quality content in response to human language instructions, we embark on this work to examine the possibility of harnessing LLMs to automate AI accelerator design. Through this endeavor, we develop GPT4AIGChip, a framework intended to democratize AI accelerator design by leveraging human natural languages instead of domain-specific languages. Specifically, we first perform an in-depth investigation into LLMs’ limitations and capabilities for AI accelerator design, thus aiding our understanding of our current position and garnering insights into LLM-powered automated AI accelerator design. Furthermore, drawing inspiration from the above insights, we develop a framework called GPT4AIGChip, which features an automated demo-augmented prompt-generation pipeline utilizing in-context learning to guide LLMs towards creating high-quality AI accelerator design. To our knowledge, this work is the first to demonstrate an effective pipeline for LLM-powered automated AI accelerator generation. Accordingly, we anticipate that our insights and framework can serve as a catalyst for innovations in next-generation LLM-powered design automation tools.\n\n{retrieved_text}\n\nGenerate exactly 50 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 50\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Ds891-zynq-ultrascale-plus-overview\",\n        \"Fixing hardware security bugs with large language models\",\n        \"Language models are few-shot learners\",\n        \"Sparks of artificial general intelligence: Early experiments with gpt-4\",\n        \"Data distributional properties drive emergent few-shot learning in transformers\",\n        \"Improving code generation by training with natural language feedback\",\n        \"Evaluating large language models trained on code\",\n        \"Bert: Pre-training of deep bidirectional transformers for language understanding\",\n        \"Gpt-3: Its nature, scope, limits, and consequences\",\n        \"Auto-nba: Efficient and effective search over the joint space of networks, bitwidths, and accelerators\",\n        \"A taxonomy for classification and comparison of dataflows for gnn accelerators\",\n        \"What can transformers learn in-context? a case study of simple function classes\",\n        \"FP-DNN: An automated framework for mapping deep neural networks onto FPGAs with RTL-HLS hybrid templates\",\n        \"Tensorlib: A spatial accelerator generation framework for tensor algebra\",\n        \"A modular digital vlsi flow for high-productivity soc design\",\n        \"Gpt-4 vs. gpt-3.5: A concise showdown\",\n        \"Deepburning-gl: an automated framework for generating graph neural network accelerators\",\n        \"What makes good in-context examples for gpt-333?\",\n        \"Genetic algorithms, tournament selection, and the effects of noise\",\n        \"Noisy channel language model prompting for few-shot text classification\",\n        \"Codegen: An open large language model for code with multi-turn program synthesis\",\n        \"In-context learning and induction heads\",\n        \"Gpt-3.5\",\n        \"Gpt-4\",\n        \"Training language models to follow instructions with human feedback\",\n        \"Synchromesh: Reliable code generation from pre-trained language models\",\n        \"Enabling flexibility for sparse tensor acceleration via heterogeneity\",\n        \"Improving language understanding by generative pre-training\",\n        \"Language models are unsupervised multitask learners\",\n        \"Exploring the limits of transfer learning with a unified text-to-text transformer\",\n        \"Impact of pretraining term frequencies on few-shot reasoning\",\n        \"Regularized evolution for image classifier architecture search\",\n        \"Extrapolating to unnatural language processing with gpt-3’s in-context learning: The good, the bad, and the mysterious\",\n        \"Benchmarking large language models for automated verilog rtl code generation\",\n        \"Llama: Open and efficient foundation language models\",\n        \"Magnet: A modular accelerator generator for neural networks\",\n        \"Code4struct: Code generation for few-shot structured prediction from natural language\",\n        \"Deepburning: Automatic generation of fpga-based learning accelerators for the neural network family\",\n        \"Hlsdataset: Open-source dataset for ml-assisted fpga design using high level synthesis\",\n        \"Chaidnnv2 - hls based dnn accelerator library for xilinx ultrascale+ mpsocs\",\n        \"PYNQ: PYTHON PRODUCTIVITY\",\n        \"Vitis high-level synthesis\",\n        \"AutoDNNchip: An automated dnn chip predictor and builder for both FPGAs and ASICs\",\n        \"Opt: Open pre-trained transformer language models\",\n        \"DNNBuilder: an automated tool for building high-performance DNN hardware accelerators for FPGAs\",\n        \"Skynet: a hardware-efficient method for object detection and tracking on embedded systems\",\n        \"Active example selection for in-context learning\",\n        \"Dialogpt: Large-scale generative pre-training for conversational response generation\",\n        \"Calibrate before use: Improving few-shot performance of language models\",\n        \"Codegeex: A pre-trained model for code generation with multilingual evaluations on humaneval-x\"\n    ],\n    \"reasoning\": \"Selected these 50 references because they represent foundational work and recent advances in GPT4AIGChip: Towards Next-Generation AI Accelerator Design Automation via Large Language Models, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}