{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 58 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Improving Code Summarization with Block-wise Abstract Syntax Tree Splitting\n\nPaper Abstract: Abstract Automatic code summarization frees software developers from the heavy burden of manual commenting and benefits software development and maintenance. Abstract Syntax Tree (AST), which depicts the source code’s syntactic structure, has been incorporated to guide the generation of code summaries. However, existing AST based methods suffer from the difficulty of training and generate inadequate code summaries. In this paper, we present the Block-wise Abstract Syntax Tree Splitting method (BASTS for short), which fully utilizes the rich tree-form syntax structure in ASTs, for improving code summarization. BASTS splits the code of a method based on the blocks in the dominator tree of the Control Flow Graph, and generates a split AST for each code split. Each split AST is then modeled by a Tree-LSTM using a pre-training strategy to capture local non-linear syntax encoding. The learned syntax encoding is combined with code encoding, and fed into Transformer to generate high-quality code summaries. Comprehensive experiments on benchmarks have demonstrated that BASTS significantly outperforms state-of-the-art approaches in terms of various evaluation metrics. To facilitate reproducibility, our implementation is available at https://github.com/XMUDM/BASTS.\n\n{retrieved_text}\n\nGenerate exactly 58 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 58\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"A survey of machine learning for big code and naturalness\",\n        \"Deep learning for source code modeling and generation: Models, applications, and challenges\",\n        \"Automatic code summarization: A systematic literature review\",\n        \"Deep code comment generation\",\n        \"code2seq: Generating sequences from structured representations of code\",\n        \"Pathminer: a library for mining of path-based representations of code\",\n        \"Improved semantic representations from tree-structured long short-term memory networks\",\n        \"Long short-term memory over recursive structures\",\n        \"A comprehensive survey on graph neural networks\",\n        \"Improved code summarization via a graph neural network\",\n        \"A neural model for generating natural language summaries of program subroutines\",\n        \"Deep code comment generation with hybrid lexical and syntactical information\",\n        \"Retrieval-based neural source code summarization\",\n        \"Recent trends in deep learning based natural language processing [review article]\",\n        \"Learning representations by back-propagating errors\",\n        \"Long short-term memory\",\n        \"Learning phrase representations using RNN encoder-decoder for statistical machine translation\",\n        \"Attention is all you need\",\n        \"Summarizing source code using a neural attention model\",\n        \"Improving automatic source code summarization via deep reinforcement learning\",\n        \"A novel neural source code representation based on abstract syntax tree\",\n        \"Parsing natural scenes and natural language with recursive neural networks\",\n        \"Applications of boolean matrices to the analysis of flow diagrams\",\n        \"Control flow analysis\",\n        \"BERT: pre-training of deep bidirectional transformers for language understanding\",\n        \"Codesearchnet challenge: Evaluating the state of semantic code search\",\n        \"Code to comment “Translation”: Data, metrics, baselining & evaluation\",\n        \"A transformer-based approach for source code summarization\",\n        \"Adam: A method for stochastic optimization\",\n        \"Efficient transformers: A survey\",\n        \"On the use of automated text summarization techniques for summarizing source code\",\n        \"A vector space model for automatic indexing\",\n        \"Indexing by latent semantic analysis\",\n        \"Supporting program comprehension with source code summarization\",\n        \"Improving automated source code summarization via an eye-tracking study of programmers\",\n        \"An information-theoretic perspective of tf-idf measures\",\n        \"Evaluating source code summarization techniques: Replication and expansion\",\n        \"Mixtures of hierarchical topics with pachinko allocation\",\n        \"Natural language models for predicting programming comments\",\n        \"TASSAL: autofolding for source code summarization\",\n        \"Autofolding for source code summarization\",\n        \"Latent dirichlet allocation\",\n        \"Towards automatically generating summary comments for java methods\",\n        \"Generating parameter comments and integrating with method summaries\",\n        \"Automatically detecting and describing high level actions within methods\",\n        \"Automatic documentation generation via source code summarization of method context\",\n        \"Automatically generating natural language descriptions for object-related statement sequences\",\n        \"A convolutional attention network for extreme summarization of source code\",\n        \"Code generation as a dual task of code summarization\",\n        \"Summarizing source code with transferred API knowledge\",\n        \"Structured neural summarization\",\n        \"A neural framework for retrieval and summarization of source code\",\n        \"Improved automatic summarization of subroutines via attention to file context\",\n        \"Learning to represent programs with graphs\",\n        \"Gated graph sequence neural networks\",\n        \"code2vec: learning distributed representations of code\",\n        \"Code completion by modeling flattened abstract syntax trees as graphs\",\n        \"Codebert: A pre-trained model for programming and natural languages\"\n    ],\n    \"reasoning\": \"Selected these 58 references because they represent foundational work and recent advances in Improving Code Summarization with Block-wise Abstract Syntax Tree Splitting, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}