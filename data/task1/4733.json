{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 56 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Senatus - A Fast and Accurate Code-to-Code Recommendation Engine\n\nPaper Abstract: Abstract. Machine learning on source code (MLOnCode) is a popular research field that has been driven by the availability of large-scale code repositories and the development of powerful probabilistic and deep learning models for mining source code. Code-to-code recommendation is a task in MLOnCode that aims to recommend relevant, diverse and concise code snippets that usefully extend the code currently being written by a developer in their development environment (IDE). Code-to-code recommendation engines hold the promise of increasing developer productivity by reducing context switching from the IDE and increasing code-reuse. Existing code-to-code recommendation engines do not scale gracefully to large codebases, exhibiting a linear growth in query time as the code repository increases in size. In addition, existing code-to-code recommendation engines fail to account for the global statistics of code repositories in the ranking function, such as the distribution of code snippet lengths, leading to sub-optimal retrieval results. We address both of these weaknesses with Senatus, a new code-to-code recommendation engine. At the core of Senatus is De-Skew LSH a new locality sensitive hashing (LSH) algorithm that indexes the data for fast (sub-linear time) retrieval while also counteracting the skewness in the snippet length distribution using novel abstract syntax tree-based feature scoring and selection algorithms. We evaluate Senatus and find the recommendations to be of higher quality than competing baselines, while achieving faster search. For example on the CodeSearchNet dataset Senatus improves performance by 31.21% F1 and 147.9x faster query time compared to Facebook Aroma. Senatus also outperforms standard MinHash LSH by 29.2% F1 and 51.02x faster query time.\n\n{retrieved_text}\n\nGenerate exactly 56 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 56\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"A survey of machine learning for big code and naturalness\",\n        \"Code2vec: Learning Distributed Representations of Code\",\n        \"Near-Optimal Hashing Algorithms for Approximate Nearest Neighbor in High Dimensions\",\n        \"Analyzing and Mining a Code Search Engine Usage Log\",\n        \"Query by example in large-scale code repositories\",\n        \"Learning Python Code Suggestion with a Sparse Pointer Network\",\n        \"On the resemblance and containment of documents\",\n        \"Min-Wise Independent Permutations (Extended Abstract)\",\n        \"Bias and the Limits of Pooling\",\n        \"When Deep Learning Met Code Search\",\n        \"Similarity Estimation Techniques from Rounding Algorithms\",\n        \"SNIFF: A Search Engine for Java Using Free-Form Queries\",\n        \"The NiCad Clone Detector\",\n        \"Space Efficient Mining of Multigraph Streams\",\n        \"Google News Personalization: Scalable Online Collaborative Filtering\",\n        \"Locality-Sensitive Hashing Scheme Based on p-Stable Distributions\",\n        \"CoNCRA: A Convolutional Neural Networks Code Retrieval Approach\",\n        \"An Algorithm for Finding Best Matches in Logarithmic Expected Time\",\n        \"Deep Code Search\",\n        \"CodeSearchNet Challenge: Evaluating the State of Semantic Code Search\",\n        \"Approximate Nearest Neighbors: Towards Removing the Curse of Dimensionality\",\n        \"Improved Consistent Sampling, Weighted Minhash and L1 Sketching\",\n        \"DECKARD: Scalable and Accurate Tree-Based Detection of Code Clones\",\n        \"Report on the Need for and Provision of an ’ideal’ Information Retrieval Test Collection\",\n        \"CCFinder: a multilinguistic token-based code clone detection system for large scale source code\",\n        \"FaCoY: A Code-to-Code Search Engine\",\n        \"Krugle Code Search Architecture\",\n        \"Maximal Divergence Sequential Autoencoder for Binary Software Vulnerability Detection\",\n        \"CodeGenie: Using Test-Cases to Search and Reuse Source Code\",\n        \"Neural Code Search Evaluation Dataset\",\n        \"Code Completion with Neural Attention and Pointer Networks\",\n        \"Theory and Applications of b-Bit Minwise Hashing\",\n        \"b-Bit Minwise Hashing\",\n        \"Learning Code-Query Interaction for Enhancing Code Searches\",\n        \"Opportunities and Challenges in Code Search Tools\",\n        \"Aroma: Code Recommendation via Structural Code Search\",\n        \"Mash: Fast genome and metagenome distance estimation using MinHash\",\n        \"Feedback-directed random test generation\",\n        \"Real-time event detection in massive streams\",\n        \"DeepBugs: A Learning Approach to Name-Based Bug Detection\",\n        \"Project CodeNet: A Large-Scale AI for Code Dataset for Learning a Diversity of Coding Tasks\",\n        \"Mining of massive datasets\",\n        \"MC-MinH: Metagenome Clustering using Minwise based Hashing\",\n        \"Locality-Sensitive Hashing for Earthquake Detection: A Case Study of Scaling Data-Driven Science\",\n        \"Oreo: Detection of Clones in the Twilight Zone\",\n        \"SourcererCC: Scaling Code Clone Detection to Big-Code\",\n        \"Asymmetric minwise hashing for indexing binary inner products and set containment\",\n        \"Unit Test Case Generation with Transformers\",\n        \"On detection of gapped code clones using gap locations\",\n        \"Deep learning code fragments for code clone detection\",\n        \"Are the Code Snippets What We Are Searching for? A Benchmark and an Empirical Study on Code Search with Natural-Language Queries\",\n        \"On the Theory of Weak Supervision for Information Retrieval\",\n        \"Automated Identification of Security Issues from Commit Messages and Bug Reports\",\n        \"LSH Ensemble: Internet-Scale Domain Search\",\n        \"How Reliable Are the Results of Large-Scale Information Retrieval Experiments?\",\n        \"Language-Agnostic Representation Learning of Source Code from Structure and Context\"\n    ],\n    \"reasoning\": \"Selected these 56 references because they represent foundational work and recent advances in Senatus - A Fast and Accurate Code-to-Code Recommendation Engine, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}