{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 48 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: MEIC: Re-thinking RTL Debug Automation using LLMs\n\nPaper Abstract: Abstract. The deployment of Large Language Models (LLMs) for code debugging (e.g., C and Python) is widespread, benefiting from their ability to understand and interpret intricate concepts. However, in the semiconductor industry, utilising LLMs to debug Register Transfer Level (RTL) code is still insufficient, largely due to the underrepresentation of RTL-specific data in training sets. This work introduces a novel framework, Make Each Iteration Count (MEIC), which contrasts with traditional one-shot LLM-based debugging methods that heavily rely on prompt engineering, model tuning, and model training. MEIC utilises LLMs in an iterative process to overcome the limitation of LLMs in RTL code debugging, which is suitable for identifying and correcting both syntax and function errors, while effectively managing the uncertainties inherent in LLM operations. To evaluate our framework, we provide an open-source dataset comprising 178 common RTL programming errors. The experimental results demonstrate that the proposed debugging framework achieves fix rate of 93% for syntax errors and 78% for function errors, with up to 48x speedup in debugging processes when compared with experienced engineers. The Repo. of dataset and code: https://anonymous.4open.science/r/Verilog-Auto-Debug-6E7F/.\n\n{retrieved_text}\n\nGenerate exactly 48 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 48\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Fixing hardware security bugs with large language models\",\n        \"MEASURING AND MITIGATING HALLUCINATIONS IN LARGE LANGUAGE MODELS: AMULTIFACETED APPROACH\",\n        \"Chip-Chat: Challenges and Opportunities in Conversational Hardware Design\",\n        \"ChipGPT: How far are we from natural language hardware design\",\n        \"Evaluating large language models trained on code\",\n        \"Hallucination detection: Robustly discerning reliable answers in large language models\",\n        \"Verilog: Frequently Asked Questions: Language, Applications and Extensions\",\n        \"A Chain-of-Thought Prompting Approach with LLMs for Evaluating Students’ Formative Assessment Responses in Science\",\n        \"Make Every Move Count: LLM-based High-Quality RTL Code Generation Using MCTS\",\n        \"LLM-based Test-driven Interactive Code Generation: User Study and Empirical Evaluation\",\n        \"AssertLLM: Generating and Evaluating Hardware Verification Assertions from Design Specifications via Multi-LLMs\",\n        \"Don’t Hallucinate, Abstain: Identifying LLM Knowledge Gaps via Multi-LLM Collaboration\",\n        \"LLM4SecHW: Leveraging domain-specific large language model for hardware debugging\",\n        \"Truth-o-meter: Collaborating with llm in fighting its hallucinations\",\n        \"From English to ASIC: Hardware Implementation with Large Language Model\",\n        \"LLM-guided Formal Verification Coupled with Mutation Testing\",\n        \"Towards mitigating LLM hallucination via self reflection\",\n        \"Self-planning Code Generation with Large Language Models\",\n        \"Bridging the pragmatic gaps for mixed-criticality systems in the automotive industry\",\n        \"RTL-Repair: Fast Symbolic Repair of Hardware Design Code\",\n        \"Are we there yet? A study on the state of high-level synthesis\",\n        \"Chipnemo: Domain-adapted llms for chip design\",\n        \"Verilogeval: Evaluating large language models for verilog code generation\",\n        \"BugDoc: Iterative debugging and explanation of pipeline\",\n        \"RTLLM: An open-source benchmark for design rtl generation with large language model\",\n        \"Using an llm to help with code understanding\",\n        \"ChatGPT - Fine-Tuning\",\n        \"A domain-specific next-generation large language model (LLM) or ChatGPT is required for biomedical engineering and research\",\n        \"RTL Coding Guidelines\",\n        \"A Systematic Survey of Prompt Engineering in Large Language Models: Techniques and Applications\",\n        \"ModelSim\",\n        \"Fast and wrong: The case for formally specifying hardware with LLMS\",\n        \"The IEEE Verilog 1364-2001 Standard What’s New, and Why You Need It\",\n        \"Verilog and SystemVerilog Gotchas: 101 Common Coding Errors and How to Avoid Them\",\n        \"Benchmarking large language models for automated verilog rtl code generation\",\n        \"Verigen: A large language model for verilog code generation\",\n        \"Debugbench: Evaluating debugging capability of large language models\",\n        \"RTLFixer: Automatically Fixing RTL Syntax Errors with Large Language Models\",\n        \"Software/Hardware Co-design for LLM and Its Application for Design Verification\",\n        \"Chain-of-thought prompting elicits reasoning in large language models\",\n        \"Designing critical systems with iterative automated safety analysis\",\n        \"DECISIVE: Designing Critical Systems With Iterative Automated Safety Analysis\",\n        \"A prompt pattern catalog to enhance prompt engineering with chatgpt\",\n        \"HDLBits - Practice FPGA Problems\",\n        \"Ai chains: Transparent and controllable human-ai interaction by chaining large language model prompts\",\n        \"HDLdebugger: Streamlining HDL debugging with Large Language Models\",\n        \"Why Johnny can’t prompt: how non-AI experts try (and fail) to design LLM prompts\",\n        \"Siren’s song in the ai ocean: A survey on hallucination in large language models\"\n    ],\n    \"reasoning\": \"Selected these 48 references because they represent foundational work and recent advances in MEIC: Re-thinking RTL Debug Automation using LLMs, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}