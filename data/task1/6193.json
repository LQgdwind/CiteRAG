{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 46 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Mutation Models: Learning to Generate Levels by Imitating Evolution\n\nPaper Abstract: Abstract. Search-based procedural content generation (PCG) is a well-known method for level generation in games. Its key advantage is that it is generic and able to satisfy functional constraints. However, due to the heavy computational costs to run these algorithms online, search-based PCG is rarely utilized for real-time generation. In this paper, we introduce mutation models, a new type of iterative level generator based on machine learning. We train a model to imitate the evolutionary process and use the trained model to generate levels. This trained model is able to modify noisy levels sequentially to create better levels without the need for a fitness function during inference. We evaluate our trained models on a 2D maze generation task. We compare several different versions of the method: training the models either at the end of evolution (normal evolution) or every 100 generations (assisted evolution) and using the model as a mutation function during evolution. Using the assisted evolution process, the final trained models are able to generate mazes with a success rate of 99%percent9999\\% and high diversity of 86%percent8686\\%. The trained model is many times faster than the evolutionary process it was trained on. This work opens the door to a new way of learning level generators guided by an evolutionary process, meaning automatic creation of generators with specifiable constraints and objectives that are fast enough for runtime deployment in games.\n\n{retrieved_text}\n\nGenerate exactly 46 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 46\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Surrogate deterministic mutation: Preliminary results\",\n        \"Automatic generation of game elements via evolution\",\n        \"Search-based procedural generation of maze-like levels\",\n        \"Evolution strategiesâ€“a comprehensive introduction\",\n        \"Tree search versus optimization approaches for map generation\",\n        \"Ratcliff/Obershelp pattern recognition\",\n        \"Evolutionary game design\",\n        \"Q-deckrec: A fast deck recommendation system for collectible card games\",\n        \"Mechanic miner: Reflection-driven game mechanic discovery and level design\",\n        \"Linear levels through n-grams\",\n        \"Mixed-initiative level design with rl brush\",\n        \"Learning controllable content generators\",\n        \"Illuminating diverse neural cellular automata for level generation\",\n        \"Go-explore: a new approach for hard-exploration problems\",\n        \"Markov by candlelight\",\n        \"Friend, collaborator, student, manager: How design of an ai-driven game level editor affects creators\",\n        \"Co-creative level design via machine learning\",\n        \"Autoencoders for level generation, repair, and recognition\",\n        \"Surrogate-assisted evolutionary computation: Recent advances and future challenges\",\n        \"WaveFunctionCollapse is constraint solving in the wild\",\n        \"A procedural procedural level generator generator\",\n        \"Pcgrl: Procedural content generation via reinforcement learning\",\n        \"Automatic puzzle level generation: A general approach using a description language\",\n        \"General video game rule generation\",\n        \"Multi-Objective level generator generation with Marahel\",\n        \"Offline reinforcement learning: Tutorial, review, and perspectives on open problems\",\n        \"Deep learning for procedural content generation\",\n        \"Arachnophobia exposure therapy using experience-driven procedural content generation via reinforcement learning (EDPCGRL)\",\n        \"Playing atari with deep reinforcement learning\",\n        \"Illuminating search spaces by mapping elites\",\n        \"Generation of diverse stages in turn-based role-playing game using reinforcement learning\",\n        \"Evolutionary optimization of computationally expensive problems via surrogate modeling\",\n        \"General video game ai: A multitrack framework for evaluating agents, games, and content generation algorithms\",\n        \"Dungeon and Platformer Level Blending and Generation using Conditional VAEs\",\n        \"Evolving playable content for cut the rope through a simulation-based approach\",\n        \"Experience-driven PCG via reinforcement learning: A Super Mario Bros study\",\n        \"Path of Destruction: Learning an Iterative Level Generator Using a Small Dataset\",\n        \"Learning to generate video game maps using markov models\",\n        \"Learning player tailored content from observation: Platformer level generation from video traces using lstms\",\n        \"Procedural content generation via machine learning (PCGML)\",\n        \"Search-based procedural content generation: A taxonomy and survey\",\n        \"Bootstrapping conditional gans for video game level generation\",\n        \"Evolving mario levels in the latent space of a deep convolutional generative adversarial network\",\n        \"Generating procedural dungeons using machine learning methods\",\n        \"Rotation, translation, and cropping for zero-shot generalization\",\n        \"Procedural Level Generation for Sokoban via Deep Learning: An Experimental Study\"\n    ],\n    \"reasoning\": \"Selected these 46 references because they represent foundational work and recent advances in Mutation Models: Learning to Generate Levels by Imitating Evolution, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}