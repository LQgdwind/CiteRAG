{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 45 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: heSRPT:Parallel Scheduling to Minimize Mean Slowdown\n\nPaper Abstract: Abstract Modern data centers serve workloads which are capable of exploiting parallelism. When a job parallelizes across multiple servers it will complete more quickly, but jobs receive diminishing returns from being allocated additional servers. Because allocating multiple servers to a single job is inefficient, it is unclear how best to allocate a fixed number of servers between many parallelizable jobs. This paper provides the first optimal allocation policy for minimizing the mean slowdown of parallelizable jobs of known size when all jobs are present at time 0. Our policy provides a simple closed form formula for the optimal allocations at every moment in time. Minimizing mean slowdown usually requires favoring short jobs over long ones (as in the SRPT policy). However, because parallelizable jobs have sublinear speedup functions, system efficiency is also an issue. System efficiency is maximized by giving equal allocations to all jobs and thus competes with the goal of prioritizing small jobs. Our optimal policy, high-efficiency SRPT (heSRPT), balances these competing goals. heSRPT completes jobs according to their size order, but maintains overall system efficiency by allocating some servers to each job at every moment in time. Our results generalize to also provide the optimal allocation policy with respect to mean flow time. Finally, we consider the online case where jobs arrive to the system over time. While optimizing mean slowdown in the online setting is even more difficult, we find that heSRPT provides an excellent heuristic policy for the online setting. In fact, our simulations show that heSRPT significantly outperforms state-of-the-art allocation policies for parallelizable jobs.\n\n{retrieved_text}\n\nGenerate exactly 45 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 45\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"On the optimal trade-off between SRPT and opportunistic scheduling\",\n        \"Tensorflow: a system for large-scale machine learning\",\n        \"Scheduling parallelizable jobs online to minimize the maximum flow time\",\n        \"Resource augmentation for weighted flow-time explained by dual fitting\",\n        \"A note on multiprocessor speed scaling with precedence constraints\",\n        \"Server scheduling in the Lp norm: a rising tide lifts all boat\",\n        \"Towards optimality in parallel scheduling\",\n        \"Conservation laws, extended polymatroids and multiarmed bandit problems; a polyhedral approach to indexable systems\",\n        \"Scheduling multithreaded computations by work stealing\",\n        \"Brief announcement: deadline-aware scheduling of big-data processing jobs\",\n        \"Greedy multiprocessor server scheduling\",\n        \"Supporting malleability in parallel architectures with dynamic CPUSETs mapping and dynamic MPI\",\n        \"An improved approximation for scheduling malleable tasks with precedence constraints via iterative method\",\n        \"Efficient coflow scheduling with varys\",\n        \"Oblivious algorithms for multicores and networks of processors\",\n        \"Complexity of scheduling parallel task systems\",\n        \"Scheduling in the dark\",\n        \"Scalably scheduling processes with arbitrary speedup curves\",\n        \"Towards realizing the potential of malleable jobs\",\n        \"Analysis of join-the-shortest-queue routing for web server farms\",\n        \"Surprising results on task assignment in server farms with high-variability workloads\",\n        \"Amdahlâ€™s law in the multicore era\",\n        \"Minimizing slowdown in heterogeneous size-aware dispatching systems\",\n        \"Competitively scheduling tasks with intermediate parallelizability\",\n        \"Simulation based HPC workload analysis\",\n        \"Asymptotically optimal approximation algorithms for coflow scheduling\",\n        \"Brief announcement: Improved approximation algorithms for scheduling co-flows\",\n        \"Response times in M/M/s fork-join networks\",\n        \"A model-based approach to streamlining distributed training for asynchronous SGD\",\n        \"Join-idle-queue: A novel load balancing algorithm for dynamically scalable web services\",\n        \"The complexity of scheduling for p-norms of flow and stretch\",\n        \"Online scheduling to minimize average stretch\",\n        \"Space-efficient scheduling of nested parallelism\",\n        \"An approximation for the mean response time for shortest queue routing with general interarrival and service times\",\n        \"Minimizing the total weighted completion time of coflows in datacenter networks\",\n        \"Clairvoyant dynamic bin packing for job scheduling with minimum server usage time\",\n        \"Balancing srpt prioritization vs opportunistic gain in wireless systems with flow dynamics\",\n        \"Brief announcement: a new improved bound for coflow scheduling\",\n        \"A new proof of the optimality of the shortest remaining processing time discipline\",\n        \"On the power of (even a little) centralization in distributed processing\",\n        \"Large-scale cluster management at Google with Borg\",\n        \"Delay asymptotics and bounds for multitask parallel jobs\",\n        \"Nearly insensitive bounds on SMART scheduling\",\n        \"Dynamic scheduling via polymatroid optimization\",\n        \"PARSEC3.0: A multicore benchmark suite with network stacks and SPLASH-2X\"\n    ],\n    \"reasoning\": \"Selected these 45 references because they represent foundational work and recent advances in heSRPT:Parallel Scheduling to Minimize Mean Slowdown, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}