{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 52 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Proof Automation with Large Language Models\n\nPaper Abstract: Abstract. Interactive theorem provers such as Coq are powerful tools to formally guarantee the correctness of software. However, using these tools requires significant manual effort and expertise. While Large Language Models (LLMs) have shown promise in automatically generating informal proofs in natural language, they are less effective at generating formal proofs in interactive theorem provers. In this paper, we conduct a formative study to identify common mistakes made by LLMs when asked to generate formal proofs. By analyzing 520 proof generation errors made by GPT-3.5, we found that GPT-3.5 often identified the correct high-level structure of a proof, but struggled to get the lower-level details correct. Based on this insight, we propose PALM, a novel generate-then-repair approach that first prompts an LLM to generate an initial proof and then leverages targeted symbolic methods to iteratively repair low-level problems. We evaluate PALM on a large dataset that includes more than 10K theorems. Our results show that PALM significantly outperforms other state-of-the-art approaches, successfully proving 76.676.676.6% to 180.4180.4180.4%percent\\% more theorems. Moreover, PALM proves 1270 theorems beyond the reach of existing approaches. We also demonstrate the generalizability of PALM across different LLMs.\n\n{retrieved_text}\n\nGenerate exactly 52 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 52\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Archive of Formal Proofs\",\n        \"Changelogs of Coq\",\n        \"Eprover\",\n        \"GPT-3.5-turbo\",\n        \"GPT-4o\",\n        \"PALM’s source code\",\n        \"A failure case because inductive reasoning is not used\",\n        \"A failure case because key premises are not retrieved\",\n        \"A failure case because the LLM does not use premises\",\n        \"BM25, wikipedia\",\n        \"A learning algorithm for Boltzmann machines\",\n        \"DeepMath - deep sequence models for premise selection\",\n        \"cvc5: A Versatile and Industrial-Strength SMT Solver\",\n        \"Hammer for Coq: Automation for Dependent Type Theory\",\n        \"Z3: An Efficient SMT Solver\",\n        \"The Lean Theorem Prover (System Description)\",\n        \"The distance-weighted k-nearest-neighbor rule\",\n        \"Random forests for premise selection\",\n        \"Diversity-driven automated formal verification\",\n        \"TacTok: semantics-aware proof synthesis\",\n        \"Baldur: Whole-proof generation and repair with large language models\",\n        \"Discovery of grounded theory: Strategies for qualitative research\",\n        \"An introduction to qualitative research\",\n        \"Lisa: Language models of isabelle proofs\",\n        \"Thor: Wielding hammers to integrate language models and automated theorem provers\",\n        \"Draft, sketch, and prove: Guiding formal theorem provers with informal proofs\",\n        \"HOL (y) Hammer: Online ATP service for HOL Light\",\n        \"seL4: Formal verification of an OS kernel\",\n        \"Overview and evaluation of premise selection techniques for large theory mathematics\",\n        \"CompCert: Practical experience on integrating and qualifying a formally verified optimizing compiler\",\n        \"Retrieval-augmented generation for knowledge-intensive nlp tasks\",\n        \"Solving quantitative reasoning problems with language models\",\n        \"Isabelle/HOL: a proof assistant for higher-order logic\",\n        \"Three years of experience with Sledgehammer, a Practical Link Between Automatic and Interactive Theorem Provers\",\n        \"The design and implementation of VAMPIRE\",\n        \"Generating correctness proofs with neural networks\",\n        \"Passport: Improving automated formal verification using identifiers\",\n        \"A statistical interpretation of term specificity and its application in retrieval\",\n        \"Improved semantic representations from tree-structured long short-term memory networks\",\n        \"A language-agent approach to formal theorem-proving\",\n        \"The Coq Reference Manual – Release 8.19.0\",\n        \"Programmable proof search – Release 8.19.0\",\n        \"Chain-of-thought prompting elicits reasoning in large language models\",\n        \"Verdi: a framework for implementing and formally verifying distributed systems\",\n        \"Autoformalization with large language models\",\n        \"Learning to prove theorems via interacting with proof assistants\",\n        \"Leandojo: Theorem proving with retrieval-augmented language models\",\n        \"Getting More out of Large Language Models for Proofs\",\n        \"Minif2f: a cross-system benchmark for formal olympiad-level mathematics\",\n        \"Least-to-most prompting enables complex reasoning in large language models\",\n        \"Large language models are human-level prompt engineers\",\n        \"Hot or Cold? Adaptive Temperature Sampling for Code Generation with Large Language Models\"\n    ],\n    \"reasoning\": \"Selected these 52 references because they represent foundational work and recent advances in Proof Automation with Large Language Models, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}