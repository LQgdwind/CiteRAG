{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 49 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: A Joint Learning Model with Variational Interaction for Multilingual Program Translation\n\nPaper Abstract: Abstract. Programs implemented in various programming languages form the foundation of software applications. To alleviate the burden of program migration and facilitate the development of software systems, automated program translation across languages has garnered significant attention. Previous approaches primarily focus on pairwise translation paradigms, learning translation between pairs of languages using bilingual parallel data. However, parallel data is difficult to collect for some language pairs, and the distribution of program semantics across languages can shift, posing challenges for pairwise program translation. In this paper, we argue that jointly learning a unified model to translate code across multiple programming languages is superior to separately learning from bilingual parallel data. We propose Variational Interaction for Multilingual Program Translation (VIM-PT), a disentanglement-based generative approach that jointly trains a unified model for multilingual program translation across multiple languages. VIM-PT disentangles code into language-shared and language-specific features, using variational inference and interaction information with a novel lower bound, then achieves program translation through conditional generation. VIM-PT demonstrates four advantages: 1) captures language-shared information more accurately from various implementations and improves the quality of multilingual program translation, 2) mines and leverages the capability of non-parallel data, 3) addresses the distribution shift of program semantics across languages, 4) and serves as a unified model, reducing deployment complexity.\n\n{retrieved_text}\n\nGenerate exactly 49 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 49\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"AVATAR: A Parallel Corpus for Java-Python Program Translation\",\n        \"Deep Variational Information Bottleneck\",\n        \"A Survey of Machine Learning for Big Code and Naturalness\",\n        \"A Tool for Translating sequential source code to parallel code written in C++ and OpenACC\",\n        \"Automatic inference of java-to-swift translation rules for porting mobile applications\",\n        \"Tree-to-tree Neural Networks for Program Translation\",\n        \"A Re-Engineering Approach to Program Translation\",\n        \"Beyond Lexical Consistency: Preserving Semantic Consistency for Program Translation\",\n        \"Pre-training Code Representation with Semantic Flow Graph for Effective Bug Localization\",\n        \"Auto-encoding variational neural machine translation\",\n        \"CodeBERT: A Pre-Trained Model for Programming and Natural Languages\",\n        \"GraphCodeBERT: Pre-training Code Representations with Data Flow\",\n        \"Variational interaction information maximization for cross-domain disentanglement\",\n        \"Phrase-Based Statistical Translation of Programming Languages\",\n        \"Using program transformation to improve program translation\",\n        \"Semi-supervised learning with deep generative models\",\n        \"Auto-Encoding Variational Bayes\",\n        \"DOBF: A Deobfuscation Pre-Training Objective for Programming Languages\",\n        \"Unsupervised Machine Translation Using Monolingual Corpora Only\",\n        \"Automatic-programming-language translation through syntactical analysis\",\n        \"Variational decoding for statistical machine translation\",\n        \"hmCodeTrans: Human-Machine Interactive Code Translation\",\n        \"Decoupled Weight Decay Regularization\",\n        \"CodeXGLUE: A Machine Learning Benchmark Dataset for Code Understanding and Generation\",\n        \"Lexical statistical machine translation for language migration\",\n        \"Divide-and-Conquer Approach for Multi-phase Statistical Migration for Source Code (T)\",\n        \"Mapping API elements for code migration with vector representations\",\n        \"Learning to generate pseudo-code from source code using statistical machine translation\",\n        \"Learning to Generate Pseudo-Code from Source Code Using Statistical Machine Translation (T)\",\n        \"Conditional variational autoencoder for neural machine translation\",\n        \"Bleu: a Method for Automatic Evaluation of Machine Translation\",\n        \"Exploring translation of OpenMP to OpenACC 2.5: lessons learned\",\n        \"Unsupervised Translation of Programming Languages\",\n        \"Leveraging Automated Unit Tests for Unsupervised Code Translation\",\n        \"Variational Neural Machine Translation with Normalizing Flows\",\n        \"Introvnmt: An introspective model for variational neural machine translation\",\n        \"Variational recurrent neural machine translation\",\n        \"Code search based on context-aware code translation\",\n        \"Code Translation with Compiler Representations\",\n        \"Programming Language Translator For Integration Client Application With Web APIs\",\n        \"CodeT5: Identifier-aware Unified Pre-trained Encoder-Decoder Models for Code Understanding and Generation\",\n        \"Program Translation via Abstraction and Reimplementation\",\n        \"Better together? an evaluation of ai-supported code translation\",\n        \"Perfection Not Required? Human-AI Partnerships in Code Translation\",\n        \"BabelTower: Learning to Auto-parallelized Program Translation\",\n        \"CodeTransOcean: A Comprehensive Multilingual Benchmark for Code Translation\",\n        \"Mirror-Generative Neural Machine Translation\",\n        \"Alignment-Enhancing Parallel Code Generation for Semi-Supervised Code Translation\",\n        \"Multilingual Code Snippets Training for Program Translation\"\n    ],\n    \"reasoning\": \"Selected these 49 references because they represent foundational work and recent advances in A Joint Learning Model with Variational Interaction for Multilingual Program Translation, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}