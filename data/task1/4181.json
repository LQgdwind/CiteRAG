{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 49 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Program Merge Conflict Resolution via Neural Transformers\n\nPaper Abstract: Abstract. Collaborative software development is an integral part of the modern software development life cycle, essential to the success of large-scale software projects. When multiple developers make concurrent changes around the same lines of code, a merge conflict may occur. Such conflicts stall pull requests and continuous integration pipelines for hours to several days, seriously hurting developer productivity. To address this problem, we introduce MergeBERT, a novel neural program merge framework based on token-level three-way differencing and a transformer encoder model. By exploiting the restricted nature of merge conflict resolutions, we reformulate the task of generating the resolution sequence as a classification task over a set of primitive merge patterns extracted from real-world merge commit data. Our model achieves 63–68% accuracy for merge resolution synthesis, yielding nearly a 3×\\times performance improvement over existing semi-structured, and 2×\\times improvement over neural program merge tools. Finally, we demonstrate that MergeBERT is sufficiently flexible to work with source code files in Java, JavaScript, TypeScript, and C# programming languages. To measure the practical use of MergeBERT, we conduct a user study to evaluate MergeBERT suggestions with 25 developers from large OSS projects on 122 real-world conflicts they encountered. Results suggest that in practice, MergeBERT resolutions would be accepted at a higher rate than estimated by automatic metrics for precision and accuracy. Additionally, we use participant feedback to identify future avenues for improvement of MergeBERT.\n\n{retrieved_text}\n\nGenerate exactly 49 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 49\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"A Survey of Machine Learning for Big Code and Naturalness\",\n        \"Structured merge with auto-tuning: balancing precision and performance\",\n        \"Semistructured Merge: Rethinking Merge in Revision Control Systems\",\n        \"Semistructured Merge in Revision Control Systems.\",\n        \"Identifying Conflicts During Structural Merge\",\n        \"Assessing the value of branches with what-if analysis\",\n        \"An empirical investigation into merge conflicts and their effect on software quality\",\n        \"Lifting the Curtain on Merge Conflict Resolution: A Sensemaking Perspective\",\n        \"Proactive detection of collaboration conflicts\",\n        \"Evaluating and improving semistructured merge\",\n        \"PyMT5: Multi-mode Translation of Natural Language and Python Code with Transformers\",\n        \"Tipmerge: recommending experts for integrating changes across branches\",\n        \"Recommending Participants for Collaborative Merge Sessions\",\n        \"BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding\",\n        \"DeepMerge: Learning to merge programs\",\n        \"Fine-grained and accurate source code differencing\",\n        \"CodeBERT: A Pre-Trained Model for Programming and Natural Languages\",\n        \"Appendix to Program Merge Conflict Resolution via Neural Transformers\",\n        \"Online Data Set for Program Merge Conflict Resolution via Neural Transformers\",\n        \"On the nature of merge conflicts: a study of 2,731 open source java projects hosted by github\",\n        \"Work practices and challenges in pull-based development: the contributor’s perspective\",\n        \"Improving early detection of software merge conflicts\",\n        \"The Impact of Tangled Code Changes\",\n        \"On the Naturalness of Software\",\n        \"JDime Publicly Available Implementation\",\n        \"Learning and evaluating contextual embedding of source code\",\n        \"Big Code ≠\\\\neq Big Vocabulary: Open-Vocabulary Models for Source Code\",\n        \"Cassandra: Proactive conflict minimization through optimized task scheduling\",\n        \"Hey! Are You Committing Tangled Changes?\",\n        \"Renaming and shifted code in structured merging: Looking ahead for precision and performance\",\n        \"Software practitioner perspectives on merge conflicts and resolutions\",\n        \"A state-of-the-art survey on software merging\",\n        \"The life-cycle of merge conflicts: processes, barriers, and strategies\",\n        \"Can Program Synthesis be Used to Learn Merge Conflict Resolutions? An Empirical Analysis\",\n        \"Language Models are Unsupervised Multitask Learners\",\n        \"Leveraging Structure in Software Merge: An Empirical Study\",\n        \"BLEURT: Learning Robust Metrics for Text Generation\",\n        \"Neural Machine Translation of Rare Words with Subword Units\",\n        \"Automatic Detection and Resolution of Software Merge Conflicts: Are We There Yet?\",\n        \"IntelliMerge: a refactoring-aware software merging technique\",\n        \"GNU diff3\",\n        \"SemanticMerge\",\n        \"Beyond Compare\",\n        \"Verified three-way program merge\",\n        \"Intellicode compose: Code generation using transformer\",\n        \"Semistructured merge in JavaScript systems\",\n        \"Challenges of Resolving Merge Conflicts: A Mining and Survey Study\",\n        \"Structure-oriented merging of revisions of software documents\",\n        \"Conflict resolution for structured merge via version space algebra\"\n    ],\n    \"reasoning\": \"Selected these 49 references because they represent foundational work and recent advances in Program Merge Conflict Resolution via Neural Transformers, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}