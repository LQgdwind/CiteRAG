{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 49 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Unsupervised Translation of Programming Languages\n\nPaper Abstract: Abstract A transcompiler, also known as source-to-source translator, is a system that converts source code from a high-level programming language (such as C++ or Python) to another. Transcompilers are primarily used for interoperability, and to port codebases written in an obsolete or deprecated language (e.g. COBOL, Python 2) to a modern one. They typically rely on handcrafted rewrite rules, applied to the source code abstract syntax tree. Unfortunately, the resulting translations often lack readability, fail to respect the target language conventions, and require manual modifications in order to work properly. The overall translation process is time-consuming and requires expertise in both the source and target languages, making code-translation projects expensive. Although neural models significantly outperform their rule-based counterparts in the context of natural language translation, their applications to transcompilation have been limited due to the scarcity of parallel data in this domain. In this paper, we propose to leverage recent approaches in unsupervised machine translation to train a fully unsupervised neural transcompiler. We train our model on source code from open source GitHub projects, and show that it can translate functions between C++, Java, and Python with high accuracy. Our method relies exclusively on monolingual source code, requires no expertise in the source or target languages, and can easily be generalized to other programming languages. We also build and release a test set composed of 852 parallel functions, along with unit tests to check the correctness of translations. We show that our model outperforms rule-based commercial baselines by a significant margin.\n\n{retrieved_text}\n\nGenerate exactly 49 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 49\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Using machine translation for converting python 2 to python 3 code\",\n        \"Learning natural coding conventions\",\n        \"code2seq: Generating sequences from structured representations of code\",\n        \"Structural language models for any-code generation\",\n        \"Neural attribute machines for program generation\",\n        \"Learning bilingual word embeddings with (almost) no bilingual data\",\n        \"Unsupervised statistical machine translation\",\n        \"Unsupervised neural machine translation\",\n        \"Neural machine translation by jointly learning to align and translate\",\n        \"A parallel corpus of python functions and documentation strings for automated code documentation and code generation\",\n        \"Learning python code suggestion with a sparse pointer network\",\n        \"Tree-to-tree neural networks for program translation\",\n        \"Sequencer: Sequence-to-sequence learning for end-to-end program repair\",\n        \"Bert: Pre-training of deep bidirectional transformers for language understanding\",\n        \"Codebert: A pre-trained model for programming and natural languages\",\n        \"Coda: An end-to-end neural program decompiler\",\n        \"On using monolingual corpora in neural machine translation\",\n        \"Deepfix: Fixing common c language errors by deep learning\",\n        \"Two new evaluation datasets for low-resource machine translation: Nepali-english and sinhala-english\",\n        \"Dual learning for machine translation\",\n        \"Deep code comment generation\",\n        \"Phrase-based statistical translation of programming languages\",\n        \"Using recurrent neural networks for decompilation\",\n        \"Towards neural decompilation\",\n        \"Adam: A method for stochastic optimization\",\n        \"Pharaoh: a beam search decoder for phrase-based statistical machine translation models\",\n        \"Moses: Open source toolkit for statistical machine translation\",\n        \"Sentencepiece: A simple and language independent subword tokenizer and detokenizer for neural text processing\",\n        \"Cross-lingual language model pretraining\",\n        \"Unsupervised machine translation using monolingual corpora only\",\n        \"Word translation without parallel data\",\n        \"Phrase-based & neural unsupervised machine translation\",\n        \"Bart: Denoising sequence-to-sequence pre-training for natural language generation, translation, and comprehension\",\n        \"Code completion with neural attention and pointer networks\",\n        \"Visualizing data using t-sne\",\n        \"Lexical statistical machine translation for language migration\",\n        \"Learning to generate pseudo-code from source code using statistical machine translation (t)\",\n        \"Bleu: a method for automatic evaluation of machine translation\",\n        \"Automatic differentiation in pytorch\",\n        \"Abstract syntax networks for code generation and semantic parsing\",\n        \"Improving neural machine translation models with monolingual data\",\n        \"Neural machine translation of rare words with subword units\",\n        \"Mass: Masked sequence to sequence pre-training for language generation\",\n        \"Sequence to sequence learning with neural networks\",\n        \"Attention is all you need\",\n        \"Extracting and composing robust features with denoising autoencoders\",\n        \"Dynamic neural program embedding for program repair\",\n        \"A syntactic neural model for general-purpose code generation\",\n        \"Maximum expected likelihood estimation for zero-resource neural machine translation\"\n    ],\n    \"reasoning\": \"Selected these 49 references because they represent foundational work and recent advances in Unsupervised Translation of Programming Languages, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}