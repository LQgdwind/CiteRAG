{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 61 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Deep or Simple Models for Semantic Tagging? It Depends on your Data\n\nPaper Abstract: Abstract Semantic tagging, which has extensive applications in text mining, predicts whether a given piece of text conveys the meaning of a given semantic tag. The problem of semantic tagging is largely solved with supervised learning and today, deep learning models are widely perceived to be better for semantic tagging. However, there is no comprehensive study supporting the popular belief. Practitioners often have to train different types of models for each semantic tagging task to identify the best model. This process is both expensive and inefficient. We embark on a systematic study to investigate the following question: Are deep models the best performing model for all semantic tagging tasks? To answer this question, we compare deep models against “simple models” over datasets with varying characteristics. Specifically, we select three prevalent deep models (i.e. CNN, LSTM, and BERT) and two simple models (i.e. LR and SVM), and compare their performance on the semantic tagging task over 21 datasets. Results show that the size, the label ratio, and the label cleanliness of a dataset significantly impact the quality of semantic tagging. Simple models achieve similar tagging quality to deep models on large datasets, but the runtime of simple models is much shorter. Moreover, simple models can achieve better tagging quality than deep models when targeting datasets show worse label cleanliness and/or more severe imbalance. Based on these findings, our study can systematically guide practitioners in selecting the right learning model for their semantic tagging task.\n\n{retrieved_text}\n\nGenerate exactly 61 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 61\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"A survey of text classification algorithms\",\n        \"Data mining techniques - for marketing, sales, and customer support\",\n        \"Large dataset and language model fun-tuning for humor recognition\",\n        \"Spoiler alert: Machine learning approaches to detect social media posts with revelatory information\",\n        \"Recognizing humour using word associations and humour anchor extraction\",\n        \"Training and testing low-degree polynomial data mappings via linear SVM\",\n        \"Xgboost: A scalable tree boosting system\",\n        \"Empirical evaluation of gated recurrent neural networks on sequence modeling\",\n        \"DeftEval: Extracting term-definition pairs in free text\",\n        \"BERT: pre-training of deep bidirectional transformers for language understanding\",\n        \"Heterographic pun recognition via pronunciation and spelling understanding gated attention network\",\n        \"An introduction to ROC analysis\",\n        \"The elements of statistical learning, volume 1\",\n        \"GLUE Benchmark\",\n        \"Deep Learning\",\n        \"Extracting and ranking travel tips from user-generated reviews\",\n        \"Regression modeling strategies: with applications to linear models, logistic and ordinal regression, and survival analysis\",\n        \"Long short-term memory\",\n        \"Argument mining for understanding peer reviews\",\n        \"Coresets for scalable bayesian logistic regression\",\n        \"Applications of support vector machines in chemistry\",\n        \"Text categorization with support vector machines: Learning with many relevant features\",\n        \"Automatic identification of pro and con reasons in online reviews\",\n        \"Convolutional neural networks for sentence classification\",\n        \"Text classification algorithms: A survey\",\n        \"Albert: A lite bert for self-supervised learning of language representations\",\n        \"Imbalanced-learn: A python toolbox to tackle the curse of imbalanced datasets in machine learning\",\n        \"Deep or simple models for semantic tagging? it depends on your data. https://arxiv.org/abs/2007.05651\",\n        \"Sentiment Analysis and Opinion Mining\",\n        \"Olenet at semeval-2019 task 9: BERT based multi-perspective models for suggestion mining\",\n        \"Roberta: A robustly optimized BERT pretraining approach\",\n        \"Introduction to information retrieval\",\n        \"Semeval-2017 task 7: Detection and interpretation of english puns\",\n        \"Using aspect extraction approaches to generate review summaries and user profiles\",\n        \"Identifying humor in reviews using background text sources\",\n        \"A study of suggestions in opinionated texts and their automatic detection\",\n        \"Towards the extraction of customer-to-customer suggestions from reviews\",\n        \"Semeval-2019 task 9: Suggestion mining from online reviews and forums\",\n        \"Generating product descriptions from user reviews\",\n        \"Author-aware aspect topic sentiment model to retrieve supporting opinions from reviews\",\n        \"Semeval-2016 task 5: Aspect based sentiment analysis\",\n        \"Semeval-2017 task 6: #hashtagwars: Learning a sense of humor\",\n        \"Shallow semantic parsing using support vector machines\",\n        \"Questia\",\n        \"A sparse topic model for extracting aspect-specific summaries from online reviews\",\n        \"SEMEVAL2020\",\n        \"Sklearn Linear SVM\",\n        \"Cross-topic argument mining from heterogeneous sources\",\n        \"Least squares support vector machine classifiers\",\n        \"H. F. Transformers\",\n        \"Fine-grained spoiler detection from large-scale review corpora\",\n        \"Glue: A multi-task benchmark and analysis platform for natural language understanding\",\n        \"Extracting API tips from developer question and answer websites\",\n        \"Answers, not links: extracting tips from yahoo!answers to address how-to web queries\",\n        \"Humor recognition and humor anchor extraction\",\n        \"A neural approach to pun generation\",\n        \"Resilient distributed datasets: A fault-tolerant abstraction for in-memory cluster computing\",\n        \"Discovering product defects and solutions from online user generated contents\",\n        \"Character-level convolutional networks for text classification\",\n        \"Unsupervised tip-mining from customer reviews\",\n        \"Joint detection and location of english puns\"\n    ],\n    \"reasoning\": \"Selected these 61 references because they represent foundational work and recent advances in Deep or Simple Models for Semantic Tagging? It Depends on your Data, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}