{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 48 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Pragmatics of Formally Verified Yet Efficient Static Analysis, in particular for Formally Verified Compilers\n\nPaper Abstract: Abstract Formally verified compilers and formally verified static analyzers are a solution to the problem that certain industries face when they have to demonstrate to authorities that the object code they run truly corresponds to its source code and that it satisfies certain properties. From a scientific and technological point of view, they are a challenge: not only a number of nontrivial invariants and algorithms must be proved to be correct, but also the implementation must be reasonably effective so that the tools operate within reasonable time. Many optimizations in compilers rely on static analysis, and thus a formally verified compiler entails formally verified static analyses. In this article, we explain some difficulties, possible solutions, design choices and trade-offs pertaining to verified static analysis, in particular when the solution of the analysis is expressed as some form of tree, map or set.\n\n{retrieved_text}\n\nGenerate exactly 48 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 48\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"A Formal Disproof of Hirsch Conjecture\",\n        \"Efficient Extensional Binary Tries\",\n        \"A Modular Integration of SAT/SMT Solvers to Coq through Proof Witnesses\",\n        \"Extending Coq with Imperative Features and Its Application to SAT Verification\",\n        \"Mathematics and the formal turn\",\n        \"A static analyzer for large safety-critical software\",\n        \"Design and Implementation of a Special-Purpose Static Program Analyzer for Safety-Critical Real-Time Embedded Software\",\n        \"Formally Verified Defensive Programming (efficient Coq-verified computations from untrusted ML oracles). (Programmation défensive formellement vérifiée (calculs efficaces et vérifiés en Coq, à partir d’oracles OCaml potentiellement non fiables))\",\n        \"Refinement to Certify Abstract Interpretations, Illustrated on Linearization for Polyhedra\",\n        \"The Verified Polyhedron Library: an Overview\",\n        \"Implementing and Reasoning About Hash-consed Data Structures in Coq\",\n        \"PfComp: A Verified Compiler for Packet Filtering Leveraging Binary Decision Diagrams\",\n        \"A persistent union-find data structure\",\n        \"Abstract Interpretation Frameworks\",\n        \"SMTCoq: A Plug-In for Integrating SMT Solvers into Coq\",\n        \"On Programming of Arithmetic Operations\",\n        \"Type-safe modular hash-consing\",\n        \"Revisiting the abstract domain of polyhedra : constraints-only representation and formal proof. (Le domaine abstrait des polyèdres revisité : représentation par contraintes et preuve formelle)\",\n        \"A Certifying Frontend for (Sub)polyhedral Abstract Domains\",\n        \"Towards Formally Verified Optimizing Compilation in Flight Control Software\",\n        \"Contributions to program analysis: expressivity and scalability. ( Contributions aux analyses de programmes, expressivité, passage à l’échelle)\",\n        \"Monocopy and Associative Algorithms in an Extended Lisp\",\n        \"HimML: Standard ML with Fast Sets and Maps\",\n        \"Implementing Functional Languages with Fast Equality, Sets and Maps: an Exercise in Hash Consing\",\n        \"The GimML reference manual\",\n        \"Formally Verifying Optimizations with Block Simulations\",\n        \"formally verified postpass scheduling with peephole optimization for AArch64\",\n        \"Solving and Verifying the Boolean Pythagorean Triples Problem via Cube-and-Conquer\",\n        \"Verasco: a Formally Verified C Static Analyzer. (Verasco: un analyseur statique pour C formellement vérifié)\",\n        \"A Formally-Verified C Static Analyzer\",\n        \"A Matter of Trust: Skeptical Communication Between Coq and External Provers. (Question de confiance : communication sceptique entre Coq et des prouveurs externes)\",\n        \"A Formally Verified Compiler Back-end\",\n        \"Formal verification of a realistic compiler\",\n        \"New Algorithmics for Polyhedral Calculus via Parametric Linear Programming. (Nouvelle Algorithmique pour le Calcul Polyédral via Programmation Linéaire Paramétrique)\",\n        \"Scalable Minimizing-Operators on Polyhedra via Parametric Linear Programming\",\n        \"Efficient Elimination of Redundancies in Polyhedra by Raytracing\",\n        \"The octagon abstract domain\",\n        \"The Trusted Computing Base of the CompCert Verified Compiler\",\n        \"Cell Morphing: From Array Programs to Array-Free Horn Clauses\",\n        \"Formally Verified Loop-Invariant Code Motion and Assorted Optimizations\",\n        \"Testing a Formally Verified Compiler\",\n        \"Programming languages—C\",\n        \"Translation validation for a verified OS kernel\",\n        \"Compilation optimisante et formellement prouvée pour un processeur VLIW\",\n        \"Certified and efficient instruction scheduling: application to interlocked VLIW processors\",\n        \"Toward Understanding Compiler Bugs in GCC and LLVM\",\n        \"The Coq Reference Manual\",\n        \"Finding and understanding bugs in C compilers\"\n    ],\n    \"reasoning\": \"Selected these 48 references because they represent foundational work and recent advances in Pragmatics of Formally Verified Yet Efficient Static Analysis, in particular for Formally Verified Compilers, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}