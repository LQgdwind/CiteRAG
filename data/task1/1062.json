{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 61 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Random Access in Persistent Strings and Segment Selection1footnote 11footnote 1An extended abstract appeared at the 31st International Symposium on Algorithms and Computation [9]\n\nPaper Abstract: Abstract We consider compact representations of collections of similar strings that support random access queries. The collection of strings is given by a rooted tree where edges are labeled by an edit operation (inserting, deleting, or replacing a character) and a node represents the string obtained by applying the sequence of edit operations on the path from the root to the node. The goal is to compactly represent the entire collection while supporting fast random access to any part of a string in the collection. This problem captures natural scenarios such as representing the past history of an edited document or representing highly-repetitive collections. Given a tree with nùëõn nodes, we show how to represent the corresponding collection in O‚Äã(n)ùëÇùëõO(n) space and O‚Äã(log‚Å°n/log‚Å°log‚Å°n)ùëÇùëõùëõO(\\log n/\\log\\log n) query time. This improves the previous time-space trade-offs for the problem. Additionally, we show a lower bound proving that the query time is optimal for any solution using near-linear space. To achieve our bounds for random access in persistent strings we show how to reduce the problem to the following natural geometric selection problem on line segments. Consider a set of horizontal line segments in the plane. Given parameters iùëñi and jùëój, a segment selection query returns the jùëójth smallest segment (the segment with the jùëójth smallest yùë¶y-coordinate) among the segments crossing the vertical line through xùë•x-coordinate iùëñi. The segment selection problem is to preprocess a set of horizontal line segments into a compact data structure that supports fast segment selection queries. We present a solution that uses O‚Äã(n)ùëÇùëõO(n) space and support segment selection queries in O‚Äã(log‚Å°n/log‚Å°log‚Å°n)ùëÇùëõùëõO(\\log n/\\log\\log n) time, where nùëõn is the number of segments. Furthermore, we prove that that this query time is also optimal for any solution using near-linear space.\n\n{retrieved_text}\n\nGenerate exactly 61 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 61\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"An optimal dynamic data structure for stabbing-semigroup queries\",\n        \"Efficient fully-compressed sequence representations\",\n        \"Succinct indexes for strings, binary relations and multi-labeled trees\",\n        \"Access, rank, and select in grammar-compressed strings\",\n        \"Optimal lower and upper bounds for representing sequences\",\n        \"Dynamic relative compression, dynamic partial sums, and substring concatenation\",\n        \"Succinct partial sums and Fenwick trees\",\n        \"Time‚Äìspace trade-offs for lempel‚Äìziv compressed indexing\",\n        \"Random access in persistent strings\",\n        \"Tree compression with top trees\",\n        \"Random access to grammar-compressed strings and trees\",\n        \"Persistent predecessor search and orthogonal point location on the word RAM\",\n        \"Transdichotomous results in computational geometry, i: Point location in sublogarithmic time\",\n        \"Dynamic planar orthogonal point location in sublogarithmic time\",\n        \"The smallest grammar problem\",\n        \"Filtering search: A new approach to query-answering\",\n        \"Reference based genome compression\",\n        \"Two-dimensional and three-dimensional point location in rectangular subdivisions\",\n        \"Fully persistent arrays (extended array)\",\n        \"Optimal algorithms for list indexing and subset rank\",\n        \"Fast relative Lempel‚ÄìZiv self-index for similar sequences\",\n        \"Making data structures persistent\",\n        \"A new data structure for cumulative frequency tables\",\n        \"Compressed representations of sequences and full-text indexes\",\n        \"A simple storage scheme for strings achieving entropy bounds\",\n        \"The cell probe complexity of dynamic data structures\",\n        \"Surpassing the information theoretic bound with fusion trees\",\n        \"Trans-dichotomous algorithms for minimum spanning trees and shortest paths\",\n        \"A faster grammar-based self-index\",\n        \"LZ77-based self-indexing with faster pattern matching\",\n        \"Approximate pattern matching in lz77-compressed texts\",\n        \"Document listing on repetitive collections\",\n        \"Balancing straight-line programs\",\n        \"Rank/select operations on large alphabets: a tool for text indexing\",\n        \"On the redundancy of succinct data structures\",\n        \"High-order entropy-compressed text indexes\",\n        \"Dynamic compressed strings with random access\",\n        \"Succinct data structures for searchable partial sums with optimal worst-case performance\",\n        \"Relative Lempel-Ziv factorization for efficient storage and retrieval of web collections\",\n        \"Range selection and median: Tight cell probe lower bounds and adaptive data structures\",\n        \"At the roots of dictionary compression: String attractors\",\n        \"Relative Lempel-Ziv compression of genomes for large-scale storage and retrieval\",\n        \"Optimized relative Lempel-Ziv compression of genomes\",\n        \"A text-compression-based method for code size minimization in embedded systems\",\n        \"Code optimization techniques in embedded DSP microprocessors\",\n        \"Storage and retrieval of highly repetitive sequence collections\",\n        \"Compressed data structures for dynamic sequences\",\n        \"Indexing highly repetitive collections\",\n        \"Document listing on repetitive collections with guaranteed performance\",\n        \"A dynamic stabbing-max data structure with sub-logarithmic query time\",\n        \"Dynamic integer sets with optimal rank, select, and predecessor search\",\n        \"Logarithmic lower bounds in the cell-probe model\",\n        \"Succinct dynamic data structures\",\n        \"Application of Lempel-Ziv factorization to the approximation of grammar-based compression\",\n        \"Squeezing succinct data structures into entropy bounds\",\n        \"Planar point location using persistent search trees\",\n        \"The macro model for data compression\",\n        \"Data compression via textual substitution\",\n        \"Finding biconnected componemts and computing tree functions in logarithmic parallel time\",\n        \"Data structure lower bounds on random access to grammar-compressed strings\",\n        \"A universal algorithm for sequential data compression\"\n    ],\n    \"reasoning\": \"Selected these 61 references because they represent foundational work and recent advances in Random Access in Persistent Strings and Segment Selection1footnote 11footnote 1An extended abstract appeared at the 31st International Symposium on Algorithms and Computation [9], providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}