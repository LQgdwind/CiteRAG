{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 45 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Fast Prototyping Next-Generation Accelerators for New ML Models using MASE: ML Accelerator System Exploration\n\nPaper Abstract: Abstract Machine learning (ML) accelerators have been studied and used extensively to compute ML models with high performance and low power. However, designing such accelerators normally takes a long time and requires significant effort. Unfortunately, the pace of development of ML software models is much faster than the accelerator design cycle, leading to frequent and drastic modifications in the model architecture, thus rendering many accelerators obsolete. Existing design tools and frameworks can provide quick accelerator prototyping, but only for a limited range of models that can fit into a single hardware device, such as an FPGA. Furthermore, with the emergence of large language models, such as GPT-3, there is an increased need for hardware prototyping of these large models within a many-accelerator system to ensure the hardware can scale with the ever-growing model sizes. In this paper, we propose an efficient and scalable approach for exploring accelerator systems to compute large ML models. We developed a tool named MASE that can directly map large ML models onto an efficient streaming accelerator system. Over a set of ML models, we show that MASE can achieve better energy efficiency to GPUs when computing inference for recent transformer models. Our tool will open-sourced upon publication.\n\n{retrieved_text}\n\nGenerate exactly 45 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 45\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Best of both worlds: Automl codesign of a cnn and its hardware accelerator\",\n        \"Boosting Search Engines with Interactive Agents\",\n        \"Vivado\",\n        \"Onnx: Open neural network exchange\",\n        \"Algorithms for hyper-parameter optimization\",\n        \"Finn-r: An end-to-end deep-learning framework for fast exploration of quantized neural networks\",\n        \"Language models are few-shot learners\",\n        \"Stratus High-Level Synthesis\",\n        \"Dance: Differentiable accelerator/network co-exploration\",\n        \"Low-bit quantization of neural networks for efficient inference\",\n        \"Circt-based hls compilation flows, debugging, and cosimulation tools.\",\n        \"An introduction to high-level synthesis\",\n        \"Pushing the limits of narrow precision inferencing at cloud scale with microsoft floating point\",\n        \"Torchscript: Optimized execution of pytorch programs\",\n        \"Bert: Pre-training of deep bidirectional transformers for language understanding\",\n        \"Hao: Hardware-aware neural architecture optimization for efficient inference\",\n        \"Fast inference of deep neural networks in fpgas for particle physics\",\n        \"hls4ml: An open-source codesign workflow to empower scientific low-power machine learning devices\",\n        \"Auto-nba: Efficient and effective search over the joint space of networks, bitwidths, and accelerators\",\n        \"Leta: A lightweight exchangeable-track accelerator for efficientnet based on fpga\",\n        \"Hardware/software co-exploration of neural architectures\",\n        \"Considering the possibilities and pitfalls of generative pre-trained transformer 3 (gpt-3) in healthcare delivery\",\n        \"Approximate LSTMs for time-constrained inference: Enabling fast reaction in self-driving cars\",\n        \"Llvm: A compilation framework for lifelong program analysis & transformation\",\n        \"Mlir: A compiler infrastructure for the end of mooreâ€™s law\",\n        \"Hw-nas-bench: Hardware-aware neural architecture search benchmark\",\n        \"Edd: Efficient differentiable dnn architecture and implementation co-search for embedded ai solutions\",\n        \"Zen-nas: A zero-shot nas for high-performance image recognition\",\n        \"Darts: Differentiable architecture search\",\n        \"Torch-MLIR\",\n        \"Gcd2: A globally optimizing compiler for mapping dnns to mobile dsps\",\n        \"torch. fx: Practical program capture and transformation for deep learning in python\",\n        \"Catapult High-Level Synthesis and Verification\",\n        \"Film-qnn: Efficient fpga acceleration of deep neural networks with intra-layer, mixed-precision quantization\",\n        \"Efficientnet: Rethinking model scaling for convolutional neural networks\",\n        \"fpgaconvnet: A framework for mapping convolutional neural networks on fpgas\",\n        \"Haq: Hardware-aware automated quantization with mixed precision\",\n        \"Pvt v2: Improved baselines with pyramid vision transformer\",\n        \"Towards agile dnn accelerator design using incremental synthesis on fpgas\",\n        \"Xilinx Vivado HLS\",\n        \"Hector: A multi-level intermediate representation for hardware synthesis methodologies\",\n        \"Opt: Open pre-trained transformer language models\",\n        \"Polsca: Polyhedral high-level synthesis with compiler transformations\",\n        \"SE-SSD: Self-ensembling single-stage object detector from point cloud\",\n        \"Neural architecture search with reinforcement learning\"\n    ],\n    \"reasoning\": \"Selected these 45 references because they represent foundational work and recent advances in Fast Prototyping Next-Generation Accelerators for New ML Models using MASE: ML Accelerator System Exploration, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}