{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 47 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: CoProtector: Protect Open-Source Code against Unauthorized Training Usage with Data Poisoning\n\nPaper Abstract: Abstract. Github Copilot, trained on billions of lines of public code, has recently become the buzzword in the computer science research and practice community. Although it is designed to help developers implement safe and effective code with powerful intelligence, practitioners and researchers raise concerns about its ethical and security problems, e.g., should the copyleft licensed code be freely leveraged or insecure code be considered for training in the first place? These problems pose a significant impact on Copilot and other similar products that aim to learn knowledge from large-scale open-source code through deep learning models, which are inevitably on the rise with the fast development of artificial intelligence. To mitigate such impacts, we argue that there is a need to invent effective mechanisms for protecting open-source code from being exploited by deep learning models. Here, we design and implement a prototype, CoProtector, which utilizes data poisoning techniques to arm source code repositories for defending against such exploits. Our large-scale experiments empirically show that CoProtector is effective in achieving its purpose, significantly reducing the performance of Copilot-like deep learning models while being able to stably reveal the secretly embedded watermark backdoors.\n\n{retrieved_text}\n\nGenerate exactly 47 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 47\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Armin “vax ffs” Ronacher on Twitter\",\n        \"Can GitHub Copilot introduce insecure code in its suggestions?\",\n        \"Code faster with AI completions — TabNine\",\n        \"eevee on Twitter\",\n        \"GitHub Copilot is not infringing your copyright\",\n        \"GitHub Copilot · Your AI pair programmer\",\n        \"GitHub Support just straight up confirmed in an email that yes\",\n        \"The GNU General Public License v3.0 - GNU Project - Free Software Foundation\",\n        \"Is GitHub’s Copilot potentially infringing copyright?\",\n        \"A Transformer-based Approach for Source Code Summarization\",\n        \"Language Models are Few-Shot Learners\",\n        \"Poison Attacks against Text Datasets with Conditional Adversarially Regularized Autoencoder\",\n        \"Detecting Backdoor Attacks on Deep Neural Networks by Activation Clustering\",\n        \"How Can We Craft Large-Scale Android Malware? An Automated Poisoning Attack\",\n        \"Targeted Backdoor Attacks on Deep Learning Systems Using Data Poisoning\",\n        \"Preventing Unauthorized Use of Proprietary Data: Poisoning for Secure Dataset Release\",\n        \"Copyright in Generative Deep Learning\",\n        \"A Study of Potential Code Borrowing and License Violations in Java Projects on GitHub\",\n        \"BadNets: Identifying Vulnerabilities in the Machine Learning Model Supply Chain\",\n        \"Deep Code Search\",\n        \"Membership Inference Attacks on Sequence-to-Sequence Models: Is My Data In Your Machine Translation System?\",\n        \"CodeSearchNet Challenge: Evaluating the State of Semantic Code Search\",\n        \"Digital Watermarking For Protecting Audio Classification Datasets\",\n        \"Stronger Data Poisoning Attacks Break Data Sanitization Defenses\",\n        \"Muzeel: A Dynamic JavaScript Analyzer for Dead Code Elimination in Today’s Web\",\n        \"Open-sourced Dataset Protection via Backdoor Watermarking\",\n        \"Bleu: a Method for Automatic Evaluation of Machine Translation\",\n        \"An Empirical Cybersecurity Evaluation of GitHub Copilot’s Code Contributions\",\n        \"Hidden Killer: Invisible Textual Backdoor Attacks with Syntactic Trigger\",\n        \"Language Models are Unsupervised Multitask Learners\",\n        \"Backdoors in Neural Models of Source Code\",\n        \"Radioactive data: tracing through training\",\n        \"You Autocomplete Me: Poisoning Vulnerabilities in Neural Code Completion\",\n        \"Poison Frogs! Targeted Clean-Label Poisoning Attacks on Neural Networks\",\n        \"TensorClog: An Imperceptible Poisoning Attack on Deep Neural Network Applications\",\n        \"Membership Inference Attacks Against Machine Learning Models\",\n        \"Auditing Data Provenance in Text-Generation Models\",\n        \"STRATA: Simple, Gradient-Free Attacks for Models of Code\",\n        \"Certified Defenses for Data Poisoning Attacks\",\n        \"TreeGen: A Tree-Based Transformer Architecture for Code Generation\",\n        \"Spectral Signatures in Backdoor Attacks\",\n        \"Concealed Data Poisoning Attacks on NLP Models\",\n        \"The generalisation of student’s problems when several different population variances are involved\",\n        \"A Targeted Attack on Black-Box Neural Machine Translation with Parallel Data Poisoning\",\n        \"A Survey on Deep Learning for Software Engineering\",\n        \"Generating Adversarial Examples for Holding Robustness of Source Code Processing Models\",\n        \"Clean-Label Backdoor Attacks on Video Recognition Models\"\n    ],\n    \"reasoning\": \"Selected these 47 references because they represent foundational work and recent advances in CoProtector: Protect Open-Source Code against Unauthorized Training Usage with Data Poisoning, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}