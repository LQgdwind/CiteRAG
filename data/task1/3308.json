{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 46 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Hardware Synthesis of State-Space Equations; Application to FPGA Implementation of Shallow and Deep Neural Networks\n\nPaper Abstract: Abstract Nowadays, shallow and deep Neural Networks (NNs) have vast applications including biomedical engineering, image processing, computer vision, and speech recognition. Many researchers have developed hardware accelerators including field-programmable gate arrays (FPGAs) for implementing high-performance and energy efficient NNs. Apparently, the hardware architecture design process is specific and time-consuming for each NN. Therefore, a systematic way to design, implement and optimize NNs is highly demanded. The paper presents a systematic approach to implement state-space models in register transfer level (RTL), with special interest for NN implementation. The proposed design flow is based on the iterative nature of state-space models and the analogy between state-space formulations and finite-state machines. The method can be used in linear/nonlinear and time-varying/time-invariant systems. It can also be used to implement either intrinsically iterative systems (widely used in various domains such as signal processing, numerical analysis, computer arithmetic, and control engineering), or systems that could be rewritten in equivalent iterative forms. The implementation of recurrent NNs such as long short-term memory (LSTM) NNs, which have intrinsic state-space forms, are another major applications for this framework. As a case study, it is shown that state-space systems can be used for the systematic implementation and optimization of NNs (as nonlinear and time-varying dynamic systems). An RTL code generating software is also provided online, which simplifies the automatic generation of NNs of arbitrary size.\n\n{retrieved_text}\n\nGenerate exactly 46 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 46\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Sirius: An open end-to-end voice and vision personal assistant and its implications for future warehouse scale computers\",\n        \"Speech recognition with deep recurrent neural networks\",\n        \"Imagenet classification with deep convolutional neural networks\",\n        \"Djinn and tonic: Dnn as a service and its implications for future warehouse scale computers\",\n        \"Deep image: Scaling up image recognition\",\n        \"Deep learning with cots hpc systems\",\n        \"Diannao: A small-footprint high-throughput accelerator for ubiquitous machine-learning\",\n        \"Dadiannao: A machine-learning supercomputer\",\n        \"Optimizing fpga-based accelerator design for deep convolutional neural networks\",\n        \"Neuflow: A runtime reconfigurable dataflow processor for vision\",\n        \"Conservation cores: reducing the energy of mature computations\",\n        \"Dynamically specialized datapaths for energy efficient computing\",\n        \"Bundled execution of recurring traces for energy-efficient general purpose processing\",\n        \"A reconfigurable fabric for accelerating large-scale datacenter services\",\n        \"Pudiannao: A polyvalent machine learning accelerator\",\n        \"Shidiannao: Shifting vision processing closer to the sensor\",\n        \"Tabla: A unified template-based framework for accelerating statistical machine learning\",\n        \"Eyeriss: An energy-efficient reconfigurable accelerator for deep convolutional neural networks\",\n        \"14.6 a 1.42 tops/w deep convolutional neural network recognition processor for intelligent ioe systems\",\n        \"Convolution engine: balancing efficiency & flexibility in specialized computing\",\n        \"A ultra-low-energy convolution engine for fast brain-inspired vision in multicore clusters\",\n        \"A 240 g-ops/s mobile coprocessor for deep neural networks\",\n        \"Hardware accelerated convolutional neural networks for synthetic vision systems\",\n        \"Mixed-signal and DSP Design Techniques\",\n        \"Digital signal processing with field programmable gate arrays\",\n        \"Discrete-time Signal Processing (Third Edition)\",\n        \"An Introduction to Numerical Analysis for Electrical and Computer Engineers\",\n        \"Synthesis of Arithmetic Circuits: FPGA, ASIC and Embedded Systems\",\n        \"An introduction to numerical analysis\",\n        \"Linear Systems\",\n        \"Discrete-time control systems\",\n        \"Fundamentals of digital logic with Verilog design\",\n        \"Digital design of signal processing systems: a practical approach\",\n        \"XILINX XST user guide\",\n        \"Advanced FPGA Design: Architecture, Implementation, and Optimization\",\n        \"Elementary Functions: Algorithms and Implementation\",\n        \"Computer Arithmetic: Algorithms and Hardware Designs\",\n        \"A survey of FPGA based neural network accelerator\",\n        \"Machine Learning Paradigms: Advances in Deep Learning-based Technological Applications\",\n        \"7 Series DSP48E1 Slice\",\n        \"A survey and evaluation of fpga high-level synthesis tools\",\n        \"Vivado Design Suite User Guide High-Level Synthesis\",\n        \"Reconfigurable Computing: The Theory and Practice of FPGA-Based Computation\",\n        \"FPGAs for Software Programmers\",\n        \"Vivado HLS Optimization Methodology Guide\",\n        \"Quantization noise: roundoff error in digital computation, signal processing, control, and communications\"\n    ],\n    \"reasoning\": \"Selected these 46 references because they represent foundational work and recent advances in Hardware Synthesis of State-Space Equations; Application to FPGA Implementation of Shallow and Deep Neural Networks, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}