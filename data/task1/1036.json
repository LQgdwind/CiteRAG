{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 54 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Effective Elastic Scaling of Deep Learning Workloads\n\nPaper Abstract: Abstract The increased use of deep learning (DL) in academia, government and industry has, in turn, led to the popularity of on-premise and cloud-hosted deep learning platforms, whose goals are to enable organizations utilize expensive resources effectively, and to share said resources among multiple teams in a fair and effective manner. In this paper, we examine the elastic scaling of Deep Learning (DL) jobs over large-scale training platforms and propose a novel resource allocation strategy for DL training jobs, resulting in improved job run time performance as well as increased cluster utilization. We begin by analyzing DL workloads and exploit the fact that DL jobs can be run with a range of batch sizes without affecting their final accuracy. We formulate an optimization problem that explores a dynamic batch size allocation to individual DL jobs based on their scaling efficiency, when running on multiple nodes. We design a fast dynamic programming based optimizer to solve this problem in real-time to determine jobs that can be scaled up/down, and use this optimizer in an autoscaler to dynamically change the allocated resources and batch sizes of individual DL jobs. We demonstrate empirically that our elastic scaling algorithm can complete up to ≈2×\\approx 2\\times as many jobs as compared to a strong baseline algorithm that also scales the number of GPUs but does not change the batch size. We also demonstrate that the average completion time with our algorithm is up to ≈10×\\approx 10\\times faster than that of the baseline.\n\n{retrieved_text}\n\nGenerate exactly 54 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 54\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Apache Hadoop\",\n        \"The Infiniband Specification\",\n        \"Coupling adaptive batch sizes with learning rates\",\n        \"Online job scheduling in distributed machine learning clusters\",\n        \"Chameleon: A hybrid, proactive auto-scaling mechanism on a level-playing field\",\n        \"Optimization methods for large-scale machine learning\",\n        \"Eventwave: programming model and runtime support for tightly-coupled elastic cloud applications\",\n        \"IBM Watson Machine Learning\",\n        \"SPEC Cloud IaaS 2018 Benchmark\",\n        \"Apache Spark\",\n        \"Adabatch: adaptive batch sizes for training deep neural networks\",\n        \"Autoscale: Dynamic, robust capacity management for multi-tier data centers\",\n        \"Accurate, large minibatch SGD: training imagenet in 1 hour\",\n        \"Tiresias: A gpu cluster manager for distributed deep learning\",\n        \"Elmem: Towards an elastic memcached system\",\n        \"Quantifying cloud performance and dependability: Taxonomy, metric design, and emerging challenges\",\n        \"Mesos: A platform for fine-grained resource sharing in the data center\",\n        \"Ffdl: A fabric for deep learning\",\n        \"An experimental performance evaluation of autoscalers for complex workflows\",\n        \"Docker : The Enterprise Grade Container Platform\",\n        \"Caffe2: A new lightweight, modular, and scalable deep learning framework\",\n        \"PyTorch\",\n        \"Kubernetes: Production Grade Container Orchestration\",\n        \"Google Cloud Machine Learning Engine\",\n        \"Tensorflow: An open-source machine learning framework for everyone\",\n        \"NVLINK FABRIC : A FASTER, MORE SCALABLE INTERCONNECT\",\n        \"Horovod\",\n        \"Elastic remote methods\",\n        \"Exploiting causality to engineer elastic distributed software\",\n        \"Ffdl: A flexible, multi-tenant deep learning platform\",\n        \"Analysis of large-scale multi-tenant gpu clusters for dnn training workloads\",\n        \"Caffe: Convolutional architecture for fast feature embedding\",\n        \"On large-batch training for deep learning: Generalization gap and sharp minima\",\n        \"CIFAR datasets\",\n        \"The Machine Learning Toolkit for Kubernetes\",\n        \"Deep Learning\",\n        \"Automated control for elastic storage\",\n        \"Machine Learning services\",\n        \"AGILE: Elastic distributed resource scaling for infrastructure-as-a-service\",\n        \"Hemingway: Modeling distributed optimization algorithms\",\n        \"Litz: Elastic framework for high-performance distributed machine learning\",\n        \"Simulation : the practice of model development and use\",\n        \"Programming scalable cloud services with AEON\",\n        \"Amazon Sagemaker\",\n        \"Very deep convolutional networks for large-scale image recognition\",\n        \"Don’t decay the learning rate, increase the batch size\",\n        \"Apache hadoop yarn: Yet another resource negotiator\",\n        \"Ernest: Efficient performance prediction for large-scale advanced analytics\",\n        \"Resource provisioning framework for mapreduce jobs with performance goals\",\n        \"Exploiting spot and burstable instances for improving the cost-efficacy of in-memory caches on the public cloud\",\n        \"Using burstable instances in the public cloud: Why, when and how?\",\n        \"Gandiva: Introspective cluster scheduling for deep learning\",\n        \"Large batch training of convolutional networks\",\n        \"SLAQ: Quality-Driven Scheduling for Distributed Machine Learning\"\n    ],\n    \"reasoning\": \"Selected these 54 references because they represent foundational work and recent advances in Effective Elastic Scaling of Deep Learning Workloads, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}