{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 139 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: The Virtual Block Interface: A Flexible Alternative to the Conventional Virtual Memory Framework\n\nPaper Abstract: Abstract Computers continue to diversify with respect to system designs, emerging memory technologies, and application memory demands. Unfortunately, continually adapting the conventional virtual memory framework to each possible system configuration is challenging, and often results in performance loss or requires non-trivial workarounds. To address these challenges, we propose a new virtual memory framework, the Virtual Block Interface (VBI). We design VBI based on the key idea that delegating memory management duties to hardware can reduce the overheads and software complexity associated with virtual memory. VBI introduces a set of variable-sized virtual blocks (VBs) to applications. Each VB is a contiguous region of the globally-visible VBI address space, and an application can allocate each semantically meaningful unit of information (e.g., a data structure) in a separate VB. VBI decouples access protection from memory allocation and address translation. While the OS controls which programs have access to which VBs, dedicated hardware in the memory controller manages the physical memory allocation and address translation of the VBs. This approach enables several architectural optimizations to (1) efficiently and flexibly cater to different and increasingly diverse system configurations, and (2) eliminate key inefficiencies of conventional virtual memory. We demonstrate the benefits of VBI with two important use cases: (1) reducing the overheads of address translation (for both native execution and virtual machine environments), as VBI reduces the number of translation requests and associated memory accesses; and (2) two heterogeneous main memory architectures, where VBI increases the effectiveness of managing fast memory regions. For both cases, VBI significantly improves performance over conventional virtual memory.\n\n{retrieved_text}\n\nGenerate exactly 139 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 139\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"“Separating Translation from Protection in Address Spaces with Dynamic Remapping\",\n        \"Separating Translation from Protection in Address Spaces with Dynamic Remapping\",\n        \"Mitosis: Transparently Self-Replicating Page-Tables for Large-Memory Machines\",\n        \"Virtual Memory System\",\n        \"Do-It-Yourself Virtual Memory Translation\",\n        \"Arm® Architecture Reference Manual: ARMv8, for ARMv8-A Architecture Profile\",\n        \"Pinnacle: IBM MXT in a Memory Controller Chip\",\n        \"Mosaic: A GPU Memory Manager with Application-Transparent Support for Multiple Page Sizes\",\n        \"MASK: Redesigning the GPU Memory Hierarchy to Support Multi-Application Concurrency\",\n        \"Translation Caching: Skip, Don’t Walk (the Page Table)\",\n        \"SpecTLB: A Mechanism for Speculative Address Translation\",\n        \"Efficient Virtual Memory for Big Memory Servers\",\n        \"The Multikernel: A New OS Architecture for Scalable Multicore Systems\",\n        \"Scalable Distributed Shared Last-Level TLBs Using Low-Latency Interconnects\",\n        \"Accelerating Two-Dimensional Page Walks for Virtualized Systems\",\n        \"Large-Reach Memory Management Unit Caches\",\n        \"Shared Last-Level TLBs for Chip Multiprocessors\",\n        \"Characterizing the TLB Behavior of Emerging Parallel Workloads on Chip Multiprocessors\",\n        \"Virtual-Address Caches Part 1: Problems and Solutions in Uniprocessors\",\n        \"Virtual-Address Caches Part 2: Multiprocessor Issues\",\n        \"A High-Performance Memory Allocator for Object-Oriented Systems\",\n        \"Architectural Support for Dynamic Memory Management\",\n        \"Understanding Latency Variation in Modern DRAM Chips: Experimental Characterization, Analysis, and Optimization\",\n        \"Low-Cost Inter-Linked Subarrays (LISA): Enabling Fast Inter-Subarray Data Movement in DRAM\",\n        \"Sharing and Protection in a Single-Address-Space Operating System\",\n        \"Lightweight Shared Objects in a 64-bit Operating System\",\n        \"Efficient Address Translation for Architectures with Multiple Page Sizes\",\n        \"Dynamo: Amazon’s Highly Available Key-Value Store\",\n        \"Virtual Memory\",\n        \"PDRAM: A Hybrid PRAM and DRAM Main Memory System\",\n        \"Supporting Superpages in Non-Contiguous Physical Memory\",\n        \"SpaceJMP: Programming with Multiple Virtual Address Spaces\",\n        \"AVM: Application-Level Virtual Memory\",\n        \"Exokernel: An Operating System Architecture for Application-Level Resource Management\",\n        \"Exploiting Parallelization on Address Translation: Shared Page Walk Cache\",\n        \"RocksDB: A Persistent Key–Value Store\",\n        \"Nested Virtualization in Azure\",\n        \"Distributed Caching with Memcached\",\n        \"Dynamic Storage Allocation in the Atlas Computer, Including an Automatic Use of a Backing Store\",\n        \"Efficient Memory Virtualization: Reducing Dimensionality of Nested Page Walks\",\n        \"Agile Paging: Exceeding the Best of Nested and Shadow Paging\",\n        \"Range Translations for Fast Virtual Memory\",\n        \"Not Your Parents’ Physical Address Space\",\n        \"Compute Engine: Enabling Nested Virtualization for VM Instances\",\n        \"Graph 500 Large-Scale Benchmarks\",\n        \"Reliability-Aware Data Placement for Heterogeneous Memory Architecture\",\n        \"Self-Paging in the Nemesis Operating System\",\n        \"Devirtualizing Memory in Heterogeneous Systems\",\n        \"TailBench Benchmark Suite\",\n        \"The Mungi Single-Address-Space Operating System\",\n        \"PA-RISC 1.1 Architecture and Instruction Set Reference Manual, Third Edition\",\n        \"“Unified Address Translation for Memory-Mapped SSDs with FlashMap\",\n        \"“5-Level Paging and 5-Level EPT\",\n        \"Intel® 64 and IA-32 Architectures Software Developer’s Manual\",\n        \"PowerPC® Microprocessor Family: The Programming Environments Manual for 32 and 64-bit Microprocessors\",\n        \"“Virtual Memory in Contemporary Microprocessors\",\n        \"“CHOP: Adaptive Filter-Based DRAM Caching for CMP Server Platforms\",\n        \"“Application Performance and Flexibility on Exokernel Systems\",\n        \"“Redundant Memory Mappings for Fast Access to Large Memories\",\n        \"“Energy-Efficient Address Translation\",\n        \"“Performance Analysis of the Memory Management Unit Under Scale-Out Workloads\",\n        \"“A New Perspective for Efficient Virtual-Cache Coherence\",\n        \"“One-Level Storage System\",\n        \"“Solar-DRAM: Reducing DRAM Access Latency by Exploiting the Variation in Local Bitlines\",\n        \"“Ramulator: A Fast and Extensible DRAM Simulator\",\n        \"“seL4: Formal Verification of an OS Kernel\",\n        \"“A Fast Storage Allocator\",\n        \"“Meet the Walkers: Accelerating Index Traversals for In-memory Databases\",\n        \"“Latr: Lazy Translation Coherence\",\n        \"“Coordinated and Efficient Huge Page Management with Ingens\",\n        \"“Ingens: Huge Page Support for the OS and Hypervisor\",\n        \"“Architecting Phase Change Memory as a Scalable DRAM Alternative\",\n        \"“Design-Induced Latency Variation in Modern DRAM Chips: Characterization\",\n        \"“Tiered-Latency DRAM: A Low Latency and Low Cost DRAM Architecture\",\n        \"“A Framework for Memory Oversubscription Management in Graphics Processing Units\",\n        \"“A Page-Based Hybrid (Software-Hardware) Dynamic Memory Allocator\",\n        \"“Feasibility of Decoupling Memory Management from the Execution Pipeline\",\n        \"“Utility-Based Hybrid Memory Management\",\n        \"“The Grand Unified Theory of Address Spaces\",\n        \"“Improving DRAM Latency with Dynamic Asymmetric Subarray\",\n        \"“Pin: Building Customized Program Analysis Tools with Dynamic Instrumentation\",\n        \"“CLR-DRAM: A Low-Cost DRAM Architecture Enabling Dynamic Capacity-Latency Trade-Off\",\n        \"“Characterizing Application Memory Error Vulnerability to Optimize Data Center Cost via Heterogeneous-Reliability Memory\",\n        \"The Design and Implementation of the FreeBSD Operating System. Addison-Wesley Professional\",\n        \"“Performance Implications of Extended Page Tables on Virtualized x86 Processors\",\n        \"“Heterogeneous Memory Architectures: A HW/SW Approach for Mixing Die-Stacked and Off-Package Memories\",\n        \"“A Case for Efficient Hardware/Software Cooperative Management of Storage and Memory\",\n        \"x16 DDR3 SDRAM Data Sheet\",\n        \"“MonetDB Column Store\",\n        \"Transparent Operating System Support for Superpages\",\n        \"“Neo4j Graph Platform\",\n        \"“Scaling Memcache at Facebook\",\n        \"“TimesTen In-Memory Database\",\n        \"“Prediction-Based Superpage-Friendly TLB Designs\",\n        \"“Hybrid TLB Coalescing: Improving TLB Translation Coverage Under Diverse Fragmented Memory Allocations\",\n        \"“Using SimPoint for Accurate and Efficient Simulation\",\n        \"“Increasing TLB Reach by Exploiting Clustering in Page Translations\",\n        \"“CoLT: Coalesced Large-Reach TLBs\",\n        \"“Large Pages and Lightweight Memory Management in Virtualized Environments: Can You Have It Both Ways?” in MICRO\",\n        \"“Using TLB Speculation to Overcome Page Splintering in Virtual Machines\",\n        \"“Architectural Support for Address Translation on GPUs: Designing Memory Management Units for CPU/GPUs with Unified Address Spaces\",\n        \"“Near-Memory Address Translation\",\n        \"“Refree: A Refresh-Free Hybrid DRAM/PCM Main Memory System\",\n        \"“Supporting x86-64 Address Translation for 100s of GPU Lanes\",\n        \"“MemPod: A Clustered Architecture for Efficient and Scalable Migration in Flat Address Space Multi-Level Memories\",\n        \"“Scalable High Performance Main Memory System Using Phase-Change Memory Technology\",\n        \"“Page Placement in Hybrid Memory Systems\",\n        \"“Phase-Change Random Access Memory: A Scalable Technology\",\n        \"“The UNIX Time-Sharing System\",\n        \"“UNified Instruction/Translation/Data (UNITD) Coherence: One Protocol to Rule Them All\",\n        \"“SILC-FM: Subblocked InterLeaved Cache-Like Flat Memory Organization\",\n        \"“Rethinking TLB Designs in Virtualized Environments: A Very Large Part-of-Memory TLB\",\n        \"“Ramulator-VBI — GitHub Repository\",\n        \"“SAP HANA: In-Memory Data Platform\",\n        \"“EbbRT: A Framework for Building Per-Application Library Operating Systems\",\n        \"“The Dirty-Block Index\",\n        \"“RowClone: Fast and Energy-Efficient In-DRAM Bulk Data Copy and Initialization\",\n        \"“Page Overlays: An Enhanced Virtual Memory Framework to Enable Fine-Grained Memory Management\",\n        \"“NoM: Network-on-Memory for Inter-Bank Data Transfer in Highly-Banked Memories\",\n        \"“A Weighted Buddy Method for Dynamic Storage Allocation\",\n        \"“Scheduling Page Table Walks for Irregular GPU Applications\",\n        \"“Transparent Hardware Management of Stacked DRAM as Part of Memory\",\n        \"“Elastic Cuckoo Page Tables: Rethinking Virtual Memory Translation for Parallelism\",\n        \"“Reducing Memory Access Latency with Asymmetric DRAM Bank Organizations\",\n        \"” https://www.spec.org/cpu2006/\",\n        \"“SPEC CPU® 2017 Benchmark Suite\",\n        \"“Surpassing the TLB Performance of Superpages with Less Operating System Support\",\n        \"“Asymmetry-Aware Execution Placement on Manycore Chips\",\n        \"“The Locality Descriptor: A Holistic Cross-Layer Abstraction to Express Data Locality in GPUs\",\n        \"“Zorua: A Holistic Approach to Resource Virtualization in GPUs\",\n        \"“A Case for Richer Cross-Layer Abstractions: Bridging the Semantic Gap with Expressive Memory\",\n        \"“Factored Operating Systems (fos): The Case for a Scalable Operating System for Multicores\",\n        \"“Hardware Translation Coherence for Virtualized Systems\",\n        \"“Row Buffer Locality Aware Caching Policies for Hybrid Memories\",\n        \"“Banshee: Bandwidth-Efficient DRAM Caching via Software/Hardware Cooperation\",\n        \"“Labeled RISC-V: A New Perspective on Software-Defined Architecture\",\n        \"“Enigma: Architectural and Operating System Support for Reducing the Impact of Address Translation\",\n        \"“Exploring Phase Change Memory and 3D Die-Stacking for Power/Thermal Friendly\",\n        \"“SIPT: Speculatively Indexed\"\n    ],\n    \"reasoning\": \"Selected these 139 references because they represent foundational work and recent advances in The Virtual Block Interface: A Flexible Alternative to the Conventional Virtual Memory Framework, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}