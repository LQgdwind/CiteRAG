{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 46 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Full Iso-recursive Types\n\nPaper Abstract: Abstract. There are two well-known formulations of recursive types: iso-recursive and equi-recursive types. Abadi and Fiore (1996) have shown that iso- and equi-recursive types have the same expressive power. However, their encoding of equi-recursive types in terms of iso-recursive types requires explicit coercions. These coercions come with significant additional computational overhead, and complicate reasoning about the equivalence of the two formulations of recursive types. This paper proposes a generalization of iso-recursive types called full iso-recursive types. Full iso-recursive types allow encoding all programs with equi-recursive types without computational overhead. Instead of explicit term coercions, all type transformations are captured by computationally irrelevant casts, which can be erased at runtime without affecting the semantics of the program. Consequently, reasoning about the equivalence between the two approaches can be greatly simplified. We present a calculus called ŒªF‚ÄãiŒºsubscriptsuperscriptùúÜùúáùêπùëñ\\lambda^{\\mu}_{Fi}, which extends the simply typed lambda calculus (STLC) with full iso-recursive types. The ŒªF‚ÄãiŒºsubscriptsuperscriptùúÜùúáùêπùëñ\\lambda^{\\mu}_{Fi} calculus is proved to be type sound, and shown to have the same expressive power as a calculus with equi-recursive types. We also extend our results to subtyping, and show that equi-recursive subtyping can be expressed in terms of iso-recursive subtyping with cast operators.\n\n{retrieved_text}\n\nGenerate exactly 46 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 46\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"A theory of objects\",\n        \"Syntactic considerations on recursive types\",\n        \"Subtyping recursive types\",\n        \"The essence of dependent object types\",\n        \"Union, intersection and refinement types and reasoning about type disjointness for secure protocol implementations\",\n        \"Refinement types for secure implementations\",\n        \"Coinductive axiomatization of recursive type equality and subtyping\",\n        \"Amber, Combinators and Functional Programming Languages\",\n        \"Foundations of session types\",\n        \"On the preciseness of subtyping in session types\",\n        \"IsoLATE: A type system for self-recursion\",\n        \"What is a recursive module?\",\n        \"Erasable coercions: a unified approach to type systems\",\n        \"Subtyping, declaratively: An exercise in mixed induction and coinduction\",\n        \"Type-safe linking with recursive DLLs and shared libraries\",\n        \"Recursive subtyping revealed\",\n        \"Subtyping for session types in the pi calculus\",\n        \"Linear type theory for asynchronous session types\",\n        \"Type inference, Haskell and dependent types\",\n        \"Semantics of programming languages: structures and techniques\",\n        \"On the type structure of Standard ML\",\n        \"A type-theoretic interpretation of Standard ML\",\n        \"Positive subtyping\",\n        \"A mechanical soundness proof for subtyping over recursive types\",\n        \"Equational reasoning about programs with general recursion and call-by-value semantics\",\n        \"Subtyping by folding an inductive relation into a coinductive one\",\n        \"A theory of tagged objects\",\n        \"On subtyping-relation completeness, with an application to iso-recursive types\",\n        \"Lambda calculus models of programming languages\",\n        \"On the semantic expressiveness of recursive types\",\n        \"Types and programming languages\",\n        \"Type soundness for dependent object types (DOT)\",\n        \"Mutually Iso-Recursive Subtyping\",\n        \"The recursive union of some gradual types\",\n        \"Irrelevance, heterogeneous equality, and call-by-value dependent type systems\",\n        \"Programming up to congruence\",\n        \"Verified programming in Guru\",\n        \"System F with type equality coercions\",\n        \"Secure distributed programming with value-dependent types\",\n        \"Positive recursive type assignment\",\n        \"Typed compilation of recursive datatypes\",\n        \"System FC with explicit kind equality\",\n        \"A specification for dependent types in Haskell\",\n        \"Pure iso-type systems\",\n        \"Giving Haskell a promotion\",\n        \"Revisiting iso-recursive subtyping\"\n    ],\n    \"reasoning\": \"Selected these 46 references because they represent foundational work and recent advances in Full Iso-recursive Types, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}