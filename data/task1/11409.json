{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 49 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Fearless Asynchronous Communications with Timed Multiparty Session Protocols\n\nPaper Abstract: Abstract Session types using affinity and exception handling mechanisms have been developed to ensure the communication safety of protocols implemented in concurrent and distributed programming languages. Nevertheless, current affine session types are inadequate for specifying real-world asynchronous protocols, as they are usually imposed by time constraints which enable timeout exceptions to prevent indefinite blocking while awaiting valid messages. This paper proposes the first formal integration of affinity, time constraints, timeouts, and time-failure handling based on multiparty session types for supporting reliability in asynchronous distributed systems. With this theory, we statically guarantee that asynchronous timed communication is deadlock-free, communication safe, while being fearless ‚Äì never hindered by timeout errors or abrupt terminations. To implement our theory, we introduce MultiCrustyTsuperscriptMultiCrustyùëá\\texttt{MultiCrusty}^{T}‚Äã, a Rust toolchain designed to facilitate the implementation of safe affine timed protocols. MultiCrustyTsuperscriptMultiCrustyùëá\\texttt{MultiCrusty}^{T}‚Äã leverages generic types and the time library to handle timed communications, integrated with optional types for affinity. We evaluate our approach by extending diverse examples from the literature to incorporate time and timeouts, demonstrating that our solution incurs negligible overhead compared with an untimed implementation. We also showcase the correctness by construction of our approach by implementing various real-world use cases, including a remote data protocol from the Internet of Remote Things domain, as well as protocols from real-time systems like Android motion sensors and smartwatches.\n\n{retrieved_text}\n\nGenerate exactly 49 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 49\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"A theory of timed automata\",\n        \"Motion Sensors\",\n        \"Designing Asynchronous Multiparty Protocols With Crash Stop Failures\",\n        \"Meeting Deadlines Together\",\n        \"Asynchronous timed session types\",\n        \"Timed multiparty session types\",\n        \"Distributed Programming Using Role-Parametric Session Types in Go: Statically-Typed Endpoint APIs for Dynamically-Instantiated Communication Structures\",\n        \"Ferrite: A Judgmental Embedding of Session Types in Rust\",\n        \"Satellite-enabled internet of remote things network transmits field data from the most remote areas of the tibetan plateau\",\n        \"Global progress for dynamically interleaved multiparty sessions\",\n        \"Crate: Crossbeam channel\",\n        \"Deadlock-Free Asynchronous Message Reordering in Rust with Multiparty Session Types\",\n        \"Multiparty Compatibility in Communicating Automata: Characterisation and Synthesis of Global Session Types\",\n        \"Bootstrap resampling\",\n        \"Taming stateful computations in rust with typestates\",\n        \"Bootstrap methods: another look at the jackknife\",\n        \"Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing\",\n        \"Exceptional Asynchronous Session Types: Session Types Without Tiers\",\n        \"Multiparty Session Types for Safe Runtime Adaptation in an Actor Language\",\n        \"Language primitives and type discipline for structured communication-based programming\",\n        \"Multiparty asynchronous session types\",\n        \"Hybrid Session Verification Through Endpoint API Generation\",\n        \"Session-Based Distributed Programming in Java\",\n        \"Validating iot devices with rate-based session types\",\n        \"Session Types for Rust\",\n        \"Monitors and Blame Assignment for Higher-Order Session Types\",\n        \"Crate: Criterion\",\n        \"Rusty Variation: Deadlock-free Sessions with Failure in Rust\",\n        \"Typechecking Protocols with Mungo and stmungo\",\n        \"Communicating timed automata: The more synchronous, the more difficult to verify\",\n        \"Stay Safe Under Panic: Affine Rust Programming with Multiparty Session Types\",\n        \"Verifying Asynchronous Interactions via Communicating Session Automata\",\n        \"MAGœÄùúã\\\\pi: Types for Failure-Prone Communication\",\n        \"Affine Sessions\",\n        \"Timed runtime monitoring for multiparty conversations\",\n        \"Spy: Local Verification of Global Protocols\",\n        \"Types and programming languages\",\n        \"PineTime\",\n        \"Rfc0821: Simple mail transfer protocol\",\n        \"Understanding memory and thread safety practices and issues in real-world rust programs\",\n        \"Generic parameters\",\n        \"Less is more: multiparty session types revisited\",\n        \"Servo Web Browser commit\",\n        \"Module std::time documentation\",\n        \"Crate: Tokio\",\n        \"A multiparty session typing discipline for fault-tolerant event-driven distributed programming\",\n        \"Fast, furious and insecure: Passive keyless entry and start systems in modern supercars\",\n        \"The Scribble Protocol Language\",\n        \"Communicating finite state machines and an extensible toolchain for multiparty session types\"\n    ],\n    \"reasoning\": \"Selected these 49 references because they represent foundational work and recent advances in Fearless Asynchronous Communications with Timed Multiparty Session Protocols, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}