{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 45 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Leveraging Large Language Models to Boost Dafny’s Developers Productivity\n\nPaper Abstract: Abstract. This research idea paper proposes leveraging Large Language Models (LLMs) to enhance the productivity of Dafny developers. Although the use of verification-aware languages, such as Dafny, has increased considerably in the last decade, these are still not widely adopted. Often the cost of using such languages is too high, due to the level of expertise required from the developers and challenges that they often face when trying to prove a program correct. Even though Dafny automates a lot of the verification process, sometimes there are steps that are too complex for Dafny to perform on its own. One such case is that of missing lemmas, i.e. Dafny is unable to prove a result without being given further help in the form of a theorem that can assist it in the proof of the step. In this paper, we describe preliminary work on a new Dafny plugin that leverages LLMs to assist developers by generating suggestions for relevant lemmas that Dafny is unable to discover and use. Moreover, for the lemmas that cannot be proved automatically, the plugin also attempts to provide accompanying calculational proofs. We also discuss ideas for future work by describing a research agenda on using LLMs to increase the adoption of verification-aware languages in general, by increasing developers productivity and by reducing the level of expertise required for crafting formal specifications and proving program properties.\n\n{retrieved_text}\n\nGenerate exactly 45 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 45\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Exploring Automatic Specification Repair in Dafny Programs\",\n        \"GPT-4 Technical report\",\n        \"The Tactician\",\n        \"Sparks of artificial general intelligence: Early experiments with gpt-4\",\n        \"Verification of the incremental Merkle tree algorithm with Dafny\",\n        \"Formal and Executable Semantics of the Ethereum Virtual Machine in Dafny\",\n        \"Deductive verification of smart contracts with Dafny\",\n        \"The Daikon system for dynamic detection of likely invariants\",\n        \"Using dafny to solve the VerifyThis 2021 challenges\",\n        \"Which mathematics for the information society?\",\n        \"Logic training through algorithmic problem solving\",\n        \"Students’ feedback on teaching mathematics through the calculational method\",\n        \"Diversity-Driven Automated Formal Verification\",\n        \"TacTok: Semantics-Aware Proof Synthesis\",\n        \"Baldur: Whole-Proof Generation and Repair with Large Language Models\",\n        \"Code Structure–Guided Transformer for Source Code Summarization\",\n        \"GamePad: A Learning Environment for Theorem Proving\",\n        \"Thor: Wielding Hammers to Integrate Language Models and Automated Theorem Provers\",\n        \"Inferfix: End-to-end program repair with llms\",\n        \"Automatic Code Documentation Generation Using GPT-3\",\n        \"Dafny: An automatic program verifier for functional correctness\",\n        \"Program Proofs\",\n        \"Verified calculations\",\n        \"Are you sure your software will not kill anyone?\",\n        \"Structure editing of handwritten mathematics: Improving the computer support for the calculational method\",\n        \"Towards Verified Handwritten Calculational Proofs: (Short Paper)\",\n        \"Magnushammer: A Transformer-based Approach to Premise Selection\",\n        \"An empirical evaluation of GitHub copilot’s code suggestions\",\n        \"Can OpenAI’s Codex Fix Bugs? An Evaluation on QuixBugs\",\n        \"Proof repair infrastructure for supervised models: Building a large proof repair dataset\",\n        \"Generating correctness proofs with neural networks\",\n        \"Passport: Improving Automated Formal Verification Using Identifiers\",\n        \"Metaprogramming for Practical and Extensible SMT-Powered Coq Proof Automation\",\n        \"Plain and Simple Inductive Invariant Inference for Distributed Protocols in TLA+\",\n        \"Data-driven lemma synthesis for interactive proofs\",\n        \"Clover: Closed-Loop Verifiable Code Generation\",\n        \"Automated lemma synthesis in symbolic-heap separation logic\",\n        \"A Language-Agent Approach to Formal Theorem-Proving\",\n        \"Fret: Functional Reinforced Transformer With BERT for Code Summarization\",\n        \"Automated Program Repair in the Era of Large Pre-Trained Language Models\",\n        \"Less Training, More Repairing Please: Revisiting Automated Program Repair via Zero-Shot Learning\",\n        \"Measuring Program Comprehension: A Large-Scale Field Study with Professionals\",\n        \"Learning to prove theorems via interacting with proof assistants\",\n        \"LeanDojo: Theorem Proving with Retrieval-Augmented Language Models\",\n        \"Lemma synthesis for automating induction over algebraic data types\"\n    ],\n    \"reasoning\": \"Selected these 45 references because they represent foundational work and recent advances in Leveraging Large Language Models to Boost Dafny’s Developers Productivity, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}