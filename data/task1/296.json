{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 60 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Massively Parallel Algorithms for Distance Approximation and Spanners\n\nPaper Abstract: Abstract Over the past decade, there has been increasing interest in distributed/parallel algorithms for processing large-scale graphs. By now, we have quite fast algorithms—usually sublogarithmic-time and often poly⁡(log⁡log⁡n)poly𝑛\\operatorname{poly}(\\log\\log n)-time, or even faster—for a number of fundamental graph problems in the massively parallel computation (𝖬𝖯𝖢𝖬𝖯𝖢\\mathsf{MPC}) model. This model is a widely-adopted theoretical abstraction of MapReduce style settings, where a number of machines communicate in an all-to-all manner to process large-scale data. Contributing to this line of work on 𝖬𝖯𝖢𝖬𝖯𝖢\\mathsf{MPC} graph algorithms, we present p​o​l​y​(log⁡k)∈poly⁡(log⁡log⁡n)𝑝𝑜𝑙𝑦𝑘poly𝑛poly(\\log k)\\in\\operatorname{poly}(\\log\\log n) round 𝖬𝖯𝖢𝖬𝖯𝖢\\mathsf{MPC} algorithms for computing O​(k1+o​(1))𝑂superscript𝑘1𝑜1O(k^{1+{o(1)}})-spanners in the strongly sublinear regime of local memory. To the best of our knowledge, these are the first sublogarithmic-time 𝖬𝖯𝖢𝖬𝖯𝖢\\mathsf{MPC} algorithms for spanner construction. As primary applications of our spanners, we get two important implications, as follows: • For the MPC setting, we get an O​(log2⁡log⁡n)𝑂superscript2𝑛O(\\log^{2}\\log n)-round algorithm for O​(log1+o​(1)⁡n)𝑂superscript1𝑜1𝑛O(\\log^{1+o(1)}n) approximation of all pairs shortest paths (APSP) in the near-linear regime of local memory. To the best of our knowledge, this is the first sublogarithmic-time 𝖬𝖯𝖢𝖬𝖯𝖢\\mathsf{MPC} algorithm for distance approximations. • Our result above also extends to the Congested Clique model of distributed computing, with the same round complexity and approximation guarantee. This gives the first sub-logarithmic algorithm for approximating APSP in weighted graphs in the Congested Clique model.\n\n{retrieved_text}\n\nGenerate exactly 60 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 60\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Coresets meet EDCS: algorithms for matching and vertex cover on massive graphs\",\n        \"Sublinear Algorithms for (Δ+1)Δ1(\\\\Delta+1) Vertex Coloring\",\n        \"Access to data and number of iterations: Dual primal algorithms for maximum matching under resource constraints\",\n        \"Analyzing graph structure via linear measurements\",\n        \"Parallel algorithms for geometric graph problems\",\n        \"Simple round compression for parallel vertex cover\",\n        \"Parallel graph connectivity in log diameter rounds\",\n        \"Massively parallel algorithms for finding well-connected components in sparse graphs\",\n        \"Log diameter rounds algorithms for 2-vertex and 2-edge connectivity\",\n        \"Parallel approximate undirected shortest paths via low hop emulators\",\n        \"Massively parallel computation of matching and MIS in sparse graphs\",\n        \"Near-optimal massively parallel graph connectivity\",\n        \"Brief announcement: Semi-mapreduce meets congested clique\",\n        \"Approximating edit distance in truly subquadratic time: quantum and MapReduce\",\n        \"Breaking the linear-memory barrier in MPC: Fast MIS on trees with nϵsuperscript𝑛italic-ϵn^{\\\\epsilon} memory per machine\",\n        \"Exponentially faster massively parallel maximal matching\",\n        \"Near-Optimal Approximate Shortest Paths and Transshipment in Distributed and Streaming Models\",\n        \"Communication steps for parallel query processing\",\n        \"Skew in parallel query processing\",\n        \"New (α𝛼\\\\alpha, β𝛽\\\\beta) spanners and hopsets\",\n        \"A simple and linear time randomized algorithm for computing sparse spanners in weighted graphs\",\n        \"The complexity of (ΔΔ\\\\Delta+1) coloring in congested clique, massively parallel computation, and centralized local computation\",\n        \"Fast approximate shortest paths in the congested clique\",\n        \"Round compression for parallel matching algorithms\",\n        \"Polylog-time and near-linear work approximation scheme for undirected shortest paths\",\n        \"Mapreduce: simplified data processing on large clusters\",\n        \"On the locality of distributed sparse spanner construction\",\n        \"Massively parallel approximate distance sketches\",\n        \"Exponentially faster shortest paths in the congested clique\",\n        \"Graph spanners by sketching in dynamic streams and the simultaneous communication model\",\n        \"Parallel metric tree embedding based on an algebraic view on moore-bellman-ford\",\n        \"Improved massively parallel computation algorithms for mis, matching, and vertex cover\",\n        \"Weighted matchings via unweighted augmentations\",\n        \"Conditional hardness results for massively parallel computation from distributed lower bounds\",\n        \"Improved parallel algorithms for density-based network clustering\",\n        \"Massively Parallel Algorithms for Minimum Cut\",\n        \"Faster Algorithms for Edge Connectivity via Random 2-Out Contractions\",\n        \"Sorting, searching, and simulation in the MapReduce framework\",\n        \"Sparsifying distributed algorithms with ramifications in massively parallel computation and centralized local computation\",\n        \"Greedy and local ratio algorithms in the MapReduce model\",\n        \"Mapreduce meets fine-grained complexity: Mapreduce algorithms for apsp, matrix multiplication, 3-sum, and beyond\",\n        \"Lessons from the congested clique applied to MapReduce\",\n        \"Dryad: distributed data-parallel programs from sequential building blocks\",\n        \"Dynamic algorithms for the massively parallel computation model\",\n        \"Efficient massively parallel methods for dynamic programming\",\n        \"A model of computation for MapReduce\",\n        \"Spanners and sparsifiers in dynamic streams\",\n        \"Optimal deterministic routing and sorting on the congested clique\",\n        \"Faster parallel algorithm for approximate shortest path\",\n        \"Walking randomly, massively, and efficiently\",\n        \"Filtering: a method for solving graph problems in MapReduce\",\n        \"Improved parallel algorithms for spanners and hopsets\",\n        \"Otakar boruvka on minimum spanning tree problem translation of both the 1926 papers, comments, history\",\n        \"Distributed Computing: A Locality-Sensitive Approach\",\n        \"Graph spanners\",\n        \"Congested clique algorithms for graph spanners\",\n        \"Polylogarithmic-time deterministic network decomposition and distributed derandomization\",\n        \"Shuffles and circuits: (on lower bounds for modern parallel computation)\",\n        \"Hadoop: The definitive guide\",\n        \"Spark: Cluster computing with working sets\"\n    ],\n    \"reasoning\": \"Selected these 60 references because they represent foundational work and recent advances in Massively Parallel Algorithms for Distance Approximation and Spanners, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}