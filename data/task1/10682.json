{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 46 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: BlackJAX: Composable Bayesian inference in JAX\n\nPaper Abstract: Abstract BlackJAX is a library implementing sampling and variational inference algorithms commonly used in Bayesian computation. It is designed for ease of use, speed, and modularity by taking a functional approach to the algorithm’s implementation. Designed from basic components to specific iterative procedures, BlackJAX allows the end user to build and experiment with new algorithms by composition. BlackJAX is written in Python using JAX to compile and run NumpPy-like samplers and variational methods on CPUs, GPUs and TPUs. The library integrates well with probabilistic programming languages by working directly with the (un-normalized) target log density function. The library is intended as a collection of low-level, composable implementations of basic statistical ‘atoms’ that can be combined to perform well-defined Bayesian inference. It is designed for users who need cutting-edge methods, researchers who want to create complex sampling methods, and people who want to learn how these work.\n\n{retrieved_text}\n\nGenerate exactly 46 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 46\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"PyMC: a modern, and comprehensive probabilistic programming framework in Python\",\n        \"CANDL: Cosmic microwave background analysis with a differentiable likelihood\",\n        \"Comments on “Representations of knowledge in complex systems” by U. Grenander and M. I. Miller\",\n        \"Identifying the optimal integration time in Hamiltonian Monte Carlo\",\n        \"Pyro: Deep universal probabilistic programming\",\n        \"Jumanji: a diverse suite of scalable reinforcement learning environments in JAX\",\n        \"JAX: composable transformations of Python+NumPy programs\",\n        \"Transport elliptical slice sampling\",\n        \"Stan: A probabilistic programming language\",\n        \"Bayesian cross-validation by parallel Markov chain Monte Carlo\",\n        \"The DeepMind JAX Ecosystem\",\n        \"Sequential Monte Carlo samplers\",\n        \"Just Another Gibbs Sampler (JAGS): Flexible software for MCMC implementation\",\n        \"Hybrid Monte Carlo\",\n        \"EMCEE v3: A Python ensemble sampling toolkit for affine-invariant MCMC\",\n        \"Using wavelets to capture deviations from smoothness in galaxy-scale strong lenses\",\n        \"Annealing Markov chain Monte Carlo with applications to ancestral inference\",\n        \"Monte Carlo sampling methods using Markov chains and their applications\",\n        \"An adaptive-MCMC scheme for setting trajectory lengths in Hamiltonian Monte Carlo\",\n        \"Tuning-free generalized Hamiltonian Monte Carlo\",\n        \"The No-U-Turn sampler: adaptively setting path lengths in Hamiltonian Monte Carlo\",\n        \"A generalized guided Monte Carlo algorithm\",\n        \"Unbiased Markov chain Monte Carlo methods with couplings\",\n        \"An introduction to variational methods for graphical models\",\n        \"pocoMC: A Python package for accelerated Bayesian inference in astronomy and cosmology\",\n        \"Arviz a unified library for exploratory analysis of bayesian models in python\",\n        \"tfp.mcmc: Modern Markov chain Monte Carlo tools built for modern hardware\",\n        \"Pure Happiness with Pure Functions\",\n        \"WinBUGS-a Bayesian modelling framework: concepts, structure, and extensibility\",\n        \"Simulated tempering: A new Monte Carlo scheme\",\n        \"Equation of state calculations by fast computing machines\",\n        \"BUGS for a Bayesian analysis of stochastic volatility models\",\n        \"Probabilistic Machine Learning: An introduction\",\n        \"Non-reversibly updating a uniform [0, 1] value for Metropolis accept/reject decisions\",\n        \"PyMC: A modern and comprehensive probabilistic programming framework in Python\",\n        \"Composable effects for flexible and accelerated probabilistic programming in NumPyro\",\n        \"GPJax: A Gaussian process framework in JAX\",\n        \"Data-driven dynamics with orbital torus imaging: A flexible model of the vertical phase space of the galaxy\",\n        \"The Metropolis–Hastings algorithm\",\n        \"Approximate Bayesian inference for latent Gaussian models by using integrated nested Laplace approximations\",\n        \"JAX M.D. a framework for differentiable physics\",\n        \"DYNESTY: a dynamic nested sampling package for estimating Bayesian posteriors and evidences\",\n        \"Benchmarking Bayesian neural networks and evaluation metrics for regression tasks\",\n        \"Non-reversible parallel tempering: a scalable highly parallel MCMC scheme\",\n        \"Bayesian Layers: A module for neural network uncertainty\",\n        \"Bayes–Newton methods for approximate Bayesian inference with PSD guarantees\"\n    ],\n    \"reasoning\": \"Selected these 46 references because they represent foundational work and recent advances in BlackJAX: Composable Bayesian inference in JAX, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}