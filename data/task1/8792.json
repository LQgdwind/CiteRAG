{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 48 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Evidence of Meaning in Language Models Trained on Programs\n\nPaper Abstract: Abstract We present evidence that language models can learn meaning despite being trained only to perform next token prediction on text, specifically a corpus of programs. Each program is preceded by a specification in the form of (textual) input-output examples. Working with programs enables us to precisely define concepts relevant to meaning in language (e.g., correctness and semantics), making program synthesis well-suited as an intermediate testbed for characterizing the presence (or absence) of meaning in language models. We first train a Transformer model on the corpus of programs, then probe the trained model’s hidden states as it completes a program given a specification. Despite providing no inductive bias toward learning the semantics of the language, we find that a linear probe is able to extract abstractions of both current and future program states from the model states. Moreover, there is a strong, statistically significant correlation between the accuracy of the probe and the model’s ability to generate a program that implements the specification. To evaluate whether the semantics are represented in the model states rather than learned by the probe, we design a novel experimental procedure that intervenes on the semantics of the language while preserving the lexicon and syntax. We also demonstrate that the model learns to generate correct programs that are, on average, shorter than those in the training set, which is evidence that language model outputs may differ from the training distribution in semantically meaningful ways. In summary, this paper does not propose any new techniques for training language models, but develops an experimental framework for and provides insights into the acquisition and representation of (formal) meaning in language models.\n\n{retrieved_text}\n\nGenerate exactly 48 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 48\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Can language models encode perceptual structure without grounding? a case study in color\",\n        \"Program synthesis with large language models\",\n        \"Probing classifiers: Promises, shortcomings, and advances\",\n        \"Analysis methods in neural language processing: A survey\",\n        \"Climbing towards nlu: On meaning, form, and understanding in the age of data\",\n        \"Leveraging grammar and reinforcement learning for neural program synthesis\",\n        \"Evaluating large language models trained on code\",\n        \"Execution-guided neural program synthesis\",\n        \"Latent execution for neural program synthesis beyond domain-specific languages\",\n        \"Syntactic structures\",\n        \"Constructive design of a hierarchy of semantics of a transition system by abstract interpretation\",\n        \"Abstract interpretation: a unified lattice model for static analysis of programs by construction or approximation of fixpoints\",\n        \"CS106A: Programming Methodologies (spring 2023)\",\n        \"Neural program meta-induction\",\n        \"The compositionality papers\",\n        \"Incoder: A generative model for code infilling and synthesis\",\n        \"Measuring coding challenge competence with apps\",\n        \"Trace-based teaching in early programming courses\",\n        \"Designing and interpreting probes with control tasks\",\n        \"Evaluating distributional distortion in neural language modeling\",\n        \"Cognitive processes in program comprehension\",\n        \"Speaking: From intention to articulation\",\n        \"Implicit representations of meaning in neural language models\",\n        \"Emergent world representations: Exploring a sequence model trained on a synthetic task\",\n        \"Competition-level code generation with alphacode\",\n        \"Holistic evaluation of language models\",\n        \"Further evidence of a relationship between explaining, tracing and writing skills in introductory programming\",\n        \"Mind’s eye: Grounded language model reasoning through simulation\",\n        \"Relationships between reading, tracing and writing skills in introductory programming\",\n        \"Decoupled weight decay regularization\",\n        \"Language model evaluation beyond perplexity\",\n        \"Provable limitations of acquiring meaning from ungrounded form: What will future language models understand?\",\n        \"What do nlp researchers believe? results of the nlp community metasurvey\",\n        \"A roadmap towards machine intelligence\",\n        \"The debate over understanding in AI’s large language models\",\n        \"Codegen: An open large language model for code with multi-turn program synthesis\",\n        \"Pytorch: An imperative style, high-performance deep learning library\",\n        \"Mapping language models to grounded conceptual spaces\",\n        \"Karel the robot: a gentle introduction to the art of programming\",\n        \"Karel Reader: Python version\",\n        \"Does string-based neural MT learn source syntax?\",\n        \"Improving neural program synthesis with inferred execution traces\",\n        \"Notional machines and introductory programming education\",\n        \"Neural program synthesis from diverse demonstration videos\",\n        \"Chess as a testbed for language model state tracking\",\n        \"Attention is all you need\",\n        \"The formal semantics of programming languages: an introduction\",\n        \"Transformers: State-of-the-art natural language processing\"\n    ],\n    \"reasoning\": \"Selected these 48 references because they represent foundational work and recent advances in Evidence of Meaning in Language Models Trained on Programs, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}