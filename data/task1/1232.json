{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 51 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Learning Differentiable Programs with Admissible Neural Heuristics\n\nPaper Abstract: Abstract We study the problem of learning differentiable functions expressed as programs in a domain-specific language. Such programmatic models can offer benefits such as composability and interpretability; however, learning them requires optimizing over a combinatorial space of program “architectures”. We frame this optimization problem as a search in a weighted graph whose paths encode top-down derivations of program syntax. Our key innovation is to view various classes of neural networks as continuous relaxations over the space of programs, which can then be used to complete any partial program. This relaxed program is differentiable and can be trained end-to-end, and the resulting training loss is an approximately admissible heuristic that can guide the combinatorial search. We instantiate our approach on top of the A∗ algorithm and an iteratively deepened branch-and-bound search, and use these algorithms to learn programmatic classifiers in three sequence classification tasks. Our experiments show that the algorithms outperform state-of-the-art methods for program learning, and that they discover programmatic classifiers that yield natural interpretations and achieve competitive accuracy.\n\n{retrieved_text}\n\nGenerate exactly 51 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 51\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Syntax-guided synthesis\",\n        \"Admissible heuristic search in and/or graphs\",\n        \"Deepcoder: Learning to write programs\",\n        \"Leveraging grammar and reinforcement learning for neural program synthesis\",\n        \"Social behavior recognition in continuous video\",\n        \"A new admissible heuristic for minimal-cost proofs\",\n        \"Execution-guided neural program synthesis\",\n        \"Robustfill: Neural program learning under noisy I/O\",\n        \"Machine learning for sequential data: A review\",\n        \"Write, execute, assess: Program synthesis with a REPL\",\n        \"Learning to infer graphics programs from hand-drawn images\",\n        \"Sampling for bayesian program learning\",\n        \"Unsupervised learning by program synthesis\",\n        \"Detecting social actions of fruit flies\",\n        \"Synthesizing data structure transformations from input-output examples\",\n        \"Synthesizing programs for images using reinforced adversarial learning\",\n        \"Differentiable programs with neural libraries\",\n        \"Terpret: A probabilistic programming language for program induction\",\n        \"Neural turing machines\",\n        \"The heuristic search under conditions of error\",\n        \"Introduction to automata theory, languages, and computation, 3rd Edition\",\n        \"Adam: A method for stochastic optimization\",\n        \"Bandit based monte-carlo planning\",\n        \"Recent progress in the design and analysis of admissible heuristic functions\",\n        \"Neural random-access machines\",\n        \"Human-level concept learning through probabilistic program induction\",\n        \"Accelerating search-based program synthesis using learned probabilistic models\",\n        \"DARTS: differentiable architecture search\",\n        \"Neural sketch learning for conditional program generation\",\n        \"Neuro-symbolic program synthesis\",\n        \"Heuristics: Intelligent search strategies for computer problem solving\",\n        \"Flashmeta: a framework for inductive program synthesis\",\n        \"Regularized evolution for image classifier architecture search\",\n        \"Neural programmer-interpreters\",\n        \"Neurally-guided procedural models: Amortized inference for procedural graphics programs using neural networks\",\n        \"Artificial intelligence: a modern approach\",\n        \"Meta-learning with memory-augmented neural networks\",\n        \"The truth of the f-measure\",\n        \"Near code repository\",\n        \"Differentiable neural network architecture search\",\n        \"Combinatorial sketching for finite programs\",\n        \"Tightening lp relaxations for map using message passing\",\n        \"Using alternative suboptimality bounds in heuristic search\",\n        \"HOUDINI: lifelong learning as program synthesis\",\n        \"Imitation-projected programmatic reinforcement learning\",\n        \"Programmatically interpretable reinforcement learning\",\n        \"The formal semantics of programming languages: an introduction\",\n        \"A* lasso for learning a sparse bayesian network structure for continuous variables\",\n        \"Learning neurosymbolic generative models via program synthesis\",\n        \"Learning fine-grained spatial models for dynamic sports play prediction\",\n        \"Neural architecture search with reinforcement learning\"\n    ],\n    \"reasoning\": \"Selected these 51 references because they represent foundational work and recent advances in Learning Differentiable Programs with Admissible Neural Heuristics, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}