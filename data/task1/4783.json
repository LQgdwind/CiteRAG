{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 50 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Enabling Automated FPGA Accelerator Optimization Using Graph Neural Networks\n\nPaper Abstract: Abstract. High-level synthesis (HLS) has freed the computer architects from developing their designs in a very low-level language and needing to exactly specify how the data should be transferred in register-level. With the help of HLS, the hardware designers must describe only a high-level behavioral flow of the design. Despite this, it still can take weeks to develop a high-performance architecture mainly because there are many design choices at a higher level that requires more time to explore. It also takes several minutes to hours to get feedback from the HLS tool on the quality of each design candidate. In this paper, we propose to solve this problem by modeling the HLS tool with a graph neural network (GNN) that is trained to be used for a wide range of applications. The experimental results demonstrate that by employing the GNN-based model, we are able to estimate the quality of design in milliseconds with high accuracy which can help us search through the solution space very quickly.\n\n{retrieved_text}\n\nGenerate exactly 50 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 50\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Amazon EC2 F1 Instance\",\n        \"Gephi: an open source software for exploring and manipulating networks\",\n        \"SODA: stencil with optimized dataflow architecture\",\n        \"Source-to-source optimization for HLS\",\n        \"Software infrastructure for enabling FPGA-based accelerations in data centers\",\n        \"High-level synthesis for FPGAs: From prototyping to deployment\",\n        \"Automated accelerator generation and optimization with composable, parallel and pipeline architecture\",\n        \"ProGraML: A Graph-based Program Representation for Data Flow Analysis and Compiler Optimizations\",\n        \"OpenMP: an industry standard API for shared-memory programming\",\n        \"Design of ion-implanted MOSFETâ€™s with very small physical dimensions\",\n        \"Bert: Pre-training of deep bidirectional transformers for language understanding\",\n        \"Fast inference of deep neural networks in FPGAs for particle physics\",\n        \"Intel SDK for OpenCL Applications\",\n        \"Graph neural network for traffic forecasting: A survey\",\n        \"Semi-supervised classification with graph convolutional networks\",\n        \"Transfer Learning for Design-Space Exploration with High-Level Synthesis\",\n        \"HeteroCL: A multi-paradigm programming infrastructure for software-defined reconfigurable computing\",\n        \"LLVM: A compilation framework for lifelong program analysis & transformation\",\n        \"Gated graph sequence neural networks\",\n        \"On learning-based methods for design-space exploration with high-level synthesis\",\n        \"Visualizing data using t-SNE\",\n        \"Machine-learning based simulated annealer method for high level synthesis design space exploration\",\n        \"Adaptive threshold non-pareto elimination: Re-thinking machine learning for system level design space exploration on FPGAs\",\n        \"Predictable accelerator design with time-sensitive affine types\",\n        \"PyTorch: An Imperative Style, High-Performance Deep Learning Library\",\n        \"A reconfigurable fabric for accelerating large-scale datacenter services\",\n        \"Machsuite: Benchmarks for accelerator design and customized architectures\",\n        \"Parallel high-level synthesis design space exploration for behavioral ips of exact latencies\",\n        \"High-Level Synthesis Design Space Exploration: Past, Present, and Future\",\n        \"Masked label prediction: Unified message passing model for semi-supervised classification\",\n        \"End-to-End Optimization of Deep Learning Applications\",\n        \"AutoDSE: Enabling Software Programmers Design Efficient FPGA Accelerators\",\n        \"Deep representation learning for social network analysis\",\n        \"Accurate operation delay prediction for FPGA HLS using graph neural networks\",\n        \"Attention is all you need\",\n        \"Graph attention networks\",\n        \"AutoSA: A Polyhedral Compiler for High-Performance Systolic Arrays on FPGA\",\n        \"IronMan: GNN-assisted Design Space Exploration in High-Level Synthesis via Reinforcement Learning\",\n        \"A comprehensive survey on graph neural networks\",\n        \"Xilinx Vitis Platform\",\n        \"Representation learning on graphs with jumping knowledge networks\",\n        \"AutoDNNchip: An automated dnn chip predictor and builder for both FPGAs and ASICs\",\n        \"S2FA: an accelerator automation framework for heterogeneous computing in datacenters\",\n        \"Graph embedding on biomedical networks: methods, applications and evaluations\",\n        \"PolyBench/C\",\n        \"Compiler-assisted selection of hardware acceleration candidates from application source code\",\n        \"AutoPilot: A platform-based ESL synthesis system\",\n        \"COMBA: A comprehensive model-based analysis framework for high level synthesis of real applications\",\n        \"FlexTensor: An Automatic Schedule Exploration and Optimization Framework for Tensor Computation on Heterogeneous System\",\n        \"Lin-analyzer: a high-level performance analysis tool for FPGA-based accelerators\"\n    ],\n    \"reasoning\": \"Selected these 50 references because they represent foundational work and recent advances in Enabling Automated FPGA Accelerator Optimization Using Graph Neural Networks, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}