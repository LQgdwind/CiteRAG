{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 57 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: GNNAdvisor: An Adaptive and Efficient Runtime System for GNN Acceleration on GPUs\n\nPaper Abstract: Abstract As the emerging trend of graph-based deep learning, Graph Neural Networks (GNNs) excel for their capability to generate high-quality node feature vectors (embeddings). However, the existing one-size-fits-all GNN implementations are insufficient to catch up with the evolving GNN architectures, the ever-increasing graph sizes, and the diverse node embedding dimensionalities. To this end, we propose GNNAdvisor 111Paper is accepted at OSDI’21., an adaptive and efficient runtime system to accelerate various GNN workloads on GPU platforms. First, GNNAdvisor explores and identifies several performance-relevant features from both the GNN model and the input graph, and uses them as a new driving force for GNN acceleration. Second, GNNAdvisor implements a novel and highly-efficient 2D workload management, tailored for GNN computation to improve GPU utilization and performance under different application settings. Third, GNNAdvisor capitalizes on the GPU memory hierarchy for acceleration by gracefully coordinating the execution of GNNs according to the characteristics of the GPU memory structure and GNN workloads. Furthermore, to enable automatic runtime optimization, GNNAdvisor incorporates a lightweight analytical model for an effective design parameter search. Extensive experiments show that GNNAdvisor outperforms the state-of-the-art GNN computing frameworks, such as Deep Graph Library (3.02×3.02\\times faster on average) and NeuGraph (up to 4.10×4.10\\times faster), on mainstream GNN architectures across various datasets.\n\n{retrieved_text}\n\nGenerate exactly 57 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 57\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Tensorflow: A system for large-scale machine learning\",\n        \"Rabbit order: Just-in-time parallel reordering for fast graph analysis\",\n        \"When is graph reordering an optimization? studying the effect of lightweight graph reordering across applications and input graphs\",\n        \"Layered label propagation: A multiresolution coordinate-free ordering for compressing social networks\",\n        \"Translating embeddings for modeling multi-relational data\",\n        \"Link prediction approach to collaborative filtering\",\n        \"Deep feature learning via structured graph laplacian embedding for person re-identification\",\n        \"Reducing the bandwidth of sparse symmetric matrices\",\n        \"Learning graph representations with embedding propagation\",\n        \"Convolutional networks on graphs for learning molecular fingerprints\",\n        \"Fast graph representation learning with PyTorch Geometric\",\n        \"Pytorch extension library of optimized scatter operations\",\n        \"Community detection in graphs\",\n        \"Graph embedding in vector spaces by node attribute statistics\",\n        \"Powergraph: Distributed graph-parallel computation on natural graphs\",\n        \"node2vec: Scalable feature learning for networks\",\n        \"Inductive representation learning on large graphs\",\n        \"An experimental comparison of pregel-like graph processing systems\",\n        \"Graph partitioning models for parallel computing\",\n        \"Xeon sliver 4110\",\n        \"Parallelization of reordering algorithms for bandwidth and wavefront reduction\",\n        \"MeTis: Unstructured Graph Partitioning and Sparse Matrix Ordering System, Version 4.0\",\n        \"Graph classification and clustering based on vector space embedding\",\n        \"Benchmark data sets for graph kernels\",\n        \"Mizan: A system for dynamic load balancing in large-scale graph processing\",\n        \"Cusha: vertex-centric graph processing on gpus\",\n        \"Semi-supervised classification with graph convolutional networks\",\n        \"Learning spectral graph transformations for link prediction\",\n        \"Graphchi: Large-scale graph computation on just a pc\",\n        \"Benchmark graphs for testing community detection algorithms\",\n        \"SNAP Datasets: Stanford large network dataset collection\",\n        \"Enterprise: breadth-first graph traversal on gpus\",\n        \"Simd-x: Programming and processing of graph algorithms on gpus\",\n        \"Non-negative laplacian embedding\",\n        \"Cauchy graph embedding\",\n        \"Neugraph: parallel deep neural network computation on large graphs\",\n        \"Spectral methods for community detection and graph partitioning\",\n        \"Tigr: Transforming irregular graphs for gpu-friendly graph processing\",\n        \"Cuda sparse matrix library (cusparse)\",\n        \"Dgx-1\",\n        \"Profiling tools\",\n        \"Quardo p6000 gpu\",\n        \"Tesla p100\",\n        \"Tesla v100\",\n        \"The pagerank citation ranking: Bringing order to the web\",\n        \"Pytorch: An imperative style, high-performance deep learning library\",\n        \"Deepwalk: Online learning of social representations\",\n        \"Near linear time algorithm to detect community structures in large-scale networks\",\n        \"X-stream: Edge-centric graph processing using streaming partitions\",\n        \"Brief announcement: Revisiting the power-law degree distribution for social graph analysis\",\n        \"Towards time-aware link prediction in evolving social networks\",\n        \"Graph attention networks\",\n        \"Deep graph library: Towards efficient and scalable deep learning on graphs\",\n        \"Gunrock: A high-performance graph processing library on the gpu\",\n        \"How powerful are graph neural networks?\",\n        \"Design principles for sparse matrix multiplication on the gpu\",\n        \"Hierarchical graph representation learning with differentiable pooling\"\n    ],\n    \"reasoning\": \"Selected these 57 references because they represent foundational work and recent advances in GNNAdvisor: An Adaptive and Efficient Runtime System for GNN Acceleration on GPUs, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}