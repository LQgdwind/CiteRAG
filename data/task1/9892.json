{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 50 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Automatic Algorithm Selection for Pseudo-Boolean Optimization with Given Computational Time Limits\n\nPaper Abstract: Abstract Machine learning (ML) techniques have been proposed to automatically select the best solver from a portfolio of solvers, based on predicted performance. These techniques have been applied to various problems, such as Boolean Satisfiability, Traveling Salesperson, Graph Coloring, and others. These methods, known as meta-solvers, take an instance of a problem and a portfolio of solvers as input. They then predict the best-performing solver and execute it to deliver a solution. Typically, the quality of the solution improves with a longer computational time. This has led to the development of anytime selectors, which consider both the instance and a user-prescribed computational time limit. Anytime meta-solvers predict the best-performing solver within the specified time limit. Constructing an anytime meta-solver is considerably more challenging than building a meta-solver without the “anytime\" feature. In this study, we focus on the task of designing anytime meta-solvers for the NP-hard optimization problem of Pseudo-Boolean Optimization (PBO), which generalizes Satisfiability and Maximum Satisfiability problems. The effectiveness of our approach is demonstrated via extensive empirical study in which our anytime meta-solver improves dramatically on the performance of Mixed Integer Programming solver Gurobi, which is the best-performing single solver in the portfolio. For example, out of all instances and time limits for which Gurobi failed to find feasible solutions, our meta-solver identified feasible solutions for 47%percent4747\\% of these.\n\n{retrieved_text}\n\nGenerate exactly 50 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 50\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Multi-agent path finding: A new boolean encoding\",\n        \"A systematic review on supervised and unsupervised machine learning algorithms for data science\",\n        \"Machine learning\",\n        \"Sequential time splitting and bounds communication for a portfolio of optimization solvers\",\n        \"Improving sat-based weighted maxsat solvers\",\n        \"Maxsat by improved instance-specific algorithm configuration\",\n        \"Curriculum-based course timetabling with sat and maxsat\",\n        \"Handbook of satisfiability volume 185\",\n        \"Conflict-driven clause learning sat solvers\",\n        \"ASlib: A Benchmark Library for Algorithm Selection\",\n        \"Pseudo-boolean optimization\",\n        \"Bagging predictors\",\n        \"Random forests\",\n        \"A survey on the explainability of supervised machine learning\",\n        \"Divide and conquer: Towards faster pseudo-boolean solving\",\n        \"Discriminatory analysis: nonparametric discrimination: consistency properties\",\n        \"Greedy function approximation: a gradient boosting machine\",\n        \"A portfolio solver for answer set programming: Preliminary report\",\n        \"clasp: A conflict-driven answer set solver\",\n        \"Gurobi Optimizer Reference Manual\",\n        \"aspeed: Solver scheduling via answer set programming1\",\n        \"Anytime automatic algorithm selection for knapsack\",\n        \"Improving the state-of-the-art in the traveling salesman problem: An anytime automatic algorithm selection\",\n        \"Isac–instance-specific algorithm configuration\",\n        \"Automated algorithm selection: Survey and perspectives\",\n        \"Qmaxsat: A partial max-sat solver\",\n        \"Imagenet classification with deep convolutional neural networks\",\n        \"Efficient local search for pseudo boolean optimization\",\n        \"The algorithm selection competitions 2015 and 2017\",\n        \"Deep learning for algorithm portfolios\",\n        \"Parallel sat solver selection and scheduling\",\n        \"Pseudo-boolean competition 2010\",\n        \"Effective lower bounding techniques for pseudo-boolean optimization [eda applications]\",\n        \"A multi-engine approach to answer-set programming\",\n        \"Incremental cardinality constraints for maxsat\",\n        \"Open-wbo: A modular maxsat solver\",\n        \"Satzilla: An algorithm portfolio for sat\",\n        \"Scikit-learn: Machine learning in Python\",\n        \"A multi-engine solver for quantified boolean formulas\",\n        \"Induction of decision trees\",\n        \"The algorithm selection problem\",\n        \"Construction of an robdd for a pb-constraint in band form and related techniques for pb-solvers\",\n        \"Very deep convolutional networks for large-scale image recognition\",\n        \"Minisat 2.2 and minisat++ 1.1\",\n        \"Going deeper with convolutions\",\n        \"Apt-pbo: solving the software dependency problem using pseudo-boolean optimization\",\n        \"Atpg for reversible circuits using simulation, boolean satisfiability, and pseudo boolean optimization\",\n        \"Integer and combinatorial optimization volume 55\",\n        \"Satzilla: portfolio-based algorithm selection for sat\",\n        \"Introduction to semi-supervised learning\"\n    ],\n    \"reasoning\": \"Selected these 50 references because they represent foundational work and recent advances in Automatic Algorithm Selection for Pseudo-Boolean Optimization with Given Computational Time Limits, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}