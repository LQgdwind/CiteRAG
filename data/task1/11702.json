{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 56 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: The ART of Sharing Points-to Analysis (Extended Abstract)\n\nPaper Abstract: Abstract. Data-flow analyses like points-to analysis can vastly improve the precision of other analyses, and enable powerful code optimizations. However, whole-program points-to analysis of large Java programs tends to be expensive – both in terms of time and memory. Consequently, many compilers (both static and JIT) and program-analysis tools tend to employ faster – but more conservative – points-to analyses to improve usability. As an alternative to such trading of precision for performance, various techniques have been proposed to perform precise yet expensive fixed-point points-to analyses ahead of time in a static analyzer, store the results, and then transmit them to independent compilation/program-analysis stages that may need them. However, an underlying concern of safety affects all such techniques – can a compiler (or program analysis tool) trust the points-to analysis results generated by another compiler/tool? In this work, we address this issue of trust in the context of Java, while accounting for the issue of performance. We propose ART: Analysis-results Representation Template – a novel scheme to efficiently and concisely encode results of flow-sensitive, context-insensitive points-to analysis computed by a static analyzer for use in any independent system that may benefit from such a precise points-to analysis. ART also allows for fast regeneration of the encoded sound analysis results in such systems. Our scheme has two components: (i) a producer that can statically perform expensive points-to analysis and encode the same concisely, (ii) a consumer that, on receiving such encoded results (called artwork), can regenerate the points-to analysis results encoded by the artwork if it is deemed “safe”. The regeneration scheme completely avoids fixed-point computations and thus can help consumers like static analyzers and JIT compilers to obtain precise points-to information without paying a prohibitively high cost. We demonstrate the usage of ART by implementing a producer (in Soot) and two consumers (in Soot and the Eclipse OpenJ9 JIT compiler). We have evaluated our implementation over various benchmarks from the DaCapo and SPECjvm2008 suites. Our results demonstrate that using ART, a consumer can obtain precise flow-sensitive, context-insensitive points-to analysis results in less than (average) 1% of the time taken by a static analyzer to perform the same analysis, with the storage overhead of ART representing a small fraction of the program size (average around 4%).\n\n{retrieved_text}\n\nGenerate exactly 56 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 56\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"The Separate Compilation Assumption\",\n        \"The Jikes Research Virtual Machine project: Building an open-source research community\",\n        \"Optimistic Stack Allocation and Dynamic Heapification for Managed Runtimes\",\n        \"Verification Witnesses\",\n        \"The DaCapo Benchmarks: Java Benchmarking Development and Analysis\",\n        \"Taming Reflection: Aiding Static Analysis in the Presence of Reflection and Custom Class Loaders\",\n        \"Strictly Declarative Specification of Sophisticated Points-to Analyses\",\n        \"Compositional Shape Analysis by Means of Bi-Abduction\",\n        \"Escape Analysis for Java\",\n        \"Modular Static Program Analysis\",\n        \"Scalable Flow-Sensitive Pointer Analysis for Java with Strong Updates\",\n        \"Optimization of Object-Oriented Programs Using Static Class Hierarchy Analysis\",\n        \"Proof-Carrying Smart Contracts\",\n        \"Giga-Scale Exhaustive Points-to Analysis for Java in under a Minute\",\n        \"LiveDroid: Identifying and Preserving Mobile App State in Volatile Runtime Environments\",\n        \"Synthesizing Fine-grained Synchronization Protocols for Implicit Monitors\",\n        \"Statistically Rigorous Java Performance Evaluation\",\n        \"Problem using Booster and the play-out agent\",\n        \"FATAL ERROR while using Play In Agent Tamiflex Issue #940\",\n        \"PlayOutAgent fails with OpenJ9 JDK · Issue #11 · secure-software-engineering/tamiflex\",\n        \"The Knowledge Complexity of Interactive Proof-systems\",\n        \"Shooting from the Heap: Ultra-scalable Static Analysis with Heap Snapshots\",\n        \"A Container-Usage-Pattern-Based Context Debloating Approach for Object-Sensitive Pointer Analysis\",\n        \"Eclipse OpenJ9\",\n        \"Performance Analysis of Modern Garbage Collectors using Big Data Benchmarks in the JDK 20 Environment\",\n        \"Hybrid Context-sensitivity for Points-to Analysis\",\n        \"Making Context-sensitive Points-to analysis with Heap Cloning Practical for the Real World\",\n        \"Scaling Java Points-to Analysis Using Spark\",\n        \"Precision-guided context sensitivity for pointer analysis\",\n        \"The Java Virtual Machine Specification, Java SE 8 Edition (1st ed.)\",\n        \"Verifying Dereference Safety via Expanding-Scope Analysis\",\n        \"Eagle: CFL-Reachability-Based Precision-Preserving Acceleration of Object-Sensitive Pointer Analysis with Partial Context Sensitivity\",\n        \"A Framework For Efficient Modular Heap Analysis\",\n        \"Soot-list Soot Dacapo Issue\",\n        \"From System F to Typed Assembly Language\",\n        \"Advanced compiler design and implementation\",\n        \"Accurate Interprocedural Null-Dereference Analysis for Java\",\n        \"Proof-Carrying Code\",\n        \"Interprocedural Data Flow Analysis in Soot Using Value Contexts\",\n        \"The Java HotspotTM Server Compiler\",\n        \"Refinement in object-sensitivity points-to analysis via slicing\",\n        \"Purity and Side Effect Analysis for Java Programs\",\n        \"Proof-Carrying Plans\",\n        \"Quicksilver: A Quasi-Static Compiler for Java\",\n        \"Deferred Data-Flow Analysis\",\n        \"Pointer Analysis\",\n        \"Pick Your Contexts Well: Understanding Object-sensitivity\",\n        \"SPECJVM2008\",\n        \"Efficient and Precise Points-to Analysis: Modeling the Heap by Merging Equivalent Automata\",\n        \"Compare Less, Defer More: Scaling Value-contexts Based Whole-program Heap Analyses\",\n        \"PYE: A Framework for Precise-Yet-Efficient Just-In-Time Analyses for Java Programs\",\n        \"Mix Your Contexts Well: Opportunities Unleashed by Recent Advances in Scaling Context-Sensitivity\",\n        \"Flow-sensitive points-to analysis for Java programs using BDDs\",\n        \"Soot - a Java Bytecode Optimization Framework\",\n        \"Compositional Pointer and Escape Analysis for Java Programs\",\n        \"Alias Analysis for Java with Reference-set Representation\"\n    ],\n    \"reasoning\": \"Selected these 56 references because they represent foundational work and recent advances in The ART of Sharing Points-to Analysis (Extended Abstract), providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}