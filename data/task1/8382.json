{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 50 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: \\method: Utilizing Existing Code to Enhance Code Generation\n\nPaper Abstract: Abstract. Large Language Models (LLMs) have shown great success in code generation. LLMs take as the input a prompt and output the code. A key question is how to make prompts (\\iePrompting Techniques). Existing prompting techniques are designed for natural language generation and have low accuracy in code generation. In this paper, we propose a new prompting technique named \\method. Our motivation is that code generation meets two unique challenges (\\ierequirement understanding and code implementation). \\methodcontains two novel mechanisms (\\ieguided code generation and example retrieval) to solve these challenges. (1) Guided code generation asks LLMs first to analyze requirements and output an intermediate preliminary (\\egtest cases). The preliminary is used to clarify requirements and tell LLMs ‚Äúwhat to write‚Äù. (2) Example retrieval selects similar programs as examples in prompts, which provide lots of relevant content (\\egalgorithms, APIs) and teach LLMs ‚Äúhow to write‚Äù. We apply \\methodto three LLMs (\\egCodex) and evaluate it on three public benchmarks using the Pass@kùëòk. Results show that \\methodcan significantly improve the performance of LLMs on code generation. (1) In terms of Pass@1, \\methodoutperforms the state-of-the-art baseline by up to 56.4% in MBPP, 70.7% in MBJP, and 88.4% in MBJSP. (2) \\methodis effective in LLMs with different sizes (\\ie6B to 13B) and different languages (\\iePython, Java, and JavaScript). (3) Human evaluation shows human developers prefer programs from \\method.\n\n{retrieved_text}\n\nGenerate exactly 50 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 50\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"CodeGeeX\",\n        \"CodeParrot\",\n        \"GitHub\",\n        \"Lucene\",\n        \"tree-sitter\",\n        \"Unified Pre-training for Program Understanding and Generation\",\n        \"Multi-lingual Evaluation of Code Generation Models\",\n        \"Program synthesis with large language models\",\n        \"Test-driven development: by example\",\n        \"Language models are few-shot learners\",\n        \"Code Alpaca: An Instruction-following LLaMA model for code generation\",\n        \"Codet: Code generation with generated tests\",\n        \"Evaluating large language models trained on code\",\n        \"Incoder: A generative model for code infilling and synthesis\",\n        \"AixBench: A Code Generation Benchmark Dataset\",\n        \"A retrieve-and-edit framework for predicting structured outputs\",\n        \"The Curious Case of Neural Text Degeneration\",\n        \"Fault-Aware Neural Code Rankers\",\n        \"Jigsaw: Large language models meet program synthesis\",\n        \"Enabling Programming Thinking in Large Language Models Toward Code Generation\",\n        \"CodeEditor: Learning to Edit Source Code with Pre-Trained Models\",\n        \"Editsum: A retrieve-and-edit framework for source code summarization\",\n        \"SkCoder: A Sketch-based Approach for Automatic Code Generation\",\n        \"StarCoder: may the source be with you!\",\n        \"Competition-level code generation with alphacode\",\n        \"Rouge: A package for automatic evaluation of summaries\",\n        \"ReACC: A Retrieval-Augmented Code Completion Framework\",\n        \"WizardCoder: Empowering Code Large Language Models with Evol-Instruct\",\n        \"Large-scale code reuse in open source software\",\n        \"A conversational paradigm for program synthesis\",\n        \"ChatGPT\",\n        \"Training language models to follow instructions with human feedback\",\n        \"Bleu: a method for automatic evaluation of machine translation\",\n        \"Retrieval Augmented Code Generation and Summarization\",\n        \"Improving language understanding by generative pre-training\",\n        \"Language models are unsupervised multitask learners\",\n        \"Sentence-BERT: Sentence Embeddings using Siamese BERT-Networks\",\n        \"The probabilistic relevance framework: BM25 and beyond\",\n        \"Stanford Alpaca: An Instruction-following LLaMA model\",\n        \"LLaMA: Open and Efficient Foundation Language Models\",\n        \"Self-Consistency Improves Chain of Thought Reasoning in Language Models\",\n        \"Self-Instruct: Aligning Language Models with Self-Generated Instructions\",\n        \"Codet5+: Open code large language models for code understanding and generation\",\n        \"CodeT5: Identifier-aware Unified Pre-trained Encoder-Decoder Models for Code Understanding and Generation\",\n        \"Retrieve and refine: exemplar-based neural comment generation\",\n        \"Finetuned Language Models are Zero-Shot Learners\",\n        \"Chain-of-Thought Prompting Elicits Reasoning in Large Language Models\",\n        \"Wizardlm: Empowering large language models to follow complex instructions\",\n        \"Calibrate before use: Improving few-shot performance of language models\",\n        \"Least-to-Most Prompting Enables Complex Reasoning in Large Language Models\"\n    ],\n    \"reasoning\": \"Selected these 50 references because they represent foundational work and recent advances in \\\\method: Utilizing Existing Code to Enhance Code Generation, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}