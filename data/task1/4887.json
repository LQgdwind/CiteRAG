{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 51 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Examining Zero-Shot Vulnerability Repair with Large Language Models\n\nPaper Abstract: Abstract Human developers can produce code with cybersecurity bugs. Can emerging ‘smart’ code completion tools help repair those bugs? In this work, we examine the use of large language models (LLMs) for code (such as OpenAI’s Codex and AI21’s Jurassic J-1) for zero-shot vulnerability repair. We investigate challenges in the design of prompts that coax LLMs into generating repaired versions of insecure code. This is difficult due to the numerous ways to phrase key information—both semantically and syntactically—with natural languages. We perform a large scale study of five commercially available, black-box, “off-the-shelf” LLMs, as well as an open-source model and our own locally-trained model, on a mix of synthetic, hand-crafted, and real-world security bug scenarios. Our experiments demonstrate that while the approach has promise (the LLMs could collectively repair 100% of our synthetically generated and hand-crafted scenarios), a qualitative evaluation of the model’s performance over a corpus of historical real-world examples highlights challenges in generating functionally correct code.\n\n{retrieved_text}\n\nGenerate exactly 51 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 51\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Evaluating Large Language Models Trained on Code\",\n        \"GitHub Copilot · Your AI pair programmer.\",\n        \"Discover Use Cases for AI21 Studio and Jurassic-1.\",\n        \"Completion - OpenAI API.\",\n        \"Language Models are Few-Shot Learners\",\n        \"Language Models are Unsupervised Multitask Learners\",\n        \"OpenAI Codex\",\n        \"Jurassic-1: Technical Details and Evaluation\",\n        \"Is there a correlation between code comments and issues? an exploratory study\",\n        \"Classifying Code Comments in Java Open-Source Software Systems\",\n        \"/*icomment: bugs or bad comments?*/\",\n        \"An Empirical Cybersecurity Evaluation of GitHub Copilot’s Code Contributions\",\n        \"SequenceR: Sequence-to-Sequence Learning for End-to-End Program Repair\",\n        \"CURE: Code-Aware Neural Machine Translation for Automatic Program Repair\",\n        \"An Empirical Study on Learning Bug-Fixing Patches in the Wild via Neural Machine Translation\",\n        \"Generating bug-fixes using pretrained transformers\",\n        \"A Large-Scale Empirical Study of Security Patches\",\n        \"CWE - CWE-Compatible Products and Services\",\n        \"Source Code Analysis Tools.\",\n        \"AddressSanitizer: A Fast Address Sanity Checker\",\n        \"GCC Undefined Behavior Sanitizer - ubsan\",\n        \"Automatic Software Repair: A Bibliography\",\n        \"A New Algorithm for Data Compression\",\n        \"How to generate text: using different decoding methods for language generation with Transformers\",\n        \"Jurassic-1 Language Models - AI21 Studio Docs\",\n        \"A Systematic Evaluation of Large Language Models of Code\",\n        \"Examples - OpenAI API.\",\n        \"Quality analysis of source code comments\",\n        \"The Secret Life of Commented-Out Source Code\",\n        \"CodeQL documentation\",\n        \"2021 CWE Top 25 Most Dangerous Software Weaknesses\",\n        \"CWE-1194: CWE VIEW: Hardware Design\",\n        \"Verilator User’s Guide — Verilator 4.202 documentation.\",\n        \"Beyond Tests: Program Vulnerability Repair via Crash Constraint Extraction\",\n        \"Automated Bug Hunting With Data-Driven Symbolic Root Cause Analysis\",\n        \"ARCUS: Symbolic Root Cause Analysis of Exploits in Production Systems\",\n        \"Simplifying and Isolating Failure-Inducing Input\",\n        \"Isolating Failure-Inducing Thread Schedules\",\n        \"Using Likely Invariants for Automated Software Fault Localization\",\n        \"Failure Sketching: A Technique for Automated Root Cause Diagnosis of in-Production Failures\",\n        \"An analysis of patch plausibility and correctness for generate-and-validate patch generation systems\",\n        \"GenProg: A Generic Method for Automatic Software Repair\",\n        \"Program Synthesis with Large Language Models\",\n        \"NLP (Natural Language Processing) for NLP (Natural Language Programming)\",\n        \"Generating formal system models from natural language descriptions\",\n        \"What would other programmers do: suggesting solutions to error messages\",\n        \"BugFix: A learning-based tool to assist developers in fixing bugs\",\n        \"Fix that Fix Commit: A real-world remediation analysis of JavaScript projects\",\n        \"Fuzzing: a survey\",\n        \"An empirical investigation into learning bug-fixing patches in the wild via neural machine translation\",\n        \"CoCoNuT: combining context-aware neural translation models using ensemble for program repair\"\n    ],\n    \"reasoning\": \"Selected these 51 references because they represent foundational work and recent advances in Examining Zero-Shot Vulnerability Repair with Large Language Models, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}