{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 48 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Using Nesting to Push the Limits of Transactional Data Structure Libraries\n\nPaper Abstract: Abstract. Transactional data structure libraries (TDSL) combine the ease-of-programming of transactions with the high performance and scalability of custom-tailored concurrent data structures. They can be very efficient thanks to their ability to exploit data structure semantics in order to reduce overhead, aborts, and wasted work compared to general-purpose software transactional memory. However, TDSLs were not previously used for complex use-cases involving long transactions and a variety of data structures. In this paper, we boost the performance and usability of a TDSL, towards allowing it to support complex applications. A key idea is nesting. Nested transactions create checkpoints within a longer transaction, so as to limit the scope of abort, without changing the semantics of the original transaction. We build a Java TDSL with built-in support for nested transactions over a number of data structures. We conduct a case study of a complex network intrusion detection system that invests a significant amount of work to process each packet. Our study shows that our library outperforms publicly available STMs twofold without nesting, and by up to 16x when nesting is used.\n\n{retrieved_text}\n\nGenerate exactly 48 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 48\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Byte code instrumentation\",\n        \"Leveraging parallel nesting in transactional memory\",\n        \"Caf√©: Scalable task pools with adjustable fairness and contention\",\n        \"Encapsulated open nesting for STM: fine-grained higher-level conflict detection\",\n        \"A practical concurrent binary search tree\",\n        \"Transactional locking II\",\n        \"Understanding tradeoffs in software transactional memory\",\n        \"Stretching transactional memory\",\n        \"LOFT: lock-free transactional data structures\",\n        \"Software transactional memory should not be obstruction-free\",\n        \"High performance transactions via early write visibility\",\n        \"Dynamic Performance Tuning of Word-Based Software Transactional Memory\",\n        \"Elastic Transactions\",\n        \"Suricata\",\n        \"SALSA: scalable and low synchronization NUMA-aware algorithm for producer-consumer pools\",\n        \"More than you ever wanted to know about synchronization: synchrobench, measuring the impact of the synchronization on concurrent algorithms\",\n        \"Democratizing Transactional Programming\",\n        \"Reusable Concurrent Data Types\",\n        \"On the correctness of transactional memory\",\n        \"Improving the performance of signature-based network intrusion detection sensors by multi-threading\",\n        \"Optimistic transactional boosting.\",\n        \"A lazy concurrent list-based set algorithm\",\n        \"The transactional manifesto: software engineering and non-blocking synchronization\",\n        \"Transactional boosting: a methodology for highly-concurrent transactional objects.\",\n        \"Software transactional memory for dynamic-sized data structures\",\n        \"Transactional memory: Architectural support for lock-free data structures\",\n        \"Type-aware transactions for faster concurrent code\",\n        \"JSTAMP\",\n        \"Noninvasive concurrency with Java STM\",\n        \"Wait-free Dynamic Transactions for Linked Data Structures\",\n        \"Concurrent programming in Java: design principles and patterns\",\n        \"Check-Wait-Pounce: Increasing Transactional Data Structure Throughput by Delaying Transactions\",\n        \"STAMP: Stanford transactional applications for multi-processing\",\n        \"Nested Transactions: An Approach to Reliable Distributed Computing\",\n        \"Deferred Runtime Pipelining for contentious multicore software transactions\",\n        \"Open nesting in software transactional memory\",\n        \"Bro: a System for Detecting Network Intruders in Real-Time\",\n        \"SMV: selective multi-versioning STM\",\n        \"Snort: Lightweight intrusion detection for networks.\",\n        \"Transactional Memory Today\",\n        \"Skiplist-based concurrent priority queues\",\n        \"Transactional Data Structure Libraries\",\n        \"On closed nesting in distributed transactional memory\",\n        \"Scaling multicore databases via constrained parallel execution\",\n        \"Fast in-memory transaction processing using RDMA and HTM\",\n        \"SEDA: an architecture for well-conditioned, scalable internet services\",\n        \"High-performance ACID via modular concurrency control\",\n        \"Lock-free transactional transformation for linked data structures\"\n    ],\n    \"reasoning\": \"Selected these 48 references because they represent foundational work and recent advances in Using Nesting to Push the Limits of Transactional Data Structure Libraries, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}