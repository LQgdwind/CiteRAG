{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 53 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Cleo: Learned Cost Models for Query Optimization in Shared Clouds\n\nPaper Abstract: Abstract. Query processing over big data is ubiquitous in modern clouds, where the system takes care of picking both the physical query execution plans and the resources needed to run those plans, using a cost-based query optimizer. A good cost model, therefore, is akin to better resource efficiency and lower operational costs. Unfortunately, the production workloads at Microsoft show that costs are very complex to model for big data systems. In this work, we investigate two key questions: (i) can we learn accurate cost models for big data systems, and (ii) can we integrate the learned models within the query optimizer. To answer these, we make three core contributions. First, we exploit workload patterns to learn a large number of individual cost models and combine them to achieve high accuracy and coverage over a long period. Second, we propose extensions to Cascades framework to pick optimal resources, i.e, number of containers, during query planning. And third, we integrate the learned cost models within the Cascade-style query optimizer of SCOPE at Microsoft. We evaluate the resulting system, Cleo, in a production environment using both production and TPC-H workloads. Our results show that the learned cost models are 222 to 333 orders of magnitude more accurate, and 20×20\\times more correlated with the actual runtimes, with a large majority (70%percent7070\\%) of the plan changes leading to substantial improvements in latency as well as resource usage.\n\n{retrieved_text}\n\nGenerate exactly 53 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 53\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Re-optimizing data-parallel computing\",\n        \"Learning-based query performance modeling and prediction\",\n        \"Cherrypick: Adaptively unearthing the best cloud configurations for big data analytics\",\n        \"AWS Athena\",\n        \"Kernel independent component analysis\",\n        \"Apollo: scalable and coordinated scheduling for cloud-scale computing\",\n        \"Recurring job optimization in scope\",\n        \"Continuous cloud-scale query optimization and processing\",\n        \"Recurring Job Optimization for Massively Distributed Query Processing\",\n        \"Advanced join strategies for large-scale distributed computation\",\n        \"SCOPE: easy and efficient parallel processing of massive data sets\",\n        \"Self-tuning database systems: a decade of progress\",\n        \"Estimating progress of execution for sql queries\",\n        \"Plan bouquets: A fragrant approach to robust query processing\",\n        \"Selectivity Estimation for Range Predicates Using Lightweight Models\",\n        \"FastTree\",\n        \"Jockey: guaranteed job latency in data parallel clusters\",\n        \"Stochastic gradient boosting\",\n        \"Predicting multiple metrics for queries: Better decisions enabled by machine learning\",\n        \"Google BigQuery\",\n        \"The Cascades framework for query optimization\",\n        \"IBM BigSQL\",\n        \"Selecting Subexpressions to Materialize at Datacenter Scale\",\n        \"Computation Reuse in Analytics Job Service at Microsoft\",\n        \"Morpheus: Towards automated slos for enterprise clusters\",\n        \"Learned cardinalities: Estimating correlated joins with deep learning\",\n        \"Sagedb: A learned database system\",\n        \"The case for learned index structures\",\n        \"Operator and query progress estimation in microsoft sql server live query statistics\",\n        \"Redoop infrastructure for recurring big data queries\",\n        \"How good are query optimizers, really?\",\n        \"Robust estimation of resource consumption for sql queries using statistical techniques\",\n        \"Is query optimization a “solved” problem\",\n        \"Toward a progress indicator for database queries\",\n        \"Neo: A learned query optimizer\",\n        \"Robust query processing through progressive optimization\",\n        \"MART\",\n        \"New tpc benchmarks for decision support and web commerce\",\n        \"Perforator: eloquent performance models for resource optimization\",\n        \"Azure data lake store: a hyperscale distributed file service for big data analytics\",\n        \"SparkCruise: Handsfree Computation Reuse in Spark\",\n        \"Runtime Measurements in the Cloud: Observing, Analyzing, and Reducing Variance\",\n        \"Cloud Programming Simplified: A Berkeley View on Serverless Computing\",\n        \"Leo-db2’s learning optimizer\",\n        \"Ernest: Efficient performance prediction for large-scale advanced analytics\",\n        \"Query and Resource Optimization: Bridging the Gap\",\n        \"Towards a Learning Optimizer for Shared Clouds\",\n        \"HELIX: Holistic Optimization for Accelerating Iterative Machine Learning\",\n        \"Bubble execution: resource-aware reliable analytics at cloud scale\",\n        \"SCOPE: parallel databases meet MapReduce\",\n        \"Automated Verification of Query Equivalence Using Satisfiability Modulo Theories\",\n        \"Looking ahead makes query plans robust: Making the initial case with in-memory star schema data warehouse workloads\",\n        \"Regularization and variable selection via the elastic net\"\n    ],\n    \"reasoning\": \"Selected these 53 references because they represent foundational work and recent advances in Cleo: Learned Cost Models for Query Optimization in Shared Clouds, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}