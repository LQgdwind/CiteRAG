{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 78 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Beyond Control: Exploring Novel File System Objects for Data-Only Attacks on Linux Systems\n\nPaper Abstract: Abstract. The widespread deployment of control-flow integrity has propelled non-control data attacks into the mainstream. In the domain of OS kernel exploits, by corrupting critical non-control data, local attackers can directly gain root access or privilege escalation without hijacking the control flow. As a result, OS kernels have been restricting the availability of such non-control data. This forces attackers to continue to search for more exploitable non-control data in OS kernels. However, discovering unknown non-control data can be daunting because they are often tied heavily to semantics and lack universal patterns. We make two contributions in this paper: (1) discover critical non-control objects in the file subsystem and (2) analyze their exploitability. This work represents the first study, with minimal domain knowledge, to semi-automatically discover and evaluate exploitable non-control data within the file subsystem of the Linux kernel. Our solution utilizes a custom analysis and testing framework that statically and dynamically identifies promising candidate objects. Furthermore, we categorize these discovered objects into types that are suitable for various exploit strategies, including a novel strategy necessary to overcome the defense that isolates many of these objects. These objects have the advantage of being exploitable without requiring KASLR, thus making the exploits simpler and more reliable. We use 18 real-world CVEs to evaluate the exploitability of the file system objects using various exploit strategies. We develop 10 end-to-end exploits using a subset of CVEs against the kernel with all state-of-the-art mitigations enabled.\n\n{retrieved_text}\n\nGenerate exactly 78 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 78\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"MarkUs: Drop-in use-after-free prevention for low-level languages\",\n        \"Control Flow Integrity\",\n        \"apple-oss-distributions/xnu\",\n        \"Arinerron/CVE-2022-0847-DirtyPipe-Exploit: A root exploit for CVE-2022-0847 (Dirty Pipe)\",\n        \"arttnba3/D3CTF2023_d3kcache: attachment and write up for D^3CTF 2023’s pwn challenge - d3kcache\",\n        \"BasicVfsConcepts - FreeBSD Wiki\",\n        \"{{{Control-Flow}} Bending: On the Effectiveness of {{{Control-Flow}} Integrity\",\n        \"Non-control-data attacks are realistic threats.\",\n        \"{{{KOOBE}}: towards facilitating exploit generation of kernel {{{Out-Of-Bounds}} write vulnerabilities\",\n        \"A systematic study of elastic objects in kernel exploitation\",\n        \"Slake: Facilitating slab manipulation for exploiting vulnerabilities in the linux kernel\",\n        \"Exploiting uses of uninitialized stack variables in linux kernels to leak kernel pointers\",\n        \"Clang CFI Support Upstreamed For Linux 5.13 - But Only On ARM64 For Now - Phoronix\",\n        \"CVE - CVE-2022-0435\",\n        \"CVE - CVE-2022-0847\",\n        \"CVE - CVE-2022-1015\",\n        \"CVE - CVE-2022-1016\",\n        \"CVE - CVE-2022-4378\",\n        \"CVE-2021-26708 exploit\",\n        \"Camouflage: Hardware-assisted CFI for the ARM Linux kernel\",\n        \"[CVE-2021-42008] Exploiting A 16-Year-Old Vulnerability In The Linux 6pack Driver\",\n        \"Dirty COW (CVE-2016-5195)\",\n        \"Dirty Pagetable: A Novel Exploitation Technique To Rule Linux Kernel\",\n        \"MineSweeper: A “Clean Sweep” for Drop-in Use-after-Free Prevention\",\n        \"Exploiting CVE-2021-43267\",\n        \"Fiemap, an extent mapping ioctl\",\n        \"FUSE for Linux Exploitation 101\",\n        \"Fine-grained control-flow integrity for kernel software\",\n        \"CVE-2022-0185 Writeup\",\n        \"SETTLERS OF NETLINK: Exploiting a limited UAF in nf_tables (CVE-2022-32250)\",\n        \"How AUTOSLAB Changes the Memory Unsafety Game\",\n        \"Data-oriented programming: On the expressiveness of non-control data attacks\",\n        \"Block Oriented Programming: Automating Data-Only Attacks\",\n        \"Kernel address space layout randomization [LWN.net]\",\n        \"sslab-gatech/kernel-analyzer\",\n        \"Kernel Exploitation Techniques: modprobe_path\",\n        \"Behind the Scenes of iOS and Mac Security\",\n        \"A Hybrid Alias Analysis and Its Application to Global Variable Protection in the Linux Kernel\",\n        \"GREBE: Unveiling exploitation potential for Linux kernel bugs\",\n        \"DirtyCred: Escalating Privilege in Linux Kernel\",\n        \"Kernel support for control-flow enforcement [LWN.net]\",\n        \"The status of kernel hardening [LWN.net]\",\n        \"kernel.org/doc/Documentation/security/self-protection.txt\",\n        \"LinuxFlaw/CVE-2017-7184 at master · VulnReproduction/LinuxFlaw\",\n        \"Practical Program Modularization with Type-Based Dependence Analysis\",\n        \"Migrate Type - Linux source code (v5.14.21) - Bootlin\",\n        \"[CVE-2022-34918] A crack in the Linux firewall\",\n        \"Samsung knox and enterprise mobile security\",\n        \"x86: Add support for Clang CFI [LWN.net]\",\n        \"The current state of kernel page-table isolation [LWN.net]\",\n        \"Supervisor mode access prevention [LWN.net]\",\n        \"Privilege Escalation via setuid\",\n        \"xmp: Selective memory protection for kernel and user space\",\n        \"Randomized slab caches for kmalloc() [LWN.net]\",\n        \"US-22-WANG-Ret2page-The-Art-of-Exploiting-Use-After-Free-Vulnerabilities-in-the-Dedicated-Cache.pdf\",\n        \"CVE-2023-29383: Abusing Linux chfn to Misrepresent /etc/passwd\",\n        \"Defeating samsung knox with zero privilege\",\n        \"HeapExpo: Pinpointing Promoted Pointers to Prevent Use-After-Free Vulnerabilities\",\n        \"Evolution of iOS mitigations\",\n        \"White Paper: An Overview of the Samsung KNOX Platform\",\n        \"Enforcing Kernel Security Invariants with Data Flow Integrity.\",\n        \"CVE-2023-32233: Privilege escalation in Linux Kernel due to a Netfilter nf_tables vulnerability\",\n        \"CVE-2023-0179-PoC\",\n        \"PET: Prevent Discovered Errors from Being Triggered in the Linux Kernel\",\n        \"Preventing Use-After-Free Attacks with Fast Forward Allocation\",\n        \"Will’s Root: Reviving Exploits Against Cred Structs - Six Byte Cross Cache Overflow to Leakless Data-Oriented Kernel Pwnage\",\n        \"{{{KEPLER}}: Facilitating control-flow hijacking primitive evaluation for Linux kernel vulnerabilities\",\n        \"{{{FUZE}}: Towards Facilitating Exploit Generation for Kernel {{{Use-After-Free}} Vulnerabilities\",\n        \"Extending the use of RO and NX [LWN.net]\",\n        \"Kernel data attack is a realistic security threat\",\n        \"ARM pointer authentication based forward-edge and backward-edge control flow integrity for kernels\",\n        \"VIPER: Spotting Syscall-Guard Variables for Data-Only Attacks\",\n        \"{{{In-Kernel}}{{Control-Flow}} Integrity on Commodity {{{OSes}} using {{{ARM}} Pointer Authentication\",\n        \"Playing for {{{K (H) eaps}}: Understanding and improving linux kernel exploit reliability\",\n        \"Statically discovering high-order taint style vulnerabilities in os kernels\",\n        \"Automatic Permission Check Analysis for Linux Kernel\",\n        \"CVE-2022-27666 Writeup\",\n        \"{{{SyzScope}}: Revealing {{{High-Risk}} Security Impacts of {{{Fuzzer-Exposed}} Bugs in Linux kernel\"\n    ],\n    \"reasoning\": \"Selected these 78 references because they represent foundational work and recent advances in Beyond Control: Exploring Novel File System Objects for Data-Only Attacks on Linux Systems, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}