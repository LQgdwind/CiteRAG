{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 129 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Demystifying Platform Requirements for Diverse LLM Inference Use Cases\n\nPaper Abstract: Abstract Large language models (LLMs) have shown remarkable performance across a wide range of applications, often outperforming human experts. However, deploying these parameter-heavy models efficiently for diverse inference use cases requires carefully designed hardware platforms with ample computing, memory, and network resources. With LLM deployment scenarios and models evolving at breakneck speed, the hardware requirements to meet SLOs remains an open research question. In this work, we present an analytical tool, GenZ, to study the relationship between LLM inference performance and various platform design parameters. Our analysis provides insights into configuring platforms for different LLM workloads and use cases. We quantify the platform requirements to support SOTA LLMs under diverse serving settings. Furthermore, we project the hardware capabilities needed to enable future LLMs potentially exceeding hundreds of trillions of parameters. The trends and insights derived from GenZ can guide AI engineers deploying LLMs as well as computer architects designing next-generation hardware accelerators and platforms. Ultimately, this work sheds light on the platform design considerations for unlocking the full potential of large language models across a spectrum of applications. The source code is available at GitHub.\n\n{retrieved_text}\n\nGenerate exactly 129 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 129\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Accelerating self-attentions for llm serving with flashinfer.\",\n        \"Amazon web services.\",\n        \"Amd instinct mi300x plat- form.\",\n        \"Cognitivecomputations dolphin model, hugging face.\",\n        \"Dbrx, a large language model by databricks.\",\n        \"Dissecting batching effects in gpt inference.\",\n        \"Generative llm inference with neuron.\",\n        \"Google tpu pods.\",\n        \"Gpt-4 architecture details.\",\n        \"Gpt-4 architecture, infrastructure, training dataset, costs, vision, moe.\",\n        \"Grok-1.\",\n        \"Groqchip.\",\n        \"A guide to llm inference and performance.\",\n        \"Hugging face datasets.\",\n        \"Hugging face pipelines.\",\n        \"Huggingface generate infereface.\",\n        \"Intel hls-gaudi2.\",\n        \"Llm inference performance engineering: Best practices.\",\n        \"Mastering llm techniques: Inference optimization.\",\n        \"Meta llama 3.\",\n        \"Microsoft azure.\",\n        \"Mixtral-8x22b.\",\n        \"Multi-turn conversational prompts from chatgpt-4 (10k+ tokens).\",\n        \"Nccl tests.\",\n        \"Nvidia faster transformer.\",\n        \"Nvidia hgx.\",\n        \"Openai’s plans according to sam altman.\",\n        \"Rayllm - llms on ray.\",\n        \"The rise and rise of a.i. large language models (llms).\",\n        \"Sora.\",\n        \"Text generation inference.\",\n        \"Thudm longbench govreport dataset, hugging face.\",\n        \"Thudm longbench lcc dataset, hugging face.\",\n        \"Thudm longbench multinews dataset, hugging face.\",\n        \"Thudm longbench qmsum dataset, hugging face.\",\n        \"Thudm longbench repobench-p dataset, hugging face.\",\n        \"Thudm longbench vcsum dataset, hugging face.\",\n        \"Transformer inference arithmetic.\",\n        \"Triton tensorrt-llm backend.\",\n        \"Sambanova whitepaper,\",\n        \"S. Anadkat et al\",\n        \"“Llm inference performance engineering: Best practices\",\n        \"“Sarathi: Efficient llm inference by piggybacking decodes with chunked prefills\",\n        \"“Loggp: Incorporating long messages into the logp model for parallel computation\",\n        \"“Longbench: A bilingual\",\n        \"“Progressive gradient flow for robust n:m sparsity training in transformers\",\n        \"“Improving language models by retrieving from trillions of tokens\",\n        \"“Proteinbert: a universal deep-learning model of protein sequence and function\",\n        \"A. Askell et al\",\n        \"“How many words do we read per minute? a review and meta-analysis of reading rate\",\n        \"“Broken neural scaling laws\",\n        \"“Factual error correction for abstractive summarization models\",\n        \"“Introducing chatgpt.” [Online]. Available: https://openai.com/blog/chatgpt\",\n        \"“Bge m3-embedding: Multi-lingual\",\n        \"“Benchmarking large language models in retrieval-augmented generation\",\n        \"“Ee-llm: Large-scale training and inference of early-exit large language models with 3d parallelism\",\n        \"“A survey of techniques for optimizing transformer inference\",\n        \"S. Gehrmann et al\",\n        \"“Flash-decoding for long-context inference.” [Online]. Available: https://pytorch.org/blog/flash-decoding/\",\n        \"“Flashattention: Fast and memory-efficient exact attention with io-awareness\",\n        \"“Dmazerunner: Executing perfectly nested loops on dataflow accelerators\",\n        \"“dmazerunner: Optimizing convolutions on dataflow accelerators\",\n        \"“Depth-adaptive transformer\",\n        \"“Switch transformers: Scaling to trillion parameter models with simple and efficient sparsity\",\n        \"“Sparsegpt: Massive language models can be accurately pruned in one-shot\",\n        \"“Break the sequential dependency of llm inference using lookahead decoding\",\n        \"“A survey of quantization methods for efficient neural network inference\",\n        \"“Introducing gemini: Google’s most capable ai model yet.” [Online]. Available: https://blog.google/technology/ai/google-gemini-ai/\",\n        \"“Knowledge distillation: A survey\",\n        \"“Hallucinations in large multilingual translation models\",\n        \"“Retrieval augmented language model pre-training\",\n        \"“Rethinking with retrieval: Faithful large language model inference\",\n        \"“Deep residual learning for image recognition\",\n        \"“Distilling the knowledge in a neural network\",\n        \"L. Kurilenko et al\",\n        \"“The curious case of neural text degeneration\",\n        \"“Gpipe: Efficient training of giant neural networks using pipeline parallelism\",\n        \"“Chem-bert: Molecular representation learning.” [Online]. Available: https://github.com/HyunSeobKim/CHEM-BERT\",\n        \"“Atlas: Few-shot learning with retrieval augmented language models\",\n        \"“Deepspeed ulysses: System optimizations for enabling training of extreme long sequence transformer models\",\n        \"“Product quantization for nearest neighbor search\",\n        \"“Abstracting sparse dnn acceleration via structured sparse tensor decomposition\",\n        \"“Survey of hallucination in natural language generation\",\n        \"F. Bressand et al\",\n        \"“Gear: An efficient kv cache compression recipe for near-lossless generative inference of llm\",\n        \"“An optimized dataflow for mitigating attention performance bottlenecks\",\n        \"“Scaling laws for neural language models\",\n        \"“Guiding text generation with constrained beam search in transformers\",\n        \"“Full stack optimization of transformer inference: a survey\",\n        \"“Speculative decoding with big little decoder\",\n        \"“Literature survey on low rank approximation of matrices\",\n        \"“Videopoet: A large language model for zero-shot video generation\",\n        \"“Maestro: A data-centric approach to understand reuse\",\n        \"“Efficient memory management for large language model serving with pagedattention\",\n        \"T. Rocktäschel et al\",\n        \"A. Sukumaran-Rajam\",\n        \"“Sequence parallelism: Long sequence training from system perspective\",\n        \"“Are chatgpt and gpt-4 general-purpose solvers for financial text analytics? an examination on several typical tasks\",\n        \"“Flexflow: A flexible dataflow accelerator architecture for convolutional neural networks\",\n        \"“Efficient and robust approximate nearest neighbor search using hierarchical navigable small world graphs\",\n        \"“Best-first beam search\",\n        \"“Github copilot · your ai pair programmer.” [Online]. Available: https://github.com/features/copilot\",\n        \"“Cagra: Highly parallel graph construction and approximate nearest neighbor search for gpus\",\n        \"“Timeloop: A systematic approach to dnn accelerator evaluation\",\n        \"“Splitwise: Efficient generative llm inference using phase splitting\",\n        \"“Chiplet cloud: Building ai supercomputers for serving large generative language models\",\n        \"“ASTRA-SIM: Enabling sw/hw co-design exploration for distributed dl training platforms\",\n        \"“The curious case of hallucinations in neural machine translation\",\n        \"“A case for efficient accelerator design space exploration via bayesian optimization\",\n        \"D. Van Essendelft\",\n        \"here’s what i discovered — scientific american\",\n        \"“A systematic methodology for characterizing scalability of dnn accelerators using scale-sim\",\n        \"“In chatgpt we trust? measuring and characterizing the reliability of chatgpt\",\n        \"“Flexgen: High-throughput generative inference of large language models with a single gpu\",\n        \"“Megatron-lm: Training multi-billion parameter language models using model parallelism\",\n        \"“Allies: Prompting large language model with beam search\",\n        \"“Llama: Open and efficient foundation language models\",\n        \"S. Bhosale et al\",\n        \"“Attention is all you need\",\n        \"“Emergent abilities of large language models\",\n        \"“Astra-sim2. 0: Modeling hierarchical networks and disaggregated systems for large-model training at scale\",\n        \"“Exploring multi-dimensional hierarchical network topologies for efficient distributed training of trillion parameter dl models\",\n        \"“Efficient llm inference solution on intel gpu\",\n        \"“Smoothquant: Accurate and efficient post-training quantization for large language models\",\n        \"“Orca: A distributed serving system for {{\\\\{Transformer-Based}}\\\\} generative models\",\n        \"“Llm inference unveiled: Survey and roofline model insights\",\n        \"“A hardware evaluation framework for large language model inference\",\n        \"“A survey of large language models\",\n        \"“Song: Approximate nearest neighbor search on gpu\"\n    ],\n    \"reasoning\": \"Selected these 129 references because they represent foundational work and recent advances in Demystifying Platform Requirements for Diverse LLM Inference Use Cases, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}