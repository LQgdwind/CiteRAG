{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 48 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: API2Com: On the Improvement of Automatically Generated Code Comments Using API Documentations This research is support by a grant from Natural Sciences and Engineering Research Council of Canada RGPIN-2019-05175.\n\nPaper Abstract: Abstract Code comments can help in program comprehension and are considered as important artifacts to help developers in software maintenance. However, the comments are mostly missing or are outdated, specially in complex software projects. As a result, several automatic comment generation models are developed as a solution. The recent models explore the integration of external knowledge resources such as Unified Modeling Language class diagrams to improve the generated comments. In this paper, we propose API2Com, a model that leverages the Application Programming Interface Documentations (API Docs) as a knowledge resource for comment generation. The API Docs include the description of the methods in more details and therefore, can provide better context in the generated comments. The API Docs are used along with the code snippets and Abstract Syntax Trees in our model. We apply the model on a large Java dataset of over 130,000 methods and evaluate it using both Transformer and RNN-base architectures. Interestingly, when API Docs are used, the performance increase is negligible. We therefore run different experiments to reason about the results. For methods that only contain one API, adding API Docs improves the results by 4% BLEU score on average (BLEU score is an automatic evaluation metric used in machine translation). However, as the number of APIs that are used in a method increases, the performance of the model in generating comments decreases due to long documentations used in the input. Our results confirm that the API Docs can be useful in generating better comments, but, new techniques are required to identify the most informative ones in a method rather than using all documentations simultaneously.\n\n{retrieved_text}\n\nGenerate exactly 48 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 48\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"An exploratory study of how developers seek, relate, and collect relevant information during software maintenance tasks\",\n        \"Maintaining mental models: a study of developer work habits\",\n        \"Towards automatically generating summary comments for java methods\",\n        \"Measuring program comprehension: A large-scale field study with professionals\",\n        \"Automatic generation of natural language summaries for java classes\",\n        \"An examination of software engineering work practices\",\n        \"Evaluating source code summarization techniques: Replication and expansion\",\n        \"On the use of automated text summarization techniques for summarizing source code\",\n        \"Automatic code summarization: A systematic literature review\",\n        \"Summarizing source code using a neural attention model\",\n        \"Deep code comment generation\",\n        \"Improving automatic source code summarization via deep reinforcement learning\",\n        \"Natural language models for predicting programming comments\",\n        \"Neural machine translation by jointly learning to align and translate\",\n        \"Automatic comment generation using a neural translation model\",\n        \"A neural model for generating natural language summaries of program subroutines\",\n        \"Retrieve and refine: exemplar-based neural comment generation\",\n        \"Retrieval-based neural source code summarization\",\n        \"Cocogum: Contextual code summarization with multi-relational gnn on umls\",\n        \"Improved automatic summarization of subroutines via attention to file context\",\n        \"Summarizing source code with transferred api knowledge\",\n        \"code2seq: Generating sequences from structured representations of code\",\n        \"Attention is all you need\",\n        \"Codesearchnet challenge: Evaluating the state of semantic code search\",\n        \"Empirical evaluation of gated recurrent neural networks on sequence modeling\",\n        \"Long short-term memory\",\n        \"A transformer-based approach for source code summarization\",\n        \"Learning deep transformer models for machine translation\",\n        \"Improving abstractive document summarization with salient information modeling\",\n        \"Hierarchical neural story generation\",\n        \"Trans^ 3: A transformer-based framework for unifying code summarization and code search\",\n        \"Self-attention with relative position representations\",\n        \"Codebert: A pre-trained model for programming and natural languages\",\n        \"Bleu: a method for automatic evaluation of machine translation\",\n        \"Rouge: A package for automatic evaluation of summaries\",\n        \"Meteor: An automatic metric for mt evaluation with improved correlation with human judgments\",\n        \"Deep code comment generation with hybrid lexical and syntactical information\",\n        \"A human study of comprehension and code summarization\",\n        \"Automatic source code summarization of context for java methods\",\n        \"Autocomment: Mining question and answer sites for automatic comment generation\",\n        \"Code generation as a dual task of code summarization\",\n        \"Bert: Pre-training of deep bidirectional transformers for language understanding\",\n        \"Roberta: A robustly optimized bert pretraining approach\",\n        \"Improved code summarization via a graph neural network\",\n        \"Automatic source code summarization with extended tree-lstm\",\n        \"Tree-transformer: A transformer-based method for correction of tree-structured data\",\n        \"A convolutional attention network for extreme summarization of source code\",\n        \"A survey of machine learning for big code and naturalness\"\n    ],\n    \"reasoning\": \"Selected these 48 references because they represent foundational work and recent advances in API2Com: On the Improvement of Automatically Generated Code Comments Using API Documentations This research is support by a grant from Natural Sciences and Engineering Research Council of Canada RGPIN-2019-05175., providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}