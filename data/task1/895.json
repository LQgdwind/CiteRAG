{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 46 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: PLANS: Robust Program Learning from Neurally Inferred Specifications\n\nPaper Abstract: Abstract Recent years have seen the rise of statistical program learning based on neural models as an alternative to traditional rule-based systems for programming by example. Rule-based approaches offer correctness guarantees in an unsupervised way as they inherently capture logical rules, while neural models are more realistically scalable to raw, high-dimensional input, and provide resistance to noisy I/O specifications. We introduce PLANS (Program LeArning from Neurally inferred Specifications), a hybrid model for program synthesis from visual observations that gets the best of both worlds, relying on (i) a neural architecture trained to extract abstract, high-level information from each raw individual input (ii) a rule-based system using the extracted information as I/O specifications to synthesize a program capturing the different observations. In order to address the key challenge of making PLANS resistant to noise in the networkâ€™s output, we introduce a filtering heuristic for I/O specifications based on selective classification techniques. We obtain state-of-the-art performance at program synthesis from diverse demonstration videos in the Karel and ViZDoom environments, while requiring no ground-truth program for training. We make our implementation available at github.com/rdang-nhu/PLANS.\n\n{retrieved_text}\n\nGenerate exactly 46 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 46\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"A survey of machine learning for big code and naturalness\",\n        \"Syntax-guided synthesis\",\n        \"Reducing bias and inefficiency in the selection algorithm\",\n        \"Deepcoder: Learning to write programs\",\n        \"Verifiable reinforcement learning via policy extraction\",\n        \"Adversarial Robustness for Code\",\n        \"An optimum character recognition system using decision functions\",\n        \"Learning with rejection\",\n        \"A representation for the adaptive generation of simple sequential programs\",\n        \"Z3: An efficient SMT solver\",\n        \"Robustfill: Neural program learning under noisy i/o\",\n        \"Watch, Reason and Code: Learning to Represent Videos Using Program\",\n        \"Learning to infer graphics programs from hand-drawn images\",\n        \"Unsupervised learning by program synthesis\",\n        \"Support vector machines with embedded reject option\",\n        \"Synthesizing programs for images using reinforced adversarial learning\",\n        \"Terpret: A probabilistic programming language for program induction\",\n        \"Selective classification for deep neural networks\",\n        \"Selectivenet: A deep neural network with an integrated reject option\",\n        \"Automating string processing in spreadsheets using input-output examples\",\n        \"Spreadsheet data manipulation using examples\",\n        \"Oracle-guided component-based program synthesis\",\n        \"Vizdoom: A doom-based ai research platform for visual reinforcement learning\",\n        \"Accelerating search-based program synthesis using learned probabilistic models\",\n        \"Universal sequential search problems\",\n        \"The mythos of model interpretability\",\n        \"Learning to Describe Scenes with Programs\",\n        \"Effective approaches to attention-based neural machine translation\",\n        \"Rectifier nonlinearities improve neural network acoustic models\",\n        \"Methods for interpreting and understanding deep neural networks\",\n        \"Combining self-supervised learning and imitation for vision-based rope manipulation\",\n        \"Algorithms for Inverse Reinforcement Learning\",\n        \"Efficient synthesis of probabilistic programs\",\n        \"Neuro-symbolic program synthesis\",\n        \"Karel the robot: a gentle introduction to the art of programming.\",\n        \"Learning programs from noisy data\",\n        \"A reduction of imitation learning and structured prediction to no-regret online learning\",\n        \"Learning from demonstration\",\n        \"Neural program synthesis from diverse demonstration videos\",\n        \"Learning to Infer and Execute 3D Shape Programs\",\n        \"Behavioral cloning from observation\",\n        \"Growing solver-aided languages with rosette\",\n        \"Imitation-Projected Programmatic Reinforcement Learning\",\n        \"Programmatically interpretable reinforcement learning\",\n        \"PROW: A step toward automatic program writing\",\n        \"An inductive synthesis framework for verifiable reinforcement learning\"\n    ],\n    \"reasoning\": \"Selected these 46 references because they represent foundational work and recent advances in PLANS: Robust Program Learning from Neurally Inferred Specifications, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}