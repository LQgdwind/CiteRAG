{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 45 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Code to Comment Translation: A Comparative Study on Model Effectiveness & Errors\n\nPaper Abstract: Abstract Automated source code summarization is a popular software engineering research topic wherein machine translation models are employed to “translate” code snippets into relevant natural language descriptions. Most evaluations of such models are conducted using automatic reference-based metrics. However, given the relatively large semantic gap between programming languages and natural language, we argue that this line of research would benefit from a qualitative investigation into the various error modes of current state-of-the-art models. Therefore, in this work, we perform both a quantitative and qualitative comparison of three recently proposed source code summarization models. In our quantitative evaluation, we compare the models based on the smoothed BLEU-4, METEOR, and ROUGE-L machine translation metrics, and in our qualitative evaluation, we perform a manual open-coding of the most common errors committed by the models when compared to ground truth captions. Our investigation reveals new insights into the relationship between metric-based performance and model prediction errors grounded in an empirically derived error taxonomy that can be used to drive future research efforts.111Our annotations and guidelines are publicly available on Github https://github.com/SageSELab/CodeSumStudy and Zenodo: https://doi.org/10.5281/zenodo.4904024.\n\n{retrieved_text}\n\nGenerate exactly 45 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 45\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"A transformer-based approach for source code summarization\",\n        \"code2seq: Generating sequences from structured representations of code\",\n        \"Neural machine translation by jointly learning to align and translate\",\n        \"Project-level encoding for neural source code summarization of subroutines\",\n        \"Manifesto for agile software development\",\n        \"An empirical analysis of the impact of software development problem factors on software maintainability\",\n        \"Incorporating structural alignment biases into an attentional neural translation model\",\n        \"BERT: Pre-training of deep bidirectional transformers for language understanding\",\n        \"Evaluating source code summarization techniques: Replication and expansion\",\n        \"CodeBERT: A pre-trained model for programming and natural languages\",\n        \"Usage and usefulness of technical software documentation: An industrial case study\",\n        \"Code to comment ”translation”: Data, metrics, baselining & evaluation\",\n        \"Supporting program comprehension with source code summarization\",\n        \"Long short-term memory\",\n        \"Deep code comment generation\",\n        \"Codesearchnet challenge: Evaluating the state of semantic code search\",\n        \"Summarizing source code using a neural attention model\",\n        \"Statistical significance tests for machine translation evaluation\",\n        \"Google’s PageRank and Beyond: The Science of Search Engine Rankings\",\n        \"Meteor: An automatic metric for mt evaluation with high levels of correlation with human judgments\",\n        \"Improved code summarization via a graph neural network\",\n        \"A neural model for generating natural language summaries of program subroutines\",\n        \"Recommendations for datasets for source code summarization\",\n        \"ROUGE: A package for automatic evaluation of summaries\",\n        \"Orange: a method for evaluating automatic evaluation metrics for machine translation\",\n        \"Enabling mutation testing for android apps\",\n        \"Retrieval-augmented generation for code summarization via hybrid {gnn}\",\n        \"Roberta: A robustly optimized BERT pretraining approach\",\n        \"Codexglue: A machine learning benchmark dataset for code understanding and generation\",\n        \"Studying the usage of text-to-text transfer transformer to support code-related tasks\",\n        \"Automatic source code summarization of context for java methods\",\n        \"Automatic documentation generation via source code summarization of method context\",\n        \"Coverage embedding models for neural machine translation\",\n        \"Qualitative data analysis: a methods sourcebook\",\n        \"Bleu: A method for automatic evaluation of machine translation\",\n        \"Recovering traceability links between unit tests and classes under test: An improved method\",\n        \"Get to the point: Summarization with pointer-generator networks\",\n        \"A human study of comprehension and code summarization\",\n        \"Attention is all you need\",\n        \"Improving automatic source code summarization via deep reinforcement learning\",\n        \"Code fragment summarization\",\n        \"Retrieval-based neural source code summarization\",\n        \"Bertscore: Evaluating text generation with bert\",\n        \"Cost, benefits and quality of software development documentation\",\n        \"Automatic code summarization: A systematic literature review\"\n    ],\n    \"reasoning\": \"Selected these 45 references because they represent foundational work and recent advances in Code to Comment Translation: A Comparative Study on Model Effectiveness & Errors, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}