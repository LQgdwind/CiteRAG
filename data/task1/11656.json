{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 56 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Wasm-R3: Record-Reduce-Replay for Realistic and Standalone WebAssembly Benchmarks\n\nPaper Abstract: Abstract. WebAssembly (Wasm for short) brings a new, powerful capability to the web as well as Edge, IoT, and embedded systems. Wasm is a portable, compact binary code format with high performance and robust sandboxing properties. As Wasm applications grow in size and importance, the complex performance characteristics of diverse Wasm engines demand robust, representative benchmarks for proper tuning. Stopgap benchmark suites, such as PolyBenchC and libsodium, continue to be used in the literature, though they are known to be unrepresentative. Porting of more complex suites remains difficult because Wasm lacks many system APIs and extracting real-world Wasm benchmarks from the web is difficult due to complex host interactions. To address this challenge, we introduce Wasm-R3, the first record and replay technique for Wasm. Wasm-R3 transparently injects instrumentation into Wasm modules to record an execution trace from inside the module, then reduces the execution trace via several optimizations, and finally produces a replay module that is executable standalone without any host environment—on any engine. The benchmarks created by our approach are (i) realistic, because the approach records real-world web applications, (ii) faithful to the original execution, because the replay benchmark includes the unmodified original code, only adding emulation of host interactions, and (iii) standalone, because the replay benchmarks run on any engine. Applying Wasm-R3 to web-based Wasm applications in the wild demonstrates the correctness of our approach as well as the effectiveness of our optimizations, which reduce the recorded traces by 99.53% and the size of the replay benchmark by 9.98%. We release the resulting benchmark suite of 27 applications, called Wasm-R3-Bench, to the community, to inspire a new generation of realistic and standalone Wasm benchmarks.\n\n{retrieved_text}\n\nGenerate exactly 56 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 56\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"TurboFan: V8’s Optimizing Compiler\",\n        \"JavaScriptCore, the built-in JavaScript engine for WebKit\",\n        \"SpiderMonkey: Mozilla’s JavaScript and WebAssembly engine\",\n        \"V8 Development Site\",\n        \"Wasmer: A Fast and Secure WebAssembly Runtime\",\n        \"Wasmtime: a standalone runtime for WebAssembly\",\n        \"Announcing Speedometer 3.0: A Shared Browser Benchmark for Web Application Responsiveness\",\n        \"binjgb\",\n        \"A Survey of Dynamic Analysis and Test Generation for JavaScript\",\n        \"Liftoff: a new baseline compiler for WebAssembly in V8\",\n        \"Wasm-R3: Record-Reduce-Replay for Realistic and Standalone WebAssembly Benchmarks (Artifact)\",\n        \"The DaCapo Benchmarks: Java Benchmarking Development and Analysis\",\n        \"Efficient, transparent, and comprehensive runtime code manipulation\",\n        \"WASI: The WebAssembly System Interface\",\n        \"Arxwasm\",\n        \"D3wasm\",\n        \"LibSodium WebAssembly Benchmarks\",\n        \"ReVirt: Enabling intrusion analysis through virtual-machine logging and replay\",\n        \"Wasmboy\",\n        \"Awesome-Wasm\",\n        \"Binaryen\",\n        \"Sledge: a Serverless-first, Light-weight Wasm Runtime for the Edge\",\n        \"Chrome DevTools Protocol\",\n        \"R2: an application-level kernel for record and replay\",\n        \"A Real-World WebAssembly Benchmark\",\n        \"MiBench: A free, commercially representative embedded benchmark suite\",\n        \"Bringing the web up to speed with WebAssembly\",\n        \"An Empirical Study of Real-World WebAssembly Binaries: Security, Languages, Use Cases\",\n        \"Versatile yet lightweight record-and-replay for Android\",\n        \"Not so fast: Analyzing the performance of {{{WebAssembly}}} vs. native code\",\n        \"Everything Old is New Again: Binary Security of WebAssembly\",\n        \"Wasabi: A Framework for Dynamically Analyzing WebAssembly\",\n        \"Finding the dwarf: recovering precise types from WebAssembly binaries\",\n        \"mlbench: Machine Learning Benchmark Problems\",\n        \"Bringing webassembly to resource-constrained iot devices for seamless device-cloud integration\",\n        \"WebRR: self-replay enhanced robust record/replay for web application testing\",\n        \"Tic tac toe Wasm\",\n        \"WebAssembly as a Common Layer for the Cloud-edge Continuum\",\n        \"Mugshot: deterministic capture and replay for Javascript applications\",\n        \"Playwright\",\n        \"SPEC Benchmarks\",\n        \"Valgrind: A Framework for Heavyweight Dynamic Binary Instrumentation\",\n        \"PinPlay: a framework for deterministic replay and reproducible analysis of parallel programs\",\n        \"PolyBenchC\",\n        \"Automated Construction of JavaScript Benchmarks\",\n        \"An analysis of the dynamic behavior of JavaScript programs\",\n        \"Wobfuscator: Obfuscating JavaScript Malware via Opportunistic Translation to WebAssembly\",\n        \"Automated WebAssembly Function Purpose Identification With Semantics-Aware Analysis\",\n        \"RANDR: Record and Replay for Android Applications via Targeted Runtime Instrumentation\",\n        \"Jalangi: a selective record-replay and dynamic analysis framework for JavaScript\",\n        \"Wizard, An advanced WebAssembly Engine for Research\",\n        \"A fast in-place interpreter for WebAssembly\",\n        \"Whose Baseline Compiler Is It Anyway?\",\n        \"Flexible Non-intrusive Dynamic Instrumentation for WebAssembly\",\n        \"Made with WebAssembly\",\n        \"A ”flight data recorder” for enabling full-system multiprocessor deterministic replay\"\n    ],\n    \"reasoning\": \"Selected these 56 references because they represent foundational work and recent advances in Wasm-R3: Record-Reduce-Replay for Realistic and Standalone WebAssembly Benchmarks, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}