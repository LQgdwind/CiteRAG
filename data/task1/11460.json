{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 59 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Mover Logic: A Concurrent Program Logic for Reduction and Rely-Guarantee Reasoning (Extended Version)1footnote 11footnote 1To appear at ECOOP 2024.\n\nPaper Abstract: Abstract Rely-guarantee (RG) logic uses thread interference specifications (relies and guarantees) to reason about the correctness of multithreaded software. Unfortunately, RG logic requires each function postcondition to be “stabilized” or specialized to the behavior of other threads, making it difficult to write function specifications that are reusable at multiple call sites. This paper presents mover logic, which extends RG logic to address this problem via the notion of atomic functions. Atomic functions behave as if they execute serially without interference from concurrent threads, and so they can be assigned more general and reusable specifications that avoid the stabilization requirement of RG logic. Several practical verifiers (Calvin-R, QED, CIVL, Armada, Anchor, etc.) have demonstrated the modularity benefits of atomic function specifications. However, the complexity of these systems and their correctness proofs makes it challenging to understand and extend these systems. Mover logic formalizes the central ideas of reduction in a declarative program logic that provides a foundation for future work in this area.\n\n{retrieved_text}\n\nGenerate exactly 59 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 59\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"The Anchor verifier\",\n        \"Regional logic for local reasoning about global invariants\",\n        \"Smallfoot: Modular automatic assertion checking with separation logic\",\n        \"The vercors tool set: Verification of parallel and concurrent software\",\n        \"A semantics for concurrent separation logic\",\n        \"From non-preemptive to preemptive scheduling using synchronization synthesis\",\n        \"Verifying concurrent software using movers in CSPEC\",\n        \"Improving the accuracy of petri net-based analysis of concurrent programs\",\n        \"HAVE: detecting atomicity violations via integrated dynamic and static analysis\",\n        \"Design and synthesis of synchronization skeletons using branching-time temporal logic\",\n        \"Automatic verification of finite-state concurrent systems using temporal logic specifications\",\n        \"The Coq proof assistant\",\n        \"Views: compositional reasoning for concurrent programs\",\n        \"Deny-guarantee reasoning\",\n        \"QED: a proof system based on reduction and abstraction for the static verification of concurrent software\",\n        \"Characterizing correctness properties of parallel programs using fixpoints\",\n        \"Atomizer: a dynamic atomicity checker for multithreaded programs\",\n        \"Fasttrack: efficient and precise dynamic race detection\",\n        \"The Anchor verifier for blocking and non-blocking concurrent software\",\n        \"Types for atomicity: Static checking and inference for java\",\n        \"Exploiting purity for atomicity\",\n        \"A type and effect system for atomicity\",\n        \"Types for atomicity\",\n        \"Checking concise specifications for multithreaded software\",\n        \"Model checking for programming languages using verisoft\",\n        \"A partial approach to model checking\",\n        \"Certified concurrent abstraction layers\",\n        \"Verifying atomicity specifications for concurrent object-oriented software using model-checking\",\n        \"Automated and modular refinement reasoning for concurrent programs\",\n        \"An axiomatic basis for computer programming\",\n        \"Verifast: A powerful, sound, predictable, fast verifier for C and java\",\n        \"Tentative steps toward a development method for interfering programs\",\n        \"Iris from the ground up: A modular foundation for higher-order concurrent separation logic\",\n        \"Dynamic frames: Support for framing, dependencies and sharing without restrictions\",\n        \"Inductive sequentialization of asynchronous programs\",\n        \"Layered concurrent programs\",\n        \"The civl verifier\",\n        \"Synchronizing the asynchronous\",\n        \"Refinement for structured concurrent programs\",\n        \"Reduction: A method of proving properties of parallel programs\",\n        \"Armada: low-effort verification of high-performance concurrent programs\",\n        \"Viper: A verification infrastructure for permission-based reasoning\",\n        \"Finding and reproducing heisenbugs in concurrent programs\",\n        \"Resources, concurrency, and local reasoning\",\n        \"Local reasoning about programs that alter data structures\",\n        \"Combining partial order reductions with on-the-fly model-checking\",\n        \"Separation logic: A logic for shared mutable data structures\",\n        \"Automated type-based analysis of data races and atomicity\",\n        \"An automatic verifier for java-like programs based on dynamic frames\",\n        \"Modular fine-grained concurrency verification\",\n        \"A marriage of rely/guarantee and separation logic\",\n        \"Accurate and efficient runtime detection of atomicity errors in concurrent programs\",\n        \"Runtime analysis of atomicity for multithreaded programs\",\n        \"Explicit stabilisation for modular rely-guarantee reasoning\",\n        \"Verifiedft: a verified, high-performance precise dynamic race detector\",\n        \"A syntactic approach to type soundness\",\n        \"Verifying safety properties of concurrent java programs using 3-valued logic\",\n        \"Cooperative types for controlling thread interference in java\",\n        \"Effects for cooperable and serializable threads\"\n    ],\n    \"reasoning\": \"Selected these 59 references because they represent foundational work and recent advances in Mover Logic: A Concurrent Program Logic for Reduction and Rely-Guarantee Reasoning (Extended Version)1footnote 11footnote 1To appear at ECOOP 2024., providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}