{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 56 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Lightweight Online Learning for Sets of Related Problems in Automated Reasoning\n\nPaper Abstract: Abstract We present Self-Driven Strategy Learning (sdsl), a lightweight online learning methodology for automated reasoning tasks that involve solving a set of related problems. sdsl does not require offline training, but instead automatically constructs a dataset while solving earlier problems. It fits a machine learning model to this data which is then used to adjust the solving strategy for later problems. We formally define the approach as a set of abstract transition rules. We describe a concrete instance of the sdsl calculus which uses conditional sampling for generating data and random forests as the underlying machine learning model. We implement the approach on top of the kissat solver and show that the combination of kissat+sdsl certifies larger bounds and finds more counter-examples than other state-of-the-art bounded model checking approaches on benchmarks obtained from the latest Hardware Model Checking Competition.\n\n{retrieved_text}\n\nGenerate exactly 56 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 56\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Bounded model checking using satisfiability solving\",\n        \"Bounded model checking\",\n        \"Counterexample-guided abstraction refinement\",\n        \"Symbolic execution and program testing\",\n        \"Automated configuration and selection of sat solvers\",\n        \"Boosting verification by automatic tuning of decision procedures\",\n        \"Satzilla: portfolio-based algorithm selection for sat\",\n        \"Guiding high-performance sat solvers with unsat-core predictions\",\n        \"Learning local search heuristics for boolean satisfiability\",\n        \"Hardware model checking competition 2020\",\n        \"CaDiCaL, Kissat, Paracooba, Plingeling and Treengeling entering the SAT Competition 2020\",\n        \"Avr: abstractly verifying reachability\",\n        \"Pono: a flexible and extensible smt-based model checker\",\n        \"Solving the incremental satisfiability problem\",\n        \"Migrating solver state\",\n        \"Accelerating bounded model checking of safety properties\",\n        \"Automatic algorithm configuration based on local search\",\n        \"Satenstein: Automatically building local search sat solvers from components\",\n        \"Algorithm selection for SMT\",\n        \"Hydra: Automatically configuring algorithms for portfolio-based selection\",\n        \"Algorithm runtime prediction: Methods & evaluation\",\n        \"Model-based genetic algorithms for algorithm configuration\",\n        \"Empirical hardness models: Methodology and a case study on combinatorial auctions\",\n        \"Learning to solve smt formulas\",\n        \"Teaching temporal logics to neural networks\",\n        \"Learning rate based branching heuristic for SAT solvers\",\n        \"Machine learning-based restart policy for cdcl sat solvers\",\n        \"Improving sat-solving with machine learning\",\n        \"Learning to generate industrial sat instances\",\n        \"G2sat: learning to generate sat formulas\",\n        \"Solving mixed integer programs using neural networks\",\n        \"The voice of optimization\",\n        \"Manthan: A data-driven approach for boolean function synthesis\",\n        \"Engineering an efficient boolean functional synthesis engine\",\n        \"Neuro-symbolic program synthesis\",\n        \"Learning to accelerate symbolic execution via code transformation\",\n        \"Learning to explore paths for symbolic execution\",\n        \"Understanding vsids branching heuristics in conflict-driven clause-learning sat solvers\",\n        \"Chaff: Engineering an efficient sat solver\",\n        \"Evaluating cdcl variable scoring schemes\",\n        \"Understanding the metropolis-hastings algorithm\",\n        \"Markov chain monte carlo in practice: a roundtable discussion\",\n        \"Random forests\",\n        \"Understanding random forests: From theory to practice\",\n        \"The satisfiability modulo theories library (smt-lib). www\",\n        \"Decision procedures\",\n        \"Domain dependent parameter setting in sat solver using machine learning techniques\",\n        \"An empirical evaluation of sat solvers on bit-vector problems\",\n        \"Cadical, lingeling, plingeling, treengeling and yalsat entering the sat competition 2018\",\n        \"An efficient approach for assessing hyperparameter importance\",\n        \"Btor: bit-precise modelling of word-level problems for model checking\",\n        \"Btor2, btormc and boolector 3.0\",\n        \"Boolector 2.0\",\n        \"Scikit-learn: Machine learning in python\",\n        \"Pono: An smt-based model checker\",\n        \"Abc: An academic industrial-strength verification tool\"\n    ],\n    \"reasoning\": \"Selected these 56 references because they represent foundational work and recent advances in Lightweight Online Learning for Sets of Related Problems in Automated Reasoning, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}