{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 47 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Vector-Processing for Mobile Devices: Benchmark and Analysis\n\nPaper Abstract: Abstract Vector processing has become commonplace in today’s CPU microarchitectures. Vector instructions improve performance and energy which is crucial for resource-constraint mobile devices. The research community currently lacks a comprehensive benchmark suite to study the benefits of vector processing for mobile devices. This paper presents Swan—an extensive vector processing benchmark suite for mobile applications. Swan consists of a diverse set of data-parallel workloads from four commonly used mobile applications: operating system, web browser, audio/video messaging application, and PDF rendering engine. Using Swan benchmark suite, we conduct a detailed analysis of the performance, power, and energy consumption of vectorized workloads, and show that: (a) Vectorized kernels increase the pressure on cache hierarchy due to the higher rate of memory requests. (b) Vector processing is more beneficial for workloads with lower precision operations and higher cache hit rates. (c) Limited Instruction-Level Parallelism and strided memory accesses to multi-dimensional data structures prevent vector processing benefits from scaling with more SIMD functional units and wider registers. (d) Despite lower computation throughput than domain-specific accelerators, such as GPU, vector processing outperforms these accelerators for kernels with lower operation counts. Finally, we show five common computation patterns in mobile data-parallel workloads that dominate the execution time.\n\n{retrieved_text}\n\nGenerate exactly 47 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 47\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Android - secure and reliable mobile operating system\",\n        \"Arm architecture reference manual for a-profile architecture\",\n        \"Arm cortex-a710 core software optimization guide\",\n        \"Arm cortex-a76 software optimization guide\",\n        \"Chromium\",\n        \"Multibench algorithms and workload datasheets\",\n        \"Pdfium\",\n        \"Polybench\",\n        \"riscv-v-spec\",\n        \"Webrtc\",\n        \"Vfp11 vector floating-point coprocessor technical reference manual\",\n        \"Java vector api: Benchmarking and performance analysis\",\n        \"Rethinking energy-performance trade-off in mobile web page loading\",\n        \"Parvec: Vectorizing the parsec benchmark suite\",\n        \"Rodinia: A benchmark suite for heterogeneous computing\",\n        \"Arbench: Augmented reality benchmark for mobile devices\",\n        \"Mevbench: A mobile computer vision benchmarking suite\",\n        \"clMathLibraries. A software library containing sparse functions written in opencl\",\n        \"Makers unveil pcs with intel’s mmx chip\",\n        \"Simpleperf\",\n        \"Vector architectures: past, present and future\",\n        \"Exploring coremark a benchmark maximizing simplicity and efficacy\",\n        \"Ultrasparc: the next generation superscalar 64-bit sparc\",\n        \"Optimizing binary translation of dynamically generated code\",\n        \"Alexa top 1000 most visited websites\",\n        \"Simd proposal for webassembly\",\n        \"Mlperf mobile inference benchmark: An industry-standard open-source machine learning benchmark for on-device ai\",\n        \"Ramulator: A fast and extensible dram simulator\",\n        \"Realtime mpeg video via software decompression on a pa-risc processor\",\n        \"Microarchitectural characterization on a mobile workload\",\n        \"Getting started with LLVM core libraries\",\n        \"An evaluation of vectorizing compilers\",\n        \"Vcomputebench: A vulkan benchmark suite for gpgpu on mobile and embedded gpus\",\n        \"Revec: Program rejuvenation through revectorization\",\n        \"Clblast: A tuned opencl blas library\",\n        \"Jep 426: Vector api (fourth incubator)\",\n        \"Web browser workload characterization for power management on hmp platforms\",\n        \"The control data star-100: Performance measurements\",\n        \"Heterogeneous memory management\",\n        \"A risc-v simulator and benchmark suite for designing and evaluating vector architectures\",\n        \"Webassembly core specification\",\n        \"The cray-1 computer system\",\n        \"The arm scalable vector extension\",\n        \"Parboil: A revised benchmark suite for scientific and commercial throughput computing\",\n        \"The ti asc: a highly modular and flexible super computer architecture\",\n        \"A top-down method for performance analysis and counters architecture\",\n        \"Wibench: An open source kernel suite for benchmarking wireless systems\"\n    ],\n    \"reasoning\": \"Selected these 47 references because they represent foundational work and recent advances in Vector-Processing for Mobile Devices: Benchmark and Analysis, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}