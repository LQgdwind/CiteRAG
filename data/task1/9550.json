{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 57 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: An Empirical Study on Bugs Inside PyTorch: A Replication Study\n\nPaper Abstract: Abstract Software systems are increasingly relying on deep learning components, due to their remarkable capability of identifying complex data patterns and powering intelligent behaviour. A core enabler of this change in software development is the availability of easy-to-use deep learning libraries. Libraries like PyTorch and TensorFlow empower a large variety of intelligent systems, offering a multitude of algorithms and configuration options, applicable to numerous domains of systems. However, bugs in those popular deep learning libraries also may have dire consequences for the quality of systems they enable; thus, it is important to understand how bugs are identified and fixed in those libraries. Inspired by a study of Jia et al., which investigates the bug identification and fixing process at TensorFlow, we characterize bugs in the PyTorch library, a very popular deep learning framework. We investigate the causes and symptoms of bugs identified during PyTorchâ€™s development, and assess their locality within the project, and extract patterns of bug fixes. Our results highlight that PyTorch bugs are more like traditional software projects bugs, than related to deep learning characteristics. Finally, we also compare our results with the study on TensorFlow, highlighting similarities and differences across the bug identification and fixing process.\n\n{retrieved_text}\n\nGenerate exactly 57 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 57\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Deep learning in systems medicine\",\n        \"End to end learning for self-driving cars\",\n        \"Pytorch: An imperative style, high-performance deep learning library\",\n        \"TensorFlow: A system for Large-Scale machine learning\",\n        \"Developer survey 2022\",\n        \"An empirical study on tensorflow program bugs\",\n        \"A comprehensive study on deep learning bug characteristics\",\n        \"Taxonomy of real faults in deep learning systems\",\n        \"Silent bugs in deep learning frameworks: An empirical study of keras and tensorflow\",\n        \"The symptoms, causes, and repairs of bugs inside a deep learning library\",\n        \"An empirical study on bugs inside tensorflow\",\n        \"Pytorch at tesla - andrej karpathy, tesla.\",\n        \"Uber ai labs open sources pyro, a deep probabilistic programming language\",\n        \"Deepbugs: A learning approach to name-based bug detection\",\n        \"Bugbench: Benchmarks for evaluating bug detection tools\",\n        \"Bugram: bug detection with n-gram language models\",\n        \"Bug classification using program slicing metrics\",\n        \"Combining text mining and data mining for bug report classification\",\n        \"An extensive comparison of bug prediction approaches\",\n        \"Software bug prediction using machine learning approach\",\n        \"A novel co-evolutionary approach to automatic software bug fixing\",\n        \"A comprehensive study of automatic program repair on the quixbugs benchmark\",\n        \"An empirical study of bugs in machine learning systems\",\n        \"Denchmark: A bug benchmark of deep learning-related software\",\n        \"Caffe: Convolutional architecture for fast feature embedding\",\n        \"Keras: Deep learning for humans\",\n        \"Theano: Deep learning on gpus with python\",\n        \"Torch: a modular machine learning software library\",\n        \"Towards characterizing adversarial defects of deep learning software from the lens of uncertainty\",\n        \"Toward understanding deep learning framework bugs\",\n        \"A practical guide to collaborative qualitative data analysis\",\n        \"Issue #3307: copy.deepcopy does not copy gradient buffers of torch.autograd.variable instance.\",\n        \"Pull request #53424: [pytorch][pr] fix pylint error torch.tensor is not callable.\",\n        \"Pull request #56488: [dataloader] add numpy seeding to worker of dataloader.\",\n        \"Issue #16532: missing gradient when autograd called inside a function on multi-gpu (eg gradient penalty).\",\n        \"Issue #22389: dependency issues with torch.utils.tensorboard: no module named past and no module named 'pil'.\",\n        \"Issue #42218: type mismatch error with torch.nn.functional.grid_sample under amp.\",\n        \"Issue #35901: oom error where 50% of the gpu ram cannot be utilised/reserved.\",\n        \"Issue #42435: cannot import swa utils.\",\n        \"Issue #49052: tcpstore constructor arguments mismatch unexpected behavior.\",\n        \"Issue #67626: get rid of the blocking call in rrefproxy.\",\n        \"Issue #71065: fix the shape inconsistency of out and elem tensor.\",\n        \"Issue #973: file_descriptor sharing strategy may be leaking fds, resulting in dataloader causing runtimeerror: received 0 items of ancdata.\",\n        \"Issue #62967: Batchnorm2d + syncbatchnorm incorrect multi gpu behaviour in 1.10.0 (tested working in 1.8.0).\",\n        \"Issue #25010: Very high cpu utilization with pin_memory=true and num_workers 0.\",\n        \"Issue #24175: Error caffe2.python when tried importing summarywriter from torch.utils.tensorboard.\",\n        \"Issue #47038: Pytorch 1.7.0 cuda driver warning.\",\n        \"Issue #48666: [dataloader] hang on python exit when has iter ref and sampler yields large indices.\",\n        \"Pull request #34563: support left and right shift operators in jit.\",\n        \"Nvidia cuda\",\n        \"Pull request #43434: [doc] correct docs for torch.nonzero.\",\n        \"Automatic patch generation learned from human-written patches\",\n        \"History driven program repair\",\n        \"Mining stackoverflow for program repair\",\n        \"Apidiff: Detecting api breaking changes\",\n        \"Dependency smells in javascript projects\",\n        \"An empirical study of type-related defects in python projects\"\n    ],\n    \"reasoning\": \"Selected these 57 references because they represent foundational work and recent advances in An Empirical Study on Bugs Inside PyTorch: A Replication Study, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}