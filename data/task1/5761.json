{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 54 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Composite Code Sparse Autoencoders for first stage retrieval\n\nPaper Abstract: Abstract We propose a Composite Code Sparse Autoencoder (CCSA) approach for Approximate Nearest Neighbor (ANN) search of document representations based on Siamese-BERT models. In Information Retrieval (IR), the ranking pipeline is generally decomposed in two stages: the first stage focus on retrieving a candidate set from the whole collection. The second stage re-ranks the candidate set by relying on more complex models. Recently, Siamese-BERT models have been used as first stage ranker to replace or complement the traditional bag-of-word models. However, indexing and searching a large document collection require efficient similarity search on dense vectors and this is why ANN techniques come into play. Since composite codes are naturally sparse, we first show how CCSA can learn efficient parallel inverted index thanks to an uniformity regularizer. Second, CCSA can be used as a binary quantization method and we propose to combine it with the recent graph based ANN techniques. Our experiments on MSMARCO dataset reveal that CCSA outperforms IVF with product quantization. Furthermore, CCSA binary quantization is beneficial for the index size, and memory usage for the graph-based HNSW method, while maintaining a good level of recall and MRR. Third, we compare with recent supervised quantization methods for image retrieval and find that CCSA is able to outperform them.\n\n{retrieved_text}\n\nGenerate exactly 54 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 54\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Probabilistic models of information retrieval based on measuring the divergence from randomness\",\n        \"Query expansion techniques for information retrieval: a survey\",\n        \"The inverted multi-index\",\n        \"Sparterm: Learning term-based sparse representation for fast text retrieval\",\n        \"Ms marco: A human generated machine reading comprehension dataset\",\n        \"Learning to route in similarity graphs\",\n        \"Estimating or propagating gradients through stochastic neurons for conditional computation\",\n        \"Information retrieval as statistical translation\",\n        \"Efficient and accurate non-metric k-nn search with applications to text matching\",\n        \"Flexible retrieval with NMSLIB and FlexNeuART\",\n        \"Return of the devil in the details: Delving deep into convolutional nets\",\n        \"Overview of the trec 2019 deep learning track\",\n        \"Context-aware sentence/passage term importance estimation for first stage retrieval\",\n        \"BERT: pre-training of deep bidirectional transformers for language understanding\",\n        \"Rocketqa: An optimized training approach to dense passage retrieval for open-domain question answering\",\n        \"Optimized product quantization\",\n        \"Realm: Retrieval-augmented language model pre-training\",\n        \"Array programming with NumPy\",\n        \"Letâ€™s measure run time! extending the ir replicability infrastructure to include performance aspects\",\n        \"Improving efficient neural ranking models with cross-architecture knowledge distillation\",\n        \"Batch normalization: Accelerating deep network training by reducing internal covariate shift\",\n        \"Subic: A supervised, structured binary code for image search\",\n        \"Categorical reparameterization with gumbel-softmax\",\n        \"Product quantization for nearest neighbor search\",\n        \"Billion-scale similarity search with gpus\",\n        \"Locally optimized product quantization for approximate nearest neighbor search\",\n        \"Adam: A method for stochastic optimization\",\n        \"End-to-end supervised product quantization for image search and retrieval\",\n        \"Corpus structure, language models, and ad hoc information retrieval\",\n        \"Numba: A llvm-based python jit compiler\",\n        \"Partitioned parallel radix sort\",\n        \"Learning to Rank for Information Retrieval and Natural Language Processing\",\n        \"Distilling dense representations for ranking using tightly-coupled teachers\",\n        \"A* sampling\",\n        \"Efficient and robust approximate nearest neighbor search using hierarchical navigable small world graphs\",\n        \"{SOLAR}: Sparse orthogonal learned and random embeddings\",\n        \"From doc2query to doctttttquery\",\n        \"Passage re-ranking with bert\",\n        \"Multi-stage document ranking with bert\",\n        \"Document expansion by query prediction\",\n        \"Minimizing flops to learn efficient sparse representations\",\n        \"Pytorch: An imperative style, high-performance deep learning library\",\n        \"Exploring the limits of transfer learning with a unified text-to-text transformer\",\n        \"Sentence-bert: Sentence embeddings using siamese bert-networks\",\n        \"The Probabilistic Relevance Framework: BM25 and Beyond\",\n        \"Distilbert, a distilled version of bert: smaller, faster, cheaper and lighter\",\n        \"Compressing word embeddings via deep compositional code learning\",\n        \"Sparse associative memory based on contextual code learning for disambiguating word senses\",\n        \"Approximate nearest neighbor search and lightweight dense vector reranking in multi-stage retrieval architectures\",\n        \"Proceedings of the Twenty-Eighth Text REtrieval Conference, TREC 2019, Gaithersburg, Maryland, USA, November 13-15, 2019\",\n        \"Approximate nearest neighbor negative contrastive learning for dense text retrieval\",\n        \"Anserini: Enabling the use of lucene for information retrieval research\",\n        \"From neural re-ranking to neural ranking: Learning a sparse representation for inverted indexing\",\n        \"Sparta: Efficient open-domain question answering via sparse transformer matching retrieval\"\n    ],\n    \"reasoning\": \"Selected these 54 references because they represent foundational work and recent advances in Composite Code Sparse Autoencoders for first stage retrieval, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}