{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 50 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Rubik: A Hierarchical Architecture for Efficient Graph Learning\n\nPaper Abstract: Abstract Graph convolutional network (GCN) emerges as a promising direction to learn the inductive representation in graph data commonly used in widespread applications, such as E-commerce, social networks, and knowledge graphs. However, learning from graphs is non-trivial because of its mixed computation model involving both graph analytics and neural network computing. To this end, we decompose the GCN learning into two hierarchical paradigms: graph-level and node-level computing. Such a hierarchical paradigm facilitates the software and hardware accelerations for GCN learning. We propose a lightweight graph reordering methodology, incorporated with a GCN accelerator architecture that equips a customized cache design to fully utilize the graph-level data reuse. We also propose a mapping methodology aware of data reuse and task-level parallelism to handle various graphs inputs effectively. Results show that Rubik accelerator design improves energy efficiency by 26.3x to 1375.2x than GPU platforms across different datasets and GCN models.\n\n{retrieved_text}\n\nGenerate exactly 50 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 50\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Graph convolutional neural networks for web-scale recommender systems\",\n        \"Graph convolutional matrix completion\",\n        \"Geometric matrix completion with recurrent multi-graph neural networks\",\n        \"Graph r-cnn for scene graph generation\",\n        \"Factorizable net: an efficient subgraph-based framework for scene graph generation\",\n        \"Convolutional networks on graphs for learning molecular fingerprints\",\n        \"Deep learning on graphs: A survey\",\n        \"Graph neural networks: A review of methods and applications\",\n        \"Inductive representation learning on large graphs\",\n        \"Semi-supervised classification with graph convolutional networks\",\n        \"FastGCN: Fast learning with graph convolutional networks via importance sampling\",\n        \"Hierarchical graph representation learning with differentiable pooling\",\n        \"AliGraph: A comprehensive graph neural network platform\",\n        \"Neural graph learning: Training neural networks using graphs\",\n        \"Deepwalk: Online learning of social representations\",\n        \"Graph embedding techniques, applications, and performance: A survey\",\n        \"Adaptive sampling towards fast graph representation learning\",\n        \"Eyeriss: An energy-efficient reconfigurable accelerator for deep convolutional neural networks\",\n        \"Diannao: A small-footprint high-throughput accelerator for ubiquitous machine-learning\",\n        \"Benchmark data sets for graph kernels\",\n        \"Graphicionado: A high-performance and energy-efficient accelerator for graph analytics\",\n        \"Graph classification and clustering based on vector space embedding\",\n        \"Graph embedding in vector spaces by node attribute statistics\",\n        \"Learning graph representations with embedding propagation\",\n        \"Link prediction approach to collaborative filtering\",\n        \"Learning spectral graph transformations for link prediction\",\n        \"Towards time-aware link prediction in evolving social networks\",\n        \"Deep convolutional networks on graph-structured data\",\n        \"Convolutional neural networks on graphs with fast localized spectral filtering\",\n        \"Cayleynets: Graph convolutional neural networks with complex rational spectral filters\",\n        \"Learning convolutional neural networks for graphs\",\n        \"How powerful are graph neural networks?\",\n        \"Gaan: Gated attention networks for learning on large and spatiotemporal graphs\",\n        \"Conversation modeling on reddit using a graph-structured lstm\",\n        \"Cluster-gcn: An efficient algorithm for training deep and large graph convolutional networks\",\n        \"Community structure in social and biological networks\",\n        \"Near-optimal hashing algorithms for approximate nearest neighbor in high dimensions\",\n        \"Practical and optimal lsh for angular distance\",\n        \"Locality-sensitive hashing scheme based on p-stable distributions\",\n        \"The network data repository with interactive graph analytics and visualization\",\n        \"Fast graph representation learning with PyTorch geometric\",\n        \"Cuda toolkit documentation\",\n        \"Mcpat: An integrated power, area, and timing modeling framework for multicore and manycore architectures\",\n        \"When is graph reordering an optimization? studying the effect of lightweight graph reordering across applications and input graphs\",\n        \"Autopart: Parameter-free graph partitioning and outlier detection\",\n        \"Energy efficient architecture for graph analytics accelerators\",\n        \"Accelerating deep convolutional neural networks using specialized hardware\",\n        \"Minerva: Enabling low-power, highly-accurate deep neural network accelerators\",\n        \"Hygcn: A gcn accelerator with hybrid architecture\",\n        \"Hardware acceleration of graph neural network\"\n    ],\n    \"reasoning\": \"Selected these 50 references because they represent foundational work and recent advances in Rubik: A Hierarchical Architecture for Efficient Graph Learning, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}