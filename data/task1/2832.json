{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 47 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Large Batch Simulation for Deep Reinforcement Learning\n\nPaper Abstract: Abstract We accelerate deep reinforcement learning-based training in visually complex 3D environments by two orders of magnitude over prior work, realizing end-to-end training speeds of over 19,000 frames of experience per second on a single GPU and up to 72,000 frames per second on a single eight-GPU machine. The key idea of our approach is to design a 3D renderer and embodied navigation simulator around the principle of “batch simulation”: accepting and executing large batches of requests simultaneously. Beyond exposing large amounts of work at once, batch simulation allows implementations to amortize in-memory storage of scene assets, rendering work, data loading, and synchronization costs across many simulation requests, dramatically improving the number of simulated agents per GPU and overall simulation throughput. To balance DNN inference and training costs with faster simulation, we also build a computationally efficient policy DNN that maintains high task performance, and modify training algorithms to maintain sample efficiency when training with large mini-batches. By combining batch simulation and DNN performance optimizations, we demonstrate that PointGoal navigation agents can be trained in complex 3D environments on a single GPU in 1.5 days to 97% of the accuracy of agents trained on a prior state-of-the-art system using a 64-GPU cluster over three days. We provide open-source reference implementations of our batch 3D renderer and simulator to facilitate incorporation of these ideas into RL systems.\n\n{retrieved_text}\n\nGenerate exactly 47 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 47\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Real-time rendering\",\n        \"On evaluation of embodied navigation agents\",\n        \"Deepmind lab\",\n        \"The arcade learning environment: An evaluation platform for general agents\",\n        \"Locobot: An open source low cost robot\",\n        \"Matterport3D: Learning from RGB-D data in indoor environments\",\n        \"Accelerating reinforcement learning through gpu atari emulation\",\n        \"CARLA: An open urban driving simulator\",\n        \"Impala: Scalable distributed deep-rl with importance weighted actor-learner architectures\",\n        \"Seed rl: Scalable and efficient deep-rl with accelerated central inference\",\n        \"Threedworld: A platform for interactive multi-modal physical simulation\",\n        \"Accurate, large minibatch SGD: Training ImageNet in 1 hour\",\n        \"Deep residual learning for image recognition\",\n        \"Long short-term memory\",\n        \"Distributed prioritized experience replay\",\n        \"Squeeze-and-excitation networks\",\n        \"Rlbench: The robot learning benchmark & learning environment\",\n        \"Highly scalable deep learning training system with mixed-precision: Training ImageNet in four minutes\",\n        \"Vizdoom: A doom-based ai research platform for visual reinforcement learning\",\n        \"On large-batch training for deep learning: Generalization gap and sharp minima\",\n        \"The Vulkan specification\",\n        \"Adam: A method for stochastic optimization\",\n        \"AI2-THOR: An interactive 3D environment for visual AI\",\n        \"Torchbeast: A pytorch platform for distributed rl\",\n        \"IKEA furniture assembly environment for long-horizon complex manipulation tasks\",\n        \"RLlib: Abstractions for distributed reinforcement learning\",\n        \"Decoupled weight decay regularization\",\n        \"Dota 2 with large scale deep reinforcement learning\",\n        \"Sample factory: Egocentric 3D control from pixels at 100000 fps with asynchronous reinforcement learning\",\n        \"Tresnet: High performance gpu-dedicated architecture\",\n        \"MINOS: Multimodal indoor simulator for navigation in complex environments\",\n        \"Habitat: A Platform for Embodied AI Research\",\n        \"High-dimensional continuous control using generalized advantage estimation\",\n        \"Proximal policy optimization algorithms\",\n        \"Mastering the game of Go without human knowledge\",\n        \"Simplified 3d movement and pathfinding using navigation meshes\",\n        \"rlpyt: A research code base for deep reinforcement learning in pytorch\",\n        \"Grandmaster level in StarCraft II using multi-agent reinforcement learning\",\n        \"Allenact: A framework for embodied ai research\",\n        \"DD-PPO: Learning near-perfect pointgoal navigators from 2.5 billion frames\",\n        \"Gibson env: Real-world perception for embodied agents\",\n        \"Interactive Gibson benchmark: A benchmark for interactive navigation in cluttered environments\",\n        \"SAPIEN: A simulated part-based interactive environment\",\n        \"Scaling SGD batch size to 32K for ImageNet training\",\n        \"Large batch optimization for deep learning: Training BERT in 76 minutes\",\n        \"Transporter networks: Rearranging the visual world for robotic manipulation\",\n        \"Fixup initialization: Residual learning without normalization\"\n    ],\n    \"reasoning\": \"Selected these 47 references because they represent foundational work and recent advances in Large Batch Simulation for Deep Reinforcement Learning, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}