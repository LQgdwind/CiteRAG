{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 60 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: GEML: A Grammar-based Evolutionary Machine Learning Approach for Design-Pattern Detection\n\nPaper Abstract: Abstract Design patterns (DPs) are recognised as a good practice in software development. However, the lack of appropriate documentation often hampers traceability, and their benefits are blurred among thousands of lines of code. Automatic methods for DP detection have become relevant but are usually based on the rigid analysis of either software metrics or specific properties of the source code. We propose GEML, a novel detection approach based on evolutionary machine learning using software properties of diverse nature. Firstly, GEML makes use of an evolutionary algorithm to extract those characteristics that better describe the DP, formulated in terms of human-readable rules, whose syntax is conformant with a context-free grammar. Secondly, a rule-based classifier is built to predict whether new code contains a hidden DP implementation. GEML has been validated over five DPs taken from a public repository recurrently adopted by machine learning studies. Then, we increase this number up to 15 diverse DPs, showing its effectiveness and robustness in terms of detection capability. An initial parameter study served to tune a parameter setup whose performance guarantees the general applicability of this approach without the need to adjust complex parameters to a specific pattern. Finally, a demonstration tool is also provided.\n\n{retrieved_text}\n\nGenerate exactly 60 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 60\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Mining Association Rules Between Sets of Items in Large Databases\",\n        \"A Multiple Phases Approach for Design Patterns Recovery Based on Structural and Method Signature Features\",\n        \"Towards machine learning based design pattern recognition\",\n        \"A Hitchhikerâ€™s Guide to Statistical Tests for Assessing Randomized Algorithms in Software Engineering\",\n        \"Detecting implicit collaboration patterns\",\n        \"The State of the Art on Design Patterns: A systematic mapping of the literature\",\n        \"Design Pattern Detection Using a DSL-driven Graph Matching Approach\",\n        \"Dpjf - design pattern detection with high accuracy\",\n        \"A Metrics Suite for Object Oriented Design\",\n        \"Source code and design conformance, design pattern detection from source code by classification approach\",\n        \"A (sub)graph isomorphism algorithm for matching large graphs\",\n        \"Design Pattern Detection Using FINDER\",\n        \"A Rule-based Procedure for Automatic Recognition of Design Patterns in UML Diagrams\",\n        \"A Matrix-Based Approach to Recovering Design Patterns\",\n        \"Software design pattern mining using classification-based techniques\",\n        \"The role of trust in automation reliance\",\n        \"Introduction to Evolutionary Computing, 2nd Edition\",\n        \"Design pattern mining enhanced by machine learning\",\n        \"DPB: A Benchmark for Design Pattern Detection Tools\",\n        \"Using Design Pattern Clues to Improve the Precision of Design Pattern Detection Tools\",\n        \"Design Patterns: Elements of Reusable Object-oriented Software\",\n        \"Micro Patterns in Java Code\",\n        \"Rule-Based Expert Systems\",\n        \"P-mart: Pattern-like micro architecture repository\",\n        \"DeMIMA: A multilayered approach for design pattern identification\",\n        \"Improving Design-pattern Identification: A New Approach and an Exploratory Study\",\n        \"Fingerprinting design patterns\",\n        \"A new fast associative classification algorithm for detecting phishing websites\",\n        \"Design pattern detection by using meta patterns\",\n        \"Machine learning: a review of classification and combining techniques\",\n        \"Genetic Programming: On the Programming of Computers by Means of Natural Selection\",\n        \"Design Recovery by Automated Search for Structural Design Patterns in Object-Oriented Software\",\n        \"CMAR: Accurate and Efficient Classification Based on Multiple Class-Association Rules\",\n        \"Integrating classification and association rule mining\",\n        \"Design pattern recovery through visual language parsing and source code analysis\",\n        \"Detecting the Behavior of Design Patterns Through Model Checking and Dynamic Analysis\",\n        \"Design and Behavior Study of a Grammar-guided Genetic Programming Algorithm for Mining Association Rules\",\n        \"Design pattern detection based on the graph theory\",\n        \"Balancing the trade-off between accuracy and interpretability in software defect prediction\",\n        \"Identification of Behavioural and Creational Design Motifs Through Dynamic Analysis\",\n        \"Towards Pattern-based Design Recovery\",\n        \"Formal Concept Analysis in Knowledge Processing: A Survey on Applications\",\n        \"Design patterns for object-oriented software development (tutorial)\",\n        \"The Adoption of Machine Learning Techniques for Software Defect Prediction: An Initial Industrial Validation\",\n        \"Flexible Design Pattern Detection Based on Feature Types\",\n        \"Design Pattern Recovery Based on Annotations\",\n        \"Reverse Engineering of Design Patterns from Java Source Code\",\n        \"Elemental Design Patterns, 1st Edition\",\n        \"A Review of Associative Classification Mining\",\n        \"Feature Maps: A Comprehensible Software Representation for Design Pattern Detection\",\n        \"Inference of Object-oriented Design Patterns\",\n        \"Design Pattern Detection Using Similarity Scoring\",\n        \"Design pattern detection using software metrics and machine learning\",\n        \"JCLEC: a java framework for evolutionary computation\",\n        \"Pattern Detection in Object-Oriented Source Code\",\n        \"Accurate Design Pattern Detection Based on Idiomatic Implementation Matching in Java Language Context\",\n        \"CPAR: Classification Based on Predictive Association Rules\",\n        \"Efficiently detecting structural design pattern instances based on ordered sequences\",\n        \"A comprehensive approach to the recovery of design pattern instances based on sub-patterns and method signatures\",\n        \"On applying machine learning techniques for design pattern detection\"\n    ],\n    \"reasoning\": \"Selected these 60 references because they represent foundational work and recent advances in GEML: A Grammar-based Evolutionary Machine Learning Approach for Design-Pattern Detection, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}