{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 48 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Graph Construction using Principal Axis Trees for Simple Graph Convolution\n\nPaper Abstract: Abstract Graph Neural Networks (GNNs) are increasingly becoming the favorite method for graph learning. They exploit the semi-supervised nature of deep learning, and they bypass computational bottlenecks associated with traditional graph learning methods. In addition to the feature matrix XùëãX, GNNs need an adjacency matrix Aùê¥A to perform feature propagation. In many cases, the adjacency matrix Aùê¥A is missing. We introduce a graph construction scheme that constructs the adjacency matrix Aùê¥A using unsupervised and supervised information. Unsupervised information characterizes the neighborhood around points. We used Principal Axis trees (PA-trees) as a source for unsupervised information, where we create edges between points falling onto the same leaf node. For supervised information, we used the concept of penalty and intrinsic graphs. A penalty graph connects points with different class labels, whereas an intrinsic graph connects points with the same class labels. We used the penalty and intrinsic graphs to remove or add edges to the graph constructed via PA-tree. We tested this graph construction scheme on two well-known GNNs: 1) Graph Convolutional Network (GCN) and 2) Simple Graph Convolution (SGC). The experiments show that it is better to use SGC because it is faster and delivers better or the same results as GCN. We also test the effect of oversmoothing on both GCN and SGC. We found out that the level of smoothing has to be carefully selected for SGC to avoid oversmoothing.\n\n{retrieved_text}\n\nGenerate exactly 48 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 48\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Spectral networks and locally connected networks on graphs\",\n        \"API design for machine learning software: experiences from the scikit-learn project\",\n        \"Dual low-rank graph autoencoder for semantic and topological networks\",\n        \"Adversarial attack on graph structured data\",\n        \"Random projection trees and low dimensional manifolds\",\n        \"Randomized partition trees for nearest neighbor search\",\n        \"Convolutional neural networks on graphs with fast localized spectral filtering\",\n        \"UCI machine learning repository\",\n        \"Fast graph representation learning with pytorch geometric\",\n        \"Learning discrete structures for graph neural networks\",\n        \"K-means properties on six clustering benchmark datasets\",\n        \"Wavelets on graphs via spectral graph theory\",\n        \"Pattern classification\",\n        \"Deep convolutional networks on graph-structured data\",\n        \"Data-aware relation learning-based graph convolution neural network for facial action unit recognition\",\n        \"Graph structure learning for robust graph neural networks\",\n        \"Random projection-based auxiliary information can improve tree-based nearest neighbor search\",\n        \"Variational graph auto-encoders\",\n        \"Semi-supervised classification with graph convolutional networks\",\n        \"A dependency syntactic knowledge augmented interactive architecture for end-to-end aspect-based sentiment analysis\",\n        \"Is homophily a necessity for graph neural networks?\",\n        \"A fast nearest-neighbor algorithm based on a principal axis search tree\",\n        \"On spectral clustering: Analysis and an algorithm\",\n        \"Scikit-learn: Machine learning in Python\",\n        \"Convolutional attention neural network over graph structures for improving the performance of aspect-level sentiment analysis\",\n        \"Deep face clustering using residual graph convolutional network\",\n        \"Which space partitioning tree to use for search?\",\n        \"Spectralnet: Spectral clustering using deep neural networks\",\n        \"Normalized cuts and image segmentation\",\n        \"The emerging field of signal processing on graphs: Extending high-dimensional data analysis to networks and other irregular domains\",\n        \"Refinements to nearest-neighbor searching in k-dimensional trees\",\n        \"A tutorial on spectral clustering\",\n        \"Dc2: A divide-and-conquer algorithm for large-scale kernel learning with application to clustering\",\n        \"Segmentation using eigenvectors: a unifying view\",\n        \"Simplifying graph convolutional networks\",\n        \"Robust tensor graph convolutional networks via t-svd based graph augmentation\",\n        \"A comprehensive survey on graph neural networks\",\n        \"K-nearest neighbor search by random projection forests\",\n        \"Similarity kernel and clustering via random projection forests\",\n        \"Graph embedding and extensions: A general framework for dimensionality reduction\",\n        \"Revisiting over-smoothing in deep GCNs\",\n        \"Revisiting semi-supervised learning with graph embeddings\",\n        \"Coupled layer-wise graph convolution for transportation demand prediction\",\n        \"Self-tuning spectral clustering\",\n        \"Graph fusion network for multi-oriented object detection\",\n        \"Pairnorm: Tackling oversmoothing in GNNs\",\n        \"Contrastive graph convolutional networks with generative adjacency matrix\",\n        \"SK-GCN: Modeling syntax and knowledge via graph convolutional network for aspect-level sentiment classification\"\n    ],\n    \"reasoning\": \"Selected these 48 references because they represent foundational work and recent advances in Graph Construction using Principal Axis Trees for Simple Graph Convolution, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}