{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 58 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: deGraphCS: Embedding Variable-based Flow Graph for Neural Code Search\n\nPaper Abstract: Abstract With the rapid increase in the amount of public code repositories, developers maintain a great desire to retrieve precise code snippets by using natural language. Despite existing deep learning based approaches (e.g., DeepCS and MMAN) have provided the end-to-end solutions (i.e., accepts natural language as queries and shows related code fragments retrieved directly from code corpus), the accuracy of code search in the large-scale repositories is still limited by the code representation (e.g., AST) and modeling (e.g., directly fusing the features in the attention stage). In this paper, we propose a novel learnable deep Graph for Code Search (called deGraphCS), to transfer source code into variable-based flow graphs based on the intermediate representation technique, which can model code semantics more precisely compared to process the code as text directly or use the syntactic tree representation. Furthermore, we propose a well-designed graph optimization mechanism to refine the code representation, and apply an improved gated graph neural network to model variable-based flow graphs. To evaluate the effectiveness of deGraphCS, we collect a large-scale dataset from GitHub containing 41,152 code snippets written in C language, and reproduce several typical deep code search methods for comparison. Besides, we design a qualitative user study to verify the practical value of our approach. The experimental results have shown that deGraphCS can achieve state-of-the-art performances, and accurately retrieve code snippets satisfying the needs of the users.\n\n{retrieved_text}\n\nGenerate exactly 58 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 58\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"A neural framework for retrieval and summarization of source code\",\n        \"Deep code search\",\n        \"When deep learning met code search\",\n        \"Improving code search with co-attentive representation learning\",\n        \"Multi-modal attention network learning for semantic source code retrieval\",\n        \"Example-centric programming: integrating web search into the development environment\",\n        \"Nlp2code: Code snippet content assist via natural language tasks\",\n        \"Searching connected api subgraph via text phrases\",\n        \"The end-to-end use of source code examples: An exploratory study\",\n        \"Spotting working code examples\",\n        \"Relationship-aware code search for javascript frameworks\",\n        \"Codehow: Effective code search based on api understanding and extended boolean model (e)\",\n        \"Exemplar: A source code search engine for finding highly relevant applications\",\n        \"Portfolio: finding relevant functions and their usage\",\n        \"Llvm: A compilation framework for lifelong program analysis & transformation\",\n        \"Neural code comprehension: A learnable representation of code semantics\",\n        \"Improved semantic representations from tree-structured long short-term memory networks\",\n        \"Gated graph sequence neural networks\",\n        \"Efficiently computing static single assignment form and the control dependence graph\",\n        \"Empirical evaluation of gated recurrent neural networks on sequence modeling\",\n        \"Long short-term memory\",\n        \"Neural machine translation by jointly learning to align and translate\",\n        \"Codesearchnet challenge: Evaluating the state of semantic code search\",\n        \"Deep code comment generation\",\n        \"Retrieval on source code: a neural code search\",\n        \"Fixing weight decay regularization in adam\",\n        \"Soot\",\n        \"Sourcerer: a search engine for open source code supporting structure-based search\",\n        \"Semantics-based code search\",\n        \"Finding suitable programs: Semantic search with incomplete and lightweight specifications\",\n        \"Active code search: incorporating user feedback to improve code search relevance\",\n        \"A test-driven approach to code search and its application to the reuse of auxiliary functionality\",\n        \"Codegenie: : a tool for test-driven source code search\",\n        \"Automatic query reformulations for text retrieval in software engineering\",\n        \"Improving source code search with natural language phrasal representations of method signatures\",\n        \"Nl-based query refinement and contextualized code search results: A user study\",\n        \"Query expansion via wordnet for effective code search\",\n        \"Learning effective query transformations for enhanced requirements trace retrieval\",\n        \"Thesaurus-based automatic query expansion for interface-driven code search\",\n        \"Path-based function embedding and its application to specification mining\",\n        \"Deep api learning\",\n        \"Code vectors: understanding programs through embedded abstracted symbolic traces\",\n        \"Api method recommendation without worrying about the task-api knowledge gap\",\n        \"How to create natural language semantic search for arbitrary objects with deep learning\",\n        \"Towards natural language semantic code search\",\n        \"Deep learning code fragments for code clone detection\",\n        \"Improving automatic source code summarization via deep reinforcement learning\",\n        \"Convolutional neural networks over tree structures for programming language processing\",\n        \"Learning program embeddings to propagate feedback on student code\",\n        \"A deep language model for software code\",\n        \"Supervised deep features for software functional clone detection by exploiting lexical and syntactical information in source code\",\n        \"Code completion with statistical language models\",\n        \"Deep learning similarities from different representations of source code\",\n        \"Code relatives: Detecting similarly behaving software\",\n        \"Tree-to-tree neural networks for program translation\",\n        \"Detection of similar functions through the use of dominator information\",\n        \"Improving syntactical clone detection methods through the use of an intermediate representation\",\n        \"Biker: A tool for bi-information source based api method recommendation\"\n    ],\n    \"reasoning\": \"Selected these 58 references because they represent foundational work and recent advances in deGraphCS: Embedding Variable-based Flow Graph for Neural Code Search, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}