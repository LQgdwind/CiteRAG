{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 50 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Discovering Reinforcement Learning Algorithms\n\nPaper Abstract: Abstract Reinforcement learning (RL) algorithms update an agent’s parameters according to one of several possible rules, discovered manually through years of research. Automating the discovery of update rules from data could lead to more efficient algorithms, or algorithms that are better adapted to specific environments. Although there have been prior attempts at addressing this significant scientific challenge, it remains an open question whether it is feasible to discover alternatives to fundamental concepts of RL such as value functions and temporal-difference learning. This paper introduces a new meta-learning approach that discovers an entire update rule which includes both ‘what to predict’ (e.g. value functions) and ‘how to learn from it’ (e.g. bootstrapping) by interacting with a set of environments. The output of this method is an RL algorithm that we call Learned Policy Gradient (LPG). Empirical results show that our method discovers its own alternative to the concept of value functions. Furthermore it discovers a bootstrapping mechanism to maintain and use its predictions. Surprisingly, when trained solely on toy environments, LPG generalises effectively to complex Atari games and achieves non-trivial performance. This shows the potential to discover general RL algorithms from data.\n\n{retrieved_text}\n\nGenerate exactly 50 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 50\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Meta-learning curiosity algorithms\",\n        \"A distributional perspective on reinforcement learning\",\n        \"The arcade learning environment: An evaluation platform for general agents\",\n        \"Learning a synaptic learning rule\",\n        \"JAX: composable transformations of Python+NumPy programs,\",\n        \"RLax: Reinforcement Learning in JAX\",\n        \"Meta-learning via learned loss\",\n        \"Ai-gas: Ai-generating algorithms, an alternate paradigm for producing general artificial intelligence\",\n        \"Distributional reinforcement learning with quantile regression\",\n        \"RL2: Fast reinforcement learning via slow reinforcement learning\",\n        \"Impala: Scalable distributed deep-rl with importance weighted actor-learner architectures\",\n        \"Model-agnostic meta-learning for fast adaptation of deep networks\",\n        \"Meta-learning and universality: Deep representations and gradient descent can approximate any learning algorithm\",\n        \"Meta-learning with warped gradient descent\",\n        \"Finding online neural update rules by learning to remember\",\n        \"A neuroevolution approach to general atari game playing\",\n        \"Haiku: Sonnet for JAX\",\n        \"Optax: composable gradient transformation and optimisation, in jax!\",\n        \"Rainbow: Combining improvements in deep reinforcement learning\",\n        \"Long short-term memory\",\n        \"Evolved policy gradients\",\n        \"In-datacenter performance analysis of a tensor processing unit\",\n        \"Improving generalization in meta reinforcement learning using learned objectives\",\n        \"Continuous control with deep reinforcement learning\",\n        \"Policy search in a space of simple closed-form formulas: towards interpretability of reinforcement learning\",\n        \"Automatic discovery of ranking formulas for playing with multi-armed bandits\",\n        \"Differentiable plasticity: training plastic neural networks with backpropagation\",\n        \"Backpropamine: training self-modifying neural networks with differentiable neuromodulated plasticity\",\n        \"Asynchronous methods for deep reinforcement learning\",\n        \"Human-level control through deep reinforcement learning\",\n        \"On first-order meta-learning algorithms\",\n        \"Behaviour suite for reinforcement learning\",\n        \"Badger: Learning to (learn [learning algorithms] through multi-agent communication)\",\n        \"Meta-learning with memory-augmented neural networks\",\n        \"Evolutionary principles in self-referential learning\",\n        \"A ‘self-referential’weight matrix\",\n        \"Deterministic policy gradient algorithms\",\n        \"Adapting bias by gradient descent: An incremental version of delta-bar-delta\",\n        \"Reinforcement learning: An introduction\",\n        \"Learning one more thing\",\n        \"Discovery of useful questions as auxiliary tasks\",\n        \"Matching networks for one shot learning\",\n        \"Learning to reinforcement learn\",\n        \"Beyond exponentially discounted sum: Automatic learning of return function\",\n        \"Meta-gradient reinforcement learning with an objective discovered online\",\n        \"Meta-gradient reinforcement learning\",\n        \"A self-tuning actor-critic algorithm\",\n        \"What can learned intrinsic rewards capture?\",\n        \"On learning intrinsic rewards for policy gradient methods\",\n        \"Online meta-critic learning for off-policy actor-critic methods\"\n    ],\n    \"reasoning\": \"Selected these 50 references because they represent foundational work and recent advances in Discovering Reinforcement Learning Algorithms, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}