{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 49 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: TextConvoNet: A Convolutional Neural Network based Architecture for Text Classification\n\nPaper Abstract: Abstract In recent years, deep learning-based models have significantly improved the Natural Language Processing (NLP) tasks. Specifically, the Convolutional Neural Network (CNN), initially used for computer vision, has shown remarkable performance for text data in various NLP problems. Most of the existing CNN-based models use 1-dimensional convolving filters (n-gram detectors), where each filter specialises in extracting n-grams features of a particular input word embedding. The input word embeddings, also called sentence matrix, is treated as a matrix where each row is a word vector. Thus, it allows the model to apply one-dimensional convolution and only extract n-gram based features from a sentence matrix. These features can be termed as intra-sentence n-gram features. To the extent of our knowledge, all the existing CNN models are based on the aforementioned concept. In this paper, we present a CNN-based architecture TextConvoNet that not only extracts the intra-sentence n-gram features but also captures the inter-sentence n-gram features in input text data. It uses an alternative approach for input matrix representation and applies a two-dimensional multi-scale convolutional operation on the input. To evaluate the performance of TextConvoNet, we perform an experimental study on five text classification datasets. The results are evaluated by using various performance metrics. The experimental results show that the presented TextConvoNet outperforms state-of-the-art machine learning and deep learning models for text classification purposes.\n\n{retrieved_text}\n\nGenerate exactly 49 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 49\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Natural language processing: a historical review\",\n        \"Text classification algorithms: A survey\",\n        \"Deep learning based text classification: A comprehensive review\",\n        \"Baselines and bigrams: Simple, good sentiment and topic classification\",\n        \"Toward a better performance evaluation framework for fake news classification\",\n        \"Owi: Open-world intent identification framework for dialog based system\",\n        \"Drifted twitter spam classification using multiscale detection test on kl divergence\",\n        \"Feature engineering for text classification\",\n        \"Integrating associative rule-based classification with naïve bayes for text classification\",\n        \"Text categorization with support vector machines: Learning with many relevant features\",\n        \"Text classification using machine learning techniques.\",\n        \"The influence of preprocessing on text classification using a bag-of-words representation\",\n        \"A comparison of event models for naive bayes text classification\",\n        \"Combining knowledge with deep convolutional neural networks for short text classification.\",\n        \"A c-lstm neural network for text classification\",\n        \"Rethinking complex neural network architectures for document classification\",\n        \"Sgm: sequence generation model for multi-label classification\",\n        \"Squeezed very deep convolutional neural networks for text classification\",\n        \"Multichannel cnn with attention for text classification\",\n        \"Deep learning–based text classification: A comprehensive review\",\n        \"Attention-based bidirectional long short-term memory networks for relation classification\",\n        \"Hierarchical attention networks for document classification\",\n        \"Attention-based lstm for aspect-level sentiment classification\",\n        \"A convolutional neural network for modelling sentences\",\n        \"Convolutional neural networks for sentence classification\",\n        \"Deep learning for extreme multi-label text classification\",\n        \"Effective use of word order for text categorization with convolutional neural networks\",\n        \"Deep pyramid convolutional neural networks for text categorization\",\n        \"Very deep convolutional networks for large-scale image recognition\",\n        \"Deep residual learning for image recognition\",\n        \"Very deep convolutional networks for text classification\",\n        \"Do convolutional networks need to be deep for text classification?\",\n        \"Densely connected convolutional networks\",\n        \"Understanding convolutional neural networks for text classification\",\n        \"A clinical text classification paradigm using weak supervision and deep representation\",\n        \"Sentiment classification using convolutional neural networks\",\n        \"Document-level text classification using single-layer multisize filters convolutional neural network\",\n        \"Image-based text classification using 2d convolutional neural networks\",\n        \"What does effect size tell you\",\n        \"Naive bayes classifiers\",\n        \"A survey of decision tree classifier methodology\",\n        \"Classification and regression by randomforest\",\n        \"A fast iterative nearest point algorithm for support vector machine classifier design\",\n        \"Greedy function approximation: a gradient boosting machine\",\n        \"Learning k for knn classification\",\n        \"Xgboost: extreme gradient boosting\",\n        \"Long short-term memory\",\n        \"Bert: Pre-training of deep bidirectional transformers for language understanding\",\n        \"Few-shot learning for short text classification\"\n    ],\n    \"reasoning\": \"Selected these 49 references because they represent foundational work and recent advances in TextConvoNet: A Convolutional Neural Network based Architecture for Text Classification, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}