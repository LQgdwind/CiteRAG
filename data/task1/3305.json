{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 55 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Revizor: Testing Black-Box CPUs against Speculation Contracts\n\nPaper Abstract: Abstract. Speculative vulnerabilities such as Spectre and Meltdown expose speculative execution state that can be exploited to leak information across security domains via side-channels. Such vulnerabilities often stay undetected for a long time as we lack the tools for systematic testing of CPUs to find them. In this paper, we propose an approach to automatically detect microarchitectural information leakage in commercial black-box CPUs. We build on speculation contracts, which we employ to specify the permitted side effects of program execution on the CPU’s microarchitectural state. We propose a Model-based Relational Testing (MRT) technique to empirically assess the CPU compliance with these specifications. We implement MRT in a testing framework called Revizor, and showcase its effectiveness on real Intel x86 CPUs. Revizor automatically detects violations of a rich set of contracts, or indicates their absence. A highlight of our findings is that Revizor managed to automatically surface Spectre, MDS, and LVI, as well as several previously unknown variants.\n\n{retrieved_text}\n\nGenerate exactly 55 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 55\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"uops.info: Characterizing latency, throughput, and port usage of instructions on Intel microarchitectures\",\n        \"nanoBench: A low-overhead tool for running microbenchmarks on x86 systems\",\n        \"A formal hierarchy of weak memory models\",\n        \"ISA Semantics for ARMv8-a, RISC-V, and CHERI-MIPS\",\n        \"Automatic discovery and quantification of information leaks\",\n        \"Secure information flow by self-composition\",\n        \"Fallout: Leaking Data on Meltdown-resistant CPUs\",\n        \"Constant-Time Foundations for the New Spectre Era\",\n        \"SoK: Practical Foundations for Spectre Defenses\",\n        \"Hyperproperties\",\n        \"Formal Specification of the x86 Instruction Set Architecture\",\n        \"Processor Hardware Security Vulnerabilities and their Detection by Unique Program Execution Checking\",\n        \"Engineering a Formal, Executable x86 ISA Simulator for Software Verification\",\n        \"Speculative Execution, Variant 4: Speculative Store Bypass\",\n        \"ABSynthe: Automatic Blackbox Side-channel Synthesis on Commodity Microarchitectures\",\n        \"Cache Template Attacks: Automating Attacks on Inclusive Last-Level Caches\",\n        \"SPECTECTOR: Principled Detection of Speculative Information Flows\",\n        \"Hardware-Software Contracts for Secure Speculation\",\n        \"ct-fuzz: Fuzzing for Timing Leaks\",\n        \"Testing noninterference, quickly\",\n        \"Intel® 64 and IA-32 Architectures Software Developer’s Manual\",\n        \"Speculative Buffer Overflows: Attacks and Defenses\",\n        \"Spectre Attacks: Exploiting Speculative Execution\",\n        \"Spectre Returns! Speculation Attacks using the Return Stack Buffer\",\n        \"RFUZZ: Coverage-directed fuzz testing of RTL on FPGAs\",\n        \"Meltdown: Reading Kernel Memory from User Space\",\n        \"ret2spec: Speculative Execution Using Return Stack Buffers\",\n        \"Medusa: Microarchitectural Data Leakage via Automated Attack Synthesis Background Superscalar Memory Architecture\",\n        \"Power and Thermal Management in the Intel Core Duo Processor\",\n        \"Validation of Abstract Side-Channel Models for Computer Architectures\",\n        \"Speculative Leakage in ARM Cortex-A53\",\n        \"SpecFuzz: Bringing Spectre-type vulnerabilities to the surface\",\n        \"Cache Attacks and Countermeasures: The Case of AES\",\n        \"Unicorn: Next generation CPU emulator framework\",\n        \"Rage against the machine clear: A systematic analysis of machine clears and their implications for transient execution attacks\",\n        \"CrossTalk: Speculative Data Leaks Across Cores Are Real\",\n        \"Opening Pandora’s Box: A Systematic Study of New Ways Microarchitecture Can Leak Private Data\",\n        \"Mechanism for saving and retrieving micro-architecture context\",\n        \"Language-based information-flow security\",\n        \"ZombieLoad : Cross-Privilege-Boundary Data Sampling\",\n        \"CheckMate: Automated Exploit Program Generation for Hardware Security Verification\",\n        \"Efficient Cache Attacks on AES, and Countermeasures\",\n        \"LVI: Hijacking Transient Execution through Microarchitectural Load Value Injection\",\n        \"RIDL: Rogue In-flight Data Load\",\n        \"Automatically Eliminating Speculative Leaks from Cryptographic Code with Blade\",\n        \"KLEESpectre: Detecting information leakage through speculative cache attacks via symbolic execution\",\n        \"oo7: Low-overhead Defense against Spectre Attacks\",\n        \"Osiris: Automated Discovery of Microarchitectural Side Channels\",\n        \"NDA: Preventing Speculative Execution Attacks at Their Source\",\n        \"TestRIG: Framework for testing RISC-V processors with Random Instruction Generation\",\n        \"SpeechMiner: A Framework for Investigating and Measuring Speculative Execution Vulnerabilities\",\n        \"Flush+Reload: A High Resolution, Low Noise, L3 Cache Side-channel Attack\",\n        \"Speculative Taint Tracking (STT): A Comprehensive Protection for Speculatively Accessed Data\",\n        \"A hardware design language for timing-sensitive information-flow security\",\n        \"End-to-End Automated Exploit Generation for Validating the Security of Processor Designs\"\n    ],\n    \"reasoning\": \"Selected these 55 references because they represent foundational work and recent advances in Revizor: Testing Black-Box CPUs against Speculation Contracts, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}