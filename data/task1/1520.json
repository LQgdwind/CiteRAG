{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 54 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Sequential composition of propositional logic programs\n\nPaper Abstract: Abstract. This paper introduces and studies the sequential composition and decomposition of propositional logic programs. We show that acyclic programs can be decomposed into single-rule programs and provide a general decomposition result for arbitrary programs. We show that the immediate consequence operator of a program can be represented via composition which allows us to compute its least model without any explicit reference to operators. This bridges the conceptual gap between the syntax and semantics of a propositional logic program in a mathematically satisfactory way.\n\n{retrieved_text}\n\nGenerate exactly 54 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 54\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Algebraic characterizations of least model and uniform equivalence of propositional Krom logic programs.\",\n        \"Logic program proportions.\",\n        \"On syntactically similar logic programs and sequential decompositions.\",\n        \"Sequential composition of answer set programs.\",\n        \"Logic programming.\",\n        \"From Logic Programming to Prolog.\",\n        \"Acyclic programs.\",\n        \"Knowledge Representation, Reasoning and Declarative Problem Solving.\",\n        \"Semiring-based constraint logic programming‚Äîsyntax and semantics.\",\n        \"Differential logic programs: Programming methodologies and semantics.\",\n        \"Answer set programming at a glance.\",\n        \"Compositional model-theoretic semantics for logic programs.\",\n        \"Meta for modularising logic programming.\",\n        \"Modular logic programming.\",\n        \"Fully abstract compositional semantics for an algebra of logic programs.\",\n        \"Modularity in logic programming.\",\n        \"What you always wanted to know about datalog (and never dared to ask).\",\n        \"Logic Programming and Databases.\",\n        \"HiLog: A foundation for higher-order logic programming.\",\n        \"Negation as failure.\",\n        \"Prolog by Example. How to Learn, Teach, and Use It.\",\n        \"Modular nonmonotonic logic programming revisited.\",\n        \"A general theory of confluent rewriting systems for logic programming and its applications.\",\n        \"On the decomposition of datalog program mappings.\",\n        \"On decompositions of chain datalog programs into ùí´ùí´\\\\mathcal{P} (left-)linear 1-rule components.\",\n        \"Disjunctive datalog.\",\n        \"Answer set programming: a primer.\",\n        \"Combining answer set programming with description logics for the Semantic Web.\",\n        \"A uniform integration of higher-order reasoning and external evaluations in answer-set programming.\",\n        \"Recursive aggregates in disjunctive logic programs: semantics and complexity.\",\n        \"Fully abstract institute of mathematics fully abstract compositional semantics for logic programs.\",\n        \"Classical negation in logic programs and disjunctive databases.\",\n        \"The G√∂del Programming Language.\",\n        \"Logical features of Horn clauses.\",\n        \"Fundamentals of Semigroup Theory.\",\n        \"Towards an algebraic theory of recursion.\",\n        \"Logic for Problem Solving.\",\n        \"The decision problem for a class of first-order formulas in which all disjunctions are binary.\",\n        \"Higher Operads, Higher Categories, Vol. 298 of London Mathematical Society Lecture Note Series.\",\n        \"Answer Set Programming.\",\n        \"Foundations of Logic Programming (2 edition).\",\n        \"Equivalences of logic programs.\",\n        \"Why Horn formulas matter in computer science: initial structures and generic examples.\",\n        \"An algebra of logic programs.\",\n        \"Programming with Higher-Order Logic.\",\n        \"Modular Answer Set Programming.\",\n        \"Modular equivalence for normal logic programs.\",\n        \"Towards an algebra for constructing logic programs.\",\n        \"Semantics of Logic Programs with Aggregates.\",\n        \"Prolog and Natural-Language Analysis.\",\n        \"Semigroup techniques in recursive query optimization.\",\n        \"Semigroups and Transitive Closure in Deductive Databases.\",\n        \"The Art of Prolog: Advanced Programming Techniques (2 edition).\",\n        \"The semantics of predicate logic as a programming language.\"\n    ],\n    \"reasoning\": \"Selected these 54 references because they represent foundational work and recent advances in Sequential composition of propositional logic programs, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}