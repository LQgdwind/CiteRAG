{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 56 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Scrooge: A Fast and Memory-Frugal Genomic Sequence Aligner for CPUs, GPUs, and ASICs\n\nPaper Abstract: Abstract Pairwise sequence alignment is a very time-consuming step in common bioinformatics pipelines. Speeding up this step requires heuristics, efficient implementations, and/or hardware acceleration. A promising candidate for all of the above is the recently proposed GenASM algorithm. We identify and address three inefficiencies in the GenASM algorithm: it has a high amount of data movement, a large memory footprint, and does some unnecessary work. We propose Scrooge, a fast and memory-frugal genomic sequence aligner. Scrooge includes three novel algorithmic improvements which reduce the data movement, memory footprint, and the number of operations in the GenASM algorithm. We provide efficient open-source implementations of the Scrooge algorithm for CPUs and GPUs, which demonstrate the significant benefits of our algorithmic improvements. For long reads, the CPU version of Scrooge achieves a 20.1×\\times, 1.7×\\times, and 2.1×\\times speedup over KSW2, Edlib, and a CPU implementation of GenASM, respectively. The GPU version of Scrooge achieves a 4.0×\\times 80.4×\\times, 6.8×\\times, 12.6×\\times and 5.9×\\times speedup over the CPU version of Scrooge, KSW2, Edlib, Darwin-GPU, and a GPU implementation of GenASM, respectively. We estimate an ASIC implementation of Scrooge to use 3.6×\\times less chip area and 2.1×\\times less power than a GenASM ASIC while maintaining the same throughput. Further, we systematically analyze the throughput and accuracy behavior of GenASM and Scrooge under various configurations. As the best configuration of Scrooge depends on the computing platform, we make several observations that can help guide future implementations of Scrooge. Availability: https://github.com/CMU-SAFARI/Scrooge\n\n{retrieved_text}\n\nGenerate exactly 56 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 56\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"From Molecules to Genomic Variations: Accelerating Genome Analysis via Intelligent Algorithms and Architectures\",\n        \"Accelerating Genome Analysis: A Primer on an Ongoing Journey\",\n        \"Comparison of the Two Major Classes of Assembly Algorithms: Overlap–Layout–Consensus and De-bruijn-Graph\",\n        \"Binary Codes Capable of Correcting Deletions, Insertions, and Reversals\",\n        \"Identification of Common Molecular Subsequences\",\n        \"An Improved Algorithm for Matching Biological Sequences\",\n        \"Technology Dictates Algorithms: Recent Developments in Read Alignment\",\n        \"Edit Distance Cannot Be Computed in Strongly Subquadratic Time (Unless SETH is False)\",\n        \"On the Complexity of k-SAT\",\n        \"Accelerating Read Mapping with FastHASH\",\n        \"Shifted Hamming Distance: A Fast and Accurate SIMD-Friendly Filter to Accelerate Alignment Verification in Read Mapping\",\n        \"Shouji: A Fast and Efficient Pre-alignment Filter for Sequence Alignment\",\n        \"SneakySnake: A Fast and Accurate Universal Genome Pre-Alignment Filter for CPUs, GPUs and FPGAs\",\n        \"FPGA-Based Near-Memory Acceleration of Modern Data-Intensive Applications\",\n        \"GenStore: A High-Performance In-Storage Processing System for Genome Sequence Analysis\",\n        \"Edlib: A C/C++ Library for Fast, Exact Sequence Alignment Using Edit Distance\",\n        \"Introducing Difference Recurrence Relations for Faster Semi-Global Alignment of Long Sequences\",\n        \"Minimap2: Pairwise Alignment for Nucleotide Sequences\",\n        \"Fast Gap-Affine Pairwise Alignment Using the Wavefront Algorithm\",\n        \"GASAL2: A GPU Accelerated Sequence Alignment Library for High-Throughput NGS Data\",\n        \"GPU Acceleration of Darwin Read Overlapper for de novo Assembly of Long DNA Reads\",\n        \"CUDAlign 4.0: Incremental Speculative Traceback for Exact Chromosome-Wide Alignment in GPU Clusters\",\n        \"CUDASW++ 3.0: Accelerating Smith-Waterman Protein Database Search by Coupling CPU and GPU SIMD Instructions\",\n        \"ADEPT: A Domain Independent Sequence Alignment Strategy for GPU Architectures\",\n        \"FPGASW: Accelerating Large-Scale Smith–Waterman Sequence Alignment Application With Backtracking on FPGA Linear Systolic Array\",\n        \"Using FPGAs to Accelerate Myers Bit-Vector Algorithm\",\n        \"A Highly Parameterized and Efficient FPGA-Based Skeleton for Pairwise Biological Sequence Alignment\",\n        \"Darwin: A Genomics Co-processor Provides up to 15,000x Acceleration on Long Read Assembly\",\n        \"Darwin-WGA: A Co-processor Provides Increased Sensitivity in Whole Genome Alignments With High Speedup\",\n        \"GenAx: A Genome Sequencing Accelerator\",\n        \"SeedEx: A Genome Sequencing Accelerator for Optimal Alignments in Subminimal Space\",\n        \"GenASM: A High-Performance, Low-Power Approximate String Matching Acceleration Framework for Genome Sequence Analysis\",\n        \"SeGraM: A Universal Hardware Accelerator for Genomic Sequence-to-Graph and Sequence-to-Sequence Mapping\",\n        \"A Christmas Carol\",\n        \"Fast Text Searching: Allowing Errors\",\n        \"A New Approach to Text Searching\",\n        \"Algorithms for Approximate String Matching\",\n        \"Google Workloads for Consumer Devices: Mitigating Data Movement Bottlenecks\",\n        \"Google Neural Network Models for Edge Devices: Analyzing and Mitigating Machine Learning Inference Bottlenecks\",\n        \"Roofline: An Insightful Visual Performance Model for Multicore Architectures\",\n        \"Applying the Roofline Model\",\n        \"Intel Xeon Gold 5118 Datasheet\",\n        \"NVIDIA RTX A6000 Datasheet\",\n        \"CUDA Programming Guide Release 12.0\",\n        \"NVIDIA Tesla: A Unified Graphics and Computing Architecture\",\n        \"CUDA GPUs\",\n        \"Improving the Time and Space Complexity of the WFA Algorithm and Generalizing Its Scoring\",\n        \"A Fast Bit-Vector Algorithm for Approximate String Matching Based on Dynamic Programming\",\n        \"Medaka\",\n        \"Dysgu: Efficient Structural Variant Calling Using Short Or Long Reads\",\n        \"PBSIM2: A Simulator for Long-Read Sequencers With a Novel Generative Model of Quality Scores\",\n        \"Hyper-Threading Technology Architecture and Microarchitecture\",\n        \"Lists of Instruction Latencies, Throughputs and Micro-Operation Breakdowns for Intel, AMD, and VIA CPUs\",\n        \"CACTI 7: New Tools for Interconnect Exploration in Innovative Off-Chip Memories\",\n        \"NVBIO\",\n        \"A Bit-Vector Algorithm for Computing Levenshtein and Damerau Edit Distances\"\n    ],\n    \"reasoning\": \"Selected these 56 references because they represent foundational work and recent advances in Scrooge: A Fast and Memory-Frugal Genomic Sequence Aligner for CPUs, GPUs, and ASICs, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}