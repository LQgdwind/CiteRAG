{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 51 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Guiding Word Equation Solving using Graph Neural Networks (Extended Technical Report)\n\nPaper Abstract: Abstract This paper proposes a Graph Neural Network-guided algorithm for solving word equations, based on the well-known Nielsen transformation for splitting equations. The algorithm iteratively rewrites the first terms of each side of an equation, giving rise to a tree-like search space. The choice of path at each split point of the tree significantly impacts solving time, motivating the use of Graph Neural Networks (GNNs) for efficient split decision-making. Split decisions are encoded as multi-classification tasks, and five graph representations of word equations are introduced to encode their structural information for GNNs. The algorithm is implemented as a solver named DragonLi. Experiments are conducted on artificial and real-world benchmarks. The algorithm performs particularly well on satisfiable problems. For single word equations, DragonLi can solve significantly more problems than well-established string solvers. For the conjunction of multiple word equations, DragonLi is competitive with state-of-the-art string solvers.\n\n{retrieved_text}\n\nGenerate exactly 51 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 51\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"The satisfiability modulo theories library (SMT-LIB)\",\n        \"DragonLi github repository\",\n        \"Zenodo record of DragonLi\",\n        \"String constraints for verification\",\n        \"Norn: An SMT solver for string constraints\",\n        \"TRAU: SMT solver for string constraints\",\n        \"Boosting constrained Horn solving by unsat core learning\",\n        \"Deep Learning using Rectified Linear Units (ReLU)\",\n        \"Learning to represent programs with graphs\",\n        \"cvc5: A versatile and industrial-strength smt solver\",\n        \"CVC4\",\n        \"The SMT-LIB Standard: Version 2.6\",\n        \"Relational inductive biases, deep learning, and graph networks\",\n        \"Z3str3: A string solver with theory-aware heuristics\",\n        \"Developments in mlflow: A system to accelerate the machine learning lifecycle\",\n        \"Decision procedures for path feasibility of string-manipulating programs with complex operations\",\n        \"Z3-noodler: An automata-based string solver\",\n        \"Guiding an instantiation prover with graph neural networks\",\n        \"On solving word equations using SAT\",\n        \"Rule-based word equation solving\",\n        \"Graphviz and Dynagraph â€” Static and Dynamic Graph Drawing Tools\",\n        \"Graph neural networks for social recommendation\",\n        \"Neural message passing for Quantum chemistry\",\n        \"Deep Learning\",\n        \"Hol light: An overview\",\n        \"Graph neural networks for scheduling of SMT solvers\",\n        \"The ELDARICA Horn solver\",\n        \"Enigma anonymous: Symbol-independent inference guiding machine (system description)\",\n        \"Equations in a free semigroup\",\n        \"Semi-supervised classification with graph convolutional networks\",\n        \"Depth-First Iterative-Deepening: An Optimal Admissible Tree Search\",\n        \"Improving SAT solver heuristics with graph networks and reinforcement learning\",\n        \"On semigroups\",\n        \"Exploring representation of horn clauses using gnns\",\n        \"The problem of solvability of equations in a free semigroup\",\n        \"Grasp: A search algorithm for propositional satisfiability\",\n        \"Convolutional neural networks over tree structures for programming language processing\",\n        \"Z3: an efficient SMT solver\",\n        \"Die Isomorphismen der allgemeinen, unendlichen Gruppe mit zwei Erzeugenden\",\n        \"Graph representations for higher-order logic and theorem proving\",\n        \"Pytorch: An imperative style, high-performance deep learning library\",\n        \"Foundations of json schema\",\n        \"An efficient algorithm for solving word equations\",\n        \"Neurocore: Guiding high-performance SAT solvers with unsat-core predictions\",\n        \"Learning a SAT solver from single-bit supervision\",\n        \"Learning loop invariants for program verification\",\n        \"Code2inv: A deep learning framework for program verification\",\n        \"Python 3 Reference Manual\",\n        \"Premise selection for theorem proving by deep graph embedding\",\n        \"Deep graph library: A graph-centric, highly-performant package for graph neural networks\",\n        \"Neurocomb: Improving SAT solving with graph neural networks\"\n    ],\n    \"reasoning\": \"Selected these 51 references because they represent foundational work and recent advances in Guiding Word Equation Solving using Graph Neural Networks (Extended Technical Report), providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}