{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 45 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: PyTond: Efficient Python Data Science on the Shoulders of Databases\n\nPaper Abstract: Abstract Python data science libraries such as Pandas and NumPy have recently gained immense popularity. Although these libraries are feature-rich and easy to use, their scalability limitations require more robust computational resources. In this paper, we present PyTond, an efficient approach to push the processing of data science workloads down into the database engines that are already known for their big data handling capabilities. Compared to the previous work, by introducing TondIR, our approach can capture a more comprehensive set of workloads and data layouts. Moreover, by doing IR-level optimizations, we generate better SQL code that improves the query processing by the underlying database engine. Our evaluation results show promising performance improvement compared to Python and other alternatives for diverse data science workloads.\n\n{retrieved_text}\n\nGenerate exactly 45 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 45\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Pandas library\",\n        \"Numpy library\",\n        \"Machine learning, linear algebra, and more: Is SQL all you need?\",\n        \"Efficient and portable einstein summation in SQL\",\n        \"Snakes on a plan: Compiling python functions into plain SQL queries\",\n        \"Putting pandas in a box\",\n        \"Towards scalable dataframe systems\",\n        \"Pyfroid: Scaling data analysis on a commodity workstation\",\n        \"Accelerating python udfs in vectorized query execution\",\n        \"Numba: a llvm-based python JIT compiler\",\n        \"Evaluating end-to-end optimization for data analytics applications in weld\",\n        \"Building a compiled query engine in python\",\n        \"Tuplex: Data science in python at native code speed\",\n        \"Efficiently Compiling Efficient Query Plans for Modern Hardware\",\n        \"DBToaster: higher-order delta processing for dynamic, frequently fresh views\",\n        \"Building efficient query engines in a high-level language\",\n        \"How to architect a query compiler\",\n        \"Processing Declarative Queries Through Generating Imperative Code in Managed Runtimes\",\n        \"Push versus pull-based loop fusion in query engines\",\n        \"Designing an open framework for query optimization and compilation\",\n        \"Numpy einsum api\",\n        \"Everything you always wanted to know about compiled and vectorized queries but were afraid to ask\",\n        \"Foundations of Databases\",\n        \"Optimizing nested recursive queries\",\n        \"Compiling structured tensor algebra\",\n        \"FAQ: Questions Asked Frequently\",\n        \"The Rel Language\",\n        \"Compiling without continuations\",\n        \"The essence of compiling with continuations\",\n        \"opt_einsum - A python package for optimizing contraction order for einsum-like expressions\",\n        \"Duckdb: an embeddable analytical database\",\n        \"Tpc-h benchmark\",\n        \"Efficient query processing in python using compilation\",\n        \"Ponder\",\n        \"DAPHNE: an open and extensible system infrastructure for integrated data analysis pipelines\",\n        \"Dask\",\n        \"Functional collection programming with semi-ring dictionaries\",\n        \"Optimizing tensor programs on flexible storage\",\n        \"Building domain-specific embedded languages\",\n        \"Yin-yang: concealing the deep embedding of dsls\",\n        \"Transforming data frame operations from python to mlir\",\n        \"Multi-layer optimizations for end-to-end data analytics\",\n        \"One WITH RECURSIVE is worth many gotos\",\n        \"A fix for the fixation on fixpoints\",\n        \"A tensor algebra compiler for sparse differentiation\"\n    ],\n    \"reasoning\": \"Selected these 45 references because they represent foundational work and recent advances in PyTond: Efficient Python Data Science on the Shoulders of Databases, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}