{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 53 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Benchmarking Parallelism in FaaS Platforms\n\nPaper Abstract: Abstract Serverless computing has seen a myriad of work exploring its potential. Some systems tackle Function-as-a-Service (FaaS) properties on automatic elasticity and scale to run highly-parallel computing jobs. However, they focus on specific platforms and convey that their ideas can be extrapolated to any FaaS runtime. An important question arises: do all FaaS platforms fit parallel computations? In this paper, we argue that not all of them provide the necessary means to host highly-parallel applications. To validate our hypothesis, we create a comparative framework and categorize the architectures of four cloud FaaS offerings, emphasizing parallel performance. We attest and extend this description with an empirical experiment that consists in plotting in deep detail the evolution of a parallel computing job on each service. The analysis of our results evinces that FaaS is not inherently good for parallel computations and architectural differences across platforms are decisive to categorize their performance. A key insight is the importance of virtualization technologies and the scheduling approach of FaaS platforms. Parallelism improves with lighter virtualization and proactive scheduling due to finer resource allocation and faster elasticity. This causes some platforms like AWS and IBM to perform well for highly-parallel computations, while others such as Azure present difficulties to achieve the required parallelism degree. Consequently, the information in this paper becomes of special interest to help users choose the most adequate infrastructure for their parallel applications.\n\n{retrieved_text}\n\nGenerate exactly 53 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 53\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Occupy the Cloud: Distributed Computing for the 99%\",\n        \"Encoding, Fast and Slow: Low-Latency Video Processing Using Thousands of Tiny Threads\",\n        \"On the FaaS Track: Building Stateful Distributed Applications with Serverless Architectures\",\n        \"From Laptop to Lambda: Outsourcing Everyday Jobs to Thousands of Transient Functional Containers\",\n        \"numpywren: serverless linear algebra\",\n        \"Shuffling, Fast and Slow: Scalable Analytics on Serverless Infrastructure\",\n        \"A framework and a performance assessment for serverless mapreduce on aws lambda\",\n        \"Servermix: Tradeoffs and challenges of serverless data analytics\",\n        \"Cloud programming simplified: A berkeley view on serverless computing\",\n        \"Serverless computing: One step forward, two steps back\",\n        \"Benchmarking Elasticity of FaaS Platforms as a Foundation for Objective-Driven Design of Serverless Applications\",\n        \"What Is Function as a Service (FaaS)?\",\n        \"Peeking Behind the Curtains of Serverless Platforms\",\n        \"FaaS Orchestration of Parallel Workloads\",\n        \"FaaSdom: A Benchmark Suite for Serverless Computing\",\n        \"ŒªùúÜ\\\\lambda Serverless Benchmark\",\n        \"Function-as-a-service performance evaluation: A multivocal literature review\",\n        \"From 0 to 1000 Instances: How Serverless Providers Scale Queue Processing\",\n        \"Performance considerations on execution of large scale workflow applications on cloud functions\",\n        \"CloudButton Serverless Benchmark\",\n        \"Sequoia: Enabling quality-of-service in serverless computing\",\n        \"Evaluation of production serverless computing environments\",\n        \"All but One: FaaS Platform Elasticity Revisited\",\n        \"An Evaluation of Open Source Serverless Computing Frameworks\",\n        \"Architectural Implications of Function-as-a-Service Computing\",\n        \"Understanding ephemeral storage for serverless analytics\",\n        \"Pocket: Elastic ephemeral storage for serverless analytics\",\n        \"Comparison of FaaS Orchestration Systems\",\n        \"Serverless in the Wild: Characterizing and Optimizing the Serverless Workload at a Large Cloud Provider\",\n        \"Apache OpenWhisk\",\n        \"The spec-rg reference architecture for faas: From microservices and containers to serverless platforms\",\n        \"Configuring Functions in the AWS Lambda Console\",\n        \"AWS Lambda limits\",\n        \"Security Overview of AWS Lambda\",\n        \"Firecracker: Lightweight Virtualization for Serverless Applications\",\n        \"AWS Lambda function scaling\",\n        \"Azure Functions scale and hosting\",\n        \"Azure Functions HTTP output bindings - Settings\",\n        \"Cloud Functions Execution Environment\",\n        \"GKE Sandbox: Bring defense in depth to your pods\",\n        \"What is gVisor?\",\n        \"Google Cloud Function Quotas\",\n        \"Google Cloud Function Pricing\",\n        \"How Cloud Functions works\",\n        \"System details and limits\",\n        \"OpenWhisk Concurrency\",\n        \"Estimating Consumption plan costs\",\n        \"Serverless computing: An investigation of factors influencing microservice performance\",\n        \"Create a function in Azure using Visual Studio Code\",\n        \"Azure runtime environment\",\n        \"Runtime metrics\",\n        \"Serverless Data Analytics in the IBM Cloud\",\n        \"Granular computing\"\n    ],\n    \"reasoning\": \"Selected these 53 references because they represent foundational work and recent advances in Benchmarking Parallelism in FaaS Platforms, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}