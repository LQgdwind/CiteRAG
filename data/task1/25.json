{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 51 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: RMWPaxos: Fault-Tolerant In-Place Consensus Sequences\n\nPaper Abstract: Abstract Building consensus sequences based on distributed, fault-tolerant consensus, as used for replicated state machines, typically requires a separate distributed state for every new consensus instance. Allocating and maintaining this state causes significant overhead. In particular, freeing the distributed, outdated states in a fault-tolerant way is not trivial and adds further complexity and cost to the system. In this paper, we propose an extension to the single-decree Paxos protocol that can learn a sequence of consensus decisions ‘in-place’, i.e. with a single set of distributed states. Our protocol does not require dynamic log structures and hence has no need for distributed log pruning, snapshotting, compaction, or dynamic resource allocation. The protocol builds a fault-tolerant atomic register that supports arbitrary read-modify-write operations. We use the concept of consistent quorums to detect whether the previous consensus still needs to be consolidated or is already finished so that the next consensus value can be safely proposed. Reading a consolidated consensus is done without state modifications and is thereby free of concurrency control and demand for serialisation. A proposer that is not interrupted reaches agreement on consecutive consensus decisions within a single message round-trip per decision by preparing the acceptors eagerly with the previous request.\n\n{retrieved_text}\n\nGenerate exactly 51 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 51\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Implementing fault-tolerant services using the state machine approach: A tutorial\",\n        \"Paxos made simple\",\n        \"The part-time parliament\",\n        \"In search of an understandable consensus algorithm\",\n        \"Mencius: Building efficient replicated state machine for wans\",\n        \"Zab: High-performance broadcast for primary-backup systems\",\n        \"There is more consensus in egalitarian parliaments\",\n        \"Spanner: Google’s globally-distributed database\",\n        \"The Chubby lock service for loosely-coupled distributed systems\",\n        \"Megastore: Providing scalable, highly available storage for interactive services\",\n        \"Paxos made live: an engineering perspective\",\n        \"Introduction to reliable and secure distributed programming\",\n        \"Generalized consensus and Paxos\",\n        \"Impossibility of distributed consensus with one faulty process\",\n        \"Linearizability: A correctness condition for concurrent objects\",\n        \"Distributed Algorithms\",\n        \"Wait-free synchronization\",\n        \"Obstruction-free synchronization: Double-ended queues as an example\",\n        \"The weakest failure detector for solving consensus\",\n        \"CATS: linearizability and partition tolerance in scalable and self-organizing key-value stores\",\n        \"Weakening Paxos consensus sequences for commutative commands\",\n        \"Fast Paxos\",\n        \"Flexible Paxos: Quorum intersection revisited\",\n        \"Advanced contention management for dynamic software transactional memory\",\n        \"Scalaris: reliable transactional P2P key/value store\",\n        \"Implementation of the protocol scheduler\",\n        \"basho-bench: A load-generation and testing tool for basically whatever you can write a returning Erlang function for\",\n        \"riak_ensemble: Multi-Paxos framework in Erlang\",\n        \"ra: A Raft implementation for Erlang and Elixir that strives to be efficient and make it easier to use multiple Raft clusters in a single system\",\n        \"ets\",\n        \"Workload analysis of a large-scale key-value store\",\n        \"Scaling memcache at facebook\",\n        \"Benchmarking cloud serving systems with YCSB\",\n        \"Power laws, pareto distributions and zipf’s law\",\n        \"Wikimedia statistics\",\n        \"Under the hood with NVMe over Fabrics\",\n        \"APUS: fast and scalable Paxos on RDMA\",\n        \"Disk Paxos\",\n        \"Ring Paxos: A high-throughput atomic broadcast protocol\",\n        \"Fast genuine generalized consensus\",\n        \"Paxos for system builders: An overview\",\n        \"Deconstructing Paxos\",\n        \"Paxos made moderately complex\",\n        \"The Paxos register\",\n        \"CASPaxos: Replicated state machines without logs\",\n        \"Bizur: A key-value consensus algorithm for scalable file-systems\",\n        \"Linearizable state machine replication of state-based CRDTs without logs\",\n        \"On interprocess communication. Part II: algorithms\",\n        \"Quorum Systems: With Applications to Storage and Consensus\",\n        \"Sharing memory robustly in message-passing systems\",\n        \"Implementation of RMWPaxos\"\n    ],\n    \"reasoning\": \"Selected these 51 references because they represent foundational work and recent advances in RMWPaxos: Fault-Tolerant In-Place Consensus Sequences, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}