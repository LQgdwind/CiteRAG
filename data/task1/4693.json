{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 58 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: An Evaluation of WebAssembly and eBPF as Offloading Mechanisms in the Context of Computational Storage\n\nPaper Abstract: Abstract As the volume of data that needs to be processed continues to increase, we also see renewed interests in near-data processing in the form of computational storage, with eBPF (extended Berkeley Packet Filter) being proposed as a vehicle for computation offloading. However, discussions in this regard have so far ignored viable alternatives, and no convincing analysis has been provided. As such, we qualitatively and quantitatively evaluated eBPF against WebAssembly, a seemingly similar technology, in the context of computation offloading. This report presents our findings.\n\n{retrieved_text}\n\nGenerate exactly 58 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 58\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Active disks: Programming model, algorithms and evaluation\",\n        \"Samsung’s New HBM2 Memory Has 1.2 TFLOPS of Embedded Processing Power\",\n        \"Ryzen Threadripper PRO 3975WX\",\n        \"Computational storage: Where are we today?\",\n        \"It’s time to think about an operating system for near data processing architectures\",\n        \"Bringing Compute to Storage with NVM Express\",\n        \"Poc: compiling to eBPF from Rust\",\n        \"binaryen\",\n        \"eBPF\",\n        \"Emscripten\",\n        \"generic-ebpf\",\n        \"GraalVM\",\n        \"Unofficial eBPF spec\",\n        \"libbpf\",\n        \"Linux Socket Filtering aka Berkeley Packet Filter (BPF)\",\n        \"llvm-objdump\",\n        \"RustPython\",\n        \"GNU time\",\n        \"WASI\",\n        \"Wasi API Documentation\",\n        \"Wasi Design Principles\",\n        \"wasi-sdk\",\n        \"wasmer\",\n        \"Memory64 Proposal for WebAssembly\",\n        \"Wabt: The WebAssembly Binary Toolkit\",\n        \"WebAssembly\",\n        \"Webassembly GC Proposal\",\n        \"Webassembly Memories\",\n        \"Webassembly Module Linking Explainer\",\n        \"Webassembly Portability\",\n        \"Webassembly Text Format\",\n        \"zstd\",\n        \"bpftool\",\n        \"Simple and precise static analysis of untrusted linux kernel extensions\",\n        \"Computational Storage Architecture and Programming Model v0.8 rev 0\",\n        \"Biscuit: A framework for near-data processing of big data workloads\",\n        \"Bringing the web up to speed with webassembly\",\n        \"An empirical study of real-world webassembly binaries: Security, languages, use cases\",\n        \"Not so fast: Analyzing the performance of webassembly vs. native code\",\n        \"Safe and efficient remote application code execution on disaggregated nvm storage with ebpf\",\n        \"Scaling databases and file apis with programmable ceph object storage\",\n        \"Everything old is new again: Binary security of webassembly\",\n        \"Security chasms of wasm\",\n        \"Swivel: Hardening webassembly against spectre\",\n        \"A case study of processing-in-memory in off-the-shelf systems\",\n        \"Cve-2020-8835\",\n        \"Cve-2021-20268\",\n        \"OX: Deconstructing the FTL for Computational Storage\",\n        \"rbpf\",\n        \"Samsung SmartSSD\",\n        \"What is eBPF, and Why Does it Matter for Computational Storage?\",\n        \"NGD Newport NVMe Computational Storage Platform\",\n        \"ubpf\",\n        \"nkv in action: accelerating kv-stores on native computational storage with near-data processing\",\n        \"wasmtime\",\n        \"Mechanising and verifying the webassembly specification\",\n        \"Weakening webassembly\",\n        \"The true value of storage drives with built-in transparent compression\"\n    ],\n    \"reasoning\": \"Selected these 58 references because they represent foundational work and recent advances in An Evaluation of WebAssembly and eBPF as Offloading Mechanisms in the Context of Computational Storage, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}