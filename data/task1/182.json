{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 52 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Work-efficient Batch-incremental Minimum Spanning Trees with Applications to the Sliding Window Model\n\nPaper Abstract: Abstract Algorithms for dynamically maintaining minimum spanning trees (MSTs) have received much attention in both the parallel and sequential settings. While previous work has given optimal algorithms for dense graphs, all existing parallel batch-dynamic algorithms perform polynomial work per update in the worst case for sparse graphs. In this paper, we present the first work-efficient parallel batch-dynamic algorithm for incremental MST, which can insert ‚Ñì‚Ñì\\ell{} edges in O‚Äã(‚Ñì‚Äãlg‚Å°(1+n/‚Ñì))ùëÇ‚Ñìlg1ùëõ‚ÑìO(\\ell{}\\lg(1+n/\\ell{})) work in expectation and O‚Äã(polylog‚Å°(n))ùëÇpolylogùëõO(\\operatorname{\\textnormal{polylog}}(n)) span w.h.p. The key ingredient of our algorithm is an algorithm for constructing a compressed path tree of an edge-weighted tree, which is a smaller tree that contains all pairwise heaviest edges between a given set of marked vertices. Using our batch-incremental MST algorithm, we demonstrate a range of applications that become efficiently solvable in parallel in the sliding-window model, such as graph connectivity, approximate MSTs, testing bipartiteness, kùëòk-certificates, cycle-freeness, and maintaining sparsifiers.\n\n{retrieved_text}\n\nGenerate exactly 52 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 52\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Parallel batch-dynamic graph connectivity\",\n        \"Batch-dynamic algorithms via parallel change propagation and applications to dynamic trees\",\n        \"An experimental analysis of change propagation in dynamic trees\",\n        \"Analyzing graph structure via linear measurements\",\n        \"Maintaining information in fully dynamic trees with top trees\",\n        \"Approximating s-t minimum cuts in √ï(n22{}^{\\\\mbox{2}}) time\",\n        \"Programming parallel algorithms\",\n        \"Just join for parallel ordered sets\",\n        \"Fast set operations using treaps\",\n        \"O jist√©m probl√©mu minim√°ln√≠m\",\n        \"Approximating the minimum spanning tree weight in sublinear time\",\n        \"Finding minimum spanning forests in logarithmic time and linear work using random sampling\",\n        \"Dynamic graphs in the sliding-window model\",\n        \"An o(n) work EREW parallel algorithm for updating MST\",\n        \"Parallel Dynamic Algorithms for Minimum Spanning Trees\",\n        \"An EREW PRAM algorithm for updating minimum spanning trees\",\n        \"Maintaining stream statistics over sliding windows\",\n        \"A note on two problems in connexion with graphs\",\n        \"Sparsification‚Äîa technique for speeding up dynamic graph algorithms\",\n        \"An EREW PRAM fully-dynamic algorithm for MST\",\n        \"A technique to speed up parallel fully dynamic algorithms for mst\",\n        \"Batch dynamic algorithms for two graph problems\",\n        \"Three techniques for parallel maintenance of a minimum spanning tree under batch of updates\",\n        \"Data structures for on-line updating of minimum spanning trees, with applications\",\n        \"A general framework for graph sparsification\",\n        \"An optimal randomized parallel algorithm for finding connected components in a graph\",\n        \"Parallel minimum cuts in near-linear work and low depth\",\n        \"Faster algorithms for edge connectivity via random 2-out contractions\",\n        \"Single pass sparsification in the streaming model with edge deletions\",\n        \"Incremental exact min-cut in polylogarithmic amortized update time\",\n        \"Poly-logarithmic deterministic fully-dynamic algorithms for connectivity, minimum spanning tree, 2-edge, and biconnectivity\",\n        \"Faster fully-dynamic minimum spanning forest\",\n        \"An introduction to parallel algorithms, volume 17\",\n        \"Optimal algorithms for the vertex updating problem of a minimum spanning tree\",\n        \"Parallel algorithms for computing maximal independent sets in trees and for updating minimum spanning trees\",\n        \"A randomized linear-time algorithm to find minimum spanning trees\",\n        \"Improved worst-case deterministic parallel dynamic minimum spanning forest\",\n        \"On the shortest spanning subtree of a graph and the traveling salesman problem\",\n        \"Parallel tree contraction part 1: Fundamentals\",\n        \"A parallel algorithm for multiple updates of minimum spanning trees\",\n        \"Optimal parallel algorithms for multiple updates of minimum spanning trees\",\n        \"An O(lg‚Å°nlgùëõ\\\\lg n) algorithm for parallel update of minimum spanning trees\",\n        \"Shortest connection networks and some generalizations\",\n        \"A parallel algorithm for multiple edge updates of minimum spanning trees\",\n        \"Work-efficient parallel union-find with applications to incremental graph connectivity\",\n        \"A data structure for dynamic trees\",\n        \"On finding and updating spanning trees and shortest paths\",\n        \"Tight bounds for graph problems in insertion streams\",\n        \"Data structures and network algorithms\",\n        \"On handling vertex deletion in updating spanning trees\",\n        \"A parallel vertex insertion algorithm for minimum spanning trees\",\n        \"An efficient parallel algorithm for updating minimum spanning trees\"\n    ],\n    \"reasoning\": \"Selected these 52 references because they represent foundational work and recent advances in Work-efficient Batch-incremental Minimum Spanning Trees with Applications to the Sliding Window Model, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}