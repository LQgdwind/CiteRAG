{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 47 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Repair Is Nearly Generation: Multilingual Program Repair with LLMs\n\nPaper Abstract: Abstract Most programmers make mistakes when writing code. Some of these mistakes are small and require few edits to the original program – a class of errors recently termed last mile mistakes. These errors break the flow for experienced developers and can stump novice programmers. Existing automated repair techniques targeting this class of errors are language-specific and do not easily carry over to new languages. Transferring symbolic approaches requires substantial engineering and neural approaches require data and retraining. We introduce ring, a multilingual repair engine powered by a large language model trained on code (LLMC) such as Codex. Such a multilingual engine enables a flipped model for programming assistance, one where the programmer writes code and the AI assistance suggests fixes, compared to traditional code suggestion technology. Taking inspiration from the way programmers manually fix bugs, we show that a prompt-based strategy that conceptualizes repair as localization, transformation, and candidate ranking, can successfully repair programs in multiple languages with minimal effort. We present the first results for such a multilingual repair engine by evaluating on 6 different languages and comparing performance to language-specific repair engines. We show that ring can outperform language-specific repair engines for three of these languages.\n\n{retrieved_text}\n\nGenerate exactly 47 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 47\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"SYNFIX: Automatically Fixing Syntax Errors using Compiler Diagnostics\",\n        \"Compilation error repair: for the student programs, from the student programs\",\n        \"37 million compilations: Investigating novice programming mistakes in large-scale student data\",\n        \"ANNOY library\",\n        \"On the automation of fixing software bugs\",\n        \"Code Generation Tools (Almost) for Free? A Study of Few-Shot, Pre-Trained Language Models on Code\",\n        \"Neurosymbolic Repair for Low-Code Formula Languages\",\n        \"Calibration of machine learning models\",\n        \"Tfix: Learning to fix coding errors with a text-to-text transformer\",\n        \"On the opportunities and risks of foundation models\",\n        \"Language models are few-shot learners\",\n        \"Software developers, Quality Assurance Analysts, and testers : Occupational outlook handbook\",\n        \"Evaluating Large Language Models Trained on Code\",\n        \"Novelty Controlled Paraphrase Generation with Retrieval Augmented Conditional Prompt Tuning\",\n        \"Using Mutation to Automatically Suggest Fixes for Faulty Programs\",\n        \"Don’t Panic! Better, Fewer, Syntax Errors for LR Parsers\",\n        \"Calibration of probability predictions from machine-learning and statistical models\",\n        \"A neural network solves, explains, and generates university math problems by program synthesis and few-shot learning at human level\",\n        \"HappyFace: Identifying and predicting frustrating obstacles for learning programming at scale\",\n        \"Codebert: A pre-trained model for programming and natural languages\",\n        \"Automatic Software Repair: A Survey\",\n        \"Automated program repair\",\n        \"Learning to complete code with sketches\",\n        \"DeepFix: Fixing Common C Language Errors by Deep Learning\",\n        \"SampleFix: Learning to Correct Programs by Efficient Sampling of Diverse Fixes\",\n        \"Fault-Aware Neural Code Rankers\",\n        \"Billion-scale similarity search with gpus\",\n        \"Binary codes capable of correcting deletions, insertions, and reversals\",\n        \"A critical review on the evaluation of automated program repair systems\",\n        \"Debugging: the good, the bad, and the quirky–a qualitative analysis of novices’ strategies\",\n        \"SemFix: Program repair via semantic analysis\",\n        \"Measuring Calibration in Deep Learning\",\n        \"Automatic grading and feedback using program repair for introductory programming courses\",\n        \"Synchromesh: Reliable Code Generation from Pre-trained Language Models\",\n        \"Automatic Program Repair with OpenAI’s Codex: Evaluating QuixBugs\",\n        \"sk_p: a neural program corrector for MOOCs\",\n        \"The strength of random search on automated program repair\",\n        \"Improving language understanding by generative pre-training\",\n        \"Exploring the Limits of Transfer Learning with a Unified Text-to-Text Transformer\",\n        \"Ensemble learning: A survey\",\n        \"A mathematical theory of communication\",\n        \"StackOverflow Website\",\n        \"The adoption of javascript linters in practice: A case study on eslint\",\n        \"Maxims for malfeasant designers, or how to design languages to make programming as difficult as possible\",\n        \"Graph-based, self-supervised program repair from diagnostic feedback\",\n        \"Break-it-fix-it: Unsupervised learning for program repair\",\n        \"An Empirical Study on Real Bug Fixes\"\n    ],\n    \"reasoning\": \"Selected these 47 references because they represent foundational work and recent advances in Repair Is Nearly Generation: Multilingual Program Repair with LLMs, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}