{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 45 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Pre-RMSNorm and Pre-CRMSNorm Transformers: Equivalent and Efficient Pre-LN Transformers\n\nPaper Abstract: Abstract Transformers have achieved great success in machine learning applications. Normalization techniques, such as Layer Normalization (LayerNorm, LN) and Root Mean Square Normalization (RMSNorm), play a critical role in accelerating and stabilizing the training of Transformers. While LayerNorm recenters and rescales input vectors, RMSNorm only rescales the vectors by their RMS value. Despite being more computationally efficient, RMSNorm may compromise the representation ability of Transformers. There is currently no consensus regarding the preferred normalization technique, as some models employ LayerNorm while others utilize RMSNorm, especially in recent large language models. It is challenging to convert Transformers with one normalization to the other type. While there is an ongoing disagreement between the two normalization types, we propose a solution to unify two mainstream Transformer architectures, Pre-LN and Pre-RMSNorm Transformers. By removing the inherent redundant mean information in the main branch of Pre-LN Transformers, we can reduce LayerNorm to RMSNorm, achieving higher efficiency. We further propose the Compressed RMSNorm (CRMSNorm) and Pre-CRMSNorm Transformer based on a lossless compression of the zero-mean vectors. We formally establish the equivalence of Pre-LN, Pre-RMSNorm, and Pre-CRMSNorm Transformer variants in both training and inference. It implies that Pre-LN Transformers can be substituted with Pre-(C)RMSNorm counterparts at almost no cost, offering the same arithmetic functionality along with free efficiency improvement. Experiments demonstrate that we can reduce the training and inference time of Pre-LN Transformers by 1%âˆ’10%percent1percent101\\%-10\\%.\n\n{retrieved_text}\n\nGenerate exactly 45 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 45\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Layer normalization\",\n        \"On the opportunities and risks of foundation models\",\n        \"Understanding and overcoming the challenges of efficient transformer quantization\",\n        \"JAX: composable transformations of Python+NumPy programs,\",\n        \"Language models are few-shot learners\",\n        \"A comprehensive survey of ai-generated content (aigc): A history of generative ai from gan to chatgpt\",\n        \"Decision transformer: Reinforcement learning via sequence modeling\",\n        \"Palm: Scaling language modeling with pathways\",\n        \"Scaling vision transformers to 22 billion parameters\",\n        \"Llm. int8 (): 8-bit matrix multiplication for transformers at scale\",\n        \"Bert: Pre-training of deep bidirectional transformers for language understanding\",\n        \"Repvgg: Making vgg-style convnets great again\",\n        \"An image is worth 16x16 words: Transformers for image recognition at scale\",\n        \"Deep residual learning for image recognition\",\n        \"Gaussian error linear units (gelus)\",\n        \"Training compute-optimal large language models\",\n        \"Deep networks with stochastic depth\",\n        \"Llm-analysis: Latency and memory analysis of transformer models for training and inference\",\n        \"Scaling distributed machine learning with the parameter server\",\n        \"Pytorch distributed: Experiences on accelerating data parallel training\",\n        \"Understanding the difficulty of training transformers\",\n        \"Post-training quantization for vision transformer\",\n        \"Pointer sentinel mixture models\",\n        \"Mixed precision training\",\n        \"Chatgpt could cost over $700,000 per day to operate. microsoft is reportedly trying to make it cheaper\",\n        \"Do transformer modifications transfer across implementations and applications?\",\n        \"Dnnfusion: accelerating deep neural networks execution with advanced operator fusion\",\n        \"PyTorch: An Imperative Style, High-Performance Deep Learning Library\",\n        \"Pre-trained models for natural language processing: A survey\",\n        \"Language models are unsupervised multitask learners\",\n        \"Scaling language models: Methods, analysis & insights from training gopher\",\n        \"Exploring the limits of transfer learning with a unified text-to-text transformer\",\n        \"Dropout: A simple way to prevent neural networks from overfitting\",\n        \"Stanford alpaca: An instruction-following llama model\",\n        \"Efficient transformers: A survey\",\n        \"Training data-efficient image transformers & distillation through attention\",\n        \"Going deeper with image transformers\",\n        \"Llama: Open and efficient foundation language models\",\n        \"Attention is all you need\",\n        \"On layer normalization in the transformer architecture\",\n        \"Understanding and improving layer normalization\",\n        \"Data-centric artificial intelligence: A survey\",\n        \"Examining scaling and transfer of language model architectures for machine translation\",\n        \"Root mean square layer normalization\",\n        \"A survey of large language models\"\n    ],\n    \"reasoning\": \"Selected these 45 references because they represent foundational work and recent advances in Pre-RMSNorm and Pre-CRMSNorm Transformers: Equivalent and Efficient Pre-LN Transformers, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}