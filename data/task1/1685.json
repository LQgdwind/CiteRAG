{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 47 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Optimal Neural Program Synthesis from Multimodal Specifications\n\nPaper Abstract: Abstract Multimodal program synthesis, which leverages different types of user input to synthesize a desired program, is an attractive way to scale program synthesis to challenging settings; however, it requires integrating noisy signals from the user, like natural language, with hard constraints on the program’s behavior. This paper proposes an optimal neural synthesis approach where the goal is to find a program that satisfies user-provided constraints while also maximizing the program’s score with respect to a neural model. Specifically, we focus on multimodal synthesis tasks in which the user intent is expressed using a combination of natural language (NL) and input-output examples. At the core of our method is a top-down recurrent neural model that places distributions over abstract syntax trees conditioned on the NL input. This model not only allows for efficient search over the space of syntactically valid programs, but it allows us to leverage automated program analysis techniques for pruning the search space based on infeasibility of partial programs with respect to the user’s constraints. The experimental results on a multimodal synthesis dataset (StructuredRegex) show that our method substantially outperforms prior state-of-the-art techniques in terms of accuracy and efficiency, and finds model-optimal programs more frequently.111Code available: https://github.com/xiye17/OpSynth\n\n{retrieved_text}\n\nGenerate exactly 47 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 47\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"A large-scale benchmark for few-shot program induction and synthesis\",\n        \"Learning with Latent Language\",\n        \"Program synthesis with large language models\",\n        \"Deepcoder: Learning to write programs\",\n        \"Optimizing synthesis with metasketches\",\n        \"Multi-modal synthesis of regular expressions\",\n        \"Execution-guided neural program synthesis\",\n        \"Maximal multi-layer specification synthesis\",\n        \"Abstract interpretation: a unified lattice model for static analysis of programs by construction or approximation of fixpoints\",\n        \"Program synthesis using natural language\",\n        \"Robustfill: Neural Program Learning under Noisy I/O\",\n        \"Language to logical form with neural attention\",\n        \"Write, execute, assess: Program synthesis with a repl\",\n        \"Program Synthesis Using Conflict-driven Learning\",\n        \"Component-Based Synthesis of Table Consolidation and Transformation Tasks from Examples\",\n        \"Synthesizing data structure transformations from input-output examples\",\n        \"Long Short-Term Memory\",\n        \"Data recombination for neural semantic parsing\",\n        \"Neural-guided deductive search for real-time program synthesis from examples\",\n        \"Adam: A method for stochastic optimization\",\n        \"Spoc: Search-based pseudocode to code\",\n        \"Using Semantic Unification to Generate Regular Expressions from Natural Language\",\n        \"Synthesizing Regular Expressions from Examples for Introductory Automata Assignments\",\n        \"A dpll (t) theory solver for a theory of strings and regular expressions\",\n        \"Effective Approaches to Attention-based Neural Machine Translation\",\n        \"A machine learning framework for programming by example\",\n        \"dk.brics.automaton – finite-state automata and regular expressions for Java\",\n        \"Principles of program analysis\",\n        \"Learning to infer program sketches\",\n        \"Neural program search: Solving programming tasks from description and examples\",\n        \"Evaluation of spoken language systems: The atis domain\",\n        \"Abstract syntax networks for code generation and semantic parsing\",\n        \"Compositional program synthesis from natural language and examples\",\n        \"Stochastic superoptimization\",\n        \"Improving neural program synthesis with inferred execution traces\",\n        \"Treegen: A tree-based transformer architecture for code generation\",\n        \"Execution-guided neural program decoding\",\n        \"Program synthesis using abstraction refinement\",\n        \"Building a Semantic Parser Overnight\",\n        \"SQLizer: Query Synthesis from Natural Language\",\n        \"Benchmarking multimodal regex synthesis with complex structures\",\n        \"Sketch-Driven Regular Expression Generation from Natural Language and Examples\",\n        \"Learning to mine aligned code and natural language pairs from stack overflow\",\n        \"A syntactic neural model for general-purpose code generation\",\n        \"TRANX: A transition-based neural abstract syntax parser for semantic parsing and code generation\",\n        \"Learning to parse database queries using inductive logic programming\",\n        \"Learning to map sentences to logical form: Structured classification with probabilistic categorial grammars\"\n    ],\n    \"reasoning\": \"Selected these 47 references because they represent foundational work and recent advances in Optimal Neural Program Synthesis from Multimodal Specifications, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}