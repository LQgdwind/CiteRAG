{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 59 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Extended Version of: On the Structural Hardness of Answer Set Programming: Can Structure Efficiently Confine the Power of Disjunctions?\n\nPaper Abstract: Abstract Answer Set Programming (ASP) is a generic problem modeling and solving framework with a strong focus on knowledge representation and a rapid growth of industrial applications. So far, the study of complexity resulted in characterizing hardness and determining their sources, fine-grained insights in the form of dichotomy-style results, as well as detailed parameterized complexity landscapes. Unfortunately, for the well-known parameter treewidth disjunctive programs require double-exponential runtime under reasonable complexity assumptions. This quickly becomes out of reach. We deal with the classification of structural parameters for disjunctive ASP on the program’s rule structure (incidence graph). First, we provide a polynomial kernel to obtain single-exponential runtime in terms of vertex cover size, despite subset-minimization being not represented in the program’s structure. Then we turn our attention to strictly better structural parameters between vertex cover size and treewidth. Here, we provide double-exponential lower bounds for the most prominent parameters in that range: treedepth, feedback vertex size, and cliquewidth. Based on this, we argue that unfortunately our options beyond vertex cover size are limited. Our results provide an in-depth hardness study, relying on a novel reduction from normal to disjunctive programs, trading the increase of complexity for an exponential parameter compression.\n\n{retrieved_text}\n\nGenerate exactly 59 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 59\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Train Scheduling with Hybrid ASP\",\n        \"Evaluation of Disjunctive Programs in WASP\",\n        \"Clause-Learning Algorithms with Many Restarts and Bounded-Width Resolution\",\n        \"Answer set based design of knowledge systems\",\n        \"Propositional Semantics for Disjunctive Logic Programs\",\n        \"selp: A Single-Shot Epistemic Logic Program Solver\",\n        \"Negation by default and unstratifiable logic programs\",\n        \"Handbook of Satisfiability, volume 185 of Frontiers in Artif. Intellig. and Applications\",\n        \"The Impact of Treewidth on Grounding and Solving of Answer Set Programs\",\n        \"Answer set programming at a glance\",\n        \"I-dlv: The New Intelligent Grounder of dlv\",\n        \"Negation as Failure\",\n        \"Parameterized Algorithms\",\n        \"Graph Theory, 4th Edition, volume 173 of Graduate Texts in Mathematics\",\n        \"Fundamentals of Parameterized Complexity\",\n        \"Solving Advanced Reasoning Tasks Using Quantified Boolean Formulas\",\n        \"On the computational cost of disjunctive logic programming: Propositional case\",\n        \"Treewidth-Aware Cycle Breaking for Algebraic Answer Set Counting\",\n        \"Clique-Width is NP-Complete\",\n        \"Structure-Aware Lower Bounds and Broadening the Horizon of Tractability for QBF\",\n        \"The Model Counting Competition 2020\",\n        \"Lower Bounds for QBFs of Bounded Treewidth\",\n        \"A multiparametric view on answer set programming\",\n        \"Parameterized Complexity Theory, volume XIV of Theo. Comput. Science\",\n        \"Answer Set Solving in Practice\",\n        \"Solution Enumeration for Projected Boolean Search Problems\",\n        \"Classical Negation in Logic Programs and Disjunctive Databases\",\n        \"Bounded treewidth as a key to tractability of knowledge representation and reasoning\",\n        \"Fixed-parameter complexity in AI and nonmonotonic reasoning\",\n        \"Approximating Pathwidth for Graphs of Small Treewidth\",\n        \"Exhaustively characterizing feasible logic models of a signaling network using Answer Set Programming\",\n        \"Treewidth-aware reductions of normal ASP to SAT - Is normal ASP harder than SAT after all?\",\n        \"Which Problems Have Strongly Exponential Complexity?\",\n        \"Answer-Set Programming with Bounded Treewidth\",\n        \"Some (in)translatability results for normal logic programs and propositional theories\",\n        \"The Answer Set Programming Paradigm\",\n        \"Propositional logic: deduction and algorithms\",\n        \"Treewidth. Computations and Approximations, volume 842 of LNCS\",\n        \"Faster deterministic Feedback Vertex Set\",\n        \"Tree-Width, Path-Widt, and Cutwidth\",\n        \"Integrating Tree Decompositions into Decision Heuristics of Propositional Model Counters\",\n        \"An Improved Parameterized Algorithm for Treewidth\",\n        \"Fixed-Parameter Algorithms for Finding Minimal Models\",\n        \"Treewidth with a Quantifier Alternation Revisited\",\n        \"On tight logic programs and yet another translation from normal logic programs to propositional logic\",\n        \"ASSAT: computing answer sets of a logic program by SAT solvers\",\n        \"Slightly Superexponential Parameterized Problems\",\n        \"Autoepistemic logic\",\n        \"Double-Exponential and Triple-Exponential Bounds for Choosability Problems Parameterized by Treewidth\",\n        \"Invitation to Fixed-Parameter Algorithms, volume 31 of Oxford Lecture Series in Mathematics and its Applications\",\n        \"Upper bounds for vertex cover further improved\",\n        \"Stable model semantics of weight constraint rules\",\n        \"An A-Prolog Decision Support System for the Space Shuttle\",\n        \"Fixed-Parameter Hierarchies inside PSPACE\",\n        \"Computational Complexity\",\n        \"Tractable answer-set programming with weight constraints: bounded treewidth is not enough\",\n        \"Graph minors II: Algorithmic aspects of tree-width\",\n        \"Special Issue on Answer Set Programming\",\n        \"Trichotomy and dichotomy results on the complexity of reasoning with disjunctive logic programs\"\n    ],\n    \"reasoning\": \"Selected these 59 references because they represent foundational work and recent advances in Extended Version of: On the Structural Hardness of Answer Set Programming: Can Structure Efficiently Confine the Power of Disjunctions?, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}