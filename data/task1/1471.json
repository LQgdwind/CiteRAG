{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 41 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Tensor Relational Algebra for Distributed Machine Learning System Design\n\nPaper Abstract: Abstract. We consider the question: what is the abstraction that should be implemented by the computational engine of a machine learning system? Current machine learning systems typically push whole tensors through a series of compute kernels such as matrix multiplications or activation functions, where each kernel runs on an AI accelerator (ASIC) such as a GPU. This implementation abstraction provides little built-in support for ML systems to scale past a single machine, or for handling large models with matrices or tensors that do not easily fit into the RAM of an ASIC. In this paper, we present an alternative implementation abstraction called the tensor relational algebra (TRA). The TRA is a set-based algebra based on the relational algebra. Expressions in the TRA operate over binary tensor relations, where keys are multi-dimensional arrays and values are tensors. The TRA is easily executed with high efficiency in a parallel or distributed environment, and amenable to automatic optimization. Our empirical study shows that the optimized TRA-based back-end can significantly outperform alternatives for running ML workflows in distributed clusters.\n\n{retrieved_text}\n\nGenerate exactly 41 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 41\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Tensorflow: A system for large-scale machine learning\",\n        \"Levelheaded: A unified engine for business intelligence and linear algebra querying\",\n        \"In-database learning with sparse tensors\",\n        \"FAQ: questions asked frequently\",\n        \"A three-dimensional approach to parallel matrix multiplication\",\n        \"PETSc users manual\",\n        \"Expressiveness of Matrix and Tensor Query Languages in terms of ML Operators\",\n        \"Message passing interface (mpi)\",\n        \"The multidimensional database system RasDaMan\",\n        \"Overview of SciDB: large scale array storage, processing and analysis\",\n        \"Simulation of database-valued Markov chains using SimSQL\",\n        \"TVM: An automated end-to-end optimizing compiler for deep learning\",\n        \"ScaLAPACK: A scalable linear algebra library for distributed memory concurrent computers\",\n        \"Bigdl: A distributed deep learning framework for big data\",\n        \"Z3: An efficient SMT solver\",\n        \"A Relational Matrix Algebra and its Implementation in a Column Store\",\n        \"SystemML: Declarative machine learning on MapReduce\",\n        \"Improving execution concurrency of large-scale matrix multiplication on distributed data-parallel platforms\",\n        \"DistME: A Fast and Elastic Distributed Matrix Computation Engine using GPUs\",\n        \"Tensorframes on googleâ€™s tensorflow and apache spark\",\n        \"LaraDB: A minimalist kernel for linear and relational algebra computation\",\n        \"Declarative recursive computation on an RDBMS: or, why you should use a database for distributed machine learning\",\n        \"DB4ML-An In-Memory Database Kernel with Machine Learning Support\",\n        \"AC/DC: in-database learning thunderstruck\",\n        \"Efficient static and dynamic in-database tensor decompositions on chunk-based array stores\",\n        \"Tensordb: In-database tensor manipulation with tensor-relational query plans\",\n        \"The tensor algebra compiler\",\n        \"A simple and efficient tensor calculus\",\n        \"PyTorch Distributed: Experiences on Accelerating Data Parallel Training\",\n        \"Mlog: Towards declarative in-database machine learning\",\n        \"Scalable linear algebra on a relational database system\",\n        \"Inferring networks of substitutable and complementary products\",\n        \"Image-based recommendations on styles and substitutes\",\n        \"Sparknet: Training deep networks in spark\",\n        \"Dask: Parallel computation with blocked algorithms and task scheduling\",\n        \"Communication-optimal parallel 2.5 D matrix multiplication and LU factorization algorithms\",\n        \"Deeplearning4j: Open-source distributed deep learning for the jvm\",\n        \"SUMMA: Scalable universal matrix multiplication algorithm\",\n        \"Tensor comprehensions: Framework-agnostic high-performance machine learning abstractions\",\n        \"Speech commands: A dataset for limited-vocabulary speech recognition\",\n        \"Spark: cluster computing with working sets\"\n    ],\n    \"reasoning\": \"Selected these 41 references because they represent foundational work and recent advances in Tensor Relational Algebra for Distributed Machine Learning System Design, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}