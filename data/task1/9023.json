{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 44 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: 1 Introduction\n\nPaper Abstract: Abstract Distributed full-graph training of Graph Neural Networks (GNNs) over large graphs is bandwidth-demanding and time-consuming. Frequent exchanges of node features, embeddings and embedding gradients (all referred to as messages) across devices bring significant communication overhead for nodes with remote neighbors on other devices (marginal nodes) and unnecessary waiting time for nodes without remote neighbors (central nodes) in the graph. This paper proposes an efficient GNN training system, AdaQP, to expedite distributed full-graph GNN training. We stochastically quantize messages transferred across devices to lower-precision integers for communication traffic reduction and advocate communication-computation parallelization between marginal nodes and central nodes. We provide theoretical analysis to prove fast training convergence (at the rate of O‚Äã(T‚àí1)ùëÇsuperscriptùëá1O(T^{-1}) with TùëáT being the total number of training epochs) and design an adaptive quantization bit-width assignment scheme for each message based on the analysis, targeting a good trade-off between training convergence and efficiency. Extensive experiments on mainstream graph datasets show that AdaQP substantially improves distributed full-graph training‚Äôs throughput (up to 3.01√ó\\times) with negligible accuracy drop (at most 0.30%) or even accuracy improvement (up to 0.19%) in most cases, showing significant advantages over the state-of-the-art works. The code is available at https://github.com/raywan-110/AdaQP.\n\n{retrieved_text}\n\nGenerate exactly 44 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 44\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"On the utility of gradient compression in distributed training systems\",\n        \"Qsgd: Communication-efficient sgd via gradient quantization and encoding\",\n        \"Natasha: Faster non-convex stochastic optimization via strongly non-convex parameter\",\n        \"Nonlinear programming: analysis and methods\",\n        \"Dgcl: an efficient communication library for distributed gnn training\",\n        \"A statistical framework for low-bitwidth training of deep neural networks\",\n        \"Actnn: Reducing training memory footprint via 2-bit activation compressed training\",\n        \"Fastgcn: Fast learning with graph convolutional networks via importance sampling\",\n        \"Cluster-gcn: An efficient algorithm for training deep and large graph convolutional networks\",\n        \"Minimal variance sampling with provable guarantees for fast training of graph neural networks\",\n        \"Binaryconnect: Training deep neural networks with binary weights during propagations\",\n        \"Sgquant: Squeezing the last bit on graph neural networks with specialized quantization\",\n        \"Don‚Äôt waste your bits! squeeze activations and gradients for deep neural networks via tinyscript\",\n        \"Neural message passing for quantum chemistry\",\n        \"Deep learning\",\n        \"Gurobi Optimizer Reference Manual\",\n        \"Inductive representation learning on large graphs\",\n        \"Open graph benchmark: Datasets for machine learning on graphs\",\n        \"Improving the accuracy, scalability, and performance of graph neural networks with roc\",\n        \"Accelerating training and inference of graph neural networks with fast sampling and pipelining\",\n        \"Metis: A software package for partitioning unstructured graphs, partitioning meshes, and computing fill-reducing orderings of sparse matrices\",\n        \"Semi-supervised classification with graph convolutional networks\",\n        \"Bgl: Gpu-efficient gnn training by optimizing graph data i/o and preprocessing\",\n        \"Exact: Scalable graph neural networks training via extreme activation compression\",\n        \"Neugraph: Parallel deep neural network computation on large graphs\",\n        \"Survey of multi-objective optimization methods for engineering\",\n        \"Pytorch: An imperative style, high-performance deep learning library\",\n        \"Sancus: staleness-aware communication-avoiding full-graph decentralized training in large-scale graph neural networks\",\n        \"A stochastic approximation method\",\n        \"Connection-level analysis and modeling of network traffic\",\n        \"Degree-quant: Quantization-aware training for graph neural networks\",\n        \"Dorylus: Affordable, scalable, and accurate gnn training with distributed cpu servers and serverless threads\",\n        \"Reducing communication in graph neural network training\",\n        \"Bns-gcn: Efficient full-graph training of graph convolutional networks with partition-parallelism and random boundary node sampling sampling\",\n        \"Pipegcn: Efficient full-graph training of graph convolutional networks with pipelined feature communication\",\n        \"Deep graph library: Towards efficient and scalable deep learning on graphs\",\n        \"Error compensated quantized sgd and its applications to large-scale distributed optimization\",\n        \"A comprehensive survey on graph neural networks\",\n        \"How powerful are graph neural networks?\",\n        \"Double quantization for communication-efficient distributed optimization\",\n        \"Graphsaint: Graph sampling based inductive learning method\",\n        \"Link prediction based on graph neural networks\",\n        \"Deep learning on graphs: A survey\",\n        \"Towards unified int8 training for convolutional neural network\"\n    ],\n    \"reasoning\": \"Selected these 44 references because they represent foundational work and recent advances in 1 Introduction, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}