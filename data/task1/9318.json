{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 48 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Accelerating Sampling and Aggregation Operations in GNN Frameworks with GPU Initiated Direct Storage Accesses\n\nPaper Abstract: Abstract. Graph Neural Networks (GNNs) are emerging as a powerful tool for learning from graph-structured data and performing sophisticated inference tasks in various application domains. Although GNNs have been shown to be effective on modest-sized graphs, training them on large-scale graphs remains a significant challenge due to lack of efficient data access and data movement methods. Existing frameworks for training GNNs use CPUs for graph sampling and feature aggregation, while the training and updating of model weights are executed on GPUs. However, our in-depth profiling shows the CPUs cannot achieve the throughput required to saturate GNN model training throughput, causing gross under-utilization of expensive GPU resources. Furthermore, when the graph and its embeddings do not fit in the CPU memory, the overhead introduced by the operating system, say for handling page-faults, comes in the critical path of execution. To address these issues, we propose the GPU Initiated Direct Storage Access (GIDS111Under Review222Source code: https://github.com/jeongminpark417/GIDS) dataloader, to enable GPU-oriented GNN training for large-scale graphs while efficiently utilizing all hardware resources, such as CPU memory, storage, and GPU memory with a hybrid data placement strategy. By enabling GPU threads to fetch feature vectors directly from storage, GIDS dataloader solves the memory capacity problem for GPU-oriented GNN training. Moreover, GIDS dataloader leverages GPU parallelism to tolerate storage latency and eliminates expensive page-fault overhead. Doing so enables us to design novel optimizations for exploiting locality and increasing effective bandwidth for GNN training. Our evaluation using a single GPU on terabyte-scale GNN datasets shows that GIDS dataloader accelerates the overall DGL GNN training pipeline by up to 392Ã—\\times when compared to the current, state-of-the-art DGL dataloader.\n\n{retrieved_text}\n\nGenerate exactly 48 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 48\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Nvidia ampere architecture in-depth\",\n        \"MG-GCN: A Scalable Multi-GPU GCN Training Framework\",\n        \"Spectral Networks and Locally Connected Networks on Graphs\",\n        \"DSP: Efficient GNN Training with Multiple GPUs\",\n        \"Convolutional Neural Networks on Graphs with Fast Localized Spectral Filtering\",\n        \"Graph Neural Networks for Social Recommendation\",\n        \"Fast Graph Representation Learning with PyTorch Geometric\",\n        \"Few-Shot Learning with Graph Neural Networks\",\n        \"Graph Neural Networks in TensorFlow and Keras with Spektral [Application Notes]\",\n        \"Inductive Representation Learning on Large Graphs\",\n        \"Compact Walks: Taming Knowledge-Graph Embeddings with Domain- and Task-Specific Pathways\",\n        \"Open Graph Benchmark: Datasets for Machine Learning on Graphs\",\n        \"FeatGraph: A Flexible and Efficient Backend for Graph Neural Network Systems\",\n        \"Improving the accuracy, scalability, and performance of graph neural networks with roc\",\n        \"On Large-Batch Training for Deep Learning: Generalization Gap and Sharp Minima\",\n        \"IGB: Addressing The Gaps In Labeling, Features, Heterogeneity, and Size of Public Graph Datasets for Deep Learning Research\",\n        \"Semi-Supervised Classification with Graph Convolutional Networks\",\n        \"PaGraph: Scaling GNN Training on Large Graphs via Computation-Aware Caching\",\n        \"Alleviating the Inconsistency Problem of Applying Graph Neural Network to Fraud Detection\",\n        \"Neugraph: Parallel Deep Neural Network Computation on Large Graphs\",\n        \"HET-GMP: A Graph-Based System Approach to Scaling Large Embedding Model Training\",\n        \"Graph Neural Network Training and Data Tiering\",\n        \"PyTorch-Direct: Enabling GPU Centric Data Access for Very Large Graph Neural Network Training with Irregular Accesses\",\n        \"PinnerSage: Multi-Modal User Embedding Framework for Recommendations at Pinterest\",\n        \"Ginex: SSD-Enabled Billion-Scale Graph Neural Network Training on a Single Machine via Provably Optimal in-Memory Caching\",\n        \"R-UNIMP: SOLUTION FOR KDDCUP 2021 MAG240M-LSC\",\n        \"LightNE: A Lightweight Graph Processing System for Network Embedding\",\n        \"GPU-Initiated On-Demand High-Throughput Storage Access in the BaM System Architecture\",\n        \"ZeRO-Infinity: Breaking the GPU Memory Wall for Extreme Scale Deep Learning\",\n        \"GCN Meets GPU: Decoupling \\\"When to Sample\\\" from \\\"How to Sample\\\"\",\n        \"Explaining Link Prediction Systems Based on Knowledge Graph Embeddings\",\n        \"Graph Attention Networks\",\n        \"Medical Entity Disambiguation Using Graph Neural Networks\",\n        \"PiPAD\",\n        \"FdGars: Fraudster Detection via Graph Convolutional Networks in Online App Review System\",\n        \"Microsoft Academic Graph: When experts are not enough\",\n        \"NeutronStar: Distributed GNN Training with Hybrid Dependency Management\",\n        \"The General Inefficiency of Batch Training for Gradient Descent Learning\",\n        \"Energy-based Out-of-Distribution Detection for Graph Neural Networks\",\n        \"GPU-Accelerated Graph Label Propagation for Real-Time Fraud Detection\",\n        \"Accurate, efficient and scalable training of Graph Neural Networks\",\n        \"AGL: A Scalable System for Industrial-Purpose Graph Machine Learning\",\n        \"Link Prediction Based on Graph Neural Networks\",\n        \"ALG: Fast and Accurate Active Learning Framework for Graph Convolutional Networks\",\n        \"ZIPPER: Exploiting Tile- and Operator-level Parallelism for General and Scalable Graph Neural Network Acceleration\",\n        \"Buri: Scaling Big-Memory Computing with Hardware-Based Memory Expansion\",\n        \"DistDGL: Distributed Graph Neural Network Training for Billion-Scale Graphs\",\n        \"AliGraph: A Comprehensive Graph Neural Network Platform\"\n    ],\n    \"reasoning\": \"Selected these 48 references because they represent foundational work and recent advances in Accelerating Sampling and Aggregation Operations in GNN Frameworks with GPU Initiated Direct Storage Accesses, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}