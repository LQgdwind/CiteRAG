{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 61 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Fibers are not (P)Threads\n\nPaper Abstract: Abstract. Asynchronous programming models (APM) are gaining more and more traction, allowing applications to expose the available concurrency to a runtime system tasked with coordinating the execution. While MPI has long provided support for multi-threaded communication and non-blocking operations, it falls short of adequately supporting APMs as correctly and efficiently handling MPI communication in different models is still a challenge. Meanwhile, new low-level implementations of light-weight, cooperatively scheduled execution contexts (fibers, aka user-level threads (ULT)) are meant to serve as a basis for higher-level APMs and their integration in MPI implementations has been proposed as a replacement for traditional POSIX thread support to alleviate these challenges. In this paper, we first establish a taxonomy in an attempt to clearly distinguish different concepts in the parallel software stack. We argue that the proposed tight integration of fiber implementations with MPI is neither warranted nor beneficial and instead is detrimental to the goal of MPI being a portable communication abstraction. We propose MPI Continuations as an extension to the MPI standard to provide callback-based notifications on completed operations, leading to a clear separation of concerns by providing a loose coupling mechanism between MPI and APMs. We show that this interface is flexible and interacts well with different APMs, namely OpenMP detached tasks, OmpSs-2, and Argobots.\n\n{retrieved_text}\n\nGenerate exactly 61 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 61\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Cooperative Task Management Without Manual Stack Management\",\n        \"Scheduler Activations: Effective Kernel Support for the User-Level Management of Parallelism\",\n        \"StarPU: A Unified Platform for Task Scheduling on Heterogeneous Multicore Architectures\",\n        \"Exposition, Clarification, and Expansion of MPI Semantic Terms and Conventions: Is a Nonblocking MPI Function Permitted to Block?\",\n        \"The Portals 4.2 Network Programming Interface\",\n        \"A Survey of MPI Usage in the US Exascale Computing Project\",\n        \"DAGuE: A Generic Distributed DAG Engine for High Performance Computing\",\n        \"Optimizing Computation-Communication Overlap in Asynchronous Task-Based Programs\",\n        \"OmpSs-2 Specification\",\n        \"From Piz Daint to the Stars: Simulation of Stellar Mergers Using High-Level Abstractions\",\n        \"NAS Parallel Benchmarks, Multi-Zone Versions\",\n        \"Enabling MPI Interoperability through Flexible Communication Endpoints\",\n        \"OmpSs: A proposal for programming heterogeneous multi-core architectures\",\n        \"GNU Pth—The GNU Portable Threads\",\n        \"Programming with Continuations\",\n        \"Distinguishing coroutines and fibers\",\n        \"Finepoints: Partitioned Multithreaded MPI Communication\",\n        \"N3857: Improvements to std::future¡T¿ and Related APIs\",\n        \"The MPI_T events interface: An early evaluation and overview of the interface\",\n        \"Improving MPI Multi-threaded RMA Communication Performance\",\n        \"Request Completion Callback Function\",\n        \"Efficient MPI Support for Advanced Hybrid Programming Models\",\n        \"sPIN: High-performance Streaming Processing In the Network\",\n        \"The Open Group Base Specifications Issue 7\",\n        \"Minimizing the Usage of Hardware Counters for Collective Communication Using Triggered Operations\",\n        \"BOLT: Optimizing OpenMP Parallel Regions with User-Level Threads\",\n        \"HPX: A Task Based Programming Model in a Global Address Space\",\n        \"Boost.Fiber – Overview\",\n        \"Extending the MPI-2 Generalized Request Interface\",\n        \"makecontext, swapcontext – manipulate user context\",\n        \"pthreads – POSIX threads\",\n        \"MPI+ULT: Overlapping Communication and Computation with User-Level Threads\",\n        \"Object-Oriented Frameworks - A survey of methodological issues\",\n        \"NewMadeleine: An Efficient Support for High-Performance Networks in MPICH2\",\n        \"About Processes and Threads\",\n        \"Fibers\",\n        \"MPI: A Message-Passing Interface Standard\",\n        \"Problem Sizes and Parameters in NAS Parallel Benchmarks\",\n        \"High Performance Network Programming with OFI\",\n        \"OpenMP Application Programming Interface, Version 5.0\",\n        \"Give MPI Threading a Fair Chance: A Study of Multithreaded MPI Designs\",\n        \"A uGNI-Based MPICH2 Nemesis Network Module for the Cray XE\",\n        \"Intel threading building blocks: outfitting C++ for multi-core processor parallelism\",\n        \"The discoveries of continuations\",\n        \"Improving the Interoperability between MPI and Task-Based Programming Models\",\n        \"Integrating blocking and non-blocking MPI primitives with task-based programming models\",\n        \"INCA: In-Network Compute Assistance\",\n        \"Using MPI-3 RMA for Active Messages\",\n        \"Global Task Data-Dependencies in PGAS Applications\",\n        \"The Impact of Taskyield on the Design of Tasks Communicating Through MPI\",\n        \"Argobots: A Lightweight Low-Level Threading and Tasking Framework\",\n        \"Operating System Concepts (9 ed.)\",\n        \"Early Experiences Co-Scheduling Work and Communication Tasks for Hybrid MPI+X Applications\",\n        \"Multithreading in the Solaris Operating Environment\",\n        \"pthread – POSIX thread functions\",\n        \"pthread – POSIX Threads Library\",\n        \"pthreads – POSIX 1003.1c thread interface\",\n        \"UCX: Unified Communication X API Standard v1.6\",\n        \"UNIX Internals: The New Frontiers\",\n        \"Simplifying Communication Overlap in OpenSHMEM Through Integrated User-Level Thread Scheduling\",\n        \"Qthreads: An API for programming with millions of lightweight threads\"\n    ],\n    \"reasoning\": \"Selected these 61 references because they represent foundational work and recent advances in Fibers are not (P)Threads, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}