{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 47 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Recursive SPARQL for Graph Analytics\n\nPaper Abstract: Abstract. Work on knowledge graphs and graph-based data management often focus either on declarative graph query languages or on frameworks for graph analytics, where there has been little work in trying to combine both approaches. However, many real-world tasks conceptually involve combinations of these approaches: a graph query can be used to select the appropriate data, which is then enriched with analytics, and then possibly filtered or combined again with other data by means of a query language. In this paper we propose a declarative language that is well suited to perform graph querying and analytical tasks. We do this by proposing a minimalistic extension of SPARQL to allow for expressing analytical tasks; in particular, we propose to extend SPARQL with recursive features, and provide a formal syntax and semantics for our language. We show that this language can express key analytical tasks on graphs (in fact, it is Turing complete), offering a more declarative alternative to existing frameworks and languages. We show how procedures in our language can be implemented over an off-the-shelf SPARQL engine with a specialised client that allows parallelisation and batch-based processing when memory is limited. Results show that with such an implementation, procedures for popular analytics currently run in seconds or minutes for selective sub-graphs (our target use-case) but struggle at larger scales.\n\n{retrieved_text}\n\nGenerate exactly 47 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 47\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Online Appendix\",\n        \"Foundations of databases\",\n        \"G-CORE: A Core for Future Graph Query Languages\",\n        \"Foundations of Modern Query Languages for Graph Databases\",\n        \"Strategies for Executing Federated Queries in SPARQL1.1\",\n        \"Relational inductive biases, deep learning, and graph networks\",\n        \"Knowledge Graphs: New Directions for Knowledge Representation on the Semantic Web\",\n        \"On the Expressive Power of Query Languages for Matrices\",\n        \"An optimal lower bound on the number of variables for graph identification\",\n        \"Scaling Knowledge Access and Retrieval at Airbnb\",\n        \"One Trillion Edges: Graph Processing at Facebook-Scale\",\n        \"LDScript: A Linked Data Script Language\",\n        \"GraphStep: A System Architecture for Sparse-Graph Algorithms\",\n        \"Wikidata: a free collaborative knowledgebase\",\n        \"Cypher: An Evolving Query Language for Property Graphs\",\n        \"On the Expressive Power of Linear Algebra on Graphs\",\n        \"PowerGraph: Distributed Graph-Parallel Computation on Natural Graphs\",\n        \"SPARQL 1.1 Query Language\",\n        \"Building The LinkedIn Knowledge Graph\",\n        \"LaraDB: A Minimalist Kernel for Linear and Relational Algebra Computation\",\n        \"SPARQL with Property Paths\",\n        \"HipG: parallel processing of large-scale graphs\",\n        \"Making search easier: How Amazon’s Product Graph is helping customers find products more easily\",\n        \"Graphalytics Benchmark Suite\",\n        \"GraphLab: A New Framework For Parallel Machine Learning\",\n        \"Pregel: a system for large-scale graph processing\",\n        \"Getting the Most Out of Wikidata: Semantic Technology Usage in Wikipedia’s Knowledge Graph\",\n        \"Graph Database Applications and Concepts with Neo4j\",\n        \"Weisfeiler and leman go neural: Higher-order graph neural networks\",\n        \"The PageRank citation ranking: Bringing order to the Web\",\n        \"Semantics and complexity of SPARQL\",\n        \"Cracking the Code on Conversational Commerce\",\n        \"Recursion in SPARQL\",\n        \"The Gremlin graph traversal machine and language\",\n        \"The Graph Neural Network Model\",\n        \"The Pagerank-Index: Going beyond Citation Counts in Quantifying Scientific Impact of Researchers\",\n        \"Trinity: a distributed graph engine on a memory cloud\",\n        \"Bring rich knowledge of people, places, things and local businesses to your apps\",\n        \"Introducing the Knowledge Graph: things, not strings\",\n        \"Signal/Collect12\",\n        \"Linear Recursion in G-CORE\",\n        \"A Comprehensive Survey on Graph Neural Networks\",\n        \"GraphX: a resilient distributed graph system on spark\",\n        \"Shark: SQL and rich analytics at scale\",\n        \"How Powerful are Graph Neural Networks?\",\n        \"Apache Spark: a unified engine for big data processing\",\n        \"A Distributed Graph Engine for Web Scale RDF Data\"\n    ],\n    \"reasoning\": \"Selected these 47 references because they represent foundational work and recent advances in Recursive SPARQL for Graph Analytics, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}