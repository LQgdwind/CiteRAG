{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 51 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Property Graph Schema Optimization for Domain-Specific Knowledge Graphs\n\nPaper Abstract: Abstract. Enterprises are creating domain-specific knowledge graphs by curating and integrating their business data from multiple sources. The data in these knowledge graphs can be described using ontologies, which provide a semantic abstraction to define the content in terms of the entities and the relationships of the domain. The rich semantic relationships in an ontology contain a variety of opportunities to reduce edge traversals and consequently improve the graph query performance. Although there has been a lot of effort to build systems that enable efficient querying over knowledge graphs, the problem of schema optimization for query performance has been largely ignored in the graph setting. In this work, we show that graph schema design has significant impact on query performance, and then propose optimization algorithms that exploit the opportunities from the domain ontology to generate efficient property graph schemas. To the best of our knowledge, we are the first to present an ontology-driven approach for property graph schema optimization. We conduct empirical evaluations with two real-world knowledge graphs from medical and financial domains. The results show that the schemas produced by the optimization algorithms achieve up to 2 orders of magnitude speed-up compared to the baseline approach.\n\n{retrieved_text}\n\nGenerate exactly 51 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 51\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Amazon neptune\",\n        \"Azure cosmos db\",\n        \"Federal deposit insurance corporation\",\n        \"Gremlin query language\",\n        \"Janusgraph: Distributed graph database\",\n        \"The neo4j graph platform\",\n        \"Owl 2 web ontology language document overview\",\n        \"Securities and exchange commission\",\n        \"Sw-store: a vertically partitioned DBMS for semantic web data management\",\n        \"Automated selection of materialized views and indexes in sql databases\",\n        \"Freebase: a collaboratively created graph database for structuring human knowledge\",\n        \"An analytical study of large SPARQL query logs\",\n        \"Building an efficient RDF store over a relational database\",\n        \"The anatomy of a large-scale hypertextual web search engine\",\n        \"Automatic physical database tuning: A relaxation-based approach\",\n        \"An efficient sql-based RDF querying scheme\",\n        \"Entity Resolution in the Web of Data\",\n        \"A relational model of data for large shared data banks\",\n        \"Kaskade: Graph views for efficient graph analytics\",\n        \"Cophy: A scalable, portable, and interactive index advisor for large workloads\",\n        \"Tigergraph: A native MPP graph database\",\n        \"Big Data Integration\",\n        \"Answering pattern queries using views\",\n        \"Physical database design for relational databases\",\n        \"Cypher: An evolving query language for property graphs\",\n        \"SPARQL query processing with conventional relational database systems\",\n        \"Defining schemas for property graphs by using the graphql schema definition language\",\n        \"Extending in-memory relational database engines with native graph support\",\n        \"Scalable sparql querying of large rdf graphs\",\n        \"Coradd: Correlation aware database designer for materialized views and indexes\",\n        \"Dbpedia - A large-scale, multilingual knowledge base extracted from wikipedia\",\n        \"Mining of Massive Datasets\",\n        \"Estimating the cardinality of RDF graph patterns\",\n        \"Extended characteristic sets: Graph indexing for SPARQL query optimization\",\n        \"Nose: Schema design for nosql applications\",\n        \"Characteristic sets: Accurate cardinality estimation for RDF queries with multiple joins\",\n        \"The RDF-3X engine for scalable management of RDF data\",\n        \"Industry-scale knowledge graphs: Lessons and challenges\",\n        \"An ontology-based conversation system for knowledge bases\",\n        \"Discovery and creation of rich entities for knowledge bases\",\n        \"Graph Databases\",\n        \"Relational processing of RDF queries: a survey\",\n        \"Natural language querying of complex business intelligence queries\",\n        \"Yago: A large ontology from wikipedia and wordnet\",\n        \"Sqlgraph: An efficient relational-based property graph store\",\n        \"Incremental view maintenance for property graph queries\",\n        \"IBM db2 graph: Supporting synergistic and retrofittable graph queries inside IBM db2\",\n        \"Heuristics-based query optimisation for SPARQL\",\n        \"PGQL: a property graph query language\",\n        \"Approximation Algorithms\",\n        \"Db2 design advisor: Integrated automatic physical database design\"\n    ],\n    \"reasoning\": \"Selected these 51 references because they represent foundational work and recent advances in Property Graph Schema Optimization for Domain-Specific Knowledge Graphs, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}