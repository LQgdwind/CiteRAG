{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 46 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Towards Trustworthy Automated Program Verifiers: Formally Validating Translations into an Intermediate Verification Language (extended version)\n\nPaper Abstract: Abstract. Automated program verifiers are typically implemented using an intermediate verification language (IVL), such as Boogie or Why3. A verifier front-end translates the input program and specification into an IVL program, while the back-end generates proof obligations for the IVL program and employs an SMT solver to discharge them. Soundness of such verifiers therefore requires that the front-end translation faithfully captures the semantics of the input program and specification in the IVL program, and that the back-end reports success only if the IVL program is actually correct. For a verification tool to be trustworthy, these soundness conditions must be satisfied by its actual implementation, not just the program logic it uses. In this paper, we present a novel validation methodology that, given a formal semantics for the input language and IVL, provides formal soundness guarantees for front-end implementations. For each run of the verifier, we automatically generate a proof in Isabelle showing that the correctness of the produced IVL program implies the correctness of the input program. This proof can be checked independently from the verifier in Isabelle and can be combined with existing work on validating back-ends to obtain an end-to-end soundness result. Our methodology based on forward simulation employs several modularisation strategies to handle the large semantic gap between the input language and the IVL, as well as the intricacies of practical, optimised translations. We present our methodology for the widely-used Viper and Boogie languages. Our evaluation shows that it is effective in validating the translations performed by the existing Viper implementation.\n\n{retrieved_text}\n\nGenerate exactly 46 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 46\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Separation Logic for Small-Step cminor\",\n        \"Leveraging Rust Types for Modular Specification and Verification\",\n        \"Automatically Verifying Typing Constraints for a Data Processing Language\",\n        \"The VerCors Tool Set: Verification of Parallel and Concurrent Software\",\n        \"Fast LCF-Style Proof Reconstruction for Z3\",\n        \"Checking Interference with Fractional Permissions\",\n        \"SMACK software verification toolchain\",\n        \"Secure Microkernels, State Monads and Scalable Refinement\",\n        \"A Formalization of Core Why3 in Coq\",\n        \"Creusot: A Foundry for the Deductive Verification of Rust Programs\",\n        \"Monomorphization of polymorphic maps and binders\",\n        \"Gradual C0: Symbolic Execution for Efficient Gradual Verification\",\n        \"Nagini: A Static Verifier for Python\",\n        \"Modular Product Programs\",\n        \"SMTCoq: A Plug-In for Integrating SMT Solvers into Coq\",\n        \"Why3 — Where Programs Meet Provers\",\n        \"Reconstructing veriT Proofs in Isabelle/HOL\",\n        \"A Framework for Proof-carrying Logical Transformations\",\n        \"Formally Verifying Optimizations with Block Simulations\",\n        \"Certification of a Tool Chain for Deductive Program Verification. (Certification d’une chaine de vérification déductive de programmes)\",\n        \"Dynamic Frames: Support for Framing, Dependencies and Sharing Without Restrictions\",\n        \"Frama-C: A software analysis perspective\",\n        \"Refinement in the Formal Verification of the seL4 Microkernel\",\n        \"SYMDIFF: A Language-Agnostic Semantic Diff Tool for Imperative Programs\",\n        \"Powering the static driver verifier using corral\",\n        \"Formal Translation of Bytecode into BoogiePL\",\n        \"This is Boogie 2.\",\n        \"Dafny: An Automatic Program Verifier for Functional Correctness\",\n        \"A Polymorphic Intermediate Verification Language: Design and Logical Encoding\",\n        \"Generating Proof Certificates for a Language-Agnostic Deductive Program Verifier\",\n        \"Forward and Backward Simulations: I. Untimed Systems\",\n        \"The Jessie plugin for Deductive Verification in Frama-C\",\n        \"Viper: A Verification Infrastructure for Permission-Based Reasoning\",\n        \"Isabelle/HOL - A Proof Assistant for Higher-Order Logic\",\n        \"The Relationship Between Separation Logic and Implicit Dynamic Frames\",\n        \"Towards Trustworthy Automated Program Verifiers: Formally Validating Translations into an Intermediate Verification Language – Artifact\",\n        \"Formally Validating a Practical Verification Condition Generator\",\n        \"A Framework for the Automatic Formal Verification of Refinement from Cogent to C.\",\n        \"Implicit Dynamic Frames\",\n        \"Formal verification of translation validators: a case study on instruction scheduling optimizations\",\n        \"Verified validation of lazy code motion\",\n        \"A Machine Checked Soundness Proof for an Intermediate Verification Language\",\n        \"Certifying C program correctness with respect to CH2O with VeriFast\",\n        \"Mind the Gap\",\n        \"Gobra: Modular Specification and Verification of Go Programs\",\n        \"Sound Gradual Verification with Symbolic Execution\"\n    ],\n    \"reasoning\": \"Selected these 46 references because they represent foundational work and recent advances in Towards Trustworthy Automated Program Verifiers: Formally Validating Translations into an Intermediate Verification Language (extended version), providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}