{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 52 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: A Neural Network Architecture for Program Understanding Inspired by Human Behaviors\n\nPaper Abstract: Abstract Program understanding is a fundamental task in program language processing. Despite the success, existing works fail to take human behaviors as reference in understanding programs. In this paper, we consider human behaviors and propose the PGNN-EK model that consists of two main components. On the one hand, inspired by the “divide-and-conquer” reading behaviors of humans, we present a partitioning-based graph neural network model PGNN on the upgraded AST of codes. On the other hand, to characterize human behaviors of resorting to other resources to help code comprehension, we transform raw codes with external knowledge and apply pre-training techniques for information extraction. Finally, we combine the two embeddings generated from the two components to output code embeddings. We conduct extensive experiments to show the superior performance of PGNN-EK on the code summarization and code clone detection tasks. In particular, to show the generalization ability of our model, we release a new dataset that is more challenging for code clone detection and could advance the development of the community. Our codes and data are publicly available at https://github.com/RecklessRonan/PGNN-EK.\n\n{retrieved_text}\n\nGenerate exactly 52 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 52\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"A transformer-based approach for source code summarization\",\n        \"Unified pre-training for program understanding and generation\",\n        \"Suggesting accurate method and class names\",\n        \"A survey of machine learning for big code and naturalness\",\n        \"Learning to represent programs with graphs\",\n        \"code2seq: Generating sequences from structured representations of code\",\n        \"On the bottleneck of graph neural networks and its practical implications\",\n        \"code2vec: learning distributed representations of code\",\n        \"Deep learning for AI\",\n        \"Infercode: Self-supervised learning of code representations by predicting subtrees\",\n        \"Programl: A graph-based program representation for data flow analysis and compiler optimizations\",\n        \"Open vocabulary learning on source code with a graph-structured cache\",\n        \"A deep language model for software code\",\n        \"Codebert: A pre-trained model for programming and natural languages\",\n        \"Fast graph representation learning with PyTorch Geometric\",\n        \"Deep residual learning for image recognition\",\n        \"Global relational models of source code\",\n        \"On the naturalness of software\",\n        \"Summarizing source code with transferred API knowledge\",\n        \"Codesearchnet challenge: Evaluating the state of semantic code search\",\n        \"Summarizing source code using a neural attention model\",\n        \"On using very large target vocabulary for neural machine translation\",\n        \"Big code != big vocabulary: open-vocabulary models for source code\",\n        \"A neural model for generating natural language summaries of program subroutines\",\n        \"BART: denoising sequence-to-sequence pre-training for natural language generation, translation, and comprehension\",\n        \"Gated graph sequence neural networks\",\n        \"ORANGE: a method for evaluating automatic evaluation metrics for machine translation\",\n        \"Retrieval-augmented generation for code summarization via hybrid GNN\",\n        \"Roberta: A robustly optimized BERT pretraining approach\",\n        \"Codexglue: A machine learning benchmark dataset for code understanding and generation\",\n        \"Learning text similarity with siamese recurrent networks\",\n        \"Reading hierarchies in code: Assessment of a basic computational skill\",\n        \"How could neural networks understand programs?\",\n        \"Code completion with statistical language models\",\n        \"An introduction to program comprehension for computer science educators\",\n        \"Neural code summarization: How far are we?\",\n        \"Towards a big data curated benchmark of inter-project code clones\",\n        \"Evaluating clone detection tools with bigclonebench\",\n        \"Intellicode compose: code generation using transformer\",\n        \"Attention is all you need\",\n        \"Detecting code clones with graph neural network and flow-augmented abstract syntax tree\",\n        \"Code completion by modeling flattened abstract syntax trees as graphs\",\n        \"Supervised deep features for software functional clone detection by exploiting lexical and syntactical information in source code\",\n        \"Transformers: State-of-the-art natural language processing\",\n        \"Incorporating external knowledge through pre-training for natural language to code generation\",\n        \"Modeling and discovering vulnerabilities with code property graphs\",\n        \"Neural detection of semantic code clones via tree-based convolution\",\n        \"Codecmr: Cross-modal retrieval for function-level binary source code matching\",\n        \"Learning to execute\",\n        \"Retrieval-based neural source code summarization\",\n        \"A novel neural source code representation based on abstract syntax tree\",\n        \"Language-agnostic representation learning of source code from structure and context\"\n    ],\n    \"reasoning\": \"Selected these 52 references because they represent foundational work and recent advances in A Neural Network Architecture for Program Understanding Inspired by Human Behaviors, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}