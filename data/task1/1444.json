{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 50 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Distributed-memory ‚Ñã-matrix Algebra I: Data distribution and matrix-vector multiplication\n\nPaper Abstract: Abstract We introduce a data distribution scheme for ‚Ñã‚Ñã{\\mathcal{H}}-matrices and a distributed-memory algorithm for ‚Ñã‚Ñã{\\mathcal{H}}-matrix-vector multiplication. Our data distribution scheme avoids an expensive Œ©‚Äã(P2)Œ©superscriptùëÉ2\\Omega(P^{2}) scheduling procedure used in previous work, where PùëÉP is the number of processes, while data balancing is well-preserved. Based on the data distribution, our distributed-memory algorithm evenly distributes all computations among PùëÉP processes and adopts a novel tree-communication algorithm to reduce the latency cost. The overall complexity of our algorithm is O‚Äã(N‚Äãlog‚Å°NP+Œ±‚Äãlog‚Å°P+Œ≤‚Äãlog2‚Å°P)ùëÇùëÅùëÅùëÉùõºùëÉùõΩsuperscript2ùëÉO\\Big{(}\\frac{N\\log N}{P}+\\alpha\\log P+\\beta\\log^{2}P\\Big{)} for ‚Ñã‚Ñã{\\mathcal{H}}-matrices under weak admissibility condition, where NùëÅN is the matrix size, Œ±ùõº\\alpha denotes the latency, and Œ≤ùõΩ\\beta denotes the inverse bandwidth. Numerically, our algorithm is applied to address both two- and three-dimensional problems of various sizes among various numbers of processes. On thousands of processes, good parallel efficiency is still observed.\n\n{retrieved_text}\n\nGenerate exactly 50 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 50\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Multifrontal method\",\n        \"A fast block low-rank dense solver with applications to finite-element matrices\",\n        \"An implementation of the fast multipole method without multipoles\",\n        \"A hierarchical O‚Äã(N‚Äãlog‚ÄãN)ùëÇùëÅlogùëÅO(N\\\\mathrm{log}N) force-calculation algorithm\",\n        \"Why finite element discretizations can be factored by triangular hierarchical matrices\",\n        \"Hierarchical matrices (1st ed.), Volume 63\",\n        \"Existence of ‚Ñã‚Ñã\\\\mathcal{H}-matrix approximants to the inverse FE-matrix of elliptic operators with L‚àûsuperscriptùêøL^{\\\\infty}-coefficients\",\n        \"A parallel directional fast multipole method\",\n        \"A fast butterfly algorithm for the computation of Fourier integral operators\",\n        \"A distributed-memory hierarchical solver for general sparse linear systems\",\n        \"A fast adaptive multipole algorithm in three dimensions\",\n        \"Direct Methods for Sparse Matrices\",\n        \"Fast directional multilevel algorithms for oscillatory kernels\",\n        \"A fast directional algorithm for high frequency acoustic scattering in two dimensions\",\n        \"The black-box fast multipole method\",\n        \"An efficient multicore implementation of a novel HSS-structured multifrontal solver using randomized sampling\",\n        \"Construction and arithmetics of H-matrices\",\n        \"A parallel version of the fast multipole method\",\n        \"A fast algorithm for particle simulations\",\n        \"A new version of the fast multipole method for the Laplace equation in three dimensions\",\n        \"A sparse matrix arithmetic based on ‚Ñã‚Ñã\\\\mathcal{H}-matrices. I. introduction to ‚Ñã‚Ñã\\\\mathcal{H}-matrices\",\n        \"Sparse H-matrix arithmetic: General complexity estimates\",\n        \"On ‚Ñã2superscript‚Ñã2\\\\mathcal{H}^{2}-matrices\",\n        \"Hierarchical interpolative factorization for elliptic operators: differential equations\",\n        \"Hierarchical interpolative factorization for elliptic operators: integral equations\",\n        \"Hierarchical matrix techniques on massively parallel computers\",\n        \"Parallel ‚Ñã‚Ñã\\\\mathcal{H}-matrix arithmetic on distributed-memory systems\",\n        \"Parallel ‚Ñã‚Ñã\\\\mathcal{H}-matrix arithmetics on shared memory systems\",\n        \"‚Ñã‚Ñã\\\\mathcal{H}-LU factorization on many-core systems\",\n        \"Superlu\",\n        \"Interpolative butterfly factorization\",\n        \"Butterfly factorization\",\n        \"A multiscale butterfly algorithm for multidimensional Fourier integral operators\",\n        \"Multidimensional butterfly factorization\",\n        \"Distributed-memory hierarchical interpolative factorization\",\n        \"Fast construction of hierarchical matrix representation from matrix-vector multiplication\",\n        \"A recursive skeletonization factorization based on strong admissibility\",\n        \"An algorithm for the rapid evaluation of special function transforms\",\n        \"Rapid solution of integral equations of classical potential theory\",\n        \"A distributed-memory package for dense hierarchically semi-separable matrix computations using randomization\",\n        \"Fast parallel tree codes for gravitational and fluid dynamical N-body problems\",\n        \"A parallel adaptive fast multipole method\",\n        \"Parallelization of the inverse fast multipole method with an application to boundary element method\",\n        \"PBBFMM3D: a parallel black-box algorithm for kernel matrix-vector multiplication\",\n        \"Block basis factorization for scalable kernel evaluation\",\n        \"Efficient scalable algorithms for solving dense linear systems with hierarchically semiseparable structures\",\n        \"A parallel hashed oct-tree N-body algorithm\",\n        \"Fast algorithms for hierarchically semiseparable matrices\",\n        \"An efficient method for block low-rank approximations for kernel matrix systems\",\n        \"A new parallel kernel-independent fast multipole method\"\n    ],\n    \"reasoning\": \"Selected these 50 references because they represent foundational work and recent advances in Distributed-memory ‚Ñã-matrix Algebra I: Data distribution and matrix-vector multiplication, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}