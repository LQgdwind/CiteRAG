{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 51 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: ESBMC v7.6: Enhanced Model Checking of C++ Programs with Clang AST\n\nPaper Abstract: Abstract This paper presents Efficient SMT-Based Context-Bounded Model Checker (ESBMC) v7.6, an extended version based on previous work on ESBMC v7.3 by K. Song et al. [1]. The v7.3 introduced a new Clang-based C++ front-end to address the challenges posed by modern C++ programs. Although the new front-end has demonstrated significant potential in previous studies, it remains in the developmental stage and lacks several essential features. ESBMC v7.6 further enhanced this foundation by adding and extending features based on the Clang AST, such as 1 exception handling, 2 extended memory management and memory safety verification, including dangling pointers, duplicate deallocation, memory leaks and rvalue references and 3 new operational models for STL updating the outdated C++ operational models. Our extensive experiments demonstrate that ESBMC v7.6 can handle a significantly broader range of C++ features introduced in recent versions of the C++ standard.\n\n{retrieved_text}\n\nGenerate exactly 51 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 51\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Esbmc v7.3: Model checking c++ programs using clang ast\",\n        \"C++ How to Program: Introducing the New C++14 Standard\",\n        \"Trends and challenges in the vulnerability mitigation landscape\",\n        \"A C/C++ code vulnerability dataset with code changes and cve summaries\",\n        \"Common Vulnerabilities and Exposures database\",\n        \"Common Weakness Enumeration\",\n        \"Software testingâ€“goals, principles and limitations\",\n        \"Introduction to Software Testing\",\n        \"Bounded model checking of C++ programs based on the Qt cross-platform framework\",\n        \"Code-level model checking in the software development workflow\",\n        \"Model checking C++ programs\",\n        \"Smt-based bounded model checking of c++ programs\",\n        \"C++20 standard\",\n        \"LLVM clang\",\n        \"Getting started with LLVM core libraries\",\n        \"LLVM cookbook\",\n        \"Smt-based context-bounded model checking for CUDA programs\",\n        \"How cuda powers the machine learning revolution\",\n        \"The c++ standard library: a tutorial and reference\",\n        \"Simple contracts for C++(R1)\",\n        \"A tool for checking ansi-c programs\",\n        \"Advanced compiler design implementation\",\n        \"Linear completeness thresholds for bounded model checking\",\n        \"ESBMC L312-L359\",\n        \"C++03 standard\",\n        \"Smt-based bounded model checking for embedded ANSI-C software\",\n        \"Verifying multi-threaded software using smt-based context-bounded model checking\",\n        \"C++ primer plus\",\n        \"The C++ programming language fourth edition\",\n        \"A semantic analysis of C++ templates\",\n        \"GCC test suite\",\n        \"GCC bugzilla bug 10158\",\n        \"CBMC 5.88.1\",\n        \"cppcheck\",\n        \"C++ how to program, sixth edition\",\n        \"C++ How To Program (6th edn.)\",\n        \"CBMC regression test suite\",\n        \"Python unittest\",\n        \"ESBMC v7.6 evaluation archive on Zenodo\",\n        \"Z3: An efficient smt solver\",\n        \"Bitwuzla\",\n        \"Boolector: An efficient smt solver for bit-vectors and arrays\",\n        \"The mathsat 4 smt solver\",\n        \"Cvc4\",\n        \"cvc5: A versatile and industrial-strength smt solver\",\n        \"Yices 2.2\",\n        \"ESBMC cpp support feature coverage and backlog\",\n        \"Esbmc issue 940: Umbrella issue for the order of ctors/dtors\",\n        \"Bounded model checking of C++ programs based on the qt framework\",\n        \"Sotereia project\",\n        \"State of the art in software verification and witness validation: Sv-comp 2024\"\n    ],\n    \"reasoning\": \"Selected these 51 references because they represent foundational work and recent advances in ESBMC v7.6: Enhanced Model Checking of C++ Programs with Clang AST, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}