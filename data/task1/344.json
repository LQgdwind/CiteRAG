{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 55 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Understanding and Optimizing Persistent Memory AllocationThis work was supported in part by NSF grants CCF-1422649, CCF-1717712, and CNS-1900803, and by a Google Faculty Research award.\n\nPaper Abstract: Abstract The proliferation of fast, dense, byte-addressable nonvolatile memory suggests that data might be kept in pointer-rich “in-memory” format across program runs and even process and system crashes. For full generality, such data requires dynamic memory allocation, and while the allocator could in principle be “rolled into” each data structure, it is desirable to make it a separate abstraction. Toward this end, we introduce recoverability, a correctness criterion for persistent allocators, together with a nonblocking allocator, Ralloc, that satisfies this criterion. Ralloc is based on the LRMalloc of Leite and Rocha, with three key innovations. First, we persist just enough information during normal operation to permit correct reconstruction of the heap after a full-system crash. Our reconstruction mechanism performs garbage collection (GC) to identify and remedy any failure-induced memory leaks. Second, we introduce the notion of filter functions, which identify the locations of pointers within persistent blocks to mitigate the limitations of conservative GC. Third, to allow persistent regions to be mapped at an arbitrary address, we employ position-independent (offset-based) pointers for both data and metadata. Experiments show Ralloc to be performance-competitive with both Makalu, the state-of-the-art lock-based persistent allocator, and such transient allocators as LRMalloc and JEMalloc. In particular, reliance on GC and offline metadata reconstruction allows Ralloc to pay almost nothing for persistence during normal operation.\n\n{retrieved_text}\n\nGenerate exactly 55 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 55\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Towards efficient nonblocking persistent software transactional memory\",\n        \"Hoard: A scalable memory allocator for multithreaded applications\",\n        \"Makalu: Fast recoverable allocation of non-volatile memory\",\n        \"Garbage collection in an uncooperative environment\",\n        \"STAMP: Stanford transactional applications for multi-processing\",\n        \"Atlas: Leveraging locks for non-volatile memory consistency\",\n        \"Multi-level shared state for distributed systems\",\n        \"Efficient support of position independence on non-volatile memory\",\n        \"xfs: DAX support, March 2015.\",\n        \"NV-Heaps: Making persistent objects fast and safe with next-generation, non-volatile memories\",\n        \"Object-oriented recovery for non-volatile memory\",\n        \"YCSB core workloads, 2010.\",\n        \"Benchmarking cloud serving systems with YCSB\",\n        \"Romulus: Efficient algorithms for persistent transactional memory\",\n        \"makalu_alloc, May 2017.\",\n        \"A scalable concurrent malloc (3) implementation for FreeBSD\",\n        \"Practical Lock-Freedom\",\n        \"A persistent lock-free queue for non-volatile memory\",\n        \"NBmalloc: Allocating memory in a lock-free manner\",\n        \"Hodor: Intra-process isolation for high-throughput data plane libraries\",\n        \"McRT-Malloc—a scalable transactional memory allocator\",\n        \"shbench, 2014.\",\n        \"Intel 64 and IA-32 Architectures Software Developer’s Manual, May 2019.\",\n        \"Failure-atomic persistent memory updates via JUSTDO logging\",\n        \"Linearizability of persistent memory objects under a full-system-crash failure model\",\n        \"Basic performance measurements of the Intel Optane DC persistent memory module\",\n        \"Memory allocation for long-running server applications\",\n        \"A memory allocator, April 2000.\",\n        \"LRMalloc: A modern and competitive lock-free dynamic memory allocator\",\n        \"libmemcached, 2011.\",\n        \"iDO: Compiler-directed failure atomicity for nonvolatile memory\",\n        \"Hazard pointers: Safe memory reclamation for lock-free objects\",\n        \"Scalable lock-free dynamic memory allocation\",\n        \"Simple, fast, and practical non-blocking and blocking concurrent queue algorithms\",\n        \"An analysis of persistent memory use with WHISPER\",\n        \"Fast concurrent lock-free binary search trees\",\n        \"Dalí: A periodically persistent hash map\",\n        \"Memory management techniques for large-scale persistent-main-memory systems\",\n        \"OneFile: A wait-free persistent transactional memory\",\n        \"Persistent memory programming\",\n        \"Persistent memory development kit, September 2014.\",\n        \"Shared-Memory Synchronization\",\n        \"SFMalloc: A lock-free and mostly synchronization-free dynamic memory allocator for manycores\",\n        \"On the effectiveness of address-space randomization\",\n        \"pthread_mutex_lock.\",\n        \"Systems programming: Coping with parallelism\",\n        \"Speedy Transactions in Multicore In-memory Databases\",\n        \"ERIM: Secure, efficient in-process isolation with protection keys (MPK)\",\n        \"Simple and fast biased locks\",\n        \"Mnemosyne: Lightweight persistent memory\",\n        \"Interval-based memory reclamation\",\n        \"Add support for NV-DIMMs to Ext4, December 2017.\",\n        \"Persistent memory, August 2019.\",\n        \"NOVA: A log-structured file system for hybrid volatile/non-volatile main memories\",\n        \"Orion: A distributed file system for non-volatile main memory and RDMA-capable networks\"\n    ],\n    \"reasoning\": \"Selected these 55 references because they represent foundational work and recent advances in Understanding and Optimizing Persistent Memory AllocationThis work was supported in part by NSF grants CCF-1422649, CCF-1717712, and CNS-1900803, and by a Google Faculty Research award., providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}