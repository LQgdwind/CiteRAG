{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 48 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Unifying Static and Dynamic Intermediate Languages for Accelerator Generators\n\nPaper Abstract: Abstract. Compilers for accelerator design languages (ADLs) translate high-level languages into application-specific hardware. ADL compilers rely on a hardware control interface to compose hardware units. There are two choices: static control, which relies on cycle-level timing; or dynamic control, which uses explicit signalling to avoid depending on timing details. Static control is efficient but brittle; dynamic control incurs hardware costs to support compositional reasoning. Piezo is an ADL compiler that unifies static and dynamic control in a single intermediate language (IL). Its key insight is that the IL‚Äôs static fragment is a refinement of its dynamic fragment: static code admits a subset of the run-time behaviors of the dynamic equivalent. Piezo can optimize code by combining facts from static and dynamic submodules, and it opportunistically converts code from dynamic to static control styles. We implement Piezo as an extension to an existing dynamic ADL compiler, Calyx. We use Piezo to implement an MLIR frontend, a systolic array generator, and a packet-scheduling hardware generator to demonstrate its optimizations and the static‚Äìdynamic interactions it enables.\n\n{retrieved_text}\n\nGenerate exactly 48 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 48\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Silicon C: A hardware backend for SUIF\",\n        \"Stepwise debugging for hardware accelerators\",\n        \"Stratus high-level synthesis\",\n        \"LegUp: High-level synthesis for FPGA-based processor/accelerator systems\",\n        \"Balancing static islands in dynamically scheduled circuits using continuous petri nets\",\n        \"Combining dynamic & static scheduling in high-level synthesis\",\n        \"Finding and finessing static islands in dynamically scheduled circuits\",\n        \"PolySA: Polyhedral-based systolic array auto-compilation\",\n        \"Operational refinement for compiler correctness\",\n        \"Type-directed scheduling of streaming accelerators\",\n        \"Using deep programmability to put network owners in control\",\n        \"A configurable cloud-scale DNN processor for real-time AI\",\n        \"Accelerating halide on an FPGA\",\n        \"Darkroom: Compiling high-level image processing code into hardware pipelines\",\n        \"oneAPI deep neural network library developer guide and reference\",\n        \"Intel High Level Synthesis Compiler\",\n        \"Dynamically scheduled high-level synthesis\",\n        \"In-datacenter performance analysis of a Tensor Processing Unit\",\n        \"Spatial: A language and compiler for application accelerators\",\n        \"Why systolic architectures?\",\n        \"HeteroCL: A multi-paradigm programming infrastructure for software-defined reconfigurable computing\",\n        \"LLVM: A compilation framework for lifelong program analysis & transformation\",\n        \"MLIR: Scaling compiler infrastructure for domain specific computation\",\n        \"PolyBench/C: The Polyhedral Benchmark Suite\",\n        \"Rectifier nonlinearities improve neural network acoustic models\",\n        \"HIR: An MLIR-based intermediate representation for hardware accelerator description\",\n        \"Catapult high-level synthesis\",\n        \"Formal abstractions for packet scheduling\",\n        \"Quantifying the cost and benefit of latency insensitive communication on FPGAs\",\n        \"Predictable accelerator design with time-sensitive affine types\",\n        \"Modular hardware design with timeline types\",\n        \"A compiler infrastructure for accelerator generators\",\n        \"Bambu: A modular framework for the high level synthesis of memory-intensive applications\",\n        \"Programming heterogeneous systems from an image processing DSL\",\n        \"Halide: A language and compiler for optimizing parallelism, locality, and recomputation in image processing pipelines\",\n        \"AHIR: A hardware intermediate representation for hardware generation from high-level programs\",\n        \"Œºùúá\\\\muir: An intermediate representation for transforming and optimizing the microarchitecture of application accelerators\",\n        \"synASM: A high-level synthesis framework with support for parallel and timed constructs\",\n        \"Programmable packet scheduling at line rate\",\n        \"Compiler discovered dynamic scheduling of irregular code in high-level synthesis\",\n        \"Compress static FSMs\",\n        \"Fix top-down static timing\",\n        \"Problems with static FSMs\",\n        \"HLS from PyTorch to System Verilog with MLIR and CIRCT\",\n        \"Verilator\",\n        \"Hector: A multi-level intermediate representation for hardware synthesis methodologies\",\n        \"Building a reusable and extensible automatic compiler infrastructure for reconfigurable devices\",\n        \"AutoPilot: A platform-based ESL synthesis system\"\n    ],\n    \"reasoning\": \"Selected these 48 references because they represent foundational work and recent advances in Unifying Static and Dynamic Intermediate Languages for Accelerator Generators, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}