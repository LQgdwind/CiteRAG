{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 45 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Recommending Metamodel Concepts during Modeling Activities with Pre-Trained Language Models\n\nPaper Abstract: Abstract The design of conceptually sound metamodels that embody proper semantics in relation to the application domain is particularly tedious in Model-Driven Engineering. As metamodels define complex relationships between domain concepts, it is crucial for a modeler to define these concepts thoroughly while being consistent with respect to the application domain. We propose an approach to assist a modeler in the design of metamodel by recommending relevant domain concepts in several modeling scenarios. Our approach does not require knowledge from the domain or to hand-design completion rules. Instead, we design a fully data-driven approach using a deep learning model that is able to abstract domain concepts by learning from both structural and lexical metamodel properties in a corpus of thousands of independent metamodels. We evaluate our approach on a test set containing 166 metamodels, unseen during the model training, with more than 5000 test samples. Our preliminary results show that the trained model is able to provide accurate top-555 lists of relevant recommendations for concept renaming scenarios. Although promising, the results are less compelling for the scenario of the iterative construction of the metamodel, in part because of the conservative strategy we use to evaluate the recommendations.\n\n{retrieved_text}\n\nGenerate exactly 45 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 45\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Automated recommendation of related model elements for domain models\",\n        \"Domore-a recommender system for domain modeling\",\n        \"A tour of language customization concepts\",\n        \"Model-driven engineering in a large industrial context—motorola case study\",\n        \"Mdeforge: an extensible web-based modeling platform\",\n        \"A neural probabilistic language model\",\n        \"Language models are few-shot learners\",\n        \"A NLP-based architecture for the autocompletion of partial domain models\",\n        \"An lstm-based neural network architecture for model transformations\",\n        \"Bert: Pre-training of deep bidirectional transformers for language understanding\",\n        \"A gnn-based recommender system to assist the specification of metamodels and models\",\n        \"Eclipse Emfatic\",\n        \"An uml class recommender system for software design\",\n        \"Codebert: A pre-trained model for programming and natural languages\",\n        \"Repository for model driven development (remodd)\",\n        \"Long short-term memory\",\n        \"Pre-trained contextual embedding of source code\",\n        \"Big code != big vocabulary: Open-vocabulary models for source code\",\n        \"Scelmo: Source code embeddings from language models\",\n        \"Semi-supervised classification with graph convolutional networks\",\n        \"Pattern-based auto-completion of uml modeling activities\",\n        \"Recommending auto-completions for software modeling activities\",\n        \"Cross-lingual language model pretraining\",\n        \"Roberta: A robustly optimized bert pretraining approach\",\n        \"Mar: A structure-based search engine for models\",\n        \"Assessing the quality of meta-models\",\n        \"An empirical study of the state of the practice and acceptance of model-driven engineering in four industrial cases\",\n        \"Towards an assessment grid for intelligent modeling assistance\",\n        \"Opportunities in intelligent modeling assistance\",\n        \"Atlanmod Modeling Tools\",\n        \"A diagrammatic approach to model completion\",\n        \"Improving language understanding by generative pre-training\",\n        \"Language models are unsupervised multitask learners\",\n        \"Recommendation systems for software engineering\",\n        \"The graph neural network model\",\n        \"Partial model completion in model driven engineering using constraint logic programming\",\n        \"Domain-specific model editors with model completion\",\n        \"Neural machine translation of rare words with subword units\",\n        \"Towards a cognizant virtual software modeling assistant using model clones\",\n        \"Fast and memory-efficient neural code completion\",\n        \"Attention is all you need\",\n        \"Combining code embedding with static analysis for function-call completion\",\n        \"The state of practice in model-driven engineering\",\n        \"Huggingface’s transformers: State-of-the-art natural language processing\",\n        \"Xlnet: Generalized autoregressive pretraining for language understanding\"\n    ],\n    \"reasoning\": \"Selected these 45 references because they represent foundational work and recent advances in Recommending Metamodel Concepts during Modeling Activities with Pre-Trained Language Models, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}