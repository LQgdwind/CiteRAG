{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 51 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: FlaKat: A Machine Learning-Based Categorization Framework for Flaky Tests\n\nPaper Abstract: Abstract Flaky tests can pass or fail non-deterministically, without alterations to a software system. Such tests are frequently encountered by developers and hinder the credibility of test suites. State-of-the-art research incorporates machine learning solutions into flaky test detection and achieves reasonably good accuracy. Moreover, the majority of automated flaky test repair solutions are designed for specific types of flaky tests. This research work proposes a novel categorization framework, called FlaKat, which uses machine-learning classifiers for fast and accurate prediction of the category of a given flaky test that reflects its root cause. Sampling techniques are applied to address the imbalance between flaky test categories in the International Dataset of Flaky Test (IDoFT). A new evaluation metric, called Flakiness Detection Capacity (FDC), is proposed for measuring the accuracy of classifiers from the perspective of information theory and provides proof for its effectiveness. The final FDC results are also in agreement with F1subscriptùêπ1F_{1} score regarding which classifier yields the best flakiness classification.\n\n{retrieved_text}\n\nGenerate exactly 51 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 51\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"What we talk about when we talk about software test flakiness\",\n        \"Simulating the effect of test flakiness on fault localization effectiveness\",\n        \"Mitigating the effects of flaky tests on mutation testing\",\n        \"Understanding flaky tests: The developer‚Äôs perspective\",\n        \"Killing the gatekeeper: Introducing a continuous integration system\",\n        \"A large-scale longitudinal study of flaky tests\",\n        \"FlakeFlagger: Predicting flakiness without rerunning tests\",\n        \"Modeling and ranking flaky tests at Apple\",\n        \"Flaky test detection in Android via event order exploration\",\n        \"IDFlakies: A framework for detecting and partially classifying flaky tests\",\n        \"Empirically detecting false test alarms using association rules\",\n        \"Towards a Bayesian Network Model for Predicting Flaky Automated Tests\",\n        \"What is the vocabulary of flaky tests?\",\n        \"An empirical analysis of flaky tests\",\n        \"iFixFlakies: A framework for automatically fixing order- dependent flaky tests\",\n        \"Domain-specific fixes for flaky tests with wrong assumptions on underdetermined specifications\",\n        \"FlakyFix: Using Large Language Models for Predicting Flaky Test Fix Categories and Test Code Repair\",\n        \"Know your neighbor: Fast static prediction of test flakiness\",\n        \"Distributed Representations of Sentences and Documents\",\n        \"code2vec: learning distributed representations of code\",\n        \"A Statistical Interpretation of Term Specificity and its Application in Retrieval\",\n        \"Adapting Neural Text Classification for Improved Software Categorization\",\n        \"Measuring intrusion detection capability: an information-theoretic approach\",\n        \"FlaKat: A Machine Learning-Based Categorization Framework for Flaky Tests\",\n        \"A Survey of flaky tests\",\n        \"Taming Google-Scale continuous testing\",\n        \"Root causing flaky tests in a large-scale industrial setting\",\n        \"A study on the lifecycle of flaky tests\",\n        \"The impact of failing, flaky, and high failure tests on the number of crash reports associated with Firefox builds\",\n        \"DeFlaker: Automatically detecting flaky tests\",\n        \"Debugging Flaky Tests using Spectrum-based Fault Localization\",\n        \"Understanding reproducibility and characteristics of flaky tests through test reruns in Java projects\",\n        \"Detecting, characterizing, and taming flaky tests\",\n        \"NonDex: A tool for detecting and debugging wrong assumptions on Java API Specification\",\n        \"On the Effect of Instrumentation on Test Flakiness\",\n        \"Predicting Flaky Tests Categories using Few-Shot Learning\",\n        \"Detecting assumptions on deterministic implementations of non-deterministic specifications\",\n        \"Shake It! Detecting flaky tests caused by concurrency with Shaker\",\n        \"A replication study on the usability of code vocabulary in predicting flaky tests\",\n        \"Practical Flaky Test Prediction using Common Code Evolution and Test History Data\",\n        \"Flakify: A Black-Box, Language Model-based Predictor for Flaky Tests\",\n        \"Evaluating Features for Machine Learning Detection of Order- and Non-Order-Dependent Flaky Tests\",\n        \"A qualitative study on the sources, impacts, and mitigation strategies of flaky tests\",\n        \"An empirical study of bugs in test code\",\n        \"Empirically revisiting the test independence assumption\",\n        \"Detecting flaky tests in probabilistic and machine learning applications\",\n        \"A study of oracle approximations in testing deep learning libraries\",\n        \"UMAP: Uniform Manifold Approximation and Projection for Dimension Reduction\",\n        \"AUC: A Better Measure than Accuracy in Comparing Learning Algorithms\",\n        \"You Look so Different: Finding Structural Clones and Subclones in Java Source Code\",\n        \"CCLearner: A Deep Learning-Based Clone Detection Approach\"\n    ],\n    \"reasoning\": \"Selected these 51 references because they represent foundational work and recent advances in FlaKat: A Machine Learning-Based Categorization Framework for Flaky Tests, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}