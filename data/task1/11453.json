{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 47 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: A Systematic Mapping Study on Teaching of Security Concepts in Programming Courses\n\nPaper Abstract: Abstract Context: To effectively defend against ever-evolving cybersecurity threats, software systems should be made as secure as possible. To achieve this, software developers should understand potential vulnerabilities and apply secure coding practices. To prepare these skilled professionals, it is important that cybersecurity concepts are included in programming courses taught at universities. Objective: To present a comprehensive and unbiased literature review on teaching of cybersecurity concepts in programming courses taught at universities. Method: We perform a Systematic Mapping Study. We present six research questions, define our selection criteria, and develop a classification scheme. Results and Conclusions: We select 24 publications. Our results show a wide range of research contributions. We also outline guidelines and identify opportunities for future studies. The guidelines include coverage of security knowledge categories and evaluation of contributions. We suggest that future studies should cover security issues, negative impacts, and countermeasures, as well as apply evaluation techniques that examine students’ knowledge. The opportunities for future studies are related to advanced courses, security knowledge frameworks, and programming environments. Furthermore, there is a need of a holistic security framework that covers the security concepts identified in this study and is suitable for education. Keywords—systematic mapping study; cybersecurity; secure programming; teaching; university\n\n{retrieved_text}\n\nGenerate exactly 47 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 47\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"SACH: A tool for assisting Secure Android application development\",\n        \"Curricula recommendations\",\n        \"How secure are our computer systems courses?\",\n        \"Towards finding the missing pieces to teach secure programming skills to students\",\n        \"Inculcating secure coding for beginners\",\n        \"Embedding security concepts in introductory programming courses\",\n        \"Evaluating secure programming knowledge\",\n        \"Learning principles and the secure programming clinic\",\n        \"SEI CERT C coding standard\",\n        \"SEI CERT C++ coding standard\",\n        \"SEI CERT Oracle coding standard for Java\",\n        \"Top 10 secure coding practices\",\n        \"Web application security trends report\",\n        \"Teaching secure coding practices to STEM students\",\n        \"Quasi-Experimentation: Design and Analysis Issues for Field Settings\",\n        \"Modules for teaching secure in Android application development\",\n        \"Effective learning of cybersecurity concepts with model-eliciting activities\",\n        \"TRAC: An approach to teaching security-aware programming in undergraduate computer science courses\",\n        \"ENISA threat landscape 2023, 2023.\",\n        \"SecLab: An innovative approach to learn and understand current security and privacy issues\",\n        \"Teaching Java security to enhance cybersecurity education\",\n        \"Writing Secure Code\",\n        \"19 Deadly Sins of Software Security\",\n        \"Guidelines for performing systematic literature reviews in software engineering\",\n        \"An Educational Intervention for Teaching Secure Coding Practices, pages 3–15.\",\n        \"Common weakness enumeration\",\n        \"Workforce framework for cybersecurity (NICE framework)\",\n        \"OWASP secure coding practices-quick reference guide\",\n        \"OWASP top ten\",\n        \"Teaching security in introductory C-programming courses\",\n        \"Is teaching with security in mind working?\",\n        \"Guidelines for conducting systematic mapping studies in software engineering: An update\",\n        \"Systematic Reviews in the Social Sciences: A Practical Guide\",\n        \"CWE top 25 most dangerous software errors\",\n        \"XSS for the masses: Integrating security in a web programming course using a security scanner\",\n        \"Computer Security: Principles and Practice\",\n        \"Evaluating two methods for integrating secure programming education\",\n        \"Hands-on labs for secure programming on modern trusted platforms\",\n        \"Security Injections@Towson: Integrating secure coding into introductory computer science courses\",\n        \"Seven pernicious kingdoms: A taxonomy of software security errors\",\n        \"Building Secure Software: How to Avoid Security Problems the Right Way\",\n        \"What are cybersecurity education papers about? A systematic literature review of SIGCSE and ITiCSE conferences\",\n        \"Preliminary evaluation of an ontology-based contextualized learning system for software security\",\n        \"Embedding secure coding instruction into the IDE: A field study in an advanced CS course\",\n        \"Teaching secure coding for beginning programmers\",\n        \"Experimentation in Software Engineering\",\n        \"Teaching secure software engineering: Writing secure code\"\n    ],\n    \"reasoning\": \"Selected these 47 references because they represent foundational work and recent advances in A Systematic Mapping Study on Teaching of Security Concepts in Programming Courses, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}