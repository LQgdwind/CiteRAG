{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 55 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: How to generate random lambda terms?\n\nPaper Abstract: Abstract. We survey several methods of generating large random ŒªùúÜ\\lambda-terms, focusing on their closed and simply-typed variants. We discuss methods of exact- and approximate-size generation, as well as methods of achieving size-uniform and non-uniform outcome distributions.\n\n{retrieved_text}\n\nGenerate exactly 55 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 55\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Testing AUTOSAR software with QuickCheck\",\n        \"Almost Every Simply Typed Lambda-Term Has a Long Beta-Reduction Sequence\",\n        \"Exact-size Sampling for Motzkin Trees in Linear Time via Boltzmann Samplers and Holonomic Specification\",\n        \"Type-assignment in the Lambda-calculus\",\n        \"Quantitative aspects and generation of random lambda and combinatory logic terms\",\n        \"Polynomial tuning of multiparametric combinatorial samplers\",\n        \"Statistical properties of lambda terms\",\n        \"Random generation of closed simply typed ŒªùúÜ\\\\lambda-terms: A synergy between logic programming and Boltzmann samplers\",\n        \"A Natural Counting of Lambda Terms\",\n        \"Combinatorics of l‚Äãa‚Äãm‚Äãb‚Äãd‚Äãaùëôùëéùëöùëèùëëùëélambda-terms: a natural approach\",\n        \"Random sampling of plane partitions\",\n        \"Asymptotics and random sampling for BCI and BCK lambda terms Generation of Combinatorial Structures\",\n        \"Pointed versus singular Boltzmann samplers: a comparative analysis\",\n        \"Enumerating lambda terms by weighted length of their De Bruijn representation\",\n        \"Boltzmann samplers for first-order differential specifications V Latin American Algorithms, Graphs, and Optimization Symposium ‚Äî Gramado, Brazil\",\n        \"On Uniquely Closable and Uniquely Typable Skeletons of Lambda Terms\",\n        \"On the Number of Unary-Binary Tree-Like Structures with Restrictions on the Unary Height\",\n        \"Lambda calculus notation with nameless dummies, a tool for automatic formula manipulation, with application to the Church-Rosser theorem\",\n        \"Fast and Sound Random Generation for Automated Testing and Benchmarking in Objective Caml\",\n        \"QuickCheck: A Lightweight Tool for Random Testing of Haskell Programs\",\n        \"Counterexample-Guided Abstraction Refinement\",\n        \"Calcul pratique des coefficients de Taylor d‚Äôune fonction algebrique\",\n        \"Asymptotically almost all ŒªùúÜ\\\\lambda-terms are strongly normalizing\",\n        \"Uniform random generation of decomposable structures using floating-point arithmetic\",\n        \"Boltzmann Samplers for the Random Generation of Combinatorial Structures\",\n        \"Boltzmann Sampling of Unlabelled Structures\",\n        \"Analytic Combinatorics\",\n        \"A calculus for the random generation of labelled combinatorial structures\",\n        \"Quadratic exact size and linear approximate size random generation of planar graphs\",\n        \"On the Number of Lambda Terms With Prescribed Size of Their De Bruijn Representation\",\n        \"Counting and generating lambda terms\",\n        \"Counting and generating terms in the binary lambda calculus\",\n        \"The Art of Computer Programming, Volume 4, Fascicle 4: Generating All Trees‚ÄìHistory of Combinatorial Generation (Art of Computer Programming)\",\n        \"The Ultimate Challenge: The 3‚Äãx+13ùë•13x+1 Problem\",\n        \"Counterexample to Euler‚Äôs conjecture on sums of like powers\",\n        \"Boltzmann samplers for random generation of lambda terms\",\n        \"On Counting Untyped Lambda Terms\",\n        \"Quantitative Aspects of Linear and Affine Closed Lambda Terms\",\n        \"The Glasgow Haskell Compiler\",\n        \"Effect-Driven QuickChecking of Compilers\",\n        \"Branching Processes for QuickCheck Generators\",\n        \"Interior-point polynomial algorithms in convex programming\",\n        \"Combinatorial Algorithms\",\n        \"Testing an Optimising Compiler by Generating Random Lambda Terms\",\n        \"A = B\",\n        \"Algorithms for combinatorial structures: Well-founded systems and Newton iterations\",\n        \"Un proc√©d√© it√©ratif de d√©nombrement d‚Äôarbres binaires et son application √† leur g√©n√©ration al√©atoire\",\n        \"Smallcheck and lazy smallcheck: automatic exhaustive testing for small values.\",\n        \"Smallcheck and Lazy Smallcheck: Automatic Exhaustive Testing for Small Values\",\n        \"Gfun: a Maple package for the manipulation of generating and holonomic functions in one variable\",\n        \"Normal Proofs and Their Grammar\",\n        \"On k-colored Lambda Terms and Their Skeletons\",\n        \"Binary Lambda Calculus and Combinatory Logic\",\n        \"Generating random lambda calculus terms\",\n        \"Generating Random Terms in Beta Normal Form of the Simply-Typed Lambda Calculus\"\n    ],\n    \"reasoning\": \"Selected these 55 references because they represent foundational work and recent advances in How to generate random lambda terms?, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}