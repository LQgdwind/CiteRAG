{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 51 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: A Tendermint Light ClientSupported by Interchain Foundation\n\nPaper Abstract: Abstract In Tendermint blockchains, the proof-of-stake mechanism and the underlying consensus algorithm entail a dynamic fault model that implies that the active validators (nodes that sign blocks) may change over time, and a quorum of these validators is assumed to be correct only for a limited period of time (called trusting period). The changes of the validator set are under control of the blockchain application, and are committed in every block. In order to check what is the state of the blockchain application at some height hℎh, one needs to know the validator set at that height so that one can verify the corresponding digital signatures and hashes. A naïve way of determining the validator set for height hℎh requires one to: (i) download all blocks before hℎh, (ii) verify blocks by checking digital signatures and hashes and (iii) execute the corresponding transactions so the changes in the validator sets are reproduced. This can potentially be very slow and computationally and data intensive. In this paper we formalize the dynamic fault model imposed by Tendermint, and describe a light client protocol that allows to check the state of the blockchain application that, in realistic settings, reduces significantly the amount of data needed to be downloaded, and the number of required computationally expensive signature verification operations. In addition to mathematical proofs, we have formalized the light client protocol in TLA+, and checked safety and liveness with the APALACHE model checker.\n\n{retrieved_text}\n\nGenerate exactly 51 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 51\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Sharing memory robustly in message-passing systems\",\n        \"Fraud and data availability proofs: Maximising light client security and scaling blockchains with dishonest majorities\",\n        \"Clock synchronization in the Byzantine-recovery failure model\",\n        \"Limits for automatic verification of finite-state concurrent systems\",\n        \"Tolerating corrupted communication\",\n        \"On the completeness of verifying message passing programs under bounded asynchrony\",\n        \"Concurrency Control and Recovery in Database Systems\",\n        \"Clock synchronization with faults and recoveries (extended abstract)\",\n        \"Decidability of Parameterized Verification\",\n        \"Cosmos whitepaper: a network of distributed ledgers\",\n        \"Flyclient: Super-light clients for cryptocurrencies\",\n        \"The latest gossip on BFT consensus\",\n        \"Light Client Verification Implementation\",\n        \"Verification of threshold-based distributed algorithms by decomposition to decidable logics\",\n        \"State machine replication for the masses with BFT-SMART\",\n        \"Scalable zero knowledge via cycles of elliptic curves\",\n        \"Tendermint: Byzantine fault tolerance in the age of Blockchains\",\n        \"Proof of Stake: How I Learned to Love Weak Subjectivity\",\n        \"Light Clients and Proof of Stake\",\n        \"The heard-of model: computing in distributed systems with benign faults\",\n        \"Practical Byzantine fault tolerance and proactive recovery\",\n        \"Tendermint blockchain and the rules for validating them\",\n        \"Tendermint core, reference implementation in Go\",\n        \"Efficient data structures for tamper-evident logging\",\n        \"Communication-closed asynchronous protocols\",\n        \"A Logic-Based Framework for Verifying Consensus Algorithms\",\n        \"Consensus in the presence of partial synchrony\",\n        \"Reasoning about rings\",\n        \"Consistency models with global operation sequencing and their composition\",\n        \"Plumo: Towards scalable interoperable blockchains using ultra light validation systems\",\n        \"On the size of pairing-based non-interactive arguments\",\n        \"#4835 vote & commitsig redundancy\",\n        \"TLA+ model checking made symbolic\",\n        \"Proofs of proofs of work with sublinear complexity\",\n        \"A short counterexample property for safety and liveness verification of fault-tolerant distributed algorithms\",\n        \"Non-interactive proofs of proof-of-work\",\n        \"Synchronizing the asynchronous\",\n        \"Tendermint: Consensus without mining\",\n        \"Specifying systems: The TLA+ language and tools for hardware and software engineers\",\n        \"Generalized consensus and paxos\",\n        \"Real-time model checking is really simple\",\n        \"Byzantizing paxos by refinement\",\n        \"Coda: Decentralized cryptocurrency at scale\",\n        \"Bitcoin: A peer-to-peer electronic cash system\",\n        \"Chainiac: Proactive software-update transparency via collectively signed skipchains and verified builds\",\n        \"How amazon web services uses formal methods\",\n        \"Verifying distributed systems with Stainless\",\n        \"Proof of Stake FAQ\",\n        \"Merkle Mountain Ranges\",\n        \"Consensus Compare: Casper vs. Tendermint\",\n        \"Pretend synchrony\"\n    ],\n    \"reasoning\": \"Selected these 51 references because they represent foundational work and recent advances in A Tendermint Light ClientSupported by Interchain Foundation, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}