{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 51 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Story of Your Lazy Function’s Life\n\nPaper Abstract: Abstract. Lazy evaluation is a powerful tool that enables better compositionality and potentially better performance in functional programming, but it is challenging to analyze its computation cost. Existing works either require manually annotating sharing, or rely on separation logic to reason about heaps of mutable cells. In this paper, we propose a bidirectional demand semantics that allows for extrinsic reasoning about the computation cost of lazy programs without relying on special program logics. To show the effectiveness of our approach, we apply the demand semantics to a variety of case studies including insertion sort, selection sort, Okasaki’s banker’s queue, and the implicit queue. We formally prove that the banker’s queue and the implicit queue are both amortized and persistent using the Rocq Prover (formerly known as Coq). We also propose the reverse physicist’s method, a novel variant of the classical physicist’s method, which enables mechanized, modular and compositional reasoning about amortization and persistence with the demand semantics.\n\n{retrieved_text}\n\nGenerate exactly 51 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 51\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Verified Functional Algorithms\",\n        \"The Call-by-Need Lambda Calculus\",\n        \"Micromega: solvers for arithmetic goals over ordered rings\",\n        \"A Composition Approach to Time Analysis of First Order Lazy Functional Programs\",\n        \"Ready, Set, Verify! Applying hs-to-coqm to real-world Haskell code\",\n        \"Finger trees explained anew, and slightly simplified (functional pearl)\",\n        \"The Complexity of Theorem-Proving Procedures\",\n        \"Denotational recurrence extraction for amortized analysis\",\n        \"Lightweight semiformal time complexity analysis for purely functional data structures\",\n        \"A static cost analysis for a higher-order language\",\n        \"A demand-driven adaptive type analysis\",\n        \"Optimistic Evaluation: An Adaptive Evaluation Strategy for Non-Strict Programs\",\n        \"Higher-order Demand-driven Program Analysis\",\n        \"Keep your laziness in check\",\n        \"Weak Call-by-Value Lambda Calculus as a Model of Computation in Coq\",\n        \"Mechanising Complexity Theory: The Cook-Levin Theorem in Coq\",\n        \"Demand Control-Flow Analysis\",\n        \"Amortized Analysis via Coinduction\",\n        \"Possibilities and Limitations of Call-by-Need Space Improvement\",\n        \"Call-by-need is clairvoyant call-by-value\",\n        \"Liquidate your assets: reasoning about resource usage in Liquid Haskell\",\n        \"Finger Trees: A Simple General-Purpose Data Structure\",\n        \"Multivariate amortized resource analysis\",\n        \"Demand Interprocedural Dataflow Analysis\",\n        \"Why Functional Programming Matters\",\n        \"Measuring the effectiveness of a simple strictness analyser\",\n        \"Iris from the ground up: A modular foundation for higher-order concurrent separation logic\",\n        \"Persistent lists with catenation via recursive slow-down\",\n        \"A Natural Semantics for Lazy Evaluation\",\n        \"Call-by-push-value\",\n        \"Reasoning about the garden of forking paths\",\n        \"A Coq library for internal verification of running-times\",\n        \"Time Credits and Time Receipts in Iris\",\n        \"Improvement in a Lazy Context: An Operational Theory for Call-by-Need\",\n        \"A cost-aware logical framework\",\n        \"Incorrectness logic\",\n        \"Purely functional data structures\",\n        \"Higher-order demand-driven symbolic evaluation\",\n        \"The fire triangle: how to mix substitution, dependent elimination, and effects\",\n        \"Thunks and Debits in Separation Logic with Time Credits\",\n        \"A unifying type-theory for higher-order (amortized) cost analysis\",\n        \"Reasoning About Programs in Continuation-Passing Style\",\n        \"Total Correctness by Local Improvement in the Transformation of Functional Programs\",\n        \"From SOS Rules to Proof Principles: An Operational Metatheory for Functional Languages\",\n        \"Theory and practice of demand analysis in Haskell\",\n        \"Modular, higher order cardinality analysis in theory and practice\",\n        \"Later credits: resourceful reasoning for the later modality\",\n        \"Amortized computational complexity\",\n        \"Liquid Haskell: Haskell as a Theorem Prover\",\n        \"Projections for strictness analysis\",\n        \"Story of Your Lazy Function’s Life: A Bidirectional Demand Semantics for Mechanized Cost Analysis of Lazy Programs (Artifact)\"\n    ],\n    \"reasoning\": \"Selected these 51 references because they represent foundational work and recent advances in Story of Your Lazy Function’s Life, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}