{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 57 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Automatic Microprocessor Performance Bug Detection\n\nPaper Abstract: Abstract Processor design validation and debug is a difficult and complex task, which consumes the lion’s share of the design process. Design bugs that affect processor performance rather than its functionality are especially difficult to catch, particularly in new microarchitectures. This is because, unlike functional bugs, the correct processor performance of new microarchitectures on complex, long-running benchmarks is typically not deterministically known. Thus, when performance benchmarking new microarchitectures, performance teams may assume that the design is correct when the performance of the new microarchitecture exceeds that of the previous generation, despite significant performance regressions existing in the design. In this work we present a two-stage, machine learning-based methodology that is able to detect the existence of performance bugs in microprocessors. Our results show that our best technique detects 91.5% of microprocessor core performance bugs whose average IPC impact across the studied applications is greater than 1% versus a bug-free design with zero false positives. When evaluated on memory system bugs, our technique achieves 100% detection with zero false positives. Moreover, the detection is automatic, requiring very little performance engineer time.\n\n{retrieved_text}\n\nGenerate exactly 57 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 57\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"ChampSim: A trace based microarchitecture simulator\",\n        \"SPEC CPU2006\",\n        \"SPEC CPU2017\",\n        \"A zero-positive learning approach for diagnosing software performance regressions\",\n        \"Parallel performance problems on shared-memory multicore systems: taxonomy and observation\",\n        \"The Gem5 simulator\",\n        \"Complete system power estimation: A trickle-down approach based on performance events\",\n        \"Can trace-driven simulators accurately predict superscalar performance?\",\n        \"Architectural timing verification and test for super scalar processors\",\n        \"XGBoost: A scalable tree boosting system\",\n        \"Keras\",\n        \"Reducing state loss for effective trace sampling of superscalar processors\",\n        \"Power prediction for Intel XScale processors using performance monitoring unit events\",\n        \"Performance variability on Xeon Phi\",\n        \"UBL: Unsupervised behavior learning for predicting performance anomalies in virtualized cloud systems\",\n        \"iBench: Quantifying interference for datacenter applications\",\n        \"Tarcil: Reconciling scheduling speed and quality in large shared clusters\",\n        \"Measuring experimental error in microprocessor simulation\",\n        \"Inside 6th-generation Intel Core: New microarchitecture code-named Skylake\",\n        \"A generic intelligent bearing fault diagnosis system using compact adaptive 1D CNN classifier\",\n        \"Greedy function approximation: a gradient boosting machine\",\n        \"Seer: Leveraging big data to navigate the complexity of performance debugging in cloud microservices\",\n        \"Evaluation of the 3rd generation Intel Core processor focusing on HPC applications\",\n        \"How to use simpoint to pick simulation points\",\n        \"Simpoint 3.0: Faster and more flexible program phase analysis\",\n        \"Architecture validation for processors\",\n        \"Long short-term memory\",\n        \"Multilayer feedforward networks are universal approximators\",\n        \"Performance anomaly detection and bottleneck identification\",\n        \"Intel386™ DX processor: Specification update\",\n        \"Intel Xeon processor scalable family: Specification update\",\n        \"Run-time power estimation in high performance microprocessors\",\n        \"Finding latent performance bugs in systems implementations\",\n        \"Path confidence based lookahead prefetching\",\n        \"Adam: A method for stochastic optimization\",\n        \"Convolutional networks for images, speech, and time series\",\n        \"Human activity recognition from accelerometer data using convolutional neural network\",\n        \"Reconciling high server utilization and sub-millisecond quality-of-service\",\n        \"Pcatch: Automatically detecting performance cascading bugs in cloud systems\",\n        \"Characterizing and detecting performance bugs for smartphone applications\",\n        \"Bugmd: Automatic mismatch diagnosis for bug triaging\",\n        \"HPL and DGEMM performance variability on the Xeon platinum 8160 processor\",\n        \"Discovering, reporting, and fixing performance bugs\",\n        \"Architectural simulators considered harmful\",\n        \"Chip errata for the MPC7448\",\n        \"Using model trees for computer architecture performance analysis of software applications\",\n        \"Scikit-learn: Machine learning in Python\",\n        \"Using simpoint for accurate and efficient simulation\",\n        \"Linear inversion of band-limited reflection seismograms\",\n        \"I/O system performance debugging using model-driven anomaly characterization.\",\n        \"Performance analysis and validation of the Intel® Pentium® 4 processor on 90nm technology.\",\n        \"Understanding the causes of performance variability in HPC workloads\",\n        \"Architectural performance verification: PowerPC processors\",\n        \"AM3517, AM3505 Sitara processors silicon revisions 1.1, 1.0: Silicon errata\",\n        \"A buffer-oriented methodology for microarchitecture validation\",\n        \"SMARTS: Accelerating microarchitecture simulation via rigorous statistical sampling\",\n        \"Performance events based full system estimation on application power consumption\"\n    ],\n    \"reasoning\": \"Selected these 57 references because they represent foundational work and recent advances in Automatic Microprocessor Performance Bug Detection, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}