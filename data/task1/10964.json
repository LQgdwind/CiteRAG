{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 47 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Identify Critical Nodes in Complex Network with Large Language Models\n\nPaper Abstract: Abstract Identifying critical nodes in networks is a classical decision-making task, and many methods struggle to strike a balance between adaptability and utility. Therefore, we propose an approach that empowers Evolutionary Algorithm (EA) with Large Language Models (LLMs), to generate a function called \"score_nodes\" which can further be used to identify crucial nodes based on their assigned scores. Our model consists of three main components: Manual Initialization, Population Management, and LLMs-based Evolution. It evolves from initial populations with a set of designed node scoring functions created manually. LLMs leverage their strong contextual understanding and rich programming skills to perform crossover and mutation operations on the individuals, generating excellent new functions. These functions are then categorized, ranked, and eliminated to ensure the stable development of the populations while preserving diversity. Extensive experiments demonstrate the excellent performance of our method, showcasing its strong generalization ability compared to other state-of-the-art algorithms. It can consistently and orderly generate diverse and efficient node scoring functions. All source codes and models that can reproduce all results in this work are publicly available at this link: https://anonymous.4open.science/r/LLM4CN-6520\n\n{retrieved_text}\n\nGenerate exactly 47 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 47\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Slade: A portable small language model decompiler for optimized assembler\",\n        \"Detecting critical nodes in sparse graphs\",\n        \"Network dismantling\",\n        \"A survey on evaluation of large language models\",\n        \"A match made in consistency heaven: when large language models meet evolutionary algorithms\",\n        \"Evoprompting: Language models for code-level neural architecture search\",\n        \"Evaluating large language models trained on code\",\n        \"Teaching large language models to self-debug\",\n        \"Seed: Domain-specific data curation with large language models\",\n        \"BERT: pre-training of deep bidirectional transformers for language understanding\",\n        \"A congressional twitter network dataset quantifying pairwise probability of influence\",\n        \"Large language models empowered agent-based modeling and simulation: A survey and perspectives\",\n        \"Community structure in jazz\",\n        \"Machine learning dismantling and early-warning signals of disintegration in complex systems\",\n        \"LongCoder: A long-range pre-trained language model for code completion\",\n        \"Towards optimizing with large language models\",\n        \"Connecting large language models with evolutionary algorithms yields powerful prompt optimizers\",\n        \"Identifying key players in complex networks via network entanglement\",\n        \"The critical node detection problem in networks: A survey\",\n        \"Competition-level code generation with alphacode\",\n        \"Spell: Semantic prompt evolution based on a llm\",\n        \"Code as policies: Language model programs for embodied control\",\n        \"Fully autonomous programming with large language models\",\n        \"Eureka: Human-level reward design via coding large language models\",\n        \"Learning performance-improving code edits\",\n        \"Detecting vulnerable nodes in urban infrastructure interdependent network\",\n        \"Finding community structure in networks using the eigenvectors of matrices\",\n        \"Understanding the effectiveness of large language models in code translation\",\n        \"Leveraging large language models for the generation of novel metaheuristic optimization algorithms\",\n        \"Generalized network dismantling\",\n        \"Mathematical discoveries from program search with large language models\",\n        \"Minimal sets to destroy the k-core in random networks\",\n        \"Explain-then-translate: an analysis on improving program translation with self-generated explanations\",\n        \"Critical nodes in signalling pathways: insights into insulin action\",\n        \"Gensim: Generating robotic simulation tasks via large language models\",\n        \"Introduction to graph theory, volume 2\",\n        \"Evolutionary computation in the era of large language model: Survey and roadmap\",\n        \"Fuzz4all: Universal fuzzing with large language models\",\n        \"Lmpa: Improving decompilation by synergy of large language model and program analysis\",\n        \"Large language models as optimizers\",\n        \"Intercode: Standardizing and benchmarking interactive coding with execution feedback\",\n        \"Reevo: Large language models as hyper-heuristics with reflective evolution\",\n        \"Fast and simple decycling and dismantling of networks\",\n        \"Dismantling complex networks by a neural model trained from tiny networks\",\n        \"Degree centrality, betweenness centrality, and closeness centrality in social network\",\n        \"Planning with large language models for code generation\",\n        \"A survey of large language models\"\n    ],\n    \"reasoning\": \"Selected these 47 references because they represent foundational work and recent advances in Identify Critical Nodes in Complex Network with Large Language Models, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}