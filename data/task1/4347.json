{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 58 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Learning General Optimal Policies with Graph Neural Networks: Expressive Power, Transparency, and Limits\n\nPaper Abstract: Abstract It has been recently shown that general policies for many classical planning domains can be expressed and learned in terms of a pool of features defined from the domain predicates using a description logic grammar. At the same time, most description logics correspond to a fragment of kùëòk-variable counting logic (ùñ¢ksubscriptùñ¢ùëò\\mathsf{C}_{k}) for k=2ùëò2k=2, that has been shown to provide a tight characterization of the expressive power of graph neural networks. In this work, we make use of these results to understand the power and limits of using graph neural networks (GNNs) for learning optimal general policies over a number of tractable planning domains where such policies are known to exist. For this, we train a simple GNN in a supervised manner to approximate the optimal value function V‚àó‚Äã(s)superscriptùëâùë†V^{*}{}(s) of a number of sample states sùë†s. As predicted by the theory, it is observed that general optimal policies are obtained in domains where general optimal value functions can be defined with ùñ¢2subscriptùñ¢2\\mathsf{C}_{2} features but not in those requiring more expressive ùñ¢3subscriptùñ¢3\\mathsf{C}_{3} features. In addition, it is observed that the features learned are in close correspondence with the features needed to express V‚àósuperscriptùëâV^{*}{} in closed form. The theory and the analysis of the domains let us understand the features that are actually learned as well as those that cannot be learned in this way, and let us move in a principled manner from a combinatorial optimization approach to learning general policies to a potentially, more robust and scalable approach based on deep learning.\n\n{retrieved_text}\n\nGenerate exactly 58 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 58\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"The Surprising Power of Graph Neural Networks with Random Node Initialization\",\n        \"Unsupervised Grounding of Plannable First-Order Logic Representation from Images\",\n        \"Handbook of Knowledge Representation, chapter Description Logics\",\n        \"The logical expressiveness of graph neural networks\",\n        \"Foundations for Generalized Planning in Unbounded Stochastic Domains\",\n        \"A geometric perspective on optimal representations for reinforcement learning\",\n        \"Dynamic Programming\",\n        \"Dynamic Programming and Optimal Control, Vols 1 and 2\",\n        \"Learning features and abstract actions for computing generalized plans\",\n        \"Planning as Heuristic Search\",\n        \"Features, Projections, and Representation Change for Generalized Planning\",\n        \"Learning first-order symbolic representations for planning from the structure of the state space\",\n        \"Automatic Derivation of Memoryless Policies and Finite-State Controllers Using Classical Planners\",\n        \"An optimal lower bound on the number of variables for graph identification\",\n        \"Learning with AMIGo: Adversarially Motivated Intrinsic Goals\",\n        \"BabyAI: A Platform to Study the Sample Efficiency of Grounded Language Learning\",\n        \"Approximate policy iteration with a policy language bias: Solving relational Markov decision processes\",\n        \"Learning General Planning Policies from Small Examples Without Supervision\",\n        \"Generalized potential heuristics for classical planning\",\n        \"An Introduction to Deep Reinforcement Learning\",\n        \"Symbolic network: generalized neural policies for relational MDPs\",\n        \"A Concise Introduction to Models and Methods for Automated Planning\",\n        \"A tutorial on linear function approximators for dynamic programming and reinforcement learning\",\n        \"Automated planning and acting\",\n        \"Inductive biases for deep learning of higher-level cognition\",\n        \"The Logic of Graph Neural Networks\",\n        \"Learning Generalized Reactive Policies Using Deep Neural Networks\",\n        \"On the Complexity of Blocks-World Planning\",\n        \"Graph representation learning\",\n        \"An Introduction to the Planning Domain Definition Language\",\n        \"Long Short-Term Memory\",\n        \"Generalized planning: Synthesizing plans that work for multiple environments\",\n        \"Learning action strategies for planning domains\",\n        \"Adam: A Method for Stochastic Optimization\",\n        \"Building machines that learn and think like people\",\n        \"Graph neural networks meet neural-symbolic computing: A survey and perspective\",\n        \"Deep learning\",\n        \"Reduction of a graph to a canonical form and an algebra which appears in the process\",\n        \"Width and serialization of classical planning problems\",\n        \"Neural probabilistic logic programming in DeepProbLog\",\n        \"Learning generalized policies from planning examples using concept languages\",\n        \"Human-level control through deep reinforcement learning\",\n        \"Weisfeiler and leman go neural: Higher-order graph neural networks\",\n        \"PyTorch: An Imperative Style, High-Performance Deep Learning Library\",\n        \"From non-negative to general operator cost partitioning\",\n        \"Learning First-Order Representations for Planning from Black-Box States: New Results\",\n        \"Random Features Strengthen Graph Neural Networks\",\n        \"The graph neural network model\",\n        \"Mastering Chess and Shogi by Self-Play with a General Reinforcement Learning Algorithm\",\n        \"Mastering the game of go without human knowledge\",\n        \"Linear feature encoding for reinforcement learning\",\n        \"Learning generalized plans using abstract counting\",\n        \"Introduction to Reinforcement Learning\",\n        \"Graph neural networks for maximum constraint satisfaction\",\n        \"ASNets: Deep Learning for Generalised Planning\",\n        \"Neural Execution of Graph Algorithms\",\n        \"Automatic induction of Bellman-error features for probabilistic planning\",\n        \"How Powerful are Graph Neural Networks?\"\n    ],\n    \"reasoning\": \"Selected these 58 references because they represent foundational work and recent advances in Learning General Optimal Policies with Graph Neural Networks: Expressive Power, Transparency, and Limits, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}