{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 49 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Rosko: Row Skipping Outer Products for Sparse Matrix Multiplication Kernels\n\nPaper Abstract: Abstract. We propose Rosko—row skipping outer products—for deriving sparse matrix multiplication (SpMM) kernels in reducing computation and memory access requirements of deep neural networks (DNNs). Rosko allows skipping of entire row computations during program execution with low sparsity-management overheads. We analytically derive sparse CPU kernels that adapt to given hardware characteristics to effectively utilize processor cores and minimize data movement without the need for auto-tuning or search space exploration. Rosko can be integrated with other outer product scheduling methods, allowing them to leverage row skipping by using Rosko’s packing format to skip unnecessary computation. Rosko kernels outperform existing auto-tuning and search-based solutions as well as state-of-the-art vendor-optimized libraries on real hardware across a variety of neural network workloads. For matrices with sparsities ranging from 65% to 99.8% typically found in machine learning, Rosko kernels achieve up to a 6.5x runtime reduction on Intel and ARM CPUs.\n\n{retrieved_text}\n\nGenerate exactly 49 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 49\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Scalable Matrix Extension: Armv9-A Architecture\",\n        \"perf: Linux profiling with performance counters\",\n        \"Intel oneAPI Math Kernel Library\",\n        \"Autoscheduling for Sparse Tensor Algebra with an Asymptotic Cost Model\",\n        \"Structured Pruning of Deep Convolutional Neural Networks\",\n        \"Deploying Transformers on the Apple Neural Engine\",\n        \"Arm Performance Libraries Reference Guide\",\n        \"Arm Compute Library Reference Guide\",\n        \"TVM: An Automated End-to-End Optimizing Compiler for Deep Learning\",\n        \"EarlyBERT: Efficient BERT Training via Early-bird Lottery Tickets\",\n        \"Vectorizing Sparse Matrix Computations with Partially-Strided Codelets\",\n        \"Intel VTune Profiler\",\n        \"cuBLAS\",\n        \"Compressed Column Storage (CCS)\",\n        \"Compressed Row Storage (CRS)\",\n        \"Rigging the Lottery: Making All Tickets Winners\",\n        \"The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks\",\n        \"Sparse GPU Kernels for Deep Learning\",\n        \"Anatomy of High-Performance Matrix Multiplication\",\n        \"Inductive Representation Learning on Large Graphs\",\n        \"Deep Compression: Compressing Deep Neural Networks with Pruning, Trained Quantization and Huffman Coding\",\n        \"Deep Residual Learning for Image Recognition\",\n        \"MobileNets: Efficient Convolutional Neural Networks for Mobile Vision Applications\",\n        \"Open Graph Benchmark: Datasets for Machine Learning on Graphs\",\n        \"FeatGraph: A Flexible and Efficient Backend for Graph Neural Network Systems\",\n        \"Data Movement Is All You Need: A Case Study on Optimizing Transformers\",\n        \"The Tensor Algebra Compiler\",\n        \"Communication-Avoiding Parallel Sparse-Dense Matrix-Matrix Multiplication\",\n        \"The suitesparse matrix collection website interface\",\n        \"Learning Multiple Layers of Features from Tiny Images\",\n        \"Term Quantization: Furthering Quantization at Run Time\",\n        \"CAKE: Matrix Multiplication Using Constant-Bandwidth Blocks\",\n        \"Learning Efficient Convolutional Networks through Network Slimming\",\n        \"Full-stack optimization for accelerating CNNs using powers-of-two weights with FPGA validation\",\n        \"Block-Sparse Recurrent Neural Networks\",\n        \"OuterSPACE: An Outer Product Based Sparse Matrix Multiplication Accelerator\",\n        \"Deep Learning Matrix Collection\",\n        \"A Sparse Iteration Space Transformation Framework for Sparse Tensor Algebra\",\n        \"Very Deep Convolutional Networks for Large-Scale Image Recognition\",\n        \"The Sparse Polyhedral Framework: Composing Compiler-Generated Inspector-Executor Code\",\n        \"BLIS: A Framework for Rapidly Instantiating BLAS Functionality\",\n        \"Dual-Side Sparse Tensor Core\",\n        \"SparseDNN: Fast Sparse Deep Learning Inference on CPUs\",\n        \"Why GEMM Is at the Heart of Deep Learning\",\n        \"Openblas\",\n        \"Drawing Early-Bird Tickets: Towards More Efficient Training of Deep Networks\",\n        \"Scalpel: Customizing DNN Pruning to the Underlying Hardware Parallelism\",\n        \"SpArch: Efficient Architecture for Sparse Matrix Multiplication\",\n        \"Learning N:M Fine-grained Structured Sparse Neural Networks From Scratch\"\n    ],\n    \"reasoning\": \"Selected these 49 references because they represent foundational work and recent advances in Rosko: Row Skipping Outer Products for Sparse Matrix Multiplication Kernels, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}