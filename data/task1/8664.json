{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 52 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: On Contrastive Learning of Semantic Similarity for Code to Code Search\n\nPaper Abstract: Abstract This paper introduces a novel code-to-code search technique that enhances the performance of Large Language Models (LLMs) by including both static and dynamic features as well as utilizing both similar and dissimilar examples during training. We present the first-ever code search method that encodes dynamic runtime information during training without the need to execute either the corpus under search or the search query at inference time and the first code search technique that trains on both positive and negative reference samples. To validate the efficacy of our approach, we perform a set of studies demonstrating the capability of enhanced LLMs to perform cross-language code-to-code search. Our evaluation demonstrates that the effectiveness of our approach is consistent across various model architectures and programming languages. We outperform the state-of-the-art cross-language search tool by up to 44.7%. Moreover, our ablation studies reveal that even a single positive and negative reference sample in the training process results in substantial performance improvements demonstrating both similar and dissimilar references are important parts of code search. Importantly, we show that enhanced well-crafted, fine-tuned models consistently outperform enhanced larger modern LLMs without fine tuning, even when enhancing the largest available LLMs highlighting the importance for open-sourced models. To ensure the reproducibility and extensibility of our research, we present an open-sourced implementation of our tool and training procedures called Cosco.\n\n{retrieved_text}\n\nGenerate exactly 52 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 52\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"BERT: pre-training of deep bidirectional transformers for language understanding\",\n        \"The state of the art in distributed software development: A systematic review\",\n        \"Mining libraries and frameworks for api migration\",\n        \"Automatic cross-language api adaptation via enhanced search-based api code transplantation\",\n        \"Cross-language program repair using conditioned symbolic execution\",\n        \"Automatic patch generation learned from human-written patches\",\n        \"Exploring cross-language code search for programming education: A feasibility study\",\n        \"Automatic clone recommendation for refactoring based on the present and the past\",\n        \"Practical runtime specialization for higher-order functions\",\n        \"Cross-language code search using static and dynamic analyses\",\n        \"Atcoder: A dataset for machine learning on programming\",\n        \"CodeBERT: A pre-trained model for programming and natural languages\",\n        \"Language models are few-shot learners\",\n        \"Onward! toward more realistic program benchmarks\",\n        \"Identifying Functionally Similar Code in Complex Codebases\",\n        \"Cross-language program search using a multilingual abstract syntax tree\",\n        \"Cross-language code search with a bilingual semantic space\",\n        \"A neural model for cross-language code retrieval\",\n        \"Code Relatives: Detecting Similarly Behaving Software\",\n        \"Prose: Programming language semantics for large-scale code search\",\n        \"A comparative study of static and dynamic code analysis for bug detection\",\n        \"Openaiâ€™s text embeddings\",\n        \"Direct: A transformer-based model for decompiled variable name recovery\",\n        \"A simple framework for contrastive learning of visual representations\",\n        \"Slacc: Simion-based language agnostic code clones\",\n        \"Billion-scale similarity search with gpus\",\n        \"Pattern recognition and machine learning\",\n        \"Average rank performance metrics\",\n        \"Some issues in the evaluation of text retrieval systems\",\n        \"Bm25: A python implementation of the best match 25 information retrieval algorithm.\",\n        \"A simple algorithm for tree edit distance\",\n        \"Unixcoder: Unified cross-modal pre-training for code representation\",\n        \"Codexglue: A machine learning benchmark dataset for code understanding and generation\",\n        \"Github\",\n        \"Code search: A survey of techniques for finding code\",\n        \"Ccfinder: a multilinguistic token-based code clone detection system for large scale source code\",\n        \"Cp-miner: finding copy-paste and related bugs in large-scale software code\",\n        \"Clone detection using abstract syntax trees\",\n        \"Facoy: A code-to-code search engine\",\n        \"Pathways to leverage transcompiler based data augmentation for cross-language clone detection\",\n        \"Ccgraph: A pdg-based code clone detector with approximate graph matching\",\n        \"Sourcerercc: Scaling code clone detection to big-code\",\n        \"Obfuscation Resilient Search through Executable Classification\",\n        \"Deeplog: Anomaly detection and diagnosis from system logs through deep learning\",\n        \"Learning to represent programs with graphs\",\n        \"Action-conditional video prediction using deep networks in atari games\",\n        \"Modelling dynamic textual content with temporal language models\",\n        \"Learning Approximate Execution Semantics From Traces for Binary Function Similarity\",\n        \"Graphcodebert: Pre-training code representations with data flow\",\n        \"Contrastive learning for source code with structural and functional properties\",\n        \"A novel dynamic android malware detection system with ensemble learning\",\n        \"Robust intelligent malware detection using deep learning\"\n    ],\n    \"reasoning\": \"Selected these 52 references because they represent foundational work and recent advances in On Contrastive Learning of Semantic Similarity for Code to Code Search, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}