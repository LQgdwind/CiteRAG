{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 49 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Autoformalizing Euclidean Geometry\n\nPaper Abstract: Abstract Autoformalization involves automatically translating informal math into formal theorems and proofs that are machine-verifiable. Euclidean geometry provides an interesting and controllable domain for studying autoformalization. In this paper, we introduce a neuro-symbolic framework for autoformalizing Euclidean geometry, which combines domain knowledge, SMT solvers, and large language models (LLMs). One challenge in Euclidean geometry is that informal proofs rely on diagrams, leaving gaps in texts that are hard to formalize. To address this issue, we use theorem provers to fill in such diagrammatic information automatically, so that the LLM only needs to autoformalize the explicit textual steps, making it easier for the model. We also provide automatic semantic evaluation for autoformalized theorem statements. We construct LeanEuclid, an autoformalization benchmark consisting of problems from Euclid’s Elements and the UniGeo dataset formalized in the Lean proof assistant. Experiments with GPT-4 and GPT-4V show the capability and limitations of state-of-the-art LLMs on autoformalizing geometry problems. The data and code are available at https://github.com/loganrjmurphy/LeanEuclid.\n\n{retrieved_text}\n\nGenerate exactly 49 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 49\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Towards a mathematics formalisation assistant using large language models\",\n        \"Notes on ”A formal system for Euclid’s Elements”\",\n        \"A formal system for Euclid’s Elements\",\n        \"ProofNet: Autoformalizing and formally proving undergraduate-level mathematics\",\n        \"The Coq proof assistant reference manual: Version 6.1\",\n        \"Satisfiability modulo theories\",\n        \"Proof-checking Euclid\",\n        \"Applications of gröbner bases in non-linear computational geometry\",\n        \"GeoQA: A geometric question answering benchmark towards multimodal numerical reasoning\",\n        \"UniGeo: Unifying geometry logical reasoning via reformulating mathematical expression\",\n        \"Evaluating large language models trained on code\",\n        \"NL2TL: Transforming natural languages to temporal logics using large language models\",\n        \"nl2spec: Interactively translating unstructured natural language to temporal logics with large language models\",\n        \"Towards autoformalization of mathematics and code correctness: Experiments with elementary proofs\",\n        \"The Lean 4 theorem prover and programming language\",\n        \"Baldur: Whole-proof generation and repair with large language models\",\n        \"G-LLaVA: Solving geometric problem with multi-modal large language model\",\n        \"A formal proof of the Kepler conjecture\",\n        \"Proof artifact co-training for theorem proving with language models\",\n        \"Euclid’s Elements\",\n        \"feat: synthetic geometry\",\n        \"Grundlagen der geometrie\",\n        \"Draft, Sketch, and Prove: Guiding formal theorem provers with informal proofs\",\n        \"Multilingual mathematical autoformalization\",\n        \"GeomVerse: A systematic evaluation of large models for geometric reasoning\",\n        \"HyperTree proof search for neural theorem proving\",\n        \"CompCert—a formally verified optimizing compiler\",\n        \"A survey on deep learning for theorem proving\",\n        \"UniMath: A foundational and multimodal mathematical reasoner\",\n        \"Inter-GPS: Interpretable geometry problem solving with formal language and symbolic reasoning\",\n        \"A diagrammatic formal system for Euclidean geometry\",\n        \"Proofs, pictures, and Euclid\",\n        \"Plane geometry theorem proving using forward chaining\",\n        \"GPT-4 technical report\",\n        \"Data-efficient learning of natural language to linear temporal logic translators for robot task specification\",\n        \"BLEU: a method for automatic evaluation of machine translation\",\n        \"GeoDRL: A self-learning framework for geometry problem solving using reinforcement learning in deductive reasoning\",\n        \"Generative language modeling for automated theorem proving\",\n        \"System description: E 1.8\",\n        \"Metamathematische methoden in der geometrie\",\n        \"Towards large language models as copilots for theorem proving in Lean\",\n        \"The Lean mathematical library\",\n        \"Solving olympiad geometry without human demonstrations\",\n        \"First experiments with neural translation of informal to formal mathematics\",\n        \"On the decision problem and the mechanization of theorem-proving in elementary geometry\",\n        \"Autoformalization with large language models\",\n        \"Learning to prove theorems via interacting with proof assistants\",\n        \"LeanDojo: Theorem proving with retrieval-augmented language models\",\n        \"Automated production of traditional proofs for theorems in Euclidean geometry I. the Hilbert intersection point theorems\"\n    ],\n    \"reasoning\": \"Selected these 49 references because they represent foundational work and recent advances in Autoformalizing Euclidean Geometry, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}