{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 49 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Characterizing Structural Hardness of Logic Programs: What makes Cycles and Reachability Hard for Treewidth?\n\nPaper Abstract: Abstract Answer Set Programming (ASP) is a problem modeling and solving framework for several problems in KR with growing industrial applications. Also for studies of computational complexity and deeper insights into the hardness and its sources, ASP has been attracting researchers for many years. These studies resulted in fruitful characterizations in terms of complexity classes, fine-grained insights in form of dichotomy-style results, as well as detailed parameterized complexity landscapes. Recently, this lead to a novel result establishing that for the measure treewidth, which captures structural density of a program, the evaluation of the well-known class of normal programs is expected to be slightly harder than deciding satisfiability (SAT). However, it is unclear how to utilize this structural power of ASP. This paper deals with a novel reduction from SAT to normal ASP that goes beyond well-known encodings: We explicitly utilize the structural power of ASP, whereby we sublinearly decrease the treewidth, which probably cannot be significantly improved. Then, compared to existing results, this characterizes hardness in a fine-grained way by establishing the required functional dependency of the dependency graphâ€™s cycle length (SCC size) on the treewidth.\n\n{retrieved_text}\n\nGenerate exactly 49 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 49\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Train Scheduling with Hybrid ASP\",\n        \"Evaluation of Disjunctive Programs in WASP\",\n        \"Completion of Disjunctive Logic Programs\",\n        \"Clause-Learning Algorithms with Many Restarts and Bounded-Width Resolution\",\n        \"Answer set based design of knowledge systems\",\n        \"Propositional Semantics for Disjunctive Logic Programs\",\n        \"selp: A Single-Shot Epistemic Logic Program Solver\",\n        \"Negation by default and unstratifiable logic programs\",\n        \"Handbook of Satisfiability, volume 185 of Frontiers in Artif. Intellig. and Applications\",\n        \"The Impact of Treewidth on Grounding and Solving of Answer Set Programs\",\n        \"Clique-Width and Directed Width Measures for Answer-Set Programming\",\n        \"lp2normal - A Normalization Tool for Extended Logic Programs\",\n        \"Normalizing Cardinality Rules Using Merging and Sorting Constructions\",\n        \"Answer set programming at a glance\",\n        \"Negation as Failure\",\n        \"Parameterized Algorithms\",\n        \"Graph Theory, 4th Edition, volume 173 of Graduate Texts in Mathematics\",\n        \"Fundamentals of Parameterized Complexity\",\n        \"On the computational cost of disjunctive logic programming: Propositional case\",\n        \"Treewidth-Aware Complexity in ASP: Not all Positive Cycles are Equally Hard\",\n        \"Treewidth and Counting Projected Answer Sets\",\n        \"Lower Bounds for QBFs of Bounded Treewidth\",\n        \"Parameterized Complexity Theory, volume XIV of Theo. Comput. Science\",\n        \"Answer Set Solving in Practice\",\n        \"Solution Enumeration for Projected Boolean Search Problems\",\n        \"Classical Negation in Logic Programs and Disjunctive Databases\",\n        \"Fixed-parameter complexity in AI and nonmonotonic reasoning\",\n        \"Exhaustively characterizing feasible logic models of a signaling network using Answer Set Programming\",\n        \"Treewidth-aware reductions of normal ASP to SAT - Is normal ASP harder than SAT after all?\",\n        \"Which Problems Have Strongly Exponential Complexity?\",\n        \"Answer-Set Programming with Bounded Treewidth\",\n        \"Some (in)translatability results for normal logic programs and propositional theories\",\n        \"The Answer Set Programming Paradigm\",\n        \"Propositional logic: deduction and algorithms\",\n        \"Treewidth. Computations and Approximations, volume 842 of LNCS\",\n        \"Fixed-Parameter Algorithms for Finding Minimal Models\",\n        \"Why are there so many loop formulas?\",\n        \"On tight logic programs and yet another translation from normal logic programs to propositional logic\",\n        \"ASSAT: computing answer sets of a logic program by SAT solvers\",\n        \"Slightly Superexponential Parameterized Problems\",\n        \"Autoepistemic logic\",\n        \"Double-Exponential and Triple-Exponential Bounds for Choosability Problems Parameterized by Treewidth\",\n        \"Invitation to Fixed-Parameter Algorithms, volume 31 of Oxford Lecture Series in Mathematics and its Applications\",\n        \"Stable model semantics of weight constraint rules\",\n        \"An A-Prolog Decision Support System for the Space Shuttle\",\n        \"Tractable answer-set programming with weight constraints: bounded treewidth is not enough\",\n        \"Graph minors II: Algorithmic aspects of tree-width\",\n        \"Special Issue on Answer Set Programming\",\n        \"Trichotomy and dichotomy results on the complexity of reasoning with disjunctive logic programs\"\n    ],\n    \"reasoning\": \"Selected these 49 references because they represent foundational work and recent advances in Characterizing Structural Hardness of Logic Programs: What makes Cycles and Reachability Hard for Treewidth?, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}