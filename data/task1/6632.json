{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 50 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Universal Address Sequence Generator for Memory Built-in Self-testThis work was supported by the grant WZ/WI-IIT/2/2020 from Bialystok University of Technology, Faculty of Computer Science\n\nPaper Abstract: Abstract This paper presents the universal address sequence generator (UASG) for memory built-in-self-test. The studies are based on the proposed universal method for generating address sequences with the desired properties for multirun march memory tests. As a mathematical model, a modification of the recursive relation for quasi-random sequence generation is used. For this model, a structural diagram of the hardware implementation is given, of which the basis is a storage device for storing so-called direction numbers of the generation matrix. The form of the generation matrix determines the basic properties of the generated address sequences. The proposed UASG generates a wide spectrum of different address sequences, including the standard ones, such as linear, address complement, gray code, worst-case gate delay, 2isuperscript2ùëñ2^{i}, next address, and pseudorandom. Examples of the use of the proposed methods are considered. The result of the practical implementation of the UASG is presented, and the main characteristics are evaluated.\n\n{retrieved_text}\n\nGenerate exactly 50 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 50\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Test and Test Equipment\",\n        \"System on Chip (SoC) Design and Test\",\n        \"Challenges in embedded memory design and test\",\n        \"Essentials of Electronic Testing for Digital, Memory and Mixed-Signal VLSI Circuits\",\n        \"Detection of Pattern-Sensitive Faults in Random-Access Memories\",\n        \"Testing Semiconductor Memories: Theory and Practice\",\n        \"Deterministic tests for detecting scrambled pattern-sensitive faults in RAMs\",\n        \"Testing reconfigured RAM‚Äôs and scrambled address RAM‚Äôs for pattern sensitive faults\",\n        \"Neighborhood Pattern-Sensitive Fault Testing for Semiconductor Memories\",\n        \"A programmable BIST for DRAM testing and diagnosis\",\n        \"Testing Neighbouring Cell Leakage and Transition Induced Faults in DRAMs\",\n        \"Efficient March Tests for a Reduced 3-Coupling and 4-Coupling Faults in Random-Access Memories\",\n        \"A Multibackground March Test for Static Neighborhood Pattern-Sensitive Faults in Random-Access Memories\",\n        \"Multiple distributions for biased random test patterns\",\n        \"Full-speed field-programmable memory BIST architecture\",\n        \"Implementation and Validation of Memory Built in Self Test (MBIST) ‚Äì Survey (September 11, 2019)\",\n        \"Fault Awareness for Memory BIST Architecture Shaped by Multidimensional Prediction Mechanism\",\n        \"Towards a Uniform Notation for Memory Tests\",\n        \"March PS(23N) Test for DRAM Pattern-Sensitive Faults\",\n        \"Transparent BIST for RAMs\",\n        \"Pseudo-exhaustive word-oriented DRAM testing\",\n        \"Pseudo-Exhaustive Testing for Software\",\n        \"Pseudorandom Testing\",\n        \"Exhaustive and Near-Exhaustive Memory Testing Techniques and their BIST Implementations\",\n        \"Iterative Antirandom Testing\",\n        \"Marshevye testy dlya samotestirovaniya OZU (March Tests for RAM Self-testing)\",\n        \"Optimizing memory BIST Address Generator implementations\",\n        \"Efficient Memory Built in Self-Test Address Generator Implementation\",\n        \"A BIST Logic Design for MarchS(3)C Memory Test BIST Implementation\",\n        \"Low-cost, customized and flexible SRAM MBIST engine\",\n        \"High Volume Diagnosis in Memory BIST Based on Compressed Failure Data\",\n        \"Design and Analysis of Low-Transition Address Generator\",\n        \"Analyzing BIST robustness\",\n        \"A Novel Architecture Design of Address Generators for BIST Algorithms\",\n        \"Address Counter / Generators for Low Power Memory BIST\",\n        \"Generating modified Sobol sequences for multiple run march memory tests\",\n        \"A Survey of Combinatorial Gray Codes\",\n        \"The repeated nondestructive march tests with variable address sequences\",\n        \"Modified Gray And Counter Sequences For Memory Test Address Generation\",\n        \"Quasi-Random Testing\",\n        \"Counter Sequences for Memory Test Address Generation\",\n        \"Problemy funkcjonalnego testowania pamieci RAM\",\n        \"Introduction to Applied Linear Algebra Vectors, Matrices, and Least Squares\",\n        \"Random Graphs\",\n        \"Address sequences for multi run RAM testing (In Russ.)\",\n        \"Controlled method of random test synthesis\",\n        \"Memory Address Generation for Multiple Run march Tests with Different Average Hamming Distance\",\n        \"Multiple Controlled Random Testing\",\n        \"Two-Run RAM March Testing with Address Decimation\",\n        \"Randomized Quasi-Random Testing\"\n    ],\n    \"reasoning\": \"Selected these 50 references because they represent foundational work and recent advances in Universal Address Sequence Generator for Memory Built-in Self-testThis work was supported by the grant WZ/WI-IIT/2/2020 from Bialystok University of Technology, Faculty of Computer Science, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}