{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 46 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Planning with Large Language Models for Code Generation\n\nPaper Abstract: Abstract Existing large language model-based code generation pipelines typically use beam search or sampling algorithms during the decoding process. Although the programs they generate achieve high token-matching-based scores, they often fail to compile or generate incorrect outputs. The main reason is that conventional Transformer decoding algorithms may not be the best choice for code generation. In this work, we propose a novel Transformer decoding algorithm, Planning-Guided Transformer Decoding (PG-TD), that uses a planning algorithm to do lookahead search and guide the Transformer to generate better programs. Specifically, instead of simply optimizing the likelihood of the generated sequences, the Transformer makes use of a planner to generate candidate programs and test them on public test cases. The Transformer can therefore make more informed decisions and generate tokens that will eventually lead to higher-quality programs. We also design a mechanism that shares information between the Transformer and the planner to make our algorithm computationally efficient. We empirically evaluate our framework with several large language models as backbones on public coding challenge benchmarks, showing that 1) it can generate programs that consistently achieve higher performance compared with competing baseline methods; 2) it enables controllable code generation, such as concise codes and highly-commented codes by optimizing modified objective111Project page: https://codeaimcts.github.io.\n\n{retrieved_text}\n\nGenerate exactly 46 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 46\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Unified pre-training for program understanding and generation\",\n        \"Program Synthesis with Large Language Models\",\n        \"Leveraging Grammar and Reinforcement Learning for Neural Program Synthesis\",\n        \"Ppl-mcts: Constrained textual generation through discriminator-guided mcts decoding\",\n        \"Parallel monte-carlo tree search\",\n        \"CodeT: Code Generation with Generated Tests\",\n        \"Evaluating Large Language Models Trained on Code\",\n        \"Execution-guided neural program synthesis\",\n        \"Latent execution for neural program synthesis beyond domain-specific languages\",\n        \"Softmax tempering for training neural machine translation models\",\n        \"BERT: Pre-training of deep bidirectional transformers for language understanding\",\n        \"Dreamcoder: Bootstrapping inductive program synthesis with wake-sleep library learning\",\n        \"Write, execute, assess: Program synthesis with a repl\",\n        \"Hierarchical neural story generation\",\n        \"Codebert: A pre-trained model for programming and natural languages\",\n        \"Monte-carlo tree search and rapid action value estimation in computer go\",\n        \"Sequence transduction with recurrent neural networks\",\n        \"Graphcodebert: Pre-training code representations with data flow\",\n        \"Synthesize, execute and debug: Learning to repair for neural program synthesis\",\n        \"A formal basis for the heuristic determination of minimum cost paths\",\n        \"Measuring coding challenge competence with APPS\",\n        \"Learning and evaluating contextual embedding of source code\",\n        \"Bandit based monte-carlo planning\",\n        \"CodeRL: Mastering Code Generation through Pretrained Models and Deep Reinforcement Learning\",\n        \"Machine translation decoding beyond beam search\",\n        \"Competition-Level Code Generation with AlphaCode\",\n        \"Field report: Applying monte carlo tree search for program synthesis\",\n        \"NeuroLogic A*esque Decoding: Constrained Text Generation with Lookahead Heuristics\",\n        \"Inductive program synthesis through using monte carlo tree search guided by a heuristic-based loss function\",\n        \"The art of software testing\",\n        \"Learning compositional rules via neural program synthesis\",\n        \"Language models are unsupervised multitask learners\",\n        \"Exploring the limits of transfer learning with a unified text-to-text transformer\",\n        \"Unsupervised translation of programming languages\",\n        \"Leveraging automated unit tests for unsupervised code translation\",\n        \"To beam or not to beam: That is a question of cooperation for language gans\",\n        \"Mastering the game of Go with deep neural networks and tree search\",\n        \"Mastering Chess and Shogi by Self-Play with a General Reinforcement Learning Algorithm\",\n        \"Program synthesis through reinforcement learning guided tree search\",\n        \"Reinforcement Learning: An Introduction\",\n        \"Unit test case generation with transformers and focal context\",\n        \"Generating accurate assert statements for unit test cases using pretrained transformers\",\n        \"Attention is all you need\",\n        \"CodeT5: Identifier-aware Unified Pre-trained Encoder-Decoder Models for Code Understanding and Generation\",\n        \"Huggingfaceâ€™s transformers: State-of-the-art natural language processing\",\n        \"Neural program synthesis by self-learning\"\n    ],\n    \"reasoning\": \"Selected these 46 references because they represent foundational work and recent advances in Planning with Large Language Models for Code Generation, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}