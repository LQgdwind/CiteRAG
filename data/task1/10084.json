{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 57 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Automated Invariant Generation for Solidity Smart Contracts\n\nPaper Abstract: Abstract Smart contracts are computer programs running on blockchains to automate the transaction execution between users. The absence of contract specifications poses a real challenge to the correctness verification of smart contracts. Program invariants are properties that are always preserved throughout the execution, which characterize an important aspect of the program behaviors. In this paper, we propose a novel invariant generation framework, InvCon+, for Solidity smart contracts. InvCon+ extends the existing invariant detector, InvCon, to automatically produce verified contract invariants based on both dynamic inference and static verification. Unlike InvCon+, InvCon only produces likely invariants, which have a high probability to hold, yet are still not verified against the contract code. Particularly, InvCon+ is able to infer more expressive invariants that capture richer semantic relations of contract code. We evaluate InvCon+ on 361 ERC20 and 10 ERC721 real-world contracts, as well as common ERC20 vulnerability benchmarks. The experimental results indicate that InvCon+ efficiently produces high-quality invariant specifications, which can be used to secure smart contracts from common vulnerabilities.\n\n{retrieved_text}\n\nGenerate exactly 57 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 57\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Ethereum: A secure decentralised generalised transaction ledger\",\n        \"Binance Smart Chain\",\n        \"Tokenscope: Automatically detecting inconsistent behaviors of cryptocurrency tokens in Ethereum\",\n        \"Conformance evaluation of the top-100 Ethereum token smart contracts with Ethereum Request for Comment-20 functional specifications\",\n        \"EIP-20: A standard interface for tokens\",\n        \"An Incompatibility in Ethereum Smart Contract Threatening dApp Ecosystem\",\n        \"Ethereum tokens worth $1b vulnerable to ‘Fake Deposit Attack’\",\n        \"OpenZeppelin\",\n        \"Inconsistency between the code and the doc of VestingWallet.release\",\n        \"Identifying Solidity smart contract API documentation errors\",\n        \"Daikon\",\n        \"Houdini, an annotation assistant for esc/java\",\n        \"Oracle-supported dynamic exploit generation for smart contracts\",\n        \"Securing smart contract with runtime validation\",\n        \"Soltype: refinement types for arithmetic overflow in solidity\",\n        \"VeriSmart: A highly precise safety verifier for Ethereum smart contracts\",\n        \"solc-verify: A modular verifier for solidity smart contracts\",\n        \"Invcon: A dynamic invariant detector for ethereum smart contracts\",\n        \"Learning contract invariants using reinforcement learning\",\n        \"Openzeppelin erc20 contract specifications.\",\n        \"Openzeppelin erc721 contract specifications.\",\n        \"ERC20-K: Formal Executable Specification of ERC20\",\n        \"Slither\",\n        \"VULTRON: Catching vulnerable smart contracts once and for all\",\n        \"Boogie: A modular reusable verifier for object-oriented programs\",\n        \"Formal specification and verification of smart contracts for Azure blockchain\",\n        \"Z3\",\n        \"KEVM: A complete formal semantics of the Ethereum virtual machine\",\n        \"Formal verification of bnb smart contract\",\n        \"Ethereum in BigQuery: a public dataset for smart contract analytics\",\n        \"Openzeppelin pausable contract specifications.\",\n        \"ERC 20 - OpenZeppelin Docs.\",\n        \"ERC 721 - OpenZeppelin Docs.\",\n        \"Gambit: Mutant generation for Solidity\",\n        \"sec-bit/awesome-buggy-erc20-tokens: A Collection of Vulnerabilities in ERC20 Smart Contracts With Tokens Affected\",\n        \"Overflow attack in Ethereum smart contracts\",\n        \"Understanding The DAO Attack\",\n        \"The Parity Wallet Hack Explained\",\n        \"Slither: A static analysis framework for smart contracts\",\n        \"Ethainter: a smart contract security analyzer for composite vulnerabilities\",\n        \"Smartcheck: Static analysis of Ethereum smart contracts\",\n        \"Securify\",\n        \"Precise Attack Synthesis for Smart Contracts\",\n        \"Making smart contracts smarter\",\n        \"Manticore\",\n        \"Mythril\",\n        \"Zeus: Analyzing safety of smart contracts\",\n        \"Contractfuzzer: Fuzzing smart contracts for vulnerability detection\",\n        \"Harvey: A greybox fuzzer for smart contracts\",\n        \"Echidna\",\n        \"Oyente\",\n        \"Verx: Safety verification of smart contracts\",\n        \"sfuzz: An efficient adaptive fuzzer for solidity smart contracts\",\n        \"Finding permission bugs in smart contracts with role mining\",\n        \"Demystifying exploitable bugs in smart contracts.\",\n        \"3 Hacks an Audit Could Not Find\",\n        \"Extended static checking for java\"\n    ],\n    \"reasoning\": \"Selected these 57 references because they represent foundational work and recent advances in Automated Invariant Generation for Solidity Smart Contracts, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}