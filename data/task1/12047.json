{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 51 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Unlocking State-Tracking in Linear RNNs Through Negative Eigenvalues\n\nPaper Abstract: Abstract Linear Recurrent Neural Networks (LRNNs) such as Mamba, RWKV, GLA, mLSTM, and DeltaNet have emerged as efficient alternatives to Transformers in large language modeling, offering linear scaling with sequence length and improved training efficiency. However, LRNNs struggle to perform state-tracking which may impair performance in tasks such as code evaluation or tracking a chess game. Even parity, the simplest state-tracking task, which non-linear RNNs like LSTM handle effectively, cannot be solved by current LRNNs. Recently, Sarrof et al. (2024) demonstrated that the failure of LRNNs like Mamba to solve parity stems from restricting the value range of their diagonal state-transition matrices to [0,1]01[0,1] and that incorporating negative values can resolve this issue. We extend this result to non-diagonal LRNNs, which have recently shown promise in models such as DeltaNet. We prove that finite precision LRNNs with state-transition matrices having only positive eigenvalues cannot solve parity, while complex eigenvalues are needed to count modulo 333. Notably, we also prove that LRNNs can learn any regular language when their state-transition matrices are products of identity minus vector outer product matrices, each with eigenvalues in the range [−1,1]11[-1,1]. Our empirical results confirm that extending the eigenvalue range of models like Mamba and DeltaNet to include negative values not only enables them to solve parity but consistently improves their performance on state-tracking tasks. Furthermore, pre-training LRNNs with an extended eigenvalue range for language modeling achieves comparable performance and stability while showing promise on code and math data. Our work enhances the expressivity of modern LRNNs, broadening their applicability without changing the cost of training or inference.\n\n{retrieved_text}\n\nGenerate exactly 51 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 51\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Language Models Enable Simple Systems for Generating Structured Views of Heterogeneous Data Lakes\",\n        \"xLSTM: Extended Long Short-Term Memory\",\n        \"Separations in the representational capabilities of transformers and recurrent architectures\",\n        \"PIQA: Reasoning about physical commonsense in natural language\",\n        \"Think you have solved question answering? Try arc, the ai2 reasoning challenge\",\n        \"Transformers are SSMs: Generalized models and efficient algorithms through structured state space duality\",\n        \"Neural Networks and the Chomsky Hierarchy\",\n        \"Advancing Regular Language Reasoning in Linear Recurrent Neural Networks\",\n        \"Hungry Hungry Hippos: Towards Language Modeling with State Space Models\",\n        \"A framework for few-shot language model evaluation\",\n        \"Looped transformers as programmable computers\",\n        \"Mamba: Linear-time sequence modeling with selective state spaces\",\n        \"Efficiently Modeling Long Sequences with Structured State Spaces\",\n        \"Accelerate: Training and inference at scale made simple, efficient and adaptable\",\n        \"Theoretical limitations of self-attention in neural sequence models\",\n        \"Measuring mathematical problem solving with the math dataset\",\n        \"Long Short-Term Memory\",\n        \"Introduction to Automata Theory, Languages, and Computation\",\n        \"Matrix Analysis\",\n        \"Triviaqa: A large scale distantly supervised challenge dataset for reading comprehension\",\n        \"Transformers are RNNs: Fast Autoregressive Transformers with Linear Attention\",\n        \"Algebraic theory of machines. i. prime decomposition theorem for finite semigroups and machines\",\n        \"Transformers Learn Shortcuts to Automata\",\n        \"When open information extraction meets the semi-structured web\",\n        \"SGDR: Stochastic Gradient Descent with Warm Restarts\",\n        \"Decoupled Weight Decay Regularization\",\n        \"On the cascaded decomposition of automata, its complexity and its application to logic\",\n        \"The parallelism tradeoff: Limitations of log-precision transformers\",\n        \"A Formal Hierarchy of RNN Architectures\",\n        \"The Illusion of State in State-Space Models\",\n        \"Universality of Linear Recurrences Followed by Non-linear Projections: Finite-Width Guarantees and Benefits of Complex Eigenvalues\",\n        \"The LAMBADA dataset: Word prediction requiring a broad discourse context\",\n        \"The FineWeb Datasets: Decanting the Web for the Finest Text Data at Scale\",\n        \"RWKV: Reinventing RNNs for the Transformer Era\",\n        \"Attention is turing-complete\",\n        \"Zero: Memory optimizations toward training trillion parameter models\",\n        \"Know what you don’t know: Unanswerable questions for squad\",\n        \"Winogrande: An adversarial winograd schema challenge at scale\",\n        \"The Expressive Capacity of State Space Models: A Formal Language Perspective\",\n        \"Learning associative inference using fast weight memory\",\n        \"SlimPajama: A 627B token cleaned and deduplicated version of RedPajama\",\n        \"What Formal Languages can Transformers express? A Survey\",\n        \"Learning to (learn at test time): RNNs with expressive hidden states\",\n        \"State-Space Modeling in Long Sequence Processing: A Survey on Recurrence in the Transformer Era\",\n        \"mamba.py: A simple, hackable and efficient Mamba implementation in pure PyTorch and MLX.\",\n        \"Natural Language Processing with Transformers\",\n        \"Attention is All you Need\",\n        \"FLA: A Triton-Based Library for Hardware-Efficient Implementations of Linear Attention Mechanism\",\n        \"Gated Linear Attention Transformers with Hardware-Efficient Training\",\n        \"Parallelizing Linear Transformers with the Delta Rule over Sequence Length\",\n        \"HellaSwag: Can a Machine Really Finish Your Sentence?\"\n    ],\n    \"reasoning\": \"Selected these 51 references because they represent foundational work and recent advances in Unlocking State-Tracking in Linear RNNs Through Negative Eigenvalues, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}