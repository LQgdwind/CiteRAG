{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 50 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Two-Commodity Flow is Equivalent to Linear Programming under Nearly-Linear Time Reductions\n\nPaper Abstract: Abstract We give a nearly-linear time reduction that encodes any linear program as a 2-commodity flow problem with only a small blow-up in size. Under mild assumptions similar to those employed by modern fast solvers for linear programs, our reduction causes only a polylogarithmic multiplicative increase in the size of the program, and runs in nearly-linear time. Our reduction applies to high-accuracy approximation algorithms and exact algorithms. Given an approximate solution to the 2-commodity flow problem, we can extract a solution to the linear program in linear time with only a polynomial factor increase in the error. This implies that any algorithm that solves the 2-commodity flow problem can solve linear programs in essentially the same time. Given a directed graph with edge capacities and two source-sink pairs, the goal of the 2-commodity flow problem is to maximize the sum of the flows routed between the two source-sink pairs subject to edge capacities and flow conservation. A 2-commodity flow problem can be formulated as a linear program, which can be solved to high accuracy in almost the current matrix multiplication time (Cohen-Lee-Song JACM’21). Our reduction shows that linear programs can be approximately solved, to high accuracy, using 2-commodity flow as well. Our proof follows the outline of Itai’s polynomial-time reduction of a linear program to a 2-commodity flow problem (JACM’78). Itai’s reduction shows that exactly solving 2-commodity flow and exactly solving linear programming are polynomial-time equivalent. We improve Itai’s reduction to nearly preserve the problem representation size in each step. In addition, we establish an error bound for approximately solving each intermediate problem in the reduction, and show that the accumulated error is polynomially bounded. We remark that our reduction does not run in strongly polynomial time and that it is open whether 2-commodity flow and linear programming are equivalent in strongly polynomial time.\n\n{retrieved_text}\n\nGenerate exactly 50 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 50\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Network Flows\",\n        \"Multicommodity Flow Problems\",\n        \"Fast Dynamic Cuts, Distances and Effective Resistances via Vertex Sparsifiers\",\n        \"Electrical Flows, Laplacian Systems, and Faster Approximation of Maximum Flow in Undirected Graphs\",\n        \"Solving Linear Programs in the Current Matrix Multiplication Time\",\n        \"Fast Linear Algebra Is Stable\",\n        \"Algorithm for Solution of a Problem of Maximum Flow in Networks with Power Estimation\",\n        \"Network Flow and Testing Graph Connectivity\",\n        \"A Combinatorial Equivalence between A Class of Multicommodity Flow Problems and the Capacitated Transportation Problem\",\n        \"The Simplex Method for Integral Multicommodity Networks\",\n        \"Maximal Flow through a Network\",\n        \"Approximating Fractional Multicommodity Flow Independent of the Number of Commodities\",\n        \"Faster and Simpler Algorithms for Multicommodity Flow and Other Fractional Packing Problems\",\n        \"Fully Dynamic Electrical Flows: Sparse Maxflow Faster Than Goldberg-Rao\",\n        \"Beyond the Flow Decomposition Barrier\",\n        \"Multi-Commodity Network Flows\",\n        \"Two-Commodity Flow\",\n        \"Ultrasparse Ultrasparsifiers and Faster Laplacian System Solvers\",\n        \"A New Polynomial-Time Algorithm for Linear Programming\",\n        \"A Simple, Combinatorial Algorithm for Solving SDD Systems in Nearly-Linear Time\",\n        \"An Almost-Linear-Time Algorithm for Approximate Max Flow in Undirected Graphs, and Its Multicommodity Generalizations\",\n        \"A Survey of Linear Cost Multicommodity Network Flows\",\n        \"Polynomial Algorithms in Linear Programming\",\n        \"Unit Capacity Maxflow in Almost $ O (M$̂{$4/3$}$) $ Time\",\n        \"Approaching Optimality for Solving SDD Linear Systems\",\n        \"A Nearly-m Log n Time Solver for Sdd Linear Systems\",\n        \"Approximate Gaussian Elimination for Laplacians-Fast, Sparse, and Simple\",\n        \"Packing LPs Are Hard to Solve Accurately, Assuming Linear Equations Are Hard\",\n        \"Flows in Almost Linear Time via Adaptive Preconditioning\",\n        \"Hardness Results for Structured Linear Systems\",\n        \"Fast Approximation Algorithms for Multicommodity Flow Problems\",\n        \"A New Approach to Computing Maximum Flows Using Electrical Flows\",\n        \"Path Finding Methods for Linear Programming: Solving Linear Programs in o (Vrank) Iterations and Faster Algorithms for Maximum Flow\",\n        \"Faster Energy Maximization for Faster Maximum Flow\",\n        \"Faster Approximation Schemes for Fractional Multicommodity Flow Problems via Dynamic Graph Algorithms\",\n        \"Navigating Central Path with Electrical Flows: From Flows to Matchings, and Back\",\n        \"Computing Maximum Flow with Augmenting Electrical Flows\",\n        \"Spectrum Approximation Beyond Fast Matrix Multiplication: Algorithms and Hardness\",\n        \"A Survey of Algorithms for Convex Multicommodity Flow Problems\",\n        \"Approximate Undirected Maximum Flows in o (m Polylog (n)) Time\",\n        \"An Efficient Parallel Solver for SDD Linear Systems\",\n        \"A Polynomial-Time Algorithm, Based on Newton’s Method, for Linear Programming\",\n        \"Incorporating Condition Measures into the Complexity Theory of Linear Programming\",\n        \"Nearly Maximum Flows in Nearly Linear Time\",\n        \"Area-Convexity, L∞ Regularization, and Undirected Multicommodity Flow\",\n        \"Nearly-Linear Time Algorithms for Graph Partitioning, Graph Sparsification, and Solving Linear Systems\",\n        \"Speeding-up Linear Programming Using Fast Matrix Multiplication\",\n        \"Minimum Cost Flows, MDPs, and L1-Regression in Nearly Linear Time for Dense Instances\",\n        \"Multicommodity Network Flows: A Survey, Part I: Applications and Formulations\",\n        \"Subcubic Equivalences Between Path, Matrix, and Triangle Problems\"\n    ],\n    \"reasoning\": \"Selected these 50 references because they represent foundational work and recent advances in Two-Commodity Flow is Equivalent to Linear Programming under Nearly-Linear Time Reductions, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}