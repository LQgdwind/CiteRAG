{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 48 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: BF++: a language for general-purpose program synthesis\n\nPaper Abstract: Abstract Most state of the art decision systems based on Reinforcement Learning (RL) are data-driven black-box neural models, where it is often difficult to incorporate expert knowledge into the models or let experts review and validate the learned decision mechanisms. Knowledge-insertion and model review are important requirements in many applications involving human health and safety. One way to bridge the gap between data and knowledge driven systems is program synthesis: replacing a neural network that outputs decisions with a symbolic program generated by a neural network or by means of genetic programming. We propose a new programming language, BF++, designed specifically for automatic programming of agents in a Partially Observable Markov Decision Process (POMDP) setting and apply neural program synthesis to solve standard OpenAI Gym benchmarks. Source code is available at https://github.com/vadim0x60/cibi\n\n{retrieved_text}\n\nGenerate exactly 48 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 48\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Reinforcement learning applications\",\n        \"Reinforcement learning in healthcare: a survey\",\n        \"Programmatically interpretable reinforcement learning\",\n        \"Optimal control of Markov processes with incomplete state information\",\n        \"Partially Observable Markov Processes.\",\n        \"Reinforcement Learning: An Introduction, Second edition in progress, volume 3.\",\n        \"Deep Reinforcement Learning: An Overview\",\n        \"Deep reinforcement learning: A brief survey\",\n        \"Reinforcement learning: A survey\",\n        \"Program synthesis\",\n        \"Evaluating large language models trained on code\",\n        \"The unreasonable effectiveness of language models for source code · vadim liventsev\",\n        \"Sqlnet: Generating structured queries from natural language without reinforcement learning\",\n        \"Learning to mine aligned code and natural language pairs from stack overflow\",\n        \"Competition-level code generation with alphacode, 2022.\",\n        \"Recent Advances in Neural Program Synthesis\",\n        \"Flashmeta: A framework for inductive program synthesis\",\n        \"Neural-guided deductive search for real-time program synthesis from examples\",\n        \"Synthetic datasets for neural program synthesis\",\n        \"Reinforcement learning neural turing machines\",\n        \"Memory networks\",\n        \"Neural random-access machines\",\n        \"Neural Program Synthesis with Priority Queue Training\",\n        \"A survey of genetic programming and its applications\",\n        \"Brainfuck – an eight-instruction turing-complete programming language\",\n        \"The unicode standard\",\n        \"On computable numbers, with an application to the entscheidungsproblem. a correction.\",\n        \"Zooming for efficient model-free reinforcement learning in metric spaces\",\n        \"control flow in brainfuck | matslina, 2016.\",\n        \"The arcade learning environment: An evaluation platform for general agents\",\n        \"Daqn: Deep auto-encoder and q-network\",\n        \"Openai gym\",\n        \"Neuronlike adaptive elements that can solve difficult learning control problems\",\n        \"Efficient memory-based learning for robot control\",\n        \"Hierarchical reinforcement learning with the maxq value function decomposition\",\n        \"Learning to forget: Continual prediction with lstm\",\n        \"Simple statistical gradient-following algorithms for connectionist reinforcement learning\",\n        \"Dimensions of neural-symbolic integration-a structured survey\",\n        \"Neural-symbolic learning and reasoning: A survey and interpretation\",\n        \"Relational knowledge extraction from neural networks\",\n        \"Revisiting neural-symbolic learning cycle\",\n        \"Lecture 6.5—RmsProp: Divide the gradient by a running average of its recent magnitude\",\n        \"vadim0x60/evestop: Early stopping with exponential variance elmination\",\n        \"Bytecode — Wikipedia, the free encyclopedia, 2020.\",\n        \"A field guide to genetic programming\",\n        \"With an eye to AI and autonomous diagnosis\",\n        \"The code2text challenge: Text generation in source code libraries\",\n        \"A neural model for generating natural language summaries of program subroutines\"\n    ],\n    \"reasoning\": \"Selected these 48 references because they represent foundational work and recent advances in BF++: a language for general-purpose program synthesis, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}