{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 52 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Why and When LLM-Based Assistants Can Go Wrong: Investigating the Effectiveness of Prompt-Based Interactions for Software Help-Seeking\n\nPaper Abstract: Abstract. Large Language Model (LLM) assistants, such as ChatGPT, have emerged as potential alternatives to search methods for helping users navigate complex, feature-rich software. LLMs use vast training data from domain-specific texts, software manuals, and code repositories to mimic human-like interactions, offering tailored assistance, including step-by-step instructions. In this work, we investigated LLM-generated software guidance through a within-subject experiment with 16 participants and follow-up interviews. We compared a baseline LLM assistant with an LLM optimized for particular software contexts, SoftAIBot, which also offered guidelines for constructing appropriate prompts. We assessed task completion, perceived accuracy, relevance, and trust. Surprisingly, although SoftAIBot outperformed the baseline LLM, our results revealed no significant difference in LLM usage and user perceptions with or without prompt guidelines and the integration of domain context. Most users struggled to understand how the prompt’s text related to the LLM’s responses and often followed the LLM’s suggestions verbatim, even if they were incorrect. This resulted in difficulties when using the LLM’s advice for software tasks, leading to low task completion rates. Our detailed analysis also revealed that users remained unaware of inaccuracies in the LLM’s responses, indicating a gap between their lack of software expertise and their ability to evaluate the LLM’s assistance. With the growing push for designing domain-specific LLM assistants, we emphasize the importance of incorporating explainable, context-aware cues into LLMs to help users understand prompt-based interactions, identify biases, and maximize the utility of LLM assistants.\n\n{retrieved_text}\n\nGenerate exactly 52 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 52\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Adobe unveils Firefly, a family of new creative generative ai\",\n        \"Introducing chatgpt\",\n        \"The Macro-Structure of Use of Help\",\n        \"A multitask, multilingual, multimodal evaluation of chatgpt on reasoning, hallucination, and interactivity\",\n        \"Grounded Copilot: How Programmers Interact with Code-Generating Models\",\n        \"A categorical archive of chatgpt failures\",\n        \"Example-Centric Programming: Integrating Web Search into the Development Environment\",\n        \"Language Models are Few-Shot Learners\",\n        \"The Effects of Example-Based Explanations in a Machine Learning Interface\",\n        \"Paradox of the Active User\",\n        \"LemonAid: Selection-Based Crowdsourced Contextual Help for Web Applications\",\n        \"Grounded theory research: Procedures, canons, and evaluative criteria\",\n        \"In Search of Verifiability: Explanations Rarely Enable Complementary Performance in AI-Advised Decision Making\",\n        \"InterTwine: Creating Interapplication Information Scent to Support Coordinated Use of Software\",\n        \"ReMap: Lowering the Barrier to Help-Seeking with Multimodal Search\",\n        \"The Vocabulary Problem in Human-System Communication\",\n        \"ToolClips: An Investigation of Contextual Video Assistance for Functionality Understanding\",\n        \"A Survey of Software Learnability: Metrics, Methodologies and Guidelines\",\n        \"What Would Other Programmers Do: Suggesting Solutions to Error Messages\",\n        \"5 jaw-dropping things GPT-4 can do that chatgpt couldn’t — CNN business\",\n        \"ChatrEx: Designing Explainable Chatbot Interfaces for Enhancing Usefulness, Transparency, and Trust\",\n        \"Beyond ”One-Size-Fits-All”: Understanding the Diversity in How Software Newcomers Discover and Make Use of Help Resources\",\n        \"Crowdsourcing Step-by-Step Information Extraction to Enhance Existing How-to Videos\",\n        \"These Aren’t the Commands You’re Looking For: Addressing False Feedforward in Feature-Rich Software\",\n        \"Community Enhanced Tutorials: Improving Tutorials with Multiple Demonstrations\",\n        \"Retrieval-Augmented Generation for Knowledge-Intensive NLP Tasks\",\n        \"Multi-Modal Repairs of Conversational Breakdowns in Task-Oriented Dialogs\",\n        \"APPINITE: A Multi-Modal Interface for Specifying Data Descriptions in Programming by Demonstration Using Natural Language Instructions\",\n        \"AI Transparency in the Age of LLMs: A Human-Centered Research Roadmap\",\n        \"Few-Shot Parameter-Efficient Fine-Tuning is Better and Cheaper than In-Context Learning\",\n        \"Microsoft’s Satya Nadella is winning Big Tech’s AI War. here’s how\",\n        \"MTEB: Massive text embedding benchmark\",\n        \"The design of everyday things: Revised and expanded edition\",\n        \"The Micro-Structure of Use of Help\",\n        \"Help-Based Tutorials\",\n        \"Why Don’t People Read the Manual?\",\n        \"Overreliance on AI: Literature Review\",\n        \"Quasi-experiments and correlational studies\",\n        \"Nobody Reads Documentation\",\n        \"How to format inputs to CHATGPT models\",\n        \"What is it like to program with artificial intelligence?\",\n        \"Best practices for prompt engineering with openai API: Openai help center\",\n        \"Introducing Microsoft 365 copilot – your copilot for work\",\n        \"Prompt engineering techniques with Azure Openai - Azure Openai Service\",\n        \"Investigating Explainability of Generative AI for Code through Scenario-Based Design\",\n        \"Is ChatGPT the Ultimate Programming Assistant–How far is it?\",\n        \"Expectation vs. Experience: Evaluating the Usability of Code Generation Tools Powered by Large Language Models\",\n        \"Explanations Can Reduce Overreliance on AI Systems During Decision-Making\",\n        \"A prompt pattern catalog to enhance prompt engineering with chatgpt\",\n        \"In-IDE Code Generation from Natural Language: Promise and Challenges\",\n        \"Why Johnny Can’t Prompt: How Non-AI Experts Try (and Fail) to Design LLM Prompts\",\n        \"Instruction tuning for large language models: A survey\"\n    ],\n    \"reasoning\": \"Selected these 52 references because they represent foundational work and recent advances in Why and When LLM-Based Assistants Can Go Wrong: Investigating the Effectiveness of Prompt-Based Interactions for Software Help-Seeking, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}