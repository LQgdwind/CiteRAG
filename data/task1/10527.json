{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 52 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: CodeIt: Self-Improving Language Models with Prioritized Hindsight Replay\n\nPaper Abstract: Abstract Large language models are increasingly solving tasks that are commonly believed to require human-level reasoning ability. However, these models still perform very poorly on benchmarks of general intelligence such as the Abstraction and Reasoning Corpus (ARC). In this paper, we approach ARC as a programming-by-examples problem, and introduce a novel and scalable method for language model self-improvement called Code Iteration (CodeIt). Our method iterates between 1) program sampling and hindsight relabeling, and 2) learning from prioritized experience replay. By relabeling the goal of an episode (i.e., the target program output given input) to the realized output produced by the sampled program, our method effectively deals with the extreme sparsity of rewards in program synthesis. Applying CodeIt to the ARC dataset, we demonstrate that prioritized hindsight replay, along with pre-training and data-augmentation, leads to successful inter-task generalization. CodeIt is the first neuro-symbolic approach that scales to the full ARC evaluation dataset. Our method solves 15% of ARC evaluation tasks, achieving state-of-the-art performance and outperforming existing neural and symbolic baselines.\n\n{retrieved_text}\n\nGenerate exactly 52 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 52\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"An approach for solving tasks on the abstract reasoning corpus\",\n        \"Rest meets react: Self-improvement for multi-step reasoning llm agent\",\n        \"A Neurosymbolic Approach to Abstraction and Reasoning\",\n        \"Neural-guided, bidirectional program search for abstraction and reasoning\",\n        \"Hindsight experience replay\",\n        \"Thinking fast and slow with deep learning and tree search\",\n        \"ARCathon Leaderboard\",\n        \"Deepcoder: Learning to write programs\",\n        \"Leveraging grammar and reinforcement learning for neural program synthesis\",\n        \"Program synthesis for integer sequence generation\",\n        \"Decision transformer: Reinforcement learning via sequence modeling\",\n        \"On the measure of intelligence\",\n        \"Search-based structured prediction\",\n        \"Robustfill: Neural program learning under noisy i/o\",\n        \"DreamCoder: Growing generalizable, interpretable knowledge with wake-sleep Bayesian program learning\",\n        \"Discovering faster matrix multiplication algorithms with reinforcement learning\",\n        \"First steps of an approach to the arc challenge based on descriptive grid models and the minimum description length principle\",\n        \"Tackling the abstraction and reasoning corpus (arc) with object-centric models and the mdl principle\",\n        \"Catastrophic forgetting in connectionist networks\",\n        \"Program synthesis for the oeis\",\n        \"Learning program synthesis for integer sequences from scratch\",\n        \"Large language models are not strong abstract reasoners\",\n        \"Reinforced self-training (rest) for language modeling\",\n        \"Textbooks are all you need\",\n        \"Language models can teach themselves to program better\",\n        \"Domain-specific language for the abstraction and reasoning corpus\",\n        \"Icecuber\",\n        \"Fast and flexible: Human program induction in abstract reasoning tasks\",\n        \"Kaggle Leaderboard\",\n        \"Bandit based monte-carlo planning\",\n        \"Neural abstract reasoner\",\n        \"Ranked reward: enabling self-play reinforcement learning for bin packing\",\n        \"Faster sorting algorithms discovered using deep reinforcement learning\",\n        \"Large language models as general pattern machines\",\n        \"Learning math reasoning from self-sampled correct and partially-correct solutions\",\n        \"Neuro-symbolic program synthesis\",\n        \"Unraveling the arc puzzle: Mimicking human solutions with object-centric decision transformer\",\n        \"Neural program search: Solving programming tasks from description and examples\",\n        \"Formal mathematics statement curriculum learning\",\n        \"Prioritized experience replay\",\n        \"Mastering the game of go with deep neural networks and tree search\",\n        \"A general reinforcement learning algorithm that masters chess, shogi, and go through self-play\",\n        \"Beyond human data: Scaling self-training for problem-solving with language models\",\n        \"Core knowledge\",\n        \"Hypothesis search: Inductive reasoning with language models\",\n        \"Codet5+: Open code large language models for code understanding and generation\",\n        \"Enable language models to implicitly learn self-improvement from data\",\n        \"Graphs, constraints, and search for the abstraction and reasoning corpus\",\n        \"Llms and the abstraction and reasoning corpus: Successes, failures, and the importance of object-based representations\",\n        \"Star: Bootstrapping reasoning with reasoning\",\n        \"Language agent tree search unifies reasoning acting and planning in language models\",\n        \"Automatic program synthesis of long programs with a learned garbage collector\"\n    ],\n    \"reasoning\": \"Selected these 52 references because they represent foundational work and recent advances in CodeIt: Self-Improving Language Models with Prioritized Hindsight Replay, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}