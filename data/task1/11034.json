{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 64 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Flexible Non-intrusive Dynamic Instrumentation for WebAssembly\n\nPaper Abstract: Abstract. A key strength of managed runtimes over hardware is the ability to gain detailed insight into the dynamic execution of programs with instrumentation. Analyses such as code coverage, execution frequency, tracing, and debugging, are all made easier in a virtual setting. As a portable, low-level bytecode, WebAssembly offers inexpensive in-process sandboxing with high performance. Yet to date, Wasm engines have not offered much insight into executing programs, supporting at best bytecode-level stepping and basic source maps, but no instrumentation capabilities. In this paper, we show the first non-intrusive dynamic instrumentation system for WebAssembly in the open-source Wizard Research Engine††https://github.com/titzer/wizard-engine. Our innovative design offers a flexible, complete hierarchy of instrumentation primitives that support building high-level, complex analyses in terms of low-level, programmable probes. In contrast to emulation or machine code instrumentation, injecting probes at the bytecode level increases expressiveness and vastly simplifies the implementation by reusing the engine’s JIT compiler, interpreter, and deoptimization mechanism rather than building new ones. Wizard supports both dynamic instrumentation insertion and removal while providing consistency guarantees, which is key to composing multiple analyses without interference. We detail a fully-featured implementation in a high-performance multi-tier Wasm engine, show novel optimizations specifically designed to minimize instrumentation overhead, and evaluate performance characteristics under load from various analyses. This design is well-suited for production engine adoption as probes can be implemented to have no impact on production performance when not in use.\n\n{retrieved_text}\n\nGenerate exactly 64 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 64\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"The edge of the multi-cloud.\",\n        \"Wasm3: The fastest WebAssembly interpreter, and the most universal runtime.\",\n        \"Java Virtual Machine Tools Interface.\",\n        \"JavaScriptCore, the built-in JavaScript engine for WebKit.\",\n        \"V8 development site.\",\n        \"WebAssembly specifications.\",\n        \"Intel 64® and IA-32 Architectures Software Developer’s Manual Volume 3 (3A, 3B, 3C & 3D): System Programming Guide, chapter 33: Intel Processor Trace.\",\n        \"Walrus: A WebAssembly transformation library.\",\n        \"Wasm bytecode instrumenter.\",\n        \"SaBRe: load-time selective binary rewriting.\",\n        \"Linux perf main page.\",\n        \"The .NET Profiling API.\",\n        \"TuningFork: A platform for visualization and analysis of complex real-time systems.\",\n        \"QEMU: A generic and open source machine emulator and virtualizer.\",\n        \"Anywhere, any-time binary instrumentation.\",\n        \"Advanced Java bytecode instrumentation.\",\n        \"Provably-safe multilingual software sandboxing using WebAssembly.\",\n        \"An infrastructure for adaptive dynamic optimization.\",\n        \"Runtime object lifetime profiler for latency sensitive big data applications.\",\n        \"Living on the edge: Rapid-toggling probes with cross-modification on x86.\",\n        \"DTrace: Dynamic tracing in Oracle Solaris, Mac OS X, and Free BSD by Brendan Gregg and Jim Mauro.\",\n        \"Libsodium\",\n        \"Dynamic metrics for Java.\",\n        \"The RoadRunner dynamic analysis framework for concurrent programs.\",\n        \"Design Patterns: Elements of Reusable Object-Oriented Software.\",\n        \"Side effect monitoring for Java using bytecode rewriting.\",\n        \"DTrace: Dynamic Tracing in Oracle Solaris, Mac OS X and FreeBSD.\",\n        \"Bringing the web up to speed with WebAssembly.\",\n        \"Numerical computing on the web: Benchmarking for the future.\",\n        \"APT-GET: Profile-guided timely software prefetching.\",\n        \"An overview of AspectJ.\",\n        \"EEL: Machine-independent executable editing.\",\n        \"Wasabi: A framework for dynamically analyzing WebAssembly.\",\n        \"ThingSpire OS: A WebAssembly-based IoT operating system for cloud-edge integration.\",\n        \"Aerogel: Lightweight access control framework for WebAssembly-based bare-metal IoT devices.\",\n        \"Pin: Building customized program analysis tools with dynamic instrumentation.\",\n        \"ShadowVM: Robust and comprehensive dynamic program analysis for the Java platform.\",\n        \"DiSL: A domain-specific language for bytecode instrumentation.\",\n        \"The Paradyn parallel performance measurement tool.\",\n        \"Oron: Towards a dynamic analysis instrumentation platform for AssemblyScript.\",\n        \"Retrofitting industrial machines with WebAssembly on the edge.\",\n        \"Valgrind: A framework for heavyweight dynamic binary instrumentation.\",\n        \"Edgedancer: Secure mobile WebAssembly services on the edge.\",\n        \"Bytecode-level analysis and optimization of Java classes.\",\n        \"PolyBench\",\n        \"Towards solving the challenge of minimal overhead monitoring.\",\n        \"Aspect-oriented WebAssembly transformation.\",\n        \"Instrumentation and optimization of Win32/Intel executables using Etch.\",\n        \"Jalangi: A selective record-replay and dynamic analysis framework for JavaScript.\",\n        \"BISM: bytecode-level instrumentation for software monitoring.\",\n        \"Vulcan: Binary transformation in a distributed environment.\",\n        \"ATOM: A system for building customized program analysis tools.\",\n        \"Harmonizing classes, functions, tuples, and type parameters in Virgil III.\",\n        \"Wizard, An advanced Webassembly Engine for Research.\",\n        \"A fast in-place interpreter for WebAssembly.\",\n        \"Whose baseline compiler is it anyway?\",\n        \"Avrora: Scalable sensor network simulation with precise timing.\",\n        \"Nonintrusive precision instrumentation of microcontroller software.\",\n        \"Soot: A Java bytecode optimization framework.\",\n        \"WebAssembly on Cloudflare Workers.\",\n        \"Odin: On-demand instrumentation with on-the-fly recompilation.\",\n        \"Mechanising and verifying the WebAssembly specification.\",\n        \"From hack to elaborate technique – a survey on binary rewriting.\",\n        \"JPortal: Precise and efficient control-flow tracing for JVM programs with Intel Processor Trace.\"\n    ],\n    \"reasoning\": \"Selected these 64 references because they represent foundational work and recent advances in Flexible Non-intrusive Dynamic Instrumentation for WebAssembly, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}