{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 48 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: Deep Optimizer States: Towards Scalable Training of Transformer Models Using Interleaved Offloading\n\nPaper Abstract: Abstract. Transformers and large language models (LLMs) have seen rapid adoption in all domains. Their sizes have exploded to hundreds of billions of parameters and keep increasing. Under these circumstances, the training of transformers is very expensive and often hits a “memory wall”, i.e., even when using 3D parallelism (pipeline, tensor, data) and aggregating the memory of many GPUs, it is still not enough to hold the necessary data structures (model parameters, optimizer state, gradients, activations) in GPU memory. To compensate, state-of-the-art approaches offload the optimizer state, at least partially, to the host memory and perform hybrid CPU-GPU computations. However, the management of the combined host-GPU memory is often suboptimal and results in poor overlapping between data movements and computations. This leads to missed opportunities to simultaneously leverage the interconnect bandwidth and computational capabilities of CPUs and GPUs. In this paper, we leverage a key observation that the interleaving of the forward, backward and update phases generate fluctuations in the GPU memory utilization, which can be exploited to dynamically move a part of the optimizer state between the host and the GPU memory at each iteration. To this end, we design and implement Deep Optimizer States, a novel technique to split the LLM into subgroups, whose update phase is scheduled on either the CPU or the GPU based on our proposed performance model that addresses the trade-off between data movement cost, acceleration on the GPUs vs the CPUs, and competition for shared resources. We integrate our approach with DeepSpeed and demonstrate 2.5×\\times faster iterations over state-of-the-art approaches using extensive experiments.\n\n{retrieved_text}\n\nGenerate exactly 48 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 48\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"Canary: Fault-tolerant faas for stateful time-sensitive applications\",\n        \"Gpt-neox-20b: An open-source autoregressive language model\",\n        \"modnn: Memory optimal dnn training on gpus\",\n        \"Training 175b parameter language models at 1000 gpu scale with alpa and ray\",\n        \"Adaptive subgradient methods for online learning and stochastic optimization\",\n        \"Dapple: A pipelined data parallel approach for training large models\",\n        \"Switch transformers: scaling to trillion parameter models with simple and efficient sparsity\",\n        \"Generating sequences with recurrent neural networks\",\n        \"Xpipe: Efficient pipeline model parallelism for multi-gpu dnn training\",\n        \"Autotm: Automatic tensor movement in heterogeneous memory systems using integer linear programming\",\n        \"Gpipe: Efficient training of giant neural networks using pipeline parallelism\",\n        \"Nanotron: Minimalistic large language model 3d-parallelism training\",\n        \"Whale: Efficient giant model training over heterogeneous {{\\\\{GPUs\\\\}}}\",\n        \"Adam: A method for stochastic optimization\",\n        \"Pytorch distributed: Experiences on accelerating data parallel training\",\n        \"Cotrain: Efficient scheduling for large-model training upon gpu and cpu in parallel\",\n        \"M6-10t: A sharing-delinking paradigm for efficient multi-trillion parameter pretraining\",\n        \"Towards Efficient I/O Scheduling for Collaborative Multi-Level Checkpointing\",\n        \"Gpu-enabled asynchronous multi-level checkpoint caching and prefetching\",\n        \"DataStates-LLM: Lazy Asynchronous Checkpointing for Large Language Models\",\n        \"Breaking the memory wall: A study of i/o patterns and gpu memory utilization for hybrid cpu-gpu offloaded optimizers\",\n        \"Mixed precision training\",\n        \"Pipedream: generalized pipeline parallelism for dnn training\",\n        \"Deepfreeze: Towards scalable asynchronous checkpointing of deep learning models\",\n        \"NVIDIA Management Library (NVML)\",\n        \"Capuchin: Tensor-based gpu memory management for deep learning\",\n        \"Gradients accumulation-pytorch\",\n        \"Zero: Memory optimizations toward training trillion parameter models\",\n        \"Zero-infinity: breaking the gpu memory wall for extreme scale deep learning\",\n        \"Deepspeed: System optimizations enable training deep learning models with over 100 billion parameters\",\n        \"{{\\\\{Zero-offload\\\\}}: Democratizing {{\\\\{billion-scale\\\\}}} model training\",\n        \"Horovod: fast and easy distributed deep learning in tensorflow\",\n        \"Megatron-lm: Training multi-billion parameter language models using model parallelism\",\n        \"Using deepspeed and megatron to train megatron-turing nlg 530b, a large-scale generative language model\",\n        \"DeepSpeed4Science Initiative: Enabling Large-Scale Scientific Discovery through Sophisticated AI System Technologies\",\n        \"Llama 2: Open Foundation and Fine-Tuned Chat Models\",\n        \"Deepspeed zero-offload++: 6x higher training throughput via collaborative cpu/gpu twin-flow\",\n        \"Superneurons: Dynamic gpu memory management for training deep neural networks\",\n        \"Training of 1-trillion parameter ai begins\",\n        \"BLOOM: A 176B-Parameter Open-Access Multilingual Language Model\",\n        \"Understanding the performance and estimating the cost of llm fine-tuning\",\n        \"Multimodal learning with transformers: A survey\",\n        \"Large batch optimization for deep learning: Training bert in 76 minutes\",\n        \"Glm-130b: An open bilingual pre-trained model\",\n        \"Distributed training of large language models\",\n        \"Opt: Open pre-trained transformer language models\",\n        \"A survey of large language models\",\n        \"Scalefold: Reducing alphafold initial training time to 10 hours\"\n    ],\n    \"reasoning\": \"Selected these 48 references because they represent foundational work and recent advances in Deep Optimizer States: Towards Scalable Training of Transformer Models Using Interleaved Offloading, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}