{
  "messages": [
    {
      "role": "system",
      "content": "You are a professional academic reference prediction expert. Your task is to predict the most likely references for a given academic paper based on its title, abstract, and retrieved relevant papers.\n\nRETRIEVER INTERFACE:\n- Input: paper title + abstract\n- Output: {top_r} retrieved papers with title and abstract\n- Format: List of dictionaries with 'title' and 'abstract' fields\n\nREQUIREMENTS:\n1. Analyze the paper's title and abstract to understand its research area and focus\n2. Consider the retrieved papers as potential references (when available)\n3. Generate a list of predicted reference titles that would be most relevant and likely to be cited\n4. Provide reasoning for each prediction to prevent hallucination\n5. Output format: JSON object with \"titles\" array and \"reasoning\" string\n6. Generate exactly 46 most relevant reference titles (this should be at least 40 to cover all evaluation metrics)\n7. Ensure titles are realistic and appropriate for the research area\n8. Consider citation patterns in the field\n9. CRITICAL: Each title must be unique - never repeat the same title multiple times\n\nEXAMPLE:\nInput:\nTitle: \"Question Type Classification Methods Comparison\"\nAbstract: \"The paper presents a comparative study of state-of-the-art approaches for question classification task: Logistic Regression, Convolutional Neural Networks (CNN), Long Short-Term Memory Network (LSTM) and Quasi-Recurrent Neural Networks (QRNN). All models use pre-trained GLoVe word embeddings and trained on human-labeled data. The best accuracy is achieved using CNN model with five convolutional layers and various kernel sizes stacked in parallel, followed by one fully connected layer. The model reached 90.7% accuracy on TREC 10 test set.\"\n\nRetrieved papers ({top_r}):\n1. Title: Convolutional Neural Networks for Sentence Classification\n   Abstract: We report on a series of experiments with convolutional neural networks trained on top of pre-trained word vectors for sentence-level classification tasks.\n\n2. Title: Glove: Global vectors for word representation\n   Abstract: We present a new global log-bilinear regression model that combines the advantages of the two major model families in the literature.\n\nOutput:\n{\n  \"titles\": [\n    \"Convolutional Neural Networks for Sentence Classification\",\n    \"Glove: Global vectors for word representation\",\n    \"Quasi-Recurrent Neural Networks\",\n    \"A Comparative Study of Neural Network Models for Sentence Classification\",\n    \"Deep lstm based feature mapping for query classification\"\n  ],\n  \"reasoning\": \"Based on the paper's focus on question classification using neural networks, I predict these references because: 1) CNN paper is directly relevant to the convolutional approach used; 2) GloVe embeddings are mentioned as pre-trained features; 3) QRNN is one of the compared methods; 4) Comparative study papers are common in this field; 5) LSTM-based query classification is closely related to question classification. Additional references cover related neural network architectures, NLP applications, deep learning methodologies, optimization techniques, and advanced neural network methods that would be relevant for this research area.\"\n}\n\nReturn JSON object only."
    },
    {
      "role": "user",
      "content": "Paper Title: API-Miner: an API-to-API Specification Recommendation Engine\n\nPaper Abstract: Abstract When designing a new API for a large project, developers need to make smart design choices so that their code base can grow sustainably. To ensure that new API components are well designed, developers can learn from existing API components. However, the lack of standardized methods for comparing API designs makes this learning process time-consuming and difficult. To address this gap we developed API-Miner, to the best of our knowledge, one of the first API-to-API specification recommendation engines. API-Miner retrieves relevant specification components written in OpenAPI (a widely adopted language used to describe web APIs). API-miner presents several significant contributions, including: (1) novel methods of processing and extracting key information from OpenAPI specifications, (2) innovative feature extraction techniques that are optimized for the highly technical API specification domain, and (3) a novel log-linear probabilistic model that combines multiple signals to retrieve relevant and high quality OpenAPI specification components given a query specification. We evaluate API-Miner in both quantitative and qualitative tasks and achieve an overall of 91.7% recall@1 and 56.2% F1, which surpasses baseline performance by 15.4% in recall@1 and 3.2% in F1. Overall, API-Miner will allow developers to retrieve relevant OpenAPI specification components from a public or internal database in the early stages of the API development cycle, so that they can learn from existing established examples and potentially identify redundancies in their work. It provides the guidance developers need to accelerate development process and contribute thoughtfully designed APIs that promote code maintainability and quality. Code is available on GitHub at \\urlhttps://github.com/jpmorganchase/api-miner.\n\n{retrieved_text}\n\nGenerate exactly 46 most likely reference titles for this paper. Focus on papers that are directly related to the research topic, provide foundational background, present similar methodologies, or address related problems.\n\nCRITICAL: Each title must appear exactly once. Do not repeat any title.\n\nIMPORTANT: You must respond with ONLY valid JSON in this exact format:\n{\n    \"titles\": [\n        \"Reference Title 1\",\n        \"Reference Title 2\",\n        \"Reference Title 3\",\n        \"Reference Title 4\",\n        \"Reference Title 46\"\n    ],\n    \"reasoning\": \"Explain why you chose these specific references based on the paper's title, abstract, and retrieved papers. This helps prevent hallucination and ensures relevance.\"\n}\n\nDo not include any text before or after the JSON. Do not include authors, venues, or years - only the paper titles. The reasoning field is required to explain your prediction logic."
    },
    {
      "role": "assistant",
      "content": "{\n    \"titles\": [\n        \"APIs show faster growth rate in 2019 than previous years\",\n        \"A case study of web API evolution\",\n        \"Openapi specification version 2.0\",\n        \"Architectural styles and the design of network-based software architectures\",\n        \"Finding all you need: Web APIs recommendation in web of things through keywords search\",\n        \"Regularizing matrix factorization with implicit user preference embeddings for web API recommendation\",\n        \"Mashup-oriented API recommendation via random walk on knowledge graph\",\n        \"Webapirec: Recommending web APIs to software projects via personalized ranking\",\n        \"Web application description language (wadl)\",\n        \"Wsdl: Web services description language\",\n        \"Uddi: Universal description, discovery, and integration\",\n        \"OpenAPI: Open API specification\",\n        \"Web service matching for restful web services\",\n        \"Fuzzy sets and similarity relations for semantic web service matching\",\n        \"Flexible interface matching for web-service discovery\",\n        \"A semantic matching algorithm for discovery in uddi\",\n        \"Fuzzy matching of OpenAPI described REST services\",\n        \"Structural and semantic matching for assessing web-service similarity\",\n        \"Learning to compute word embeddings on the fly\",\n        \"Attentive mimicking: Better word embeddings by attending to informative contexts\",\n        \"Mimicking word embeddings using subword RNNs\",\n        \"Word-class embeddings for multiclass text classification\",\n        \"Dirichlet-smoothed word embeddings for low-resource settings\",\n        \"A log-linear model for unsupervised text normalization\",\n        \"Discriminative training and maximum entropy models for statistical machine translation\",\n        \"Feature-based language understanding\",\n        \"Unsupervised, efficient and semantic expertise retrieval\",\n        \"Learning to rank for information retrieval\",\n        \"A Statistical Interpretation of Term Specificity and Its Application in Retrieval\",\n        \"Word association norms, mutual information, and lexicography\",\n        \"From frequency to meaning: Vector space models of semantics\",\n        \"BERT: pre-training of deep bidirectional transformers for language understanding\",\n        \"Sentence-bert: Sentence embeddings using siamese bert-networks\",\n        \"Audiovisual synchronization and fusion using canonical correlation analysis\",\n        \"Learning bilingual lexicons from monolingual corpora\",\n        \"Inferring a semantic representation of text via cross-language correlation analysis\",\n        \"Binary codes capable of correcting deletions, insertions and reversals.\",\n        \"Fuzzy string matching in python\",\n        \"Wikipedia for web APIs. directory of REST API definitions in openAPI 2.0/3.x format\",\n        \"Aroma: Code recommendation via structural code search\",\n        \"Natural language processing with Python: analyzing text with the natural language toolkit\",\n        \"opeWordNet: An Electronic Lexical Database\",\n        \"The measurement of observer agreement for categorical data\",\n        \"Report on the Need for and Provision of an ’ideal’ Information Retrieval Test Collection\",\n        \"How reliable are the results of large-scale information retrieval experiments?\",\n        \"Bias and the limits of pooling\"\n    ],\n    \"reasoning\": \"Selected these 46 references because they represent foundational work and recent advances in API-Miner: an API-to-API Specification Recommendation Engine, providing essential background knowledge and methodological foundations relevant to this research.\"\n}"
    }
  ],
  "format": "chatml"
}